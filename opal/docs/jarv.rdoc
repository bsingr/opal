== JARV

JARV is a (bad) name for the op codes used by this ruby implementation. It is heavily influenced by the opcodes used by ruby. JARV stands for (Javascript/Just/JSON) Another Ruby Vm. Hence the prepended "bad name". JARV takes out some of the data encoded within the instruction sequences, to provide the bare minimum to run the opcodes successfully. The following in a structure of an ISeq, which is represented as an array at runtime in javascript:

	[args, locals, name, filename, type, local_names, args, catch, jumps, opcodes]

=== args

The total number of args that the iseq takes. For methods, this is simply the number of method arguments. Some iseqs, like top or class, do not actually take
any arguments, so this will be 0.

=== locals

The total number of locals in the iseq. For every var defined, a local is needed, so this represents the size of the local var. GETLOCAL etc reference an index in this set, so an array is essentially used to store these. Args and locals are stored together and referenced using the same idx path, where args are references then locals, in a joint array.



s = "["
s << %{#{@args.length},}
s << %{#{@locals.length},}
s << %{"#{@name}",}
s << %{"#{@filename}",}
s << %{#{@type},}
s << %{0,}
s << %{[],}
s << %{[#{@opcodes.join(",")}]}
s << %{]}