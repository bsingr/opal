(function(self) {
if(RTEST(rb_funcall(rb_funcall(self.$c_g_full('ENV'),'[]',ID2SYM('graphics_context_platform')),'==',ID2SYM('canvas')))){
self.$c_s('CANVAS_LINE_JOINS',VN.$h(ID2SYM('miter'), 'miter', ID2SYM('round'), 'round', ID2SYM('bevel'), 'bevel'));
self.$c_s('CANVAS_LINE_CAPS',VN.$h(ID2SYM('butt'), 'butt', ID2SYM('round'), 'round', ID2SYM('square'), 'square'));
(function(self) {
rb_define_method(self,'initialize',function(self,_){
var tag_name='canvas';
self.$i_s('@first_time',true);
self.$i_s('@element',document.createElement('canvas'));
self.$i_s('@ctx',rb_ivar_get(self,'@element').getContext('2d'));
return self.$i_s('@type',tag_name);
});
rb_define_method(self,'save_g_state',function(self,_){
rb_ivar_get(self,'@ctx').save();});
rb_define_method(self,'restore_g_state',function(self,_){
rb_ivar_get(self,'@ctx').restore();});
rb_define_method(self,'scale_ctm',function(self,_,sx,sy){
});
rb_define_method(self,'translate_ctm',function(self,_,tx,ty){
});
rb_define_method(self,'rotate_ctm',function(self,_,angle){
});
rb_define_method(self,'concat_ctm',function(self,_,transform){
});
rb_define_method(self,'line_width=',function(self,_,width){
rb_ivar_get(self,'@ctx').lineWidth = width;});
rb_define_method(self,'line_cap=',function(self,_,cap){
rb_ivar_get(self,'@ctx').lineCap = rb_funcall(self.$klass.$c_g_full('CANVAS_LINE_CAPS'),'[]',cap);});
rb_define_method(self,'line_join=',function(self,_,join){
rb_ivar_get(self,'@ctx').lineJoin = rb_funcall(self.$klass.$c_g_full('CANVAS_LINE_JOINS'),'[]',join);});
rb_define_method(self,'miter_limit=',function(self,_,limit){
});
rb_define_method(self,'alpha=',function(self,_,alpha){
});
rb_define_method(self,'blend_mode=',function(self,_,mode){
});
rb_define_method(self,'begin_path',function(self,_){
});
rb_define_method(self,'move_to_point',function(self,_,x,y){
});
rb_define_method(self,'add_line_to_point',function(self,_,x,y){
});
rb_define_method(self,'add_curve_to_point',function(self,_,cp1x,cp1y,cp2x,cp2y,x,y){
});
rb_define_method(self,'add_quad_curve_to_point',function(self,_,cpx,cpy,x,y){
});
rb_define_method(self,'close_path',function(self,_){
});
rb_define_method(self,'add_rect',function(self,_,rect){
});
rb_define_method(self,'add_rects',function(self,_,rects){
});
rb_define_method(self,'add_lines',function(self,_,points){
});
rb_define_method(self,'add_ellipse_in_rect',function(self,_,rect){
});
rb_define_method(self,'add_arc',function(self,_,x,y,radius,start_angle,end_angle,clockwise){
});
rb_define_method(self,'add_arc_to_point',function(self,_,x1,y1,x2,y2,radius){
});
rb_define_method(self,'add_path',function(self,_,path){
});
rb_define_method(self,'replace_path_with_stroked_path',function(self,_){
});
rb_define_method(self,'path_empty?',function(self,_){
});
rb_define_method(self,'current_point',function(self,_){
});
rb_define_method(self,'path_bounding_box',function(self,_){
});
rb_define_method(self,'copy_path',function(self,_){
});
rb_define_method(self,'path_contains_point?',function(self,_,point,mode){
});
rb_define_method(self,'draw_path',function(self,_,mode){
});
rb_define_method(self,'fill_path',function(self,_){
});
rb_define_method(self,'eofill_path',function(self,_){
});
rb_define_method(self,'stroke_path',function(self,_){
});
rb_define_method(self,'fill_rect',function(self,_,rect){
});
rb_define_method(self,'fill_rects',function(self,_,rects){
});
rb_define_method(self,'stroke_rect',function(self,_,rect){
});
rb_define_method(self,'stroke_rect_with_width',function(self,_,rect,width){
});
rb_define_method(self,'clear_rect',function(self,_,rect){
});
rb_define_method(self,'fill_ellipse_in_rect',function(self,_,rect){
});
rb_define_method(self,'stroke_ellipse_in_rect',function(self,_,rect){
});
rb_define_method(self,'stroke_line_segments',function(self,_,points){
});
rb_define_method(self,'clip',function(self,_){
});
rb_define_method(self,'eoclip',function(self,_){
});
rb_define_method(self,'clip_bounding_box',function(self,_){
});
rb_define_method(self,'clip_to_rect',function(self,_,rect){
});
rb_define_method(self,'clip_to_rects',function(self,_,rects){
});
rb_define_method(self,'set_fill_color_with_color',function(self,_,color){
});
rb_define_method(self,'set_stroke_color_with_color',function(self,_,color){
});
rb_define_method(self,'set_fill_color',function(self,_,components){
});
rb_define_method(self,'set_stroke_color',function(self,_,components){
});
rb_define_method(self,'set_gray_fill_color',function(self,_,gray,alpha){
});
rb_define_method(self,'set_gray_stroke_color',function(self,_,gray,alpha){
});
rb_define_method(self,'set_rgb_fill_color',function(self,_,r,g,b,a){
});
rb_define_method(self,'set_rgb_stroke_color',function(self,_,r,g,b,a){
});
rb_define_method(self,'set_cmyk_fill_color',function(self,_,c,m,y,b,a){
});
rb_define_method(self,'set_cmyk_stroke_color',function(self,_,c,m,y,b,a){
});
rb_define_method(self,'draw_image',function(self,_,rect,image){
});
rb_define_method(self,'draw_tiled_image',function(self,_,rect,image){
});
rb_define_method(self,'set_shadow_with_color',function(self,_,offset,blur,color){
});
rb_define_method(self,'set_shadow',function(self,_,offset,blur){
});
rb_define_method(self,'draw_linear_gradient',function(self,_,gradient,start_point,end_point,options){
});
rb_define_method(self,'draw_radial_gradient',function(self,_,gradient,start_center,start_radius,end_center,end_radius,options){
});
})(rb_define_class_under(self,'GraphicsContext',self.$c_g_full('Element')));
}
})(rb_define_module('Vienna'));
