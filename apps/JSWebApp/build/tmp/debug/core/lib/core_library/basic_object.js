
var BasicObject=function(){this.initialize.apply(this,arguments);return this;};BasicObject.attrAccessor=function(){this.attrWriter.apply(this,arguments);this.attrReader.apply(this,arguments);};BasicObject.attrWriter=function(){for(var i=0;i<arguments.length;i++){var name=arguments[i];this.prototype['set'+name]=new Function('val','this.$%@ = val;'.format(name));};};BasicObject.attrReader=function(){for(var i=0;i<arguments.length;i++){var name=arguments[i];this.prototype[name]=new Function('return this.%@;'.format(name));};};BasicObject.prototype.klass=BasicObject;BasicObject.prototype.superklass=BasicObject;BasicObject.prototype.initialize=function(){return this;};BasicObject.extend=Class.prototype.extend;BasicObject.mixin=Class.prototype.mixin;BasicObject.protocol=Class.prototype.protocol;BasicObject.define=Class.prototype.define;BasicObject.singleton=Class.prototype.singleton;BasicObject.prototype.extend=Class.prototype.extend;BasicObject.create=function(){var c=(new this);return c.initialize.apply(c,arguments);};BasicObject.addSetterMethod=function(key,funcName,func){this.prototype[funcName]=(function(name,func){return function(){this.willChangeValueForKey(key);var ret=func.apply(this,arguments);this.didChangeValueForKey(key);return ret;};})(key,func);};BasicObject.prototype.setConst=function(name,val){if(val.__classid__!=undefined&&!val.__classid__){val.__classid__=name}
this[name]=val;};BasicObject.prototype.define=function(name,meth){this[name]=meth;};