/* 
 * platform_window.js
 * cherry_kit
 * 
 * Created by Adam Beynon.
 * Copyright 2010 Adam Beynon.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// var ck_cPlatformWindow, ck_oSharedPlatformWindow;
// 
// /**
//   PlatformWindow.shared_window
// */
// function ck_platform_window_s_shared_window(cls) {
//   return ck_oSharedPlatformWindow;
// };
// 
// /**
//   PlatformWindow#setup_window
// */
// function ck_platform_window_setup_window(pwin) {
//   var doc = rb_ivar_get(pwin, '@document'), win = rb_ivar_get(pwin, '@window');
// 
//   if (doc.addEventListener) {
//     doc.addEventListener("mouseup", ck_platform_window_mouse_event, false);
//     doc.addEventListener("mousedown", ck_platform_window_mouse_event, false);
//     win.addEventListener("resize", ck_platform_window_mouse_event, false);
//     // only add mousemove when in tracking mode, and it is requested.
//   }
//   else {
//     doc.attachEvent("onmouseup", ck_platform_window_mouse_event);
//     doc.attachEvent("onmousedown", ck_platform_window_mouse_event);
//     win.attachEvent("onresize", ck_platform_window_mouse_event);
//   }
// };
// 
// /**
//   PlatformWindow#mouse_event(native_event)
//   
//   Main entry point in CherryKit for native (mouse) DOM events coming in.
// */
// function ck_platform_window_mouse_event(native_event) {
//   console.log("event!")
// };
// 
// function ck_platform_window_append(win, child) {
//   var child_context = rb_funcall(child, "display_context", 0);
//   var body = rb_ivar_get(win, '@body');
//   body.appendChild(child_context.root_element);
//   return nil;
// };
// 
// /**
//   PlatformWindow#initialize
// */
// function ck_platform_window_initialize(win) {
//   rb_ivar_set(win, '@window', window);
//   rb_ivar_set(win, '@body', window.document.body);
//   rb_ivar_set(win, '@document', window.document);
//   ck_platform_window_setup_window(win);  
// };
// 
// (function Init_CKPlatformWindow() {
//   var mCK = rb_define_module("CherryKit");
//   ck_cPlatformWindow = rb_define_class_under(mCK, "PlatformWindow", rb_cObject);
//   
//   rb_define_singleton_method(ck_cPlatformWindow, "shared_window", ck_platform_window_s_shared_window, 0);
//   
//   rb_define_method(ck_cPlatformWindow, "initialize", ck_platform_window_initialize, 0);
//   rb_define_method(ck_cPlatformWindow, "<<", ck_platform_window_append, 1);
// })();
