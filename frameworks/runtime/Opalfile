# For spec..
mode :spec do
  # opal must require the spec opal itself. Also, we are the main target, so we
  # can set the bin file aswell (to use the spec's bin ruby file)
  config :runtime,
    :required         => [:spec],
    :bin_file         => :spec,
    :lib_directories  => ['lib', 'runtime']
    
  # Configure :spec to include its bin file, so opal can use it
  config :spec,
    :include_bin  => true
end

mode :all do
  config :runtime, 
    
    # In all build modes we want to include our runtime (js sources) directory
    # as well as our lib (ruby sources) directory
    :lib_directories  => ['lib', 'runtime']
    
end

namespace :build do
  
  # opal needs a completely custom opal (gem) builder as its not actually an
  # opal..ish...kinda
  task :opal do
    
    puts "building opal for opal"
    
    FileUtils.mkdir_p File.dirname(@dst_path)

    # Get all javascript sources, then sort them
    js_sources = @build_item.source_items.select do |item|
      item.resource == :javascript
    end

    # Get all ruby sources, then sort them (kernel.rb then module.rb then any)
    rb_sources = @build_item.source_items.select do |item|
      item.resource == :ruby
    end

    # make sure these two are at the start
    ['lib/kernel.rb', 'lib/module.rb'].reverse.each do |order|
      rb_sources.unshift rb_sources.select { |item|
        item.filename == order
      }.first
    end
    # make sure we remove the duplicates left over
    rb_sources.uniq!

    File.open(@dst_path, 'w') do |out|
      out.puts "var opal = {};"
      out.puts "(function(global, exports) {"
      js_sources.each do |js|
        puts js.filename
        out.puts File.read(js.stage!.staging_path)
      end
      out.puts "})(this.window || global, opal);"
      rb_sources.each do |rb|
        out.puts "// ##################### #{rb.filename} #####################"
        out.puts File.read(rb.stage!.staging_path) + ".apply(opal.top_self);"
      end
    end
  end
end
