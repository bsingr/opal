#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
class MathParser < Racc::Parser

module_eval(<<'...end math_parser.y/module_eval...', 'math_parser.y', 29)

...end math_parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     3,     3,     3,     3,     9,     5,     4,     4,     4,     4,
     6,     6,     7,     7,     6,    12 ]

racc_action_check = [
     0,     6,     7,     4,     5,     1,     0,     6,     7,     4,
     8,     2,     8,     2,    11,     8 ]

racc_action_pointer = [
    -2,     5,     7,   nil,     1,     4,    -1,     0,     6,   nil,
   nil,    10,   nil ]

racc_action_default = [
    -6,    -6,    -1,    -5,    -6,    -6,    -6,    -6,    -6,    13,
    -3,    -2,    -4 ]

racc_goto_table = [
     2,     1,   nil,   nil,     8,   nil,    10,    11 ]

racc_goto_check = [
     2,     1,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 11, :_reduce_1,
  3, 12, :_reduce_2,
  3, 12, :_reduce_none,
  3, 12, :_reduce_none,
  1, 12, :_reduce_none ]

racc_reduce_n = 6

racc_shift_n = 13

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :UMINUS => 3,
  "*" => 4,
  "/" => 5,
  "+" => 6,
  "-" => 7,
  "(" => 8,
  ")" => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"(\"",
  "\")\"",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'math_parser.y', 15)
  def _reduce_1(val, _values, result)
     result = "result = val[0];" 
    result
  end
.,.,

module_eval(<<'.,.,', 'math_parser.y', 19)
  def _reduce_2(val, _values, result)
                    result = "a, b, c"
              
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MathParser
