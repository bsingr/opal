#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

# stuff that will come before the definition of ObjectiveCParser
require 'strscan'
module Vienna
  class ObjectiveCParser < Racc::Parser

module_eval(<<'...end objective_c.rb.y/module_eval...', 'objective_c.rb.y', 662)
	# inside the class definition of ObjectiveCParser
	
	attr_reader :result
	
	def next_token
	  
	  scanner = current_scanner()
	  return [false, false] if scanner.nil?
	  
	  case
      #
      # Pre-processor macros
      #
      when scanner.scan(/(#include|#import)/)
        pp_directive = scanner.scan_until(/.*/).strip!
        re = /[\<|\"](.*)\/(.*\.h)[\>|\"]/
        md = re.match(pp_directive)
        if md
          import_file(md[2], md[1])
        else
          re = /\"(.*\.h)\"/
          md = re.match(pp_directive)
          if md
            import_file(md[1], nil)
          else
            puts "Should throw error: malformed import declaration"
          end
        end
        return next_token()
      
      when scanner.scan(/#define/)
        pp_directive = scanner.scan_until(/.*/).strip!
        # puts " # Define Directive: #{pp_directive}"
        return next_token()
        
      when scanner.scan(/#undef/)
        pp_directive = scanner.scan_until(/.*/).strip!
        # puts " # Undef Directive: #{pp_directive}" 
      
      when scanner.scan(/\n/)
        @parsing_stack.last.current_line += 1
        return next_token()
      when scanner.scan(/[ \t\v\f]/)
        return next_token()
      when scanner.scan(/[\t ]+/)
        return next_token()
        
      #
      # Plain good old C key words
      #
      when scanner.scan(/\/\*/)
        # multi-line comment. scan input until end of multi line comment is found
        match = scanner.scan_until(/\*\//)
        @parsing_stack.last.current_line += match.scan(/\n/).size
        return next_token()
      when scanner.scan(/\/\//)
        #single line comment. scan all input (does not include new line char, so skips)
        scanner.scan_until(/.*/)
        return next_token()
      when scanner.scan(/auto(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:AUTO, :AUTO)
      when scanner.scan(/break(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:BREAK, :BREAK)
      when scanner.scan(/case(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:CASE, :CASE)
      when scanner.scan(/char(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:CHAR, "char")
      when scanner.scan(/const(?!([a-zA-Z_]|[0-9]))/)
        # return make_token(:CONST, :CONST)
        return next_token()
      when scanner.scan(/continue(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:CONTINUE, :CONTINUE)
      when scanner.scan(/default(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:DEFAULT, :DEFAULT)
      when scanner.scan(/do(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:DO, :DO)
      when scanner.scan(/double(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:DOUBLE, :DOUBLE)
      when scanner.scan(/else(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:ELSE, :ELSE)
      when scanner.scan(/enum(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:ENUM, :ENUM)
      when scanner.scan(/extern(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:EXTERN, :EXTERN)
      when scanner.scan(/float(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:FLOAT, "float")
      when scanner.scan(/for(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:FOR, :FOR)
      when scanner.scan(/goto(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:GOTO, :GOTO)
      when scanner.scan(/if(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:IF, :IF)
      when scanner.scan(/int(?!([a-zA-Z_]|[0-9]))/)
	      return make_token(:INT, "int")
      when scanner.scan(/long(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:LONG, :LONG)
      when scanner.scan(/register(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:REGISTER, :REGISTER)
      when scanner.scan(/return(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:RETURN, :RETURN)
      when scanner.scan(/short(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:SHORT, :SHORT)
      when scanner.scan(/signed(?!([a-zA-Z_]|[0-9]))/)
      #        return make_token(:SIGNED, :SIGNED)
          return next_token()
      when scanner.scan(/sizeof(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:SIZEOF, :SIZEOF)
      when scanner.scan(/static(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:STATIC, :STATIC)
      when scanner.scan(/struct(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:STRUCT, :STRUCT)
      when scanner.scan(/switch(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:SWITCH, :SWITCH)
      when scanner.scan(/typedef(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:TYPEDEF, :TYPEDEF)
      when scanner.scan(/union(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:UNION, :UNION)
      when scanner.scan(/unsigned(?!([a-zA-Z_]|[0-9]))/)
              # return make_token(:UNSIGNED, :UNSIGNED)
              return next_token()
      when scanner.scan(/void(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:VOID, :VOID)
      when scanner.scan(/volatile(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:VOLATILE, :VOLATILE)
      when scanner.scan(/while(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:WHILE, :WHILE)
        
      #  
      # Objective-C 1.0
      # 
      when scanner.scan(/@interface/)
        return make_token(:AT_INTERFACE, :AT_INTERFACE)
      when scanner.scan(/@implementation/)
        return make_token(:AT_IMPLEMENTATION, :AT_IMPLEMENTATION)
      when scanner.scan(/@end/)
        return make_token(:AT_END, :AT_END)
      when scanner.scan(/@class/)
        return make_token(:AT_CLASS, :AT_CLASS)
      when scanner.scan(/@protocol/)
        return make_token(:AT_PROTOCOL, :AT_PROTOCOL)
      when scanner.scan(/@selector/)
        return make_token(:AT_SELECTOR, :AT_SELECTOR)
      when scanner.scan(/@encode/)
        return make_token(:AT_ENCODE, :AT_ENCODE)
      when scanner.scan(/@try/)
        return make_token(:AT_TRY, :AT_TRY)
      when scanner.scan(/@catch/)
        return make_token(:AT_CATCH, :AT_CATCH)
      when scanner.scan(/@protected/)
        return make_token(:AT_PROTECTED, :AT_PROTECTED)
      when scanner.scan(/@private/)
        return make_token(:AT_PRIVATE, :AT_PRIVATE)
      when scanner.scan(/@public/)
        return make_token(:AT_PUBLIC, :AT_PUBLIC)

      when match = scanner.scan(/@\"(\\.|[^\\"])*\"/)
        return make_token(:AT_STRING_LITERAL, match)
      
      # when scanner.scan(/self/)
      #         return make_token(:IDENTIFIER, "self")
        # return make_token(:IDENTIFIER, "self"]
           
      #
      # Objective-C 2.0
      #
      when scanner.scan(/@property/)
        return make_token(:AT_PROPERTY, :AT_PROPERTY)
      when scanner.scan(/@synthesize/)
        return make_token(:AT_SYNTHESIZE, :AT_SYNTHESIZE)
      when scanner.scan(/@optional/)
        return make_token(:AT_OPTIONAL, :AT_OPTIONAL)
      when scanner.scan(/@required/)
        return make_token(:AT_REQUIRED, :AT_REQUIRED)
      
      #
      # C constants, identifiers and string literals
      #
      when match = scanner.scan(/id(?!([a-zA-Z_]|[0-9]))/)
       return make_token(:TYPE_NAME, match)
      when match = scanner.scan(/BOOL(?!([a-zA-Z_]|[0-9]))/)
        return make_token(:TYPE_NAME, match)
      when match = scanner.scan(/[0-9]*\.[0-9]+([Ee][+-]?[0-9]+)?(f|F|l|L)?/) # {D}*"."{D}+({E})?{FS}?
       return make_token(:CONSTANT, match)
      when match = scanner.scan(/[0-9]+\.[0-9]*([Ee][+-]?[0-9]+)?(f|F|l|L)?/) # {D}+"."{D}*({E})?{FS}?
       return make_token(:CONSTANT, match)
      when match = scanner.scan(/[a-zA-Z_]([a-zA-Z_]|[0-9])*/)
        return lookup_type(match)
      when match = scanner.scan(/[a-zA-Z_]([a-zA-Z_])*/)
        return lookup_type(match)
      when match = scanner.scan(/0[xX][a-fA-F0-9]+(u|U|l|L)?/)
        return make_token(:CONSTANT, match)
      when match = scanner.scan(/0[0-9]+(u|U|l|L)?/)
        return make_token(:CONSTANT, match)
      when match = scanner.scan(/[0-9]+(u|U|l|L)?/) # {D}+{IS}?
        return make_token(:CONSTANT, match)
      #when match = scanner.scan(//) # L?'(\\.|[^\\'])+'
      #  return make_token(:CONSTANT, match]
      #when match = scanner.scan(//) # {D}+{E}{FS}?
      #  return make_token(:CONSTANT, match]
      when match = scanner.scan(/[a-zA-Z_]?\"(\\.|[^\\"])*\"/) # L?\"(\\.|[^\\"])*\"
       return make_token(:STRING_LITERAL, match)
      
      #
      # C operators, assignments and other syntactical bits and pieces
      #  
      when scanner.scan(/\.\.\./)
       return make_token(:ELLIPSIS, :ELLIPSES)
      when scanner.scan(/>>=/)
       return make_token(:RIGHT_ASSIGN, :RIGHT_ASSIGN)
      when scanner.scan(/<<=/)
       return make_token(:LEFT_ASSIGN, :LEFT_ASSIGN)
      when scanner.scan(/\+=/)
       return make_token(:ADD_ASSIGN, :ADD_ASSIGN)
      when scanner.scan(/-=/)
       return make_token(:SUB_ASSIGN, :SUB_ASSIGN)
      when scanner.scan(/\*=/)
       return make_token(:MUL_ASSIGN, :MUL_ASSIGN)
      when scanner.scan(/\/=/)
       return make_token(:DIV_ASSIGN, :DIV_ASSIGN)
      when scanner.scan(/%=/)
       return make_token(:MOD_ASSIGN, :MOD_ASSIGN)
      when scanner.scan(/&=/)
       return make_token(:AND_ASSIGN, :AND_ASSIGN)
      when scanner.scan(/\^=/)
       return make_token(:XOR_ASSIGN, :XOR_ASSIGN)
      when scanner.scan(/\|=/)
       return make_token(:OR_ASSIGN, :OR_ASSIGN)
      when scanner.scan(/>>/)
       return make_token(:RIGHT_OP, :RIGHT_OP)
      when scanner.scan(/<</)
       return make_token(:LEFT_OP, :LEFT_OP)
      when scanner.scan(/\+\+/)
       return make_token(:INC_OP, :INC_OP)
      when scanner.scan(/--/)
       return make_token(:DEC_OP, :DEC_OP)
      when scanner.scan(/->/)
       return make_token(:PTR_OP, :PTR_OP)
      when scanner.scan(/&&/)
       return make_token(:AND_OP, :AND_OP)
      when scanner.scan(/\|\|/)
       return make_token(:OR_OP, :OR_OP)
      when scanner.scan(/<=/)
       return make_token(:LE_OP, :LE_OP)
      when scanner.scan(/>=/)
       return make_token(:GE_OP, :GE_OP)
      when scanner.scan(/\=\=/)
       return make_token(:EQ_OP, :EQ_OP)
      when scanner.scan(/\!\=/)
       return make_token(:NE_OP, :NE_OP)
      when scanner.scan(/;/)
        return make_token(';', ';')
      when scanner.scan(/\{/)
        return make_token('{', '{')
      when scanner.scan(/\}/)
        return make_token('}', '}')
      when scanner.scan(/,/)
        return make_token(',', ',')
      when scanner.scan(/:/)
        return make_token(':', ':')
      when scanner.scan(/\=/)
        return make_token('=', '=')   
      when scanner.scan(/\(/)
        return make_token('(', '(')
      when scanner.scan(/\)/)
        return make_token(')', ')')
      when scanner.scan(/\[/)
        return make_token('[', '[')
      when scanner.scan(/\]/)
        return make_token(']', ']')
      when scanner.scan(/\./)
        return make_token('.', '.')
      when scanner.scan(/\&/)
        return make_token('&', '&')
      when scanner.scan(/\!/)
        return make_token('!', '!')
      when scanner.scan(/\~/)
        return make_token('~', '~')
      when scanner.scan(/\-/)
        return make_token('-', '-')
      when scanner.scan(/\+/)
        return make_token('+', '+')
      when scanner.scan(/\*/)
        return make_token('*', '*')
      when scanner.scan(/\//)
        return make_token('/', '/')
      when scanner.scan(/\%/)
        return make_token('%', '%')
      when scanner.scan(/\</)
        return make_token('<', '<')
      when scanner.scan(/\>/)
        return make_token('>', '>')
      when scanner.scan(/\^/)
        return make_token('^', '^')
      when scanner.scan(/\|/)
        return make_token('|', '|')
      when scanner.scan(/\?/)
        return make_token('?', '?')
      
      else
        abort "#{current_file.file_name}:#{current_file.current_line}:error: unknown token type: #{scanner.peek(5)}"
      
      #when scanner.scan(/.*/)
	      #puts "wow"
	      # throw error: bad character
    end
	end
  
...end objective_c.rb.y/module_eval...
##### State transition tables begin ###

clist = [
'192,57,38,57,38,456,177,4,184,4,367,157,159,162,165,169,172,110,113',
'395,544,154,57,57,163,166,170,59,176,59,181,149,105,356,368,86,345,110',
'113,490,295,543,476,368,469,110,113,361,59,59,45,5,12,5,12,57,57,28',
'32,35,40,46,49,50,2,5,12,20,26,30,34,347,348,337,338,339,340,341,342',
'343,344,59,59,223,279,42,281,319,320,321,57,44,48,44,48,38,183,151,226',
'57,4,311,25,25,107,44,48,57,152,6,14,19,27,31,507,353,59,312,57,110',
'113,177,109,184,107,59,157,159,162,165,169,172,107,59,111,114,154,57',
'57,163,166,170,45,176,59,181,149,356,53,28,32,35,40,46,49,50,2,5,12',
'20,26,30,34,59,59,45,70,544,445,110,113,54,28,32,35,40,46,49,50,2,5',
'12,20,26,30,34,500,501,543,71,471,356,502,415,61,550,250,44,48,42,42',
'6,14,19,27,31,107,499,111,114,38,183,151,414,248,4,437,25,25,492,44',
'48,220,152,6,14,19,27,31,192,86,458,361,288,356,177,288,184,102,219',
'157,159,162,165,169,172,246,293,290,467,154,103,361,203,166,170,107',
'176,45,181,149,468,291,292,361,28,32,35,40,46,49,50,2,5,12,20,26,30',
'34,45,355,299,300,356,110,113,28,32,35,40,46,49,50,2,5,12,20,26,30,34',
'488,214,216,187,489,191,193,194,197,200,202,204,205,44,48,293,290,6',
'14,19,27,31,403,470,404,183,151,198,201,481,291,292,293,290,44,48,482',
'152,6,14,19,27,31,192,86,284,285,291,292,177,298,184,281,483,157,159',
'162,165,169,172,38,263,356,466,154,4,503,203,166,170,465,176,125,181',
'149,61,105,484,356,356,356,42,549,504,548,284,285,110,113,110,113,38',
'553,45,121,361,4,110,113,25,28,32,35,40,46,49,50,2,5,12,20,26,30,34',
'460,214,216,187,42,191,193,194,197,200,202,204,205,356,38,500,501,505',
'131,4,282,497,25,473,283,183,151,198,201,356,81,134,82,551,44,48,499',
'152,6,14,19,27,31,192,86,116,284,285,117,177,394,184,124,487,157,159',
'162,165,169,172,268,125,356,125,154,42,438,203,166,170,107,176,452,181',
'149,38,139,223,464,42,4,361,485,25,403,486,404,110,113,38,299,300,135',
'45,4,136,445,25,110,113,28,32,35,40,46,49,50,2,5,12,20,26,30,34,227',
'214,216,187,429,191,193,194,197,200,202,204,205,301,279,360,281,81,361',
'82,298,308,281,309,38,183,151,198,201,4,322,323,25,425,44,48,310,152',
'6,14,19,27,31,192,86,319,320,321,242,177,130,184,322,323,157,159,162',
'165,169,172,107,260,111,114,154,356,491,203,166,170,115,176,125,181',
'149,267,86,223,223,42,42,319,320,321,400,271,252,110,113,38,38,270,271',
'45,4,4,227,25,25,495,28,32,35,40,46,49,50,2,5,12,20,26,30,34,496,214',
'216,187,411,191,193,194,197,200,202,204,205,284,285,284,285,322,323',
'474,475,265,131,86,393,183,151,198,201,506,269,390,101,380,44,48,366',
'152,6,14,19,27,31,192,86,366,376,515,100,177,379,184,515,520,157,159',
'162,165,169,172,107,521,86,220,154,374,373,203,166,170,131,176,45,181',
'149,366,529,530,363,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,120,358',
'274,275,352,351,28,32,35,40,46,49,50,2,5,12,20,26,30,34,350,214,216',
'187,540,191,193,194,197,200,202,204,205,44,48,349,542,6,14,19,27,31',
'336,334,333,183,151,198,201,356,356,547,328,288,44,48,325,152,6,14,19',
'27,31,192,86,329,289,318,310,177,361,184,554,556,157,159,162,165,169',
'172,557,60,559,309,154,308,52,203,166,170,301,176,45,181,149,554,565',
'566,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46',
'49,50,2,5,12,20,26,30,34,,214,216,187,,191,193,194,197,200,202,204,205',
'44,48,,,6,14,19,27,31,,,,183,151,198,201,,,,,,44,48,,152,6,14,19,27',
'31,192,86,332,,,,177,,184,,,157,159,162,165,169,172,223,304,42,307,154',
'303,,203,166,170,,176,38,181,149,,,4,,,25,,,,305,306,302,,,,,,,45,,51',
'3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,214,216,187,,191',
'193,194,197,200,202,204,205,,,,,16,23,29,,37,,,,183,151,198,201,,,,',
',44,48,,152,6,14,19,27,31,192,86,,,,,177,,184,,,157,159,162,165,169',
'172,,,,,154,,,203,166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2',
'5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,214',
'216,187,,191,193,194,197,200,202,204,205,44,48,,,6,14,19,27,31,,,,183',
'151,198,201,,,,,,44,48,,152,6,14,19,27,31,192,86,,,,,177,,184,,,157',
'159,162,165,169,172,,,,,154,,,203,166,170,,176,45,181,149,,,,,28,32',
'35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5',
'12,20,26,30,34,,214,216,187,,191,193,194,197,200,202,204,205,44,48,',
',6,14,19,27,31,,,,183,151,198,201,,,,,,44,48,,152,6,14,19,27,31,192',
'86,449,,,,177,,184,,,157,159,162,165,169,172,,,,,154,,,203,166,170,',
'176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,',
'28,32,35,40,46,49,50,2,5,12,20,26,30,34,,214,216,187,,191,193,194,197',
'200,202,204,205,44,48,,,6,14,19,27,31,,,,183,151,198,201,,,,,,44,48',
',152,6,14,19,27,31,192,86,,,,,177,,184,,,157,159,162,165,169,172,,,',
',154,,,203,166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20',
'26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,214,216,187',
',191,193,194,197,200,202,204,205,44,48,,,6,14,19,27,31,,,,183,151,198',
'201,,,,,,44,48,,152,6,14,19,27,31,192,86,,,,,177,,184,,,157,159,162',
'165,169,172,,,,,154,,,203,166,170,,176,45,181,149,,,,,28,32,35,40,46',
'49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26',
'30,34,,214,216,187,,191,193,194,197,200,202,204,205,44,48,,,6,14,19',
'27,31,,,,183,151,198,201,,,,,,44,48,,152,6,14,19,27,31,192,86,,,,,177',
',184,,,157,159,162,165,169,172,,,,,154,,,203,166,170,,176,45,181,149',
',,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46',
'49,50,2,5,12,20,26,30,34,,214,216,187,,191,193,194,197,200,202,204,205',
'44,48,,,6,14,19,27,31,,,,183,151,198,201,,,,,,44,48,,152,6,14,19,27',
'31,192,86,,,,,177,,184,,,157,159,162,165,169,172,223,,42,,154,,,203',
'166,170,,176,38,181,149,,,4,,223,25,42,,,,,,,,,,38,,45,,,4,,,25,28,32',
'35,40,46,49,50,2,5,12,20,26,30,34,,214,216,187,,191,193,194,197,200',
'202,204,205,,,,,,,,,,,,,183,151,198,201,,,,,,44,48,,152,6,14,19,27,31',
'192,86,195,,,,177,,184,,,157,159,162,165,169,172,223,,42,,154,,,203',
'166,170,,176,38,181,149,,,4,,,25,,,,,,,,,,,,,45,,51,3,8,15,21,28,32',
'35,40,46,49,50,2,5,12,20,26,30,34,,214,216,187,,191,193,194,197,200',
'202,204,205,,,,,16,23,29,,37,,,,183,151,198,201,,,,,,44,48,,152,6,14',
'19,27,31,192,,,,,,177,,184,,,157,159,162,165,169,172,223,,42,,154,,',
'163,166,170,,176,38,181,149,,,4,,,25,,,,,,,,,,,,,45,,51,3,8,15,21,28',
'32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,,,,,,,,,,,,,,16,23,29,,37,',
',231,183,151,,,,,,,,44,48,,152,6,14,19,27,31,192,,,,,,177,,184,,,157',
'159,162,165,169,172,,,,,154,,,163,166,170,,176,45,181,149,,,,,28,32',
'35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5',
'12,20,26,30,34,,97,98,99,,,,,,92,93,,,44,48,,,6,14,19,27,31,,,,183,151',
',,,,,,,44,48,,152,6,14,19,27,31,192,86,,,,,177,,184,,,157,159,162,165',
'169,172,,,,,154,,,203,166,170,,176,,181,149,,,,,,,,,,,,,,,,,,,45,,,',
',,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,214,216,187,,191,193,194',
'197,200,202,204,205,,,,,,,,,,,,,183,151,198,201,,,,,,44,48,,152,6,14',
'19,27,31,256,,,,,177,,184,,,157,159,162,165,169,172,,,,,154,256,517',
'163,166,170,177,176,184,181,149,157,159,162,165,169,172,,,,,154,,,163',
'166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34',
'45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,,,,',
'44,48,,152,6,14,19,27,31,,375,,183,151,,,,,,,,44,48,,152,6,14,19,27',
'31,256,,,,,177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170',
',176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,',
',28,32,35,40,46,49,50,2,5,12,20,26,30,34,86,97,98,99,,,,,,92,93,,,44',
'48,,,6,14,19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,,,,,,',
'45,,51,3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34,86,,,,,,,,',
',,,,,,,,16,23,29,,37,,,,,,,,,,,,,44,48,,,6,14,19,27,31,,,,,,,45,,51',
'3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34,493,,,,,177,,184,',
',157,159,162,165,169,172,,16,23,29,154,37,,163,166,170,,176,,181,149',
',,,44,48,,,6,14,19,27,31,,,,,,,45,,,,,,,28,32,35,40,46,49,50,2,5,12',
'20,26,30,34,86,,,,,,,,,,,,,,,,,,,,,,,,,183,151,,,,,,,,44,48,,152,6,14',
'19,27,31,,,,,,,45,,51,3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30',
'34,86,,,,120,,,,,,,,,,,,,16,23,29,,37,,,,,,,,,,,,,44,48,,,6,14,19,27',
'31,,,,,,,45,,51,3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34,372',
',,,,,,,,,,,,,,,,16,23,29,,37,,,,,,,,,,,,,44,48,,,6,14,19,27,31,,,,,',
'45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,,,,,,,,,,,,,,,',
',,,97,98,99,,,,,,92,93,,,44,48,,,6,14,19,27,31,545,,,,177,,184,,,157',
'159,162,165,169,172,,,,,154,,243,163,166,170,,176,,181,149,,,,,,,,,',
',,,,,,,,,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28',
'32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,,,,,44,48,,152,6',
'14,19,27,31,97,98,99,,,,,,92,93,,42,44,48,,,6,14,19,27,31,38,,,,,4,',
',25,,,,,,,,,,,,,,,,,,,,,,,,,,45,,51,3,8,15,21,28,32,35,40,46,49,50,2',
'5,12,20,26,30,34,,,,,,177,,184,,,157,159,162,165,169,172,,16,23,29,154',
'37,,163,166,170,,176,,181,149,,,,44,48,,,6,14,19,27,31,,,,,,,45,,,,',
',,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,,,,,,,,,,,,,,,,,,,,,,183',
'151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184,,,157,159,162,165,169,172',
',,,,154,,,163,166,170,177,176,184,181,149,157,159,162,165,169,172,,',
',,154,,,163,166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12',
'20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183',
'151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14',
'19,27,31,177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170,,176',
'45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32',
'35,40,46,49,50,2,5,12,20,26,30,34,,97,98,99,,,,,,92,93,,,44,48,,,6,14',
'19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184,147,,157',
'159,162,165,169,172,,,,,154,,,163,166,170,177,176,184,181,149,157,159',
'162,165,169,172,,,,,154,,,163,166,170,,176,45,181,149,,,,,28,32,35,40',
'46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20',
'26,30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183,151,,,,',
',,,44,48,,152,6,14,19,27,31,177,,184,479,,157,159,162,165,169,172,,',
',,154,,,163,166,170,177,176,184,181,149,157,159,162,165,169,172,,,,',
'154,,,163,166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20',
'26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183,151',
',,,,,,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19',
'27,31,177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170,177,176',
'184,181,149,157,159,162,165,169,172,,,,,154,,,163,166,170,,176,45,181',
'149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40',
'46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27',
'31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184,,,157,159,162',
'165,169,172,,,,,154,,,163,166,170,177,176,184,181,149,157,159,162,165',
'169,172,,,,,154,,,163,166,170,,176,45,181,149,,,,,28,32,35,40,46,49',
'50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30',
'34,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,,44',
'48,,152,6,14,19,27,31,177,,184,,,157,159,162,165,169,172,,,,,154,,,163',
'166,170,177,176,184,181,149,157,159,162,165,169,172,,,,,154,,,163,166',
'170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,',
',,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,,,,,44,48',
',152,6,14,19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184',
',,157,159,162,165,169,172,,,,,154,,,163,166,170,177,176,184,181,149',
'157,159,162,165,169,172,,,,,154,,,163,166,170,,176,45,181,149,,,,,28',
'32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2',
'5,12,20,26,30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183',
'151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184,,,157,159,162,165,169,172',
',,,,154,,,163,166,170,177,176,184,181,149,157,159,162,165,169,172,,',
',,154,,,163,166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12',
'20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183',
'151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14',
'19,27,31,177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170,177',
'176,184,181,149,157,159,162,165,169,172,,,,,154,,,163,166,170,,176,45',
'181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35',
'40,46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19',
'27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,177,428,184,,,157,159',
'162,165,169,172,,,,,154,,,163,166,170,177,176,184,181,149,157,159,162',
'165,169,172,,,,,154,,,163,166,170,,176,45,181,149,,,,,28,32,35,40,46',
'49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26',
'30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,',
'44,48,,152,6,14,19,27,31,177,,184,,,157,159,162,165,169,172,,,,,154',
',,163,166,170,177,176,184,181,149,157,159,162,165,169,172,,,,,154,,',
'163,166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30',
'34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,',
',,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27',
'31,177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170,,176,,181',
'149,,,,,,,,,,,,,,,,,,,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30',
'34,298,408,281,,,,,,,,38,,,,,4,,,,,,,,,,183,151,,,,,,,,44,48,,152,6',
'14,19,27,31,,45,,51,3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34',
'177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170,,176,,181,149',
',,,,,,,,44,48,,,6,14,19,27,31,,45,,,,,,,28,32,35,40,46,49,50,2,5,12',
'20,26,30,34,,,,,,,,,,,,,,,,,,,,,,,,,,183,151,,,,,,,,44,48,,152,6,14',
'19,27,31,177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170,177',
'176,184,181,149,157,159,162,165,169,172,,,,,154,,,163,166,170,,176,45',
'181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35',
'40,46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19',
'27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184,,,157,159',
'162,165,169,172,,,,,154,,,163,166,170,177,176,184,181,149,157,159,162',
'165,169,172,,,,,154,,,163,166,170,,176,45,181,149,,,,,28,32,35,40,46',
'49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26',
'30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,',
'44,48,,152,6,14,19,27,31,177,,184,,,157,159,162,165,169,172,,,,,154',
',,163,166,170,177,176,184,181,149,157,159,162,165,169,172,,,,,154,,',
'163,166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30',
'34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,',
',,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27',
'31,177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170,177,176',
'184,181,149,157,159,162,165,169,172,,,,,154,,,163,166,170,,176,45,181',
'149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40',
'46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27',
'31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184,409,,157,159',
'162,165,169,172,,,,,154,,,163,166,170,,176,,181,149,,,,,,,,,,,,,,,,',
',,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,279,408,281,,,,,',
',,38,,,,,4,,,25,,,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,,45,,51',
'3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34,177,,184,,,157,159',
'162,165,169,172,,,,,154,,,163,166,170,,176,,181,149,,,,,,,,,44,48,,',
'6,14,19,27,31,,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,',
',,,,,,,,,,,,,,,,,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184',
',,157,159,162,165,169,172,,,,,154,,,163,166,170,177,176,184,181,149',
'157,159,162,165,169,172,,,,,154,,,163,166,170,,176,45,181,149,,,,,28',
'32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2',
'5,12,20,26,30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183',
'151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184,,,157,159,162,165,169,172',
',,,,154,,,163,166,170,177,176,184,181,149,157,159,162,165,169,172,,',
',,154,,,163,166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12',
'20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183',
'151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14',
'19,27,31,177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170,177',
'176,184,181,149,157,159,162,165,169,172,,,,,154,,,163,166,170,,176,45',
'181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35',
'40,46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19',
'27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184,,,157,159',
'162,165,169,172,,,,,154,,,163,166,170,,176,45,181,149,,,,,28,32,35,40',
'46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20',
'26,30,34,,97,98,99,,,,,,92,93,,,44,48,,,6,14,19,27,31,,,,183,151,,,',
',,,,44,48,,152,6,14,19,27,31,177,538,184,,,157,159,162,165,169,172,',
',,,154,,,163,166,170,,176,,181,149,,,,,,,,,,,,,,,,,,,45,,,,,,,28,32',
'35,40,46,49,50,2,5,12,20,26,30,34,42,,,,,,,,,,38,,,,,4,,,25,,,,,,,183',
'151,,,,,,,,44,48,,152,6,14,19,27,31,,45,,51,3,8,15,21,28,32,35,40,46',
'49,50,2,5,12,20,26,30,34,,,,,,287,,184,,,157,159,162,165,169,172,,16',
'23,29,154,37,,163,166,170,,176,,181,149,,,,44,48,,,6,14,19,27,31,,,',
',,,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,,,,,,,,,,,,',
',,,,,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,177,,184,,,157,159',
'162,165,169,172,,,,,154,,,163,166,170,287,176,184,181,149,157,159,162',
'165,169,172,,,,,154,,,163,166,170,,176,327,181,149,,,,,28,32,35,40,46',
'49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26',
'30,34,,,,,183,151,,,,,,,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,',
'44,48,,152,6,14,19,27,31,177,,184,,,157,159,162,165,169,172,,,,,154',
',,163,166,170,315,176,184,181,149,157,159,162,165,169,172,,,,,154,,',
'163,166,170,,176,45,181,149,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30',
'34,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,,183,151,,,,',
',,,44,48,,152,6,14,19,27,31,,,,183,151,,,,,,,,44,48,,152,6,14,19,27',
'31,177,,184,,,157,159,162,165,169,172,,,,,154,,,163,166,170,,176,478',
'181,149,,,,,,,,,,,,,,,,,,,45,,,,,,,28,32,35,40,46,49,50,2,5,12,20,26',
'30,34,,45,,51,3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,,,183',
'151,145,,,,,,,44,48,,152,6,14,19,27,31,,144,,,,,-211,,,,,,,44,48,,,6',
'14,19,27,31,,,,,,45,,51,3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26',
'30,34,45,,51,3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34,,-209',
',,,,,,,,,,,44,48,,,6,14,19,27,31,,,,,,,,,,,,,44,48,,,6,14,19,27,31,45',
',51,3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32',
'35,40,46,49,50,2,5,12,20,26,30,34,,,,,,,,,,,,,,44,48,,,6,14,19,27,31',
',,,,,,,,,,,,44,48,,,6,14,19,27,31,383,385,387,388,389,382,45,,,,,,,28',
'32,35,40,46,49,50,2,5,12,20,26,30,34,45,,,,,,,28,32,35,40,46,49,50,2',
'5,12,20,26,30,34,,,,,,,,,,,,,,44,48,,,6,14,19,27,31,383,385,387,388',
'389,382,,,,,,,44,48,,,6,14,19,27,31,383,385,387,388,389,382,45,,,,,',
',28,32,35,40,46,49,50,2,5,12,20,26,30,34,45,,51,3,8,15,21,28,32,35,40',
'46,49,50,2,5,12,20,26,30,34,,,,,,,,,,,,,,44,48,,,6,14,19,27,31,383,385',
'387,388,389,382,,,,,,,44,48,,,6,14,19,27,31,45,,51,3,8,15,21,28,32,35',
'40,46,49,50,2,5,12,20,26,30,34,402,45,,51,3,8,15,21,28,32,35,40,46,49',
'50,2,5,12,20,26,30,34,,,,,,,,,,,,,44,48,,,6,14,19,27,31,,,,,,,,,,,,',
',44,48,,,6,14,19,27,31,45,,51,3,8,15,21,28,32,35,40,46,49,50,2,5,12',
'20,26,30,34,45,,51,3,8,15,21,28,32,35,40,46,49,50,2,5,12,20,26,30,34',
',,,,,,,,,,,,,44,48,,,6,14,19,27,31,,,,,,,,,,,,,44,48,,,6,14,19,27,31' ]
        racc_action_table = arr = Array.new(7421, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'453,103,38,37,77,349,453,38,453,77,228,453,453,453,453,453,453,111,111',
'264,519,453,136,29,453,453,453,103,453,37,453,453,58,430,228,154,199',
'114,114,430,154,519,396,264,371,58,58,371,136,29,453,38,38,77,77,23',
'121,453,453,453,453,453,453,453,453,453,453,453,453,453,453,199,199',
'199,199,199,199,199,199,199,199,23,121,361,278,361,278,442,442,442,102',
'38,38,77,77,361,453,453,92,470,361,171,278,361,111,453,453,101,453,453',
'453,453,453,453,453,205,102,171,16,108,108,205,58,205,114,470,205,205',
'205,205,205,205,58,101,58,58,205,220,52,205,205,205,92,205,16,205,205',
'326,13,92,92,92,92,92,92,92,92,92,92,92,92,92,92,220,52,205,34,516,326',
'106,106,13,205,205,205,205,205,205,205,205,205,205,205,205,205,205,447',
'447,516,34,378,536,447,289,22,536,108,92,92,39,22,92,92,92,92,92,108',
'447,108,108,22,205,205,289,107,22,316,39,22,436,205,205,89,205,205,205',
'205,205,205,550,550,354,377,316,354,550,436,550,56,89,550,550,550,550',
'550,550,106,153,153,369,550,56,369,550,550,550,106,550,107,550,550,370',
'153,153,370,107,107,107,107,107,107,107,107,107,107,107,107,107,107',
'550,209,156,156,209,123,123,550,550,550,550,550,550,550,550,550,550',
'550,550,550,550,426,550,550,550,426,550,550,550,550,550,550,550,550',
'107,107,422,422,107,107,107,107,107,277,374,277,550,550,550,550,406',
'422,422,423,423,550,550,407,550,550,550,550,550,550,549,549,418,418',
'423,423,549,155,549,155,410,549,549,549,549,549,549,155,123,448,366',
'549,155,448,549,549,549,365,549,123,549,549,87,66,414,535,450,534,87',
'535,450,534,419,419,262,262,66,66,87,539,549,65,539,87,129,129,87,549',
'549,549,549,549,549,549,549,549,549,549,549,549,549,357,549,549,549',
'117,549,549,549,549,549,549,549,549,451,117,446,446,451,70,117,146,446',
'117,386,146,549,549,549,549,537,78,71,78,537,549,549,446,549,549,549',
'549,549,549,547,547,62,420,420,62,547,262,547,66,421,547,547,547,547',
'547,547,129,262,317,66,547,42,317,547,547,547,129,547,335,547,547,42',
'80,514,364,514,42,364,416,42,405,416,405,68,68,514,424,424,74,547,514',
'74,327,514,122,122,547,547,547,547,547,547,547,547,547,547,547,547,547',
'547,93,547,547,547,305,547,547,547,547,547,547,547,547,431,143,221,143',
'43,221,43,297,432,297,433,143,547,547,547,547,143,413,413,143,303,547',
'547,435,547,547,547,547,547,547,538,538,179,179,179,104,538,68,538,412',
'412,538,538,538,538,538,538,68,122,68,68,538,434,434,538,538,538,60',
'538,122,538,538,127,127,247,235,247,235,443,443,443,272,272,112,249',
'249,247,235,132,132,538,247,235,125,247,235,444,538,538,538,538,538',
'538,538,538,538,538,538,538,538,538,445,538,538,538,282,538,538,538',
'538,538,538,538,538,417,417,148,148,180,180,391,391,126,271,267,259',
'538,538,538,538,452,131,253,55,251,538,538,466,538,538,538,538,538,538',
'351,351,248,245,473,54,351,249,351,476,477,351,351,351,351,351,351,249',
'480,487,241,351,240,239,351,351,351,134,351,97,351,351,226,499,500,224',
'97,97,97,97,97,97,97,97,97,97,97,97,97,97,351,218,216,140,142,204,203',
'351,351,351,351,351,351,351,351,351,351,351,351,351,351,202,351,351',
'351,513,351,351,351,351,351,351,351,351,97,97,200,515,97,97,97,97,97',
'197,193,191,351,351,351,351,527,528,531,187,150,351,351,183,351,351',
'351,351,351,351,188,188,188,151,178,167,188,541,188,542,543,188,188',
'188,188,188,188,544,17,548,164,188,161,6,188,188,188,158,188,98,188',
'188,556,563,565,,98,98,98,98,98,98,98,98,98,98,98,98,98,98,188,,,,,',
',188,188,188,188,188,188,188,188,188,188,188,188,188,188,,188,188,188',
',188,188,188,188,188,188,188,188,98,98,,,98,98,98,98,98,,,,188,188,188',
'188,,,,,,188,188,,188,188,188,188,188,188,190,190,190,,,,190,,190,,',
'190,190,190,190,190,190,234,160,234,160,190,160,,190,190,190,,190,234',
'190,190,,,234,,,234,,,,160,160,160,,,,,,,190,,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,,190,190,190,,190',
'190,190,190,190,190,190,190,,,,,190,190,190,,190,,,,190,190,190,190',
',,,,,190,190,,190,190,190,190,190,190,194,194,,,,,194,,194,,,194,194',
'194,194,194,194,,,,,194,,,194,194,194,,194,96,194,194,,,,,96,96,96,96',
'96,96,96,96,96,96,96,96,96,96,194,,,,,,,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,,194,194,194,,194,194,194,194,194,194,194',
'194,96,96,,,96,96,96,96,96,,,,194,194,194,194,,,,,,194,194,,194,194',
'194,194,194,194,551,551,,,,,551,,551,,,551,551,551,551,551,551,,,,,551',
',,551,551,551,,551,99,551,551,,,,,99,99,99,99,99,99,99,99,99,99,99,99',
'99,99,551,,,,,,,551,551,551,551,551,551,551,551,551,551,551,551,551',
'551,,551,551,551,,551,551,551,551,551,551,551,551,99,99,,,99,99,99,99',
'99,,,,551,551,551,551,,,,,,551,551,,551,551,551,551,551,551,331,331',
'331,,,,331,,331,,,331,331,331,331,331,331,,,,,331,,,331,331,331,,331',
'94,331,331,,,,,94,94,94,94,94,94,94,94,94,94,94,94,94,94,331,,,,,,,331',
'331,331,331,331,331,331,331,331,331,331,331,331,331,,331,331,331,,331',
'331,331,331,331,331,331,331,94,94,,,94,94,94,94,94,,,,331,331,331,331',
',,,,,331,331,,331,331,331,331,331,331,505,505,,,,,505,,505,,,505,505',
'505,505,505,505,,,,,505,,,505,505,505,,505,465,505,505,,,,,465,465,465',
'465,465,465,465,465,465,465,465,465,465,465,505,,,,,,,505,505,505,505',
'505,505,505,505,505,505,505,505,505,505,,505,505,505,,505,505,505,505',
'505,505,505,505,465,465,,,465,465,465,465,465,,,,505,505,505,505,,,',
',,505,505,,505,505,505,505,505,505,504,504,,,,,504,,504,,,504,504,504',
'504,504,504,,,,,504,,,504,504,504,,504,471,504,504,,,,,471,471,471,471',
'471,471,471,471,471,471,471,471,471,471,504,,,,,,,504,504,504,504,504',
'504,504,504,504,504,504,504,504,504,,504,504,504,,504,504,504,504,504',
'504,504,504,471,471,,,471,471,471,471,471,,,,504,504,504,504,,,,,,504',
'504,,504,504,504,504,504,504,503,503,,,,,503,,503,,,503,503,503,503',
'503,503,,,,,503,,,503,503,503,,503,325,503,503,,,,,325,325,325,325,325',
'325,325,325,325,325,325,325,325,325,503,,,,,,,503,503,503,503,503,503',
'503,503,503,503,503,503,503,503,,503,503,503,,503,503,503,503,503,503',
'503,503,325,325,,,325,325,325,325,325,,,,503,503,503,503,,,,,,503,503',
',503,503,503,503,503,503,358,358,,,,,358,,358,,,358,358,358,358,358',
'358,233,,233,,358,,,358,358,358,,358,233,358,358,,,233,,511,233,511',
',,,,,,,,,511,,358,,,511,,,511,358,358,358,358,358,358,358,358,358,358',
'358,358,358,358,,358,358,358,,358,358,358,358,358,358,358,358,,,,,,',
',,,,,,358,358,358,358,,,,,,358,358,,358,358,358,358,358,358,86,86,86',
',,,86,,86,,,86,86,86,86,86,86,90,,90,,86,,,86,86,86,,86,90,86,86,,,90',
',,90,,,,,,,,,,,,,86,,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86',
'86,86,86,,86,86,86,,86,86,86,86,86,86,86,86,,,,,86,86,86,,86,,,,86,86',
'86,86,,,,,,86,86,,86,86,86,86,86,86,336,,,,,,336,,336,,,336,336,336',
'336,336,336,225,,225,,336,,,336,336,336,,336,225,336,336,,,225,,,225',
',,,,,,,,,,,,336,,336,336,336,336,336,336,336,336,336,336,336,336,336',
'336,336,336,336,336,336,,,,,,,,,,,,,,,,,,336,336,336,,336,,,95,336,336',
',,,,,,,336,336,,336,336,336,336,336,336,454,,,,,,454,,454,,,454,454',
'454,454,454,454,,,,,454,,,454,454,454,,454,95,454,454,,,,,95,95,95,95',
'95,95,95,95,95,95,95,95,95,95,454,,,,,,,454,454,454,454,454,454,454',
'454,454,454,454,454,454,454,,95,95,95,,,,,,95,95,,,95,95,,,95,95,95',
'95,95,,,,454,454,,,,,,,,454,454,,454,454,454,454,454,454,460,460,,,',
',460,,460,,,460,460,460,460,460,460,,,,,460,,,460,460,460,,460,,460',
'460,,,,,,,,,,,,,,,,,,,460,,,,,,,460,460,460,460,460,460,460,460,460',
'460,460,460,460,460,,460,460,460,,460,460,460,460,460,460,460,460,,',
',,,,,,,,,,460,460,460,460,,,,,,460,460,,460,460,460,460,460,460,256',
',,,,256,,256,,,256,256,256,256,256,256,,,,,256,475,475,256,256,256,475',
'256,475,256,256,475,475,475,475,475,475,,,,,475,,,475,475,475,,475,256',
'475,475,,,,,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'475,,,,,,,475,475,475,475,475,475,475,475,475,475,475,475,475,475,,',
',,256,256,,,,,,,,256,256,,256,256,256,256,256,256,,244,,475,475,,,,',
',,,475,475,,475,475,475,475,475,475,120,,,,,120,,120,,,120,120,120,120',
'120,120,,,,,120,,,120,120,120,,120,244,120,120,,,,,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,120,,,,,,,120,120,120,120,120,120',
'120,120,120,120,120,120,120,120,47,244,244,244,,,,,,244,244,,,244,244',
',,244,244,244,244,244,,,,120,120,,,,,,,,120,120,,120,120,120,120,120',
'120,,,,,,,47,,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47',
'47,119,,,,,,,,,,,,,,,,,47,47,47,,47,,,,,,,,,,,,,47,47,,,47,47,47,47',
'47,,,,,,,119,,119,119,119,119,119,119,119,119,119,119,119,119,119,119',
'119,119,119,119,119,437,,,,,437,,437,,,437,437,437,437,437,437,,119',
'119,119,437,119,,437,437,437,,437,,437,437,,,,119,119,,,119,119,119',
'119,119,,,,,,,437,,,,,,,437,437,437,437,437,437,437,437,437,437,437',
'437,437,437,84,,,,,,,,,,,,,,,,,,,,,,,,,437,437,,,,,,,,437,437,,437,437',
'437,437,437,437,,,,,,,84,,84,84,84,84,84,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,64,,,,64,,,,,,,,,,,,,84,84,84,,84,,,,,,,,,,,,,84,84,',
',84,84,84,84,84,,,,,,,64,,64,64,64,64,64,64,64,64,64,64,64,64,64,64',
'64,64,64,64,64,236,,,,,,,,,,,,,,,,,64,64,64,,64,,,,,,,,,,,,,64,64,,',
'64,64,64,64,64,,,,,,236,,,,,,,236,236,236,236,236,236,236,236,236,236',
'236,236,236,236,,,,,,,,,,,,,,,,,,,,,,,236,236,236,,,,,,236,236,,,236',
'236,,,236,236,236,236,236,525,,,,525,,525,,,525,525,525,525,525,525',
',,,,525,,105,525,525,525,,525,,525,525,,,,,,,,,,,,,,,,,,,525,,,,,,,525',
'525,525,525,525,525,525,525,525,525,525,525,525,525,105,,,,,,,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,,,,,525,525,,,,,,,,525',
'525,,525,525,525,525,525,525,105,105,105,,,,,,105,105,,0,105,105,,,105',
'105,105,105,105,0,,,,,0,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,0,,0,0,0,0,0,0',
'0,0,0,0,0,0,0,0,0,0,0,0,0,,,,,,334,,334,,,334,334,334,334,334,334,,0',
'0,0,334,0,,334,334,334,,334,,334,334,,,,0,0,,,0,0,0,0,0,,,,,,,334,,',
',,,,334,334,334,334,334,334,334,334,334,334,334,334,334,334,,,,,,,,',
',,,,,,,,,,,,,,,,,334,334,,,,,,,,334,334,,334,334,334,334,334,334,173',
',173,,,173,173,173,173,173,173,,,,,173,,,173,173,173,356,173,356,173',
'173,356,356,356,356,356,356,,,,,356,,,356,356,356,,356,173,356,356,',
',,,173,173,173,173,173,173,173,173,173,173,173,173,173,173,356,,,,,',
',356,356,356,356,356,356,356,356,356,356,356,356,356,356,,,,,173,173',
',,,,,,,173,173,,173,173,173,173,173,173,,,,356,356,,,,,,,,356,356,,356',
'356,356,356,356,356,328,,328,,,328,328,328,328,328,328,,,,,328,,,328',
'328,328,,328,53,328,328,,,,,53,53,53,53,53,53,53,53,53,53,53,53,53,53',
'328,,,,,,,328,328,328,328,328,328,328,328,328,328,328,328,328,328,,53',
'53,53,,,,,,53,53,,,53,53,,,53,53,53,53,53,,,,328,328,,,,,,,,328,328',
',328,328,328,328,328,328,82,,82,82,,82,82,82,82,82,82,,,,,82,,,82,82',
'82,363,82,363,82,82,363,363,363,363,363,363,,,,,363,,,363,363,363,,363',
'82,363,363,,,,,82,82,82,82,82,82,82,82,82,82,82,82,82,82,363,,,,,,,363',
'363,363,363,363,363,363,363,363,363,363,363,363,363,,,,,82,82,,,,,,',
',82,82,,82,82,82,82,82,82,,,,363,363,,,,,,,,363,363,,363,363,363,363',
'363,363,404,,404,404,,404,404,404,404,404,404,,,,,404,,,404,404,404',
'323,404,323,404,404,323,323,323,323,323,323,,,,,323,,,323,323,323,,323',
'404,323,323,,,,,404,404,404,404,404,404,404,404,404,404,404,404,404',
'404,323,,,,,,,323,323,323,323,323,323,323,323,323,323,323,323,323,323',
',,,,404,404,,,,,,,,404,404,,404,404,404,404,404,404,,,,323,323,,,,,',
',,323,323,,323,323,323,323,323,323,322,,322,,,322,322,322,322,322,322',
',,,,322,,,322,322,322,321,322,321,322,322,321,321,321,321,321,321,,',
',,321,,,321,321,321,,321,322,321,321,,,,,322,322,322,322,322,322,322',
'322,322,322,322,322,322,322,321,,,,,,,321,321,321,321,321,321,321,321',
'321,321,321,321,321,321,,,,,322,322,,,,,,,,322,322,,322,322,322,322',
'322,322,,,,321,321,,,,,,,,321,321,,321,321,321,321,321,321,320,,320',
',,320,320,320,320,320,320,,,,,320,,,320,320,320,319,320,319,320,320',
'319,319,319,319,319,319,,,,,319,,,319,319,319,,319,320,319,319,,,,,320',
'320,320,320,320,320,320,320,320,320,320,320,320,320,319,,,,,,,319,319',
'319,319,319,319,319,319,319,319,319,319,319,319,,,,,320,320,,,,,,,,320',
'320,,320,320,320,320,320,320,,,,319,319,,,,,,,,319,319,,319,319,319',
'319,319,319,488,,488,,,488,488,488,488,488,488,,,,,488,,,488,488,488',
'315,488,315,488,488,315,315,315,315,315,315,,,,,315,,,315,315,315,,315',
'488,315,315,,,,,488,488,488,488,488,488,488,488,488,488,488,488,488',
'488,315,,,,,,,315,315,315,315,315,315,315,315,315,315,315,315,315,315',
',,,,488,488,,,,,,,,488,488,,488,488,488,488,488,488,,,,315,315,,,,,',
',,315,315,,315,315,315,315,315,315,312,,312,,,312,312,312,312,312,312',
',,,,312,,,312,312,312,311,312,311,312,312,311,311,311,311,311,311,,',
',,311,,,311,311,311,,311,312,311,311,,,,,312,312,312,312,312,312,312',
'312,312,312,312,312,312,312,311,,,,,,,311,311,311,311,311,311,311,311',
'311,311,311,311,311,311,,,,,312,312,,,,,,,,312,312,,312,312,312,312',
'312,312,,,,311,311,,,,,,,,311,311,,311,311,311,311,311,311,310,,310',
',,310,310,310,310,310,310,,,,,310,,,310,310,310,309,310,309,310,310',
'309,309,309,309,309,309,,,,,309,,,309,309,309,,309,310,309,309,,,,,310',
'310,310,310,310,310,310,310,310,310,310,310,310,310,309,,,,,,,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,,,,,310,310,,,,,,,,310',
'310,,310,310,310,310,310,310,,,,309,309,,,,,,,,309,309,,309,309,309',
'309,309,309,308,,308,,,308,308,308,308,308,308,,,,,308,,,308,308,308',
'307,308,307,308,308,307,307,307,307,307,307,,,,,307,,,307,307,307,,307',
'308,307,307,,,,,308,308,308,308,308,308,308,308,308,308,308,308,308',
'308,307,,,,,,,307,307,307,307,307,307,307,307,307,307,307,307,307,307',
',,,,308,308,,,,,,,,308,308,,308,308,308,308,308,308,,,,307,307,,,,,',
',,307,307,,307,307,307,307,307,307,304,304,304,,,304,304,304,304,304',
'304,,,,,304,,,304,304,304,301,304,301,304,304,301,301,301,301,301,301',
',,,,301,,,301,301,301,,301,304,301,301,,,,,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,301,,,,,,,301,301,301,301,301,301,301,301',
'301,301,301,301,301,301,,,,,304,304,,,,,,,,304,304,,304,304,304,304',
'304,304,,,,301,301,,,,,,,,301,301,,301,301,301,301,301,301,491,,491',
',,491,491,491,491,491,491,,,,,491,,,491,491,491,300,491,300,491,491',
'300,300,300,300,300,300,,,,,300,,,300,300,300,,300,491,300,300,,,,,491',
'491,491,491,491,491,491,491,491,491,491,491,491,491,300,,,,,,,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,,,,,491,491,,,,,,,,491',
'491,,491,491,491,491,491,491,,,,300,300,,,,,,,,300,300,,300,300,300',
'300,300,300,299,,299,,,299,299,299,299,299,299,,,,,299,,,299,299,299',
',299,,299,299,,,,,,,,,,,,,,,,,,,299,,,,,,,299,299,299,299,299,299,299',
'299,299,299,299,299,299,299,298,298,298,,,,,,,,298,,,,,298,,,,,,,,,',
'299,299,,,,,,,,299,299,,299,299,299,299,299,299,,298,,298,298,298,298',
'298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,293,,293',
',,293,293,293,293,293,293,,,,,293,,,293,293,293,,293,,293,293,,,,,,',
',,298,298,,,298,298,298,298,298,,293,,,,,,,293,293,293,293,293,293,293',
'293,293,293,293,293,293,293,,,,,,,,,,,,,,,,,,,,,,,,,,293,293,,,,,,,',
'293,293,,293,293,293,293,293,293,292,,292,,,292,292,292,292,292,292',
',,,,292,,,292,292,292,291,292,291,292,292,291,291,291,291,291,291,,',
',,291,,,291,291,291,,291,292,291,291,,,,,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,291,,,,,,,291,291,291,291,291,291,291,291',
'291,291,291,291,291,291,,,,,292,292,,,,,,,,292,292,,292,292,292,292',
'292,292,,,,291,291,,,,,,,,291,291,,291,291,291,291,291,291,493,,493',
',,493,493,493,493,493,493,,,,,493,,,493,493,493,346,493,346,493,493',
'346,346,346,346,346,346,,,,,346,,,346,346,346,,346,493,346,346,,,,,493',
'493,493,493,493,493,493,493,493,493,493,493,493,493,346,,,,,,,346,346',
'346,346,346,346,346,346,346,346,346,346,346,346,,,,,493,493,,,,,,,,493',
'493,,493,493,493,493,493,493,,,,346,346,,,,,,,,346,346,,346,346,346',
'346,346,346,290,,290,,,290,290,290,290,290,290,,,,,290,,,290,290,290',
'287,290,287,290,290,287,287,287,287,287,287,,,,,287,,,287,287,287,,287',
'290,287,287,,,,,290,290,290,290,290,290,290,290,290,290,290,290,290',
'290,287,,,,,,,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
',,,,290,290,,,,,,,,290,290,,290,290,290,290,290,290,,,,287,287,,,,,',
',,287,287,,287,287,287,287,287,287,285,,285,,,285,285,285,285,285,285',
',,,,285,,,285,285,285,284,285,284,285,285,284,284,284,284,284,284,,',
',,284,,,284,284,284,,284,285,284,284,,,,,285,285,285,285,285,285,285',
'285,285,285,285,285,285,285,284,,,,,,,284,284,284,284,284,284,284,284',
'284,284,284,284,284,284,,,,,285,285,,,,,,,,285,285,,285,285,285,285',
'285,285,,,,284,284,,,,,,,,284,284,,284,284,284,284,284,284,281,,281',
'281,,281,281,281,281,281,281,,,,,281,,,281,281,281,,281,,281,281,,,',
',,,,,,,,,,,,,,,281,,,,,,,281,281,281,281,281,281,281,281,281,281,281',
'281,281,281,279,279,279,,,,,,,,279,,,,,279,,,279,,,,,,,281,281,,,,,',
',,281,281,,281,281,281,281,281,281,,279,,279,279,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,269,,269,,,269,269,269',
'269,269,269,,,,,269,,,269,269,269,,269,,269,269,,,,,,,,,279,279,,,279',
'279,279,279,279,,269,,,,,,,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,,,,,,,,,,,,,,,,,,,,,,,,,,269,269,,,,,,,,269,269,,269,269',
'269,269,269,269,496,,496,,,496,496,496,496,496,496,,,,,496,,,496,496',
'496,498,496,498,496,496,498,498,498,498,498,498,,,,,498,,,498,498,498',
',498,496,498,498,,,,,496,496,496,496,496,496,496,496,496,496,496,496',
'496,496,498,,,,,,,498,498,498,498,498,498,498,498,498,498,498,498,498',
'498,,,,,496,496,,,,,,,,496,496,,496,496,496,496,496,496,,,,498,498,',
',,,,,,498,498,,498,498,498,498,498,498,506,,506,,,506,506,506,506,506',
'506,,,,,506,,,506,506,506,223,506,223,506,506,223,223,223,223,223,223',
',,,,223,,,223,223,223,,223,506,223,223,,,,,506,506,506,506,506,506,506',
'506,506,506,506,506,506,506,223,,,,,,,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,,,,,506,506,,,,,,,,506,506,,506,506,506,506',
'506,506,,,,223,223,,,,,,,,223,223,,223,223,223,223,223,223,214,,214',
',,214,214,214,214,214,214,,,,,214,,,214,214,214,507,214,507,214,214',
'507,507,507,507,507,507,,,,,507,,,507,507,507,,507,214,507,507,,,,,214',
'214,214,214,214,214,214,214,214,214,214,214,214,214,507,,,,,,,507,507',
'507,507,507,507,507,507,507,507,507,507,507,507,,,,,214,214,,,,,,,,214',
'214,,214,214,214,214,214,214,,,,507,507,,,,,,,,507,507,,507,507,507',
'507,507,507,508,,508,,,508,508,508,508,508,508,,,,,508,,,508,508,508',
',508,100,508,508,,,,,100,100,100,100,100,100,100,100,100,100,100,100',
'100,100,508,,,,,,,508,508,508,508,508,508,508,508,508,508,508,508,508',
'508,,100,100,100,,,,,,100,100,,,100,100,,,100,100,100,100,100,,,,508',
'508,,,,,,,,508,508,,508,508,508,508,508,508,509,509,509,,,509,509,509',
'509,509,509,,,,,509,,,509,509,509,,509,,509,509,,,,,,,,,,,,,,,,,,,509',
',,,,,,509,509,509,509,509,509,509,509,509,509,509,509,509,509,24,,,',
',,,,,,24,,,,,24,,,24,,,,,,,509,509,,,,,,,,509,509,,509,509,509,509,509',
'509,,24,,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,,',
',,,149,,149,,,149,149,149,149,149,149,,24,24,24,149,24,,149,149,149',
',149,,149,149,,,,24,24,,,24,24,24,24,24,,,,,,,149,,,,,,,149,149,149',
'149,149,149,149,149,149,149,149,149,149,149,,,,,,,,,,,,,,,,,,,,,,,,',
',149,149,,,,,,,,149,149,,149,149,149,149,149,149,184,,184,,,184,184',
'184,184,184,184,,,,,184,,,184,184,184,181,184,181,184,184,181,181,181',
'181,181,181,,,,,181,,,181,181,181,,181,184,181,181,,,,,184,184,184,184',
'184,184,184,184,184,184,184,184,184,184,181,,,,,,,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,,,,,184,184,,,,,,,,184,184,,184',
'184,184,184,184,184,,,,181,181,,,,,,,,181,181,,181,181,181,181,181,181',
'177,,177,,,177,177,177,177,177,177,,,,,177,,,177,177,177,176,177,176',
'177,177,176,176,176,176,176,176,,,,,176,,,176,176,176,,176,177,176,176',
',,,,177,177,177,177,177,177,177,177,177,177,177,177,177,177,176,,,,',
',,176,176,176,176,176,176,176,176,176,176,176,176,176,176,,,,,177,177',
',,,,,,,177,177,,177,177,177,177,177,177,,,,176,176,,,,,,,,176,176,,176',
'176,176,176,176,176,333,,333,,,333,333,333,333,333,333,,,,,333,,,333',
'333,333,,333,403,333,333,,,,,,,,,,,,,,,,,,,333,,,,,,,333,333,333,333',
'333,333,333,333,333,333,333,333,333,333,,403,,403,403,403,403,403,403',
'403,403,403,403,403,403,403,403,403,403,403,403,403,,,,333,333,81,,',
',,,,333,333,,333,333,333,333,333,333,,81,,,,,207,,,,,,,403,403,,,403',
'403,403,403,403,,,,,,81,,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81',
'81,81,81,81,207,,207,207,207,207,207,207,207,207,207,207,207,207,207',
'207,207,207,207,207,207,,206,,,,,,,,,,,,81,81,,,81,81,81,81,81,,,,,',
',,,,,,,207,207,,,207,207,207,207,207,206,,206,206,206,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,206,554,,,,,,,554,554,554',
'554,554,554,554,554,554,554,554,554,554,554,,,,,,,,,,,,,,206,206,,,206',
'206,206,206,206,,,,,,,,,,,,,554,554,,,554,554,554,554,554,554,554,554',
'554,554,554,252,,,,,,,252,252,252,252,252,252,252,252,252,252,252,252',
'252,252,265,,,,,,,265,265,265,265,265,265,265,265,265,265,265,265,265',
'265,,,,,,,,,,,,,,252,252,,,252,252,252,252,252,252,252,252,252,252,252',
',,,,,,265,265,,,265,265,265,265,265,265,265,265,265,265,265,384,,,,',
',,384,384,384,384,384,384,384,384,384,384,384,384,384,384,41,,41,41',
'41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,,,,,,,,,,,,,,384',
'384,,,384,384,384,384,384,384,384,384,384,384,384,,,,,,,41,41,,,41,41',
'41,41,41,274,,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,33,,33,33,33,33,33,33,33,33,33,33,33,33,33,33',
'33,33,33,33,33,,,,,,,,,,,,,274,274,,,274,274,274,274,274,,,,,,,,,,,',
',,33,33,,,33,33,33,33,33,36,,36,36,36,36,36,36,36,36,36,36,36,36,36',
'36,36,36,36,36,36,295,,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,,,,,,,,,,,,,,36,36,,,36,36,36,36,36,,,,',
',,,,,,,,295,295,,,295,295,295,295,295' ]
        racc_action_check = arr = Array.new(7421, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3062,   nil,   nil,   nil,   nil,   nil,   801,   nil,   nil,   nil,
   nil,   nil,   nil,   145,   nil,   nil,    92,   817,   nil,   nil,
   nil,   nil,   192,    29,  6319,   nil,   nil,   nil,   nil,    -3,
   nil,   nil,   nil,  7220,   163,   nil,  7284,   -23,   -16,   191,
   nil,  7134,   471,   537,   nil,   nil,   nil,  2482,   nil,   nil,
   nil,   nil,   112,  3348,   687,   668,   230,   nil,    29,   nil,
   598,   nil,   457,   nil,  2762,   386,   373,   nil,   485,   nil,
   406,   442,   nil,   nil,   504,   nil,   nil,   -14,   436,   nil,
   481,  6846,  3477,   nil,  2692,   nil,  1823,   373,   nil,   217,
  1836,   nil,    90,   502,  1232,  2030,  1004,   662,   776,  1118,
  6125,    81,    64,   -25,   574,  2964,   153,   206,   103,   nil,
   nil,     1,   606,   nil,    21,   nil,   nil,   410,   nil,  2552,
  2412,    30,   496,   268,   nil,   598,   655,   601,   nil,   381,
   nil,   665,   615,   nil,   686,   nil,    -4,   nil,   nil,   nil,
   733,   nil,   730,   534,   nil,   nil,   429,   nil,   623,  6389,
   763,   794,   nil,   226,    32,   342,   243,   nil,   813,   nil,
   923,   798,   nil,   nil,   795,   nil,   nil,   764,   nil,   nil,
   nil,    76,   nil,  3240,   nil,   nil,  6647,  6626,   792,   555,
   643,  6518,   nil,   784,  6497,   nil,   nil,   780,   797,   nil,
   911,   772,   nil,   771,  1025,   nil,   nil,   770,   nil,    29,
   745,   nil,   754,   735,   738,   113,  6931,  6867,   nil,   278,
   nil,   nil,   nil,   nil,  6017,   nil,   731,   nil,   729,   nil,
   111,   541,   nil,  5909,   714,  1950,   691,   nil,     8,   nil,
   nil,   nil,   nil,  1722,   924,   600,  2831,   nil,   nil,   699,
   685,   700,   nil,   nil,  2391,   686,   nil,   599,   661,   599,
   nil,   673,  7022,   671,   nil,   nil,  2278,   nil,   nil,   657,
   nil,   nil,   371,   nil,    17,  7043,   nil,   662,   nil,  5651,
   nil,   638,   608,   nil,  7198,   nil,   nil,   314,    76,  5586,
   nil,  5521,   620,   nil,  5413,  5392,   nil,  5284,   nil,   187,
  5263,  5026,  5005,  4897,   nil,  7305,   nil,   540,  4832,  4767,
  4659,  4530,   nil,   535,  4509,   506,   nil,  4401,  4380,  4272,
  4251,  4143,  4122,   nil,   nil,  4014,   207,   471,   nil,  3885,
  3864,  3756,  3735,  3627,   nil,  1574,   142,   484,  3369,   nil,
   nil,  1253,   nil,  6755,  3132,   407,  1937,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  5155,   nil,   nil,     3,
   nil,   683,   nil,   nil,   229,   nil,  3261,   408,  1709,   nil,
   nil,    77,   nil,  3498,   490,   361,   358,   nil,   nil,   247,
   259,    42,   nil,   nil,   315,   nil,   nil,   227,   181,   nil,
   nil,   nil,   nil,   nil,  7113,   nil,   428,   nil,   nil,   nil,
   nil,   657,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,
   nil,   nil,   nil,  6777,  3606,   490,   320,   327,   nil,   nil,
   342,   nil,   564,   542,   371,   nil,   490,   621,   311,   351,
   426,   458,   294,   311,   466,   nil,   295,   nil,   nil,   nil,
    28,   528,   526,   527,   588,   524,   210,  2622,   nil,   nil,
   nil,   nil,    69,   591,   618,   636,   424,   181,   357,   nil,
   374,   422,   663,    -2,  2051,   nil,   nil,   nil,   nil,   nil,
  2165,   nil,   nil,   nil,   nil,  1346,   652,   nil,   nil,   nil,
    73,  1460,   nil,   663,   nil,  2299,   668,   686,   nil,   nil,
   692,   nil,   nil,   nil,   nil,   nil,   nil,   701,  3993,   nil,
   nil,  4638,   nil,  5134,   nil,   nil,  5759,   nil,  5780,   712,
   646,   nil,   nil,  1595,  1481,  1367,  5888,  6038,  6146,  6254,
   nil,  1741,   nil,   751,   485,   766,   162,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,  2943,   nil,   780,   781,   nil,
   nil,   710,   nil,   nil,   375,   373,   186,   438,   569,   390,
   nil,   801,   800,   803,   743,   nil,   nil,   455,   816,   341,
   227,  1139,   nil,   nil,  6952,   nil,   823,   nil,   nil,   nil,
   nil,   nil,   nil,   823,   nil,   807,   nil ]

racc_action_default = [
  -315,  -181,  -178,  -166,  -238,  -224,  -184,  -182,  -167,  -154,
  -310,  -307,  -225,  -315,  -186,  -168,  -315,  -315,  -309,  -187,
  -172,  -169,  -315,  -315,    -1,  -230,  -193,  -188,  -173,  -315,
  -194,  -189,  -174,  -155,  -315,  -175,  -157,  -315,  -237,  -315,
  -176,  -159,  -315,  -229,  -226,  -183,  -179,  -315,  -227,  -180,
  -177,  -165,  -315,  -315,  -192,   -99,  -105,  -102,  -315,  -103,
  -315,  -152,  -315,  -161,  -163,  -133,  -315,  -308,  -315,  -156,
  -315,  -219,  -158,   -97,  -315,  -242,  -240,  -239,  -228,  -160,
  -315,  -315,  -315,  -314,  -315,  -287,  -315,  -315,  -170,  -315,
  -315,  -195,  -315,  -315,  -209,  -315,  -211,  -315,  -315,  -315,
  -315,  -315,  -315,  -315,  -315,  -315,  -315,  -315,  -315,  -144,
  -110,  -315,  -315,  -109,  -315,   567,  -153,  -315,  -312,  -315,
  -315,  -315,  -315,  -315,  -148,  -315,  -315,  -315,  -139,  -315,
  -142,  -222,  -315,  -220,  -315,  -141,  -315,  -243,  -241,  -231,
  -244,  -246,  -315,  -250,  -251,  -236,  -315,  -233,   -61,  -315,
  -315,  -315,   -18,   -66,  -315,  -253,   -69,   -42,   -71,   -47,
   -36,   -73,   -46,   -14,   -75,   -45,   -15,   -77,   -48,   -44,
   -16,   -79,   -43,  -315,   -96,   -51,  -315,  -315,  -315,   -55,
   -58,  -315,   -25,  -315,  -315,  -313,  -288,  -315,  -315,  -273,
  -315,  -315,  -291,  -315,  -315,  -283,   -94,  -315,  -279,   -48,
  -315,  -278,  -315,   -14,  -315,  -315,  -157,  -159,  -289,  -315,
  -272,  -274,   -81,  -275,  -315,  -276,  -315,  -277,  -163,  -185,
  -315,  -315,  -212,  -315,  -214,  -315,  -315,  -207,  -315,  -208,
  -196,  -191,  -210,  -315,  -315,  -315,  -315,  -100,  -101,  -315,
  -315,  -104,  -127,  -132,  -315,  -315,  -147,  -315,  -315,  -315,
  -146,  -315,  -315,  -315,  -162,  -311,  -315,  -267,  -164,  -315,
  -150,  -140,  -315,  -149,  -315,  -315,  -136,  -315,  -143,  -315,
  -217,  -315,  -315,   -98,  -315,  -234,  -249,  -256,  -255,  -315,
  -248,  -315,  -315,  -235,  -315,  -315,   -38,  -315,   -31,  -315,
  -315,  -315,  -315,  -315,   -23,  -315,  -254,  -255,  -315,  -315,
  -315,  -315,   -33,  -315,  -315,  -315,   -32,  -315,  -315,  -315,
  -315,  -315,  -315,   -39,   -40,  -315,  -315,  -315,  -232,  -315,
  -315,  -315,  -315,  -315,   -37,  -315,  -315,  -183,  -315,  -284,
  -290,  -315,  -285,  -315,  -315,  -315,  -315,   -86,   -87,   -88,
   -89,   -90,   -91,   -92,   -93,   -83,  -315,   -84,   -85,  -315,
  -303,  -315,  -304,  -305,  -315,  -292,  -315,  -315,  -315,  -171,
  -199,  -315,  -215,  -315,  -315,  -315,  -197,  -205,  -206,  -315,
  -315,  -315,  -190,  -107,  -106,  -131,  -130,  -126,  -315,  -145,
  -128,  -118,  -111,  -112,  -315,  -113,  -315,  -114,  -115,  -116,
  -129,  -315,  -270,  -134,  -151,  -138,  -315,  -137,  -223,  -221,
  -218,  -247,  -245,  -315,  -315,  -257,  -315,  -315,  -263,  -259,
  -315,  -252,   -59,   -60,   -10,   -11,  -315,   -63,   -64,   -65,
   -62,  -315,   -67,   -68,   -70,   -29,  -315,   -34,   -27,   -30,
  -315,   -72,   -74,   -76,  -315,   -78,  -315,  -315,   -17,   -52,
   -53,   -54,   -57,   -56,  -315,    -4,  -315,  -315,  -315,  -286,
  -315,  -315,  -315,  -315,  -315,   -82,  -302,  -280,  -306,   -95,
  -315,  -282,  -213,  -216,  -204,  -315,  -315,  -200,  -201,  -202,
  -315,  -315,  -117,  -315,  -268,  -315,  -315,  -315,  -265,  -261,
  -315,  -264,  -258,  -260,   -12,   -13,   -21,  -315,  -315,   -28,
   -26,  -315,   -41,  -315,   -49,   -22,  -315,   -19,  -315,  -315,
  -315,    -3,   -20,  -315,  -315,  -315,  -315,  -315,  -315,  -315,
  -281,  -315,  -198,  -315,  -315,  -120,  -124,  -269,  -271,  -135,
  -266,  -262,   -24,   -35,   -80,  -315,    -8,    -5,    -6,    -2,
    -7,  -293,  -295,  -296,  -315,  -315,  -315,  -315,  -315,  -315,
  -108,  -125,  -315,  -315,  -315,   -50,    -9,  -315,  -315,  -315,
  -315,  -315,  -298,  -203,  -315,  -121,  -315,  -123,  -294,  -297,
  -301,  -300,  -299,  -315,  -122,  -315,  -119 ]

racc_goto_table = [
   174,   168,    83,   221,   258,   239,   316,   257,    78,   142,
    90,   365,   261,   245,   122,   188,   132,   386,   251,   118,
   313,   253,    89,   462,   259,    95,    11,   228,    84,   126,
   396,   276,   230,   378,    10,    58,   245,   106,   108,   185,
   454,   254,    36,   296,   405,   119,   123,   129,    68,   225,
    67,   229,    90,   232,   233,   234,   235,    90,    10,   264,
    76,   424,    90,   405,   247,   178,    36,   190,   286,    22,
   555,   262,   236,   241,   255,    36,   516,   244,    36,   519,
   272,   381,   266,    36,   564,   126,   126,   249,   432,    36,
   433,   330,   168,    22,   381,   314,   431,   335,    41,   138,
   324,   435,    69,   412,   413,    72,    36,   442,   443,   294,
    79,   417,   418,   419,   420,   446,   447,   399,   186,   331,
   422,   423,    41,    36,   346,   426,    36,   146,   206,    77,
   401,    41,   174,   168,    41,    74,    75,   240,   364,    41,
   392,   174,   168,   257,   436,    41,   369,   370,   371,   472,
   143,   391,   261,   186,   444,   416,   245,   508,   509,   525,
   377,    36,    41,   229,   232,   278,   439,   440,   441,    66,
    24,    17,    47,   230,   nil,   137,   nil,   297,   nil,    41,
   nil,   230,    41,   nil,   207,   nil,   nil,   174,   168,   nil,
   nil,   427,   nil,    90,    64,   nil,    47,   357,   317,   174,
   168,    90,   nil,   168,   168,   326,   362,   nil,   nil,   168,
   168,   168,   168,   381,    80,   nil,   nil,    41,   168,   168,
   168,   nil,   397,   421,   186,   126,   354,   168,   168,   168,
   nil,   168,   206,   455,   330,   nil,   nil,   nil,   168,   168,
   168,   168,   168,   459,   nil,   nil,   nil,    78,   206,   206,
   nil,   512,   398,   nil,   457,   nil,   nil,   nil,   nil,   218,
   nil,   461,   nil,   nil,   410,   nil,    55,   nil,   nil,   nil,
   nil,   nil,   nil,    65,   nil,    72,    79,   nil,   nil,    55,
   nil,   174,   168,   nil,   494,   nil,   nil,    73,   207,   218,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   278,    88,   nil,   207,   207,   nil,   nil,   317,   nil,
   nil,   nil,   nil,   nil,   nil,   280,    36,   nil,   nil,   563,
   297,    36,   174,   168,   nil,   nil,   nil,   nil,   430,   nil,
   nil,   477,   434,   nil,   nil,   nil,   317,    36,   nil,   nil,
    36,   nil,   nil,   143,   nil,   nil,   463,   nil,   143,   448,
   nil,   237,   nil,    88,   450,   451,   168,   nil,   nil,   518,
   nil,   nil,   257,   510,   143,   nil,   nil,   143,   nil,   nil,
   453,   nil,    41,   513,   nil,   523,   nil,    41,   206,   nil,
   nil,   nil,   nil,   381,   nil,   nil,   273,   480,   nil,   nil,
   nil,   nil,   nil,    41,   nil,   nil,    41,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   531,   532,   533,   524,
   168,   526,   168,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   511,   nil,   539,   nil,   nil,   541,   514,   nil,
   nil,   nil,   nil,   nil,   207,   nil,   nil,   nil,   nil,   nil,
   nil,   552,   522,   546,   168,    36,   nil,   nil,   nil,   nil,
   558,    80,   560,   561,   562,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   359,   nil,   143,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    41,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   527,   nil,   528,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   534,   535,   536,
   537 ]

racc_goto_check = [
     7,    16,    11,    46,    64,    34,    10,    15,    73,    12,
    45,    44,    52,    43,    54,    87,    70,    40,    43,    11,
    18,    43,    36,    69,    34,    49,    89,    53,    88,    38,
    40,    78,    68,    44,    56,    37,    43,    47,    48,    11,
    83,    62,    60,    78,    79,    88,    48,    47,    37,    45,
    89,    45,    45,    45,    45,    45,    45,    45,    56,    53,
    72,    23,    45,    79,    45,    30,    60,    88,    16,    57,
    41,    54,    49,    36,    11,    60,    42,    49,    60,    42,
    70,    10,    11,    60,    41,    38,    38,    47,    25,    60,
    26,    81,    16,    57,    10,    16,    24,    81,    61,    72,
    16,    27,    57,    20,    20,    57,    60,    19,    19,    11,
    57,    21,    21,    21,    21,     4,     4,    71,    56,    87,
    22,    22,    61,    60,    29,    14,    60,    74,    60,    75,
    77,    61,     7,    16,    61,    31,    61,    35,    46,    61,
    64,     7,    16,    15,    10,    61,    46,    46,    46,    40,
    57,    80,    52,    56,    10,     8,    43,    83,    83,     6,
    46,    60,    61,    45,    45,    72,    18,    18,    18,    50,
     2,     1,    63,    68,   nil,    61,   nil,    72,   nil,    61,
   nil,    68,    61,   nil,    61,   nil,   nil,     7,    16,   nil,
   nil,    15,   nil,    45,    63,   nil,    63,    30,     5,     7,
    16,    45,   nil,    16,    16,     5,    30,   nil,   nil,    16,
    16,    16,    16,    10,    63,   nil,   nil,    61,    16,    16,
    16,   nil,    11,    12,    56,    38,     5,    16,    16,    16,
   nil,    16,    60,    15,    81,   nil,   nil,   nil,    16,    16,
    16,    16,    16,    15,   nil,   nil,   nil,    73,    60,    60,
   nil,    44,    30,   nil,    81,   nil,   nil,   nil,   nil,    63,
   nil,    81,   nil,   nil,    30,   nil,    32,   nil,   nil,   nil,
   nil,   nil,   nil,    32,   nil,    57,    57,   nil,   nil,    32,
   nil,     7,    16,   nil,    18,   nil,   nil,    32,    61,    63,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    72,    32,   nil,    61,    61,   nil,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,    63,    60,   nil,   nil,    40,
    72,    60,     7,    16,   nil,   nil,   nil,   nil,     5,   nil,
   nil,    12,     5,   nil,   nil,   nil,     5,    60,   nil,   nil,
    60,   nil,   nil,    57,   nil,   nil,    30,   nil,    57,     5,
   nil,    32,   nil,    32,     5,     5,    16,   nil,   nil,    64,
   nil,   nil,    15,    81,    57,   nil,   nil,    57,   nil,   nil,
    56,   nil,    61,    34,   nil,    15,   nil,    61,    60,   nil,
   nil,   nil,   nil,    10,   nil,   nil,    32,    30,   nil,   nil,
   nil,   nil,   nil,    61,   nil,   nil,    61,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    81,    81,    81,     7,
    16,     7,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,   nil,    46,   nil,   nil,    46,    45,   nil,
   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,   nil,   nil,
   nil,    81,    11,     7,    16,    60,   nil,   nil,   nil,   nil,
    81,    63,    81,    81,    81,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    32,   nil,    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,     5,     5,
     5 ]

racc_goto_pointer = [
   nil,   171,   170,   nil,  -211,    21,  -334,   -82,  -134,   nil,
  -171,   -45,   -72,   nil,  -179,  -113,   -81,   nil,  -153,  -215,
  -181,  -179,  -179,  -240,  -212,  -221,  -220,  -211,   nil,   -75,
   -17,    98,   250,   nil,   -97,    34,   -30,    19,   -37,   nil,
  -235,  -472,  -397,   -93,  -215,   -43,   -87,   -21,   -20,   -28,
   146,   nil,  -110,   -66,   -52,   nil,    34,    69,   nil,   nil,
    42,    98,   -76,   172,  -116,   nil,   nil,   nil,   -63,  -338,
   -54,  -154,    22,   -31,    46,    91,   nil,  -144,  -112,  -234,
  -105,   -97,   nil,  -296,   nil,   nil,   nil,   -71,   -19,    26,
   nil ]

racc_goto_default = [
   nil,   nil,   nil,   498,   nil,   209,   nil,   212,   nil,   182,
   150,   189,   406,   160,   nil,   196,   199,   173,   175,   179,
   180,   148,   153,   156,   158,   161,   164,   167,   171,   nil,
   nil,   nil,   238,    56,   nil,   nil,   nil,   nil,   112,   384,
   nil,   nil,   nil,   104,   nil,   155,   nil,   nil,   nil,   nil,
   nil,   127,   128,   nil,   nil,     9,    85,    87,    62,    33,
    94,    96,    63,   224,   nil,     1,     7,    13,    91,   222,
   nil,   133,    39,    43,   nil,   nil,   140,   141,   407,   277,
   nil,   208,   210,   211,   213,   215,   217,   nil,   nil,   nil,
    18 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 123, :_reduce_1,
  2, 125, :_reduce_2,
  1, 125, :_reduce_3,
  1, 126, :_reduce_none,
  3, 126, :_reduce_5,
  3, 126, :_reduce_6,
  3, 126, :_reduce_none,
  1, 128, :_reduce_none,
  2, 128, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  2, 130, :_reduce_none,
  2, 130, :_reduce_none,
  1, 131, :_reduce_14,
  1, 131, :_reduce_15,
  1, 131, :_reduce_16,
  3, 131, :_reduce_17,
  1, 131, :_reduce_18,
  4, 131, :_reduce_19,
  4, 131, :_reduce_20,
  4, 131, :_reduce_21,
  4, 131, :_reduce_22,
  2, 131, :_reduce_23,
  5, 131, :_reduce_24,
  1, 135, :_reduce_25,
  4, 135, :_reduce_none,
  3, 135, :_reduce_27,
  4, 135, :_reduce_28,
  3, 135, :_reduce_29,
  3, 135, :_reduce_none,
  2, 135, :_reduce_31,
  2, 135, :_reduce_none,
  2, 135, :_reduce_none,
  1, 136, :_reduce_34,
  3, 136, :_reduce_35,
  1, 138, :_reduce_36,
  2, 138, :_reduce_none,
  2, 138, :_reduce_none,
  2, 138, :_reduce_39,
  2, 138, :_reduce_none,
  4, 138, :_reduce_none,
  1, 139, :_reduce_42,
  1, 139, :_reduce_43,
  1, 139, :_reduce_44,
  1, 139, :_reduce_45,
  1, 139, :_reduce_46,
  1, 139, :_reduce_47,
  1, 140, :_reduce_48,
  4, 140, :_reduce_49,
  6, 140, :_reduce_none,
  1, 141, :_reduce_51,
  3, 141, :_reduce_52,
  3, 141, :_reduce_53,
  3, 141, :_reduce_54,
  1, 142, :_reduce_55,
  3, 142, :_reduce_56,
  3, 142, :_reduce_57,
  1, 143, :_reduce_58,
  3, 143, :_reduce_59,
  3, 143, :_reduce_60,
  1, 144, :_reduce_61,
  3, 144, :_reduce_62,
  3, 144, :_reduce_63,
  3, 144, :_reduce_64,
  3, 144, :_reduce_65,
  1, 145, :_reduce_66,
  3, 145, :_reduce_67,
  3, 145, :_reduce_68,
  1, 146, :_reduce_69,
  3, 146, :_reduce_70,
  1, 147, :_reduce_71,
  3, 147, :_reduce_72,
  1, 148, :_reduce_73,
  3, 148, :_reduce_74,
  1, 149, :_reduce_75,
  3, 149, :_reduce_76,
  1, 150, :_reduce_77,
  3, 150, :_reduce_78,
  1, 129, :_reduce_79,
  5, 129, :_reduce_80,
  1, 137, :_reduce_81,
  3, 137, :_reduce_82,
  1, 151, :_reduce_83,
  1, 151, :_reduce_84,
  1, 151, :_reduce_85,
  1, 151, :_reduce_86,
  1, 151, :_reduce_87,
  1, 151, :_reduce_88,
  1, 151, :_reduce_89,
  1, 151, :_reduce_90,
  1, 151, :_reduce_91,
  1, 151, :_reduce_92,
  1, 151, :_reduce_93,
  1, 127, :_reduce_94,
  3, 127, :_reduce_none,
  1, 152, :_reduce_96,
  1, 153, :_reduce_97,
  3, 153, :_reduce_98,
  1, 155, :_reduce_99,
  3, 155, :_reduce_100,
  1, 156, :_reduce_101,
  1, 154, :_reduce_102,
  1, 154, :_reduce_103,
  1, 157, :_reduce_104,
  1, 159, :_reduce_105,
  4, 159, :_reduce_106,
  4, 159, :_reduce_107,
  7, 159, :_reduce_108,
  1, 160, :_reduce_109,
  1, 160, :_reduce_110,
  1, 161, :_reduce_111,
  1, 161, :_reduce_112,
  1, 161, :_reduce_113,
  1, 161, :_reduce_114,
  1, 161, :_reduce_115,
  1, 161, :_reduce_116,
  2, 162, :_reduce_none,
  1, 162, :_reduce_118,
  4, 163, :_reduce_119,
  1, 164, :_reduce_120,
  3, 164, :_reduce_121,
  4, 164, :_reduce_122,
  3, 164, :_reduce_none,
  5, 165, :_reduce_124,
  6, 165, :_reduce_125,
  3, 165, :_reduce_126,
  2, 169, :_reduce_127,
  3, 169, :_reduce_128,
  3, 169, :_reduce_129,
  3, 169, :_reduce_130,
  3, 170, :_reduce_131,
  2, 170, :_reduce_132,
  1, 172, :_reduce_133,
  4, 172, :_reduce_134,
  5, 173, :_reduce_135,
  2, 174, :_reduce_136,
  3, 174, :_reduce_137,
  3, 174, :_reduce_138,
  1, 176, :_reduce_139,
  2, 176, :_reduce_140,
  3, 177, :_reduce_141,
  3, 177, :_reduce_142,
  4, 177, :_reduce_143,
  3, 177, :_reduce_144,
  5, 177, :_reduce_145,
  4, 177, :_reduce_146,
  4, 177, :_reduce_147,
  3, 177, :_reduce_148,
  4, 177, :_reduce_149,
  4, 177, :_reduce_150,
  5, 177, :_reduce_151,
  2, 178, :_reduce_152,
  3, 178, :_reduce_153,
  1, 178, :_reduce_154,
  1, 179, :_reduce_155,
  2, 179, :_reduce_156,
  1, 179, :_reduce_157,
  2, 179, :_reduce_158,
  1, 179, :_reduce_159,
  2, 179, :_reduce_160,
  1, 180, :_reduce_161,
  3, 180, :_reduce_162,
  1, 184, :_reduce_163,
  3, 184, :_reduce_164,
  1, 181, :_reduce_165,
  1, 181, :_reduce_166,
  1, 181, :_reduce_167,
  1, 181, :_reduce_168,
  1, 181, :_reduce_169,
  1, 158, :_reduce_170,
  3, 158, :_reduce_171,
  1, 182, :_reduce_172,
  1, 182, :_reduce_173,
  1, 182, :_reduce_174,
  1, 182, :_reduce_175,
  1, 182, :_reduce_176,
  1, 182, :_reduce_177,
  1, 182, :_reduce_178,
  1, 182, :_reduce_179,
  1, 182, :_reduce_180,
  1, 182, :_reduce_181,
  1, 182, :_reduce_182,
  1, 182, :_reduce_183,
  1, 182, :_reduce_184,
  4, 182, :_reduce_185,
  1, 182, :_reduce_186,
  1, 182, :_reduce_187,
  1, 182, :_reduce_188,
  1, 182, :_reduce_189,
  5, 187, :_reduce_190,
  4, 187, :_reduce_191,
  2, 187, :_reduce_192,
  1, 189, :_reduce_193,
  1, 189, :_reduce_194,
  1, 171, :_reduce_195,
  2, 171, :_reduce_196,
  1, 166, :_reduce_197,
  3, 166, :_reduce_198,
  3, 190, :_reduce_199,
  4, 190, :_reduce_none,
  4, 190, :_reduce_none,
  4, 190, :_reduce_none,
  7, 190, :_reduce_none,
  4, 190, :_reduce_none,
  3, 190, :_reduce_none,
  2, 175, :_reduce_206,
  1, 175, :_reduce_207,
  2, 167, :_reduce_208,
  1, 167, :_reduce_209,
  2, 167, :_reduce_210,
  1, 167, :_reduce_211,
  1, 168, :_reduce_212,
  3, 168, :_reduce_213,
  1, 191, :_reduce_214,
  2, 191, :_reduce_215,
  3, 191, :_reduce_216,
  4, 188, :_reduce_217,
  5, 188, :_reduce_218,
  2, 188, :_reduce_219,
  1, 192, :_reduce_220,
  3, 192, :_reduce_221,
  1, 193, :_reduce_222,
  3, 193, :_reduce_223,
  1, 183, :_reduce_224,
  1, 183, :_reduce_225,
  1, 183, :_reduce_226,
  1, 183, :_reduce_227,
  2, 185, :_reduce_228,
  1, 185, :_reduce_229,
  1, 195, :_reduce_230,
  3, 195, :_reduce_231,
  4, 195, :_reduce_none,
  3, 195, :_reduce_none,
  4, 195, :_reduce_234,
  4, 195, :_reduce_235,
  3, 195, :_reduce_236,
  1, 194, :_reduce_237,
  1, 194, :_reduce_none,
  2, 194, :_reduce_239,
  2, 194, :_reduce_240,
  3, 194, :_reduce_241,
  1, 197, :_reduce_242,
  2, 197, :_reduce_243,
  1, 134, :_reduce_244,
  3, 134, :_reduce_245,
  1, 198, :_reduce_246,
  3, 198, :_reduce_247,
  2, 199, :_reduce_248,
  2, 199, :_reduce_249,
  1, 199, :_reduce_250,
  1, 196, :_reduce_none,
  3, 196, :_reduce_none,
  1, 132, :_reduce_none,
  2, 132, :_reduce_none,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  2, 200, :_reduce_none,
  3, 201, :_reduce_none,
  2, 201, :_reduce_none,
  3, 201, :_reduce_none,
  3, 201, :_reduce_none,
  4, 201, :_reduce_none,
  2, 201, :_reduce_none,
  3, 201, :_reduce_none,
  3, 201, :_reduce_none,
  4, 201, :_reduce_none,
  1, 186, :_reduce_none,
  3, 186, :_reduce_none,
  4, 186, :_reduce_none,
  1, 202, :_reduce_none,
  3, 202, :_reduce_none,
  1, 203, :_reduce_272,
  1, 203, :_reduce_273,
  1, 203, :_reduce_274,
  1, 203, :_reduce_275,
  1, 203, :_reduce_276,
  1, 203, :_reduce_277,
  1, 203, :_reduce_278,
  1, 203, :_reduce_279,
  3, 204, :_reduce_none,
  4, 204, :_reduce_none,
  3, 204, :_reduce_none,
  2, 133, :_reduce_283,
  3, 133, :_reduce_284,
  3, 133, :_reduce_285,
  4, 133, :_reduce_286,
  1, 210, :_reduce_287,
  2, 210, :_reduce_288,
  1, 209, :_reduce_289,
  2, 209, :_reduce_290,
  1, 205, :_reduce_291,
  2, 205, :_reduce_292,
  5, 206, :_reduce_293,
  7, 206, :_reduce_294,
  5, 206, :_reduce_295,
  5, 207, :_reduce_none,
  7, 207, :_reduce_none,
  6, 207, :_reduce_none,
  7, 207, :_reduce_none,
  7, 207, :_reduce_none,
  7, 207, :_reduce_none,
  3, 208, :_reduce_none,
  2, 208, :_reduce_none,
  2, 208, :_reduce_none,
  2, 208, :_reduce_305,
  3, 208, :_reduce_306,
  1, 124, :_reduce_307,
  2, 124, :_reduce_308,
  1, 211, :_reduce_309,
  1, 211, :_reduce_310,
  4, 212, :_reduce_311,
  3, 212, :_reduce_312,
  3, 212, :_reduce_313,
  2, 212, :_reduce_314 ]

racc_reduce_n = 315

racc_shift_n = 567

racc_token_table = {
  false => 0,
  :error => 1,
  ";" => 2,
  "{" => 3,
  "}" => 4,
  "," => 5,
  ":" => 6,
  "=" => 7,
  "(" => 8,
  ")" => 9,
  "[" => 10,
  "]" => 11,
  "." => 12,
  "&" => 13,
  "!" => 14,
  "~" => 15,
  "-" => 16,
  "+" => 17,
  "*" => 18,
  "/" => 19,
  "%" => 20,
  "<" => 21,
  ">" => 22,
  "^" => 23,
  "|" => 24,
  "?" => 25,
  :IDENTIFIER => 26,
  :CONSTANT => 27,
  :STRING_LITERAL => 28,
  :SYSTEM_LOC => 29,
  :SIZEOF => 30,
  :PTR_OP => 31,
  :INC_OP => 32,
  :DEC_OP => 33,
  :LEFT_OP => 34,
  :RIGHT_OP => 35,
  :LE_OP => 36,
  :GE_OP => 37,
  :EQ_OP => 38,
  :NE_OP => 39,
  :AND_OP => 40,
  :OR_OP => 41,
  :MUL_ASSIGN => 42,
  :DIV_ASSIGN => 43,
  :MOD_ASSIGN => 44,
  :ADD_ASSIGN => 45,
  :SUB_ASSIGN => 46,
  :LEFT_ASSIGN => 47,
  :RIGHT_ASSIGN => 48,
  :AND_ASSIGN => 49,
  :XOR_ASSIGN => 50,
  :OR_ASSIGN => 51,
  :TYPE_NAME => 52,
  :BOOLEAN => 53,
  :TYPEDEF => 54,
  :EXTERN => 55,
  :STATIC => 56,
  :AUTO => 57,
  :REGISTER => 58,
  :CHAR => 59,
  :SHORT => 60,
  :INT => 61,
  :LONG => 62,
  :SIGNED => 63,
  :UNSIGNED => 64,
  :FLOAT => 65,
  :DOUBLE => 66,
  :CONST => 67,
  :VOLATILE => 68,
  :VOID => 69,
  :STRUCT => 70,
  :UNION => 71,
  :ENUM => 72,
  :ELLIPSIS => 73,
  :CASE => 74,
  :DEFAULT => 75,
  :IF => 76,
  :ELSE => 77,
  :SWITCH => 78,
  :WHILE => 79,
  :DO => 80,
  :FOR => 81,
  :GOTO => 82,
  :CONTINUE => 83,
  :BREAK => 84,
  :RETURN => 85,
  :DECLSPEC => 86,
  :DLLIMPORT => 87,
  :DLLEXPORT => 88,
  :IMPORT => 89,
  :AT_INTERFACE => 90,
  :AT_IMPLEMENTATION => 91,
  :AT_PROTOCOL => 92,
  :AT_END => 93,
  :AT_CLASS => 94,
  :AT_PRIVATE => 95,
  :AT_PUBLIC => 96,
  :AT_PROTECTED => 97,
  :AT_ENCODE => 98,
  :AT_SELECTOR => 99,
  :AT_TRY => 100,
  :AT_CATCH => 101,
  :AT_THROW => 102,
  :AT_PROPERTY => 103,
  :AT_SYNTHESIZE => 104,
  :AT_OPTIONAL => 105,
  :AT_REQUIRED => 106,
  :WEAK => 107,
  :STRONG => 108,
  :SELF => 109,
  :AT_STRING_LITERAL => 110,
  :ID => 111,
  :SEL => 112,
  :BOOL => 113,
  :UNICHAR => 114,
  :CLASS => 115,
  :IN => 116,
  :OUT => 117,
  :INOUT => 118,
  :BYREF => 119,
  :BYCOPY => 120,
  :ONEWAY => 121 }

racc_nt_base = 122

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "\",\"",
  "\":\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\".\"",
  "\"&\"",
  "\"!\"",
  "\"~\"",
  "\"-\"",
  "\"+\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"<\"",
  "\">\"",
  "\"^\"",
  "\"|\"",
  "\"?\"",
  "IDENTIFIER",
  "CONSTANT",
  "STRING_LITERAL",
  "SYSTEM_LOC",
  "SIZEOF",
  "PTR_OP",
  "INC_OP",
  "DEC_OP",
  "LEFT_OP",
  "RIGHT_OP",
  "LE_OP",
  "GE_OP",
  "EQ_OP",
  "NE_OP",
  "AND_OP",
  "OR_OP",
  "MUL_ASSIGN",
  "DIV_ASSIGN",
  "MOD_ASSIGN",
  "ADD_ASSIGN",
  "SUB_ASSIGN",
  "LEFT_ASSIGN",
  "RIGHT_ASSIGN",
  "AND_ASSIGN",
  "XOR_ASSIGN",
  "OR_ASSIGN",
  "TYPE_NAME",
  "BOOLEAN",
  "TYPEDEF",
  "EXTERN",
  "STATIC",
  "AUTO",
  "REGISTER",
  "CHAR",
  "SHORT",
  "INT",
  "LONG",
  "SIGNED",
  "UNSIGNED",
  "FLOAT",
  "DOUBLE",
  "CONST",
  "VOLATILE",
  "VOID",
  "STRUCT",
  "UNION",
  "ENUM",
  "ELLIPSIS",
  "CASE",
  "DEFAULT",
  "IF",
  "ELSE",
  "SWITCH",
  "WHILE",
  "DO",
  "FOR",
  "GOTO",
  "CONTINUE",
  "BREAK",
  "RETURN",
  "DECLSPEC",
  "DLLIMPORT",
  "DLLEXPORT",
  "IMPORT",
  "AT_INTERFACE",
  "AT_IMPLEMENTATION",
  "AT_PROTOCOL",
  "AT_END",
  "AT_CLASS",
  "AT_PRIVATE",
  "AT_PUBLIC",
  "AT_PROTECTED",
  "AT_ENCODE",
  "AT_SELECTOR",
  "AT_TRY",
  "AT_CATCH",
  "AT_THROW",
  "AT_PROPERTY",
  "AT_SYNTHESIZE",
  "AT_OPTIONAL",
  "AT_REQUIRED",
  "WEAK",
  "STRONG",
  "SELF",
  "AT_STRING_LITERAL",
  "ID",
  "SEL",
  "BOOL",
  "UNICHAR",
  "CLASS",
  "IN",
  "OUT",
  "INOUT",
  "BYREF",
  "BYCOPY",
  "ONEWAY",
  "$start",
  "target",
  "translation_unit",
  "selector_component",
  "selector_with_arguments",
  "expression",
  "struct_component_expression",
  "conditional_expression",
  "selector",
  "primary_expression",
  "type_name",
  "compound_statement",
  "parameter_type_list",
  "postfix_expression",
  "argument_expression_list",
  "assignment_expression",
  "unary_expression",
  "unary_operator",
  "cast_expression",
  "multiplicative_expression",
  "additive_expression",
  "shift_expression",
  "relational_expression",
  "equality_expression",
  "and_expression",
  "exclusive_or_expression",
  "inclusive_or_expression",
  "logical_and_expression",
  "logical_or_expression",
  "assignment_operator",
  "constant_expression",
  "class_name_list",
  "class_identifier_or_type_name",
  "class_with_superclass",
  "category_name",
  "inherited_protocols",
  "protocol_list",
  "class_name_declaration",
  "class_or_instance_method_specifier",
  "do_atribute_specifier",
  "objc_declaration_specifiers",
  "selector_argument_declaration",
  "selector_with_argument_declaration",
  "method_declaration",
  "property_attributes_list",
  "specifier_qualifier_list",
  "struct_declarator_list",
  "method_declaration_list",
  "ivar_declaration_list",
  "struct_declaration_list",
  "class_implementation",
  "method_implementation_declaration",
  "method_implementation",
  "ivar_list",
  "method_implementation_list",
  "objc_declaration",
  "declaration",
  "declaration_specifiers",
  "init_declarator_list",
  "storage_class_specifier",
  "type_specifier",
  "type_qualifier",
  "init_declarator",
  "declarator",
  "initializer",
  "struct_or_union_specifier",
  "enum_specifier",
  "struct_or_union",
  "struct_declaration",
  "struct_declarator",
  "enumerator_list",
  "enumerator",
  "pointer",
  "direct_declarator",
  "identifier_list",
  "type_qualifier_list",
  "parameter_list",
  "parameter_declaration",
  "abstract_declarator",
  "direct_abstract_declarator",
  "initializer_list",
  "statement",
  "labeled_statement",
  "expression_statement",
  "selection_statement",
  "iteration_statement",
  "jump_statement",
  "statement_list",
  "declaration_list",
  "external_declaration",
  "function_definition" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 45)
  def _reduce_1(val, _values, result)
     @result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 48)
  def _reduce_2(val, _values, result)
     result = make_node(':', val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 49)
  def _reduce_3(val, _values, result)
     result = make_node(':', nil, nil) 
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 54)
  def _reduce_5(val, _values, result)
     result = make_node(':', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 55)
  def _reduce_6(val, _values, result)
     val[1].right = val[2]
    	                                                            result = make_node(',', val[0], val[1])

    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 74)
  def _reduce_14(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 75)
  def _reduce_15(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 76)
  def _reduce_16(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 77)
  def _reduce_17(val, _values, result)
     result = make_node('(', val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 78)
  def _reduce_18(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 79)
  def _reduce_19(val, _values, result)
     result = make_node('M', val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 80)
  def _reduce_20(val, _values, result)
     result = make_node('M', val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 81)
  def _reduce_21(val, _values, result)
     result = node_set_children(val[0], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 82)
  def _reduce_22(val, _values, result)
     result = node_set_children(val[0], val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 84)
  def _reduce_23(val, _values, result)
     result = make_node('b', nil, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 85)
  def _reduce_24(val, _values, result)
     result = make_node('b', val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 89)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 91)
  def _reduce_27(val, _values, result)
     result = make_node('f', val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 92)
  def _reduce_28(val, _values, result)
     result = make_node('f', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 93)
  def _reduce_29(val, _values, result)
     result = node_set_children(val[1], val[0], val[2]) 
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 95)
  def _reduce_31(val, _values, result)
     result = make_node('d', val[0], val[1]) 
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 101)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 102)
  def _reduce_35(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 106)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 109)
  def _reduce_39(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 115)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 116)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 117)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 118)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 119)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 120)
  def _reduce_47(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 124)
  def _reduce_48(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 125)
  def _reduce_49(val, _values, result)
     result = make_node('c', val[1], val[3]) 
    result
  end
.,.,

# reduce 50 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 130)
  def _reduce_51(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 131)
  def _reduce_52(val, _values, result)
     result = make_node('*', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 132)
  def _reduce_53(val, _values, result)
     result = make_node('/', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 133)
  def _reduce_54(val, _values, result)
     result = make_node('%', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 137)
  def _reduce_55(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 138)
  def _reduce_56(val, _values, result)
     result = make_node('+', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 139)
  def _reduce_57(val, _values, result)
     result = make_node('-', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 143)
  def _reduce_58(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 144)
  def _reduce_59(val, _values, result)
     result = make_node(:LEFT_OP, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 145)
  def _reduce_60(val, _values, result)
     result = make_node(:RIGHT_OP, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 149)
  def _reduce_61(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 150)
  def _reduce_62(val, _values, result)
     result = make_node('<', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 151)
  def _reduce_63(val, _values, result)
     result = make_node('>', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 152)
  def _reduce_64(val, _values, result)
     result = make_node(:LE_OP, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 153)
  def _reduce_65(val, _values, result)
     result = make_node(:GE_OP, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 157)
  def _reduce_66(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 158)
  def _reduce_67(val, _values, result)
     result = make_node(:EQ_OP, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 159)
  def _reduce_68(val, _values, result)
     result = make_node(:NE_OP, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 163)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 164)
  def _reduce_70(val, _values, result)
     result = make_node('&', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 168)
  def _reduce_71(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 169)
  def _reduce_72(val, _values, result)
     result = make_node('^', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 173)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 174)
  def _reduce_74(val, _values, result)
     result = make_node('|', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 178)
  def _reduce_75(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 179)
  def _reduce_76(val, _values, result)
     result = make_node(:AND_OP, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 183)
  def _reduce_77(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 184)
  def _reduce_78(val, _values, result)
     result = make_node(:OR_OP, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 188)
  def _reduce_79(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 189)
  def _reduce_80(val, _values, result)
     result = make_node('?', val[0], make_node(',', val[2], val[4])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 193)
  def _reduce_81(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 194)
  def _reduce_82(val, _values, result)
     result = node_set_children(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 198)
  def _reduce_83(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 199)
  def _reduce_84(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 200)
  def _reduce_85(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 201)
  def _reduce_86(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 202)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 203)
  def _reduce_88(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 204)
  def _reduce_89(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 205)
  def _reduce_90(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 206)
  def _reduce_91(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 207)
  def _reduce_92(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 208)
  def _reduce_93(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 212)
  def _reduce_94(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 217)
  def _reduce_96(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 221)
  def _reduce_97(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 222)
  def _reduce_98(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 226)
  def _reduce_99(val, _values, result)
     result = make_node(',', val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 227)
  def _reduce_100(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 231)
  def _reduce_101(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 235)
  def _reduce_102(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 236)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 240)
  def _reduce_104(val, _values, result)
    result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 245)
  def _reduce_105(val, _values, result)
        	    result = make_node(',', val[0], make_node(',', nil, nil))
    	    register_class_name_from_declaration(val[0].left.value)
    	  
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 249)
  def _reduce_106(val, _values, result)
        	    result = make_node(',', val[0], make_node(',', val[2], nil))
    	    register_class_name_from_declaration(val[0].left.value)
    	  
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 253)
  def _reduce_107(val, _values, result)
        	    result = make_node(',', val[0], make_node(',', nil, val[2]))
    	    register_class_name_from_declaration(val[0].left.value)
    	  
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 257)
  def _reduce_108(val, _values, result)
        	    result = make_node(',', val[0], make_node(',', val[2], val[5]))
    	    register_class_name_from_declaration(val[0].left.value)
    	  
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 263)
  def _reduce_109(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 264)
  def _reduce_110(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 268)
  def _reduce_111(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 269)
  def _reduce_112(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 270)
  def _reduce_113(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 271)
  def _reduce_114(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 272)
  def _reduce_115(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 273)
  def _reduce_116(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 278)
  def _reduce_118(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 282)
  def _reduce_119(val, _values, result)
     result =  make_node(',', val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 286)
  def _reduce_120(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 287)
  def _reduce_121(val, _values, result)
     result =  make_node(':', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 288)
  def _reduce_122(val, _values, result)
     result =  make_node(',', val[0], make_node(':', val[1], val[3])) 
    result
  end
.,.,

# reduce 123 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 294)
  def _reduce_124(val, _values, result)
        	    result = make_node('m', make_node(',', val[0], val[2]), val[4])
    	  
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 297)
  def _reduce_125(val, _values, result)
        	    result = make_node(:AT_PROPERTY, val[2], make_node(',', val[4],val[5]))
    	  
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 300)
  def _reduce_126(val, _values, result)
          	  result = make_node(:AT_PROPERTY, nil, make_node(',', val[1],val[2]))
      	
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 305)
  def _reduce_127(val, _values, result)
     result =  val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 306)
  def _reduce_128(val, _values, result)
     result =  make_node(:AT_OPTIONAL, val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 307)
  def _reduce_129(val, _values, result)
     result =  make_node(:AT_REQUIRED, val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 308)
  def _reduce_130(val, _values, result)
     result =  make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 312)
  def _reduce_131(val, _values, result)
     result =  val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 313)
  def _reduce_132(val, _values, result)
     result =  nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 317)
  def _reduce_133(val, _values, result)
     result = make_node(',', val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 318)
  def _reduce_134(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 323)
  def _reduce_135(val, _values, result)
      	      result = make_node(',', make_node(',', val[0], val[2]), val[4])
  	    
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 328)
  def _reduce_136(val, _values, result)
     result = make_node('m', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 329)
  def _reduce_137(val, _values, result)
     result = make_node('m', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 330)
  def _reduce_138(val, _values, result)
     result = make_node(:AT_SYNTHESIZE, val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 334)
  def _reduce_139(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 335)
  def _reduce_140(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 339)
  def _reduce_141(val, _values, result)
     result = node_set_children(val[0], val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 340)
  def _reduce_142(val, _values, result)
     result = node_set_children(val[0], val[1], nil)	
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 341)
  def _reduce_143(val, _values, result)
     result = node_set_children(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 342)
  def _reduce_144(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[1], nil), nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 343)
  def _reduce_145(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[1], val[2]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 344)
  def _reduce_146(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[1], val[2]), nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 345)
  def _reduce_147(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[1], nil), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 346)
  def _reduce_148(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[1], nil), nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 347)
  def _reduce_149(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[1], val[2]), nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 348)
  def _reduce_150(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[1], nil), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 349)
  def _reduce_151(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[1], val[2]), val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 353)
  def _reduce_152(val, _values, result)
     result = make_node('d', val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 354)
  def _reduce_153(val, _values, result)
     result = make_node('d', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 355)
  def _reduce_154(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 359)
  def _reduce_155(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 360)
  def _reduce_156(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 361)
  def _reduce_157(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 362)
  def _reduce_158(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 363)
  def _reduce_159(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 364)
  def _reduce_160(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 368)
  def _reduce_161(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 369)
  def _reduce_162(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 373)
  def _reduce_163(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 374)
  def _reduce_164(val, _values, result)
     result = make_node('=', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 378)
  def _reduce_165(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 379)
  def _reduce_166(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 380)
  def _reduce_167(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 381)
  def _reduce_168(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 382)
  def _reduce_169(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 386)
  def _reduce_170(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 387)
  def _reduce_171(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 390)
  def _reduce_172(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 391)
  def _reduce_173(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 392)
  def _reduce_174(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 393)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 394)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 395)
  def _reduce_177(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 396)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 397)
  def _reduce_179(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 398)
  def _reduce_180(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 399)
  def _reduce_181(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 400)
  def _reduce_182(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 401)
  def _reduce_183(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 402)
  def _reduce_184(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 403)
  def _reduce_185(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 404)
  def _reduce_186(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 405)
  def _reduce_187(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 406)
  def _reduce_188(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 407)
  def _reduce_189(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 411)
  def _reduce_190(val, _values, result)
     result = node_set_children(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 412)
  def _reduce_191(val, _values, result)
     result = node_set_children(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 413)
  def _reduce_192(val, _values, result)
     result = node_set_children(val[0], val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 417)
  def _reduce_193(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 418)
  def _reduce_194(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 422)
  def _reduce_195(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 423)
  def _reduce_196(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 427)
  def _reduce_197(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 428)
  def _reduce_198(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 432)
  def _reduce_199(val, _values, result)
     result = make_node('i', val[0], val[1]) 
    result
  end
.,.,

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 442)
  def _reduce_206(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 443)
  def _reduce_207(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 447)
  def _reduce_208(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 448)
  def _reduce_209(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 449)
  def _reduce_210(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 450)
  def _reduce_211(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 454)
  def _reduce_212(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 455)
  def _reduce_213(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 459)
  def _reduce_214(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 460)
  def _reduce_215(val, _values, result)
     result = make_node(':', nil, val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 461)
  def _reduce_216(val, _values, result)
     result = make_node(':', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 465)
  def _reduce_217(val, _values, result)
     result = node_set_children(val[0], nil, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 466)
  def _reduce_218(val, _values, result)
     result = node_set_children(val[0], val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 467)
  def _reduce_219(val, _values, result)
     result = node_set_children(val[0], val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 471)
  def _reduce_220(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 472)
  def _reduce_221(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 476)
  def _reduce_222(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 477)
  def _reduce_223(val, _values, result)
     result = make_node('=', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 481)
  def _reduce_224(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 482)
  def _reduce_225(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 483)
  def _reduce_226(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 484)
  def _reduce_227(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 488)
  def _reduce_228(val, _values, result)
     result = make_node('*', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 489)
  def _reduce_229(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 493)
  def _reduce_230(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 494)
  def _reduce_231(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 497)
  def _reduce_234(val, _values, result)
     result = make_node('f', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 498)
  def _reduce_235(val, _values, result)
     result = make_node('f', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 499)
  def _reduce_236(val, _values, result)
     result = make_node('f', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 503)
  def _reduce_237(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 238 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 505)
  def _reduce_239(val, _values, result)
     result = make_node(val[0], val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 506)
  def _reduce_240(val, _values, result)
     result = make_node(val[0], val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 507)
  def _reduce_241(val, _values, result)
     result = make_node(val[0], val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 511)
  def _reduce_242(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 512)
  def _reduce_243(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 516)
  def _reduce_244(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 517)
  def _reduce_245(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 521)
  def _reduce_246(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 522)
  def _reduce_247(val, _values, result)
     result = make_node(',', val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 526)
  def _reduce_248(val, _values, result)
     result = make_node('d', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 527)
  def _reduce_249(val, _values, result)
     result = make_node('d', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 528)
  def _reduce_250(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 571)
  def _reduce_272(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 573)
  def _reduce_273(val, _values, result)
     result = make_node('{', val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 574)
  def _reduce_274(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 575)
  def _reduce_275(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 576)
  def _reduce_276(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 577)
  def _reduce_277(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 578)
  def _reduce_278(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 579)
  def _reduce_279(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 589)
  def _reduce_283(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 590)
  def _reduce_284(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 591)
  def _reduce_285(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 592)
  def _reduce_286(val, _values, result)
     result = make_node(',', val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 596)
  def _reduce_287(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 597)
  def _reduce_288(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 601)
  def _reduce_289(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 602)
  def _reduce_290(val, _values, result)
     result = make_node(',', val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 606)
  def _reduce_291(val, _values, result)
     result = node_set_children(val[0], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 607)
  def _reduce_292(val, _values, result)
     result = node_set_children(val[1], val[0], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 611)
  def _reduce_293(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[2], val[4]), nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 612)
  def _reduce_294(val, _values, result)
     result = node_set_children(val[0], make_node(',', val[2], val[4]), node_set_children(val[5], val[6], nil)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 613)
  def _reduce_295(val, _values, result)
     result = node_set_children(val[0], val[2], val[4]) 
    result
  end
.,.,

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

# reduce 300 omitted

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

module_eval(<<'.,.,', 'objective_c.rb.y', 629)
  def _reduce_305(val, _values, result)
     result = node_set_children(val[0], nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 630)
  def _reduce_306(val, _values, result)
     result = node_set_children(val[0], val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 634)
  def _reduce_307(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 635)
  def _reduce_308(val, _values, result)
     result = make_node ',', val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 640)
  def _reduce_309(val, _values, result)
        	    result = val[0]
    	    deal_with_declaration(result)
    	  
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 644)
  def _reduce_310(val, _values, result)
        	    result = val[0]
    	    deal_with_declaration(result)
    	  
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 650)
  def _reduce_311(val, _values, result)
     puts "first" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 651)
  def _reduce_312(val, _values, result)
     result = make_node('F', make_node(',', val[0], val[1]), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 652)
  def _reduce_313(val, _values, result)
     puts "third" 
    result
  end
.,.,

module_eval(<<'.,.,', 'objective_c.rb.y', 653)
  def _reduce_314(val, _values, result)
     puts "forth" 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class ObjectiveCParser
  end   # module Vienna

# stuff that will come after the definition of ObjectiveCParser
