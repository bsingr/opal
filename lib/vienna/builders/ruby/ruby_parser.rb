#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
  #
# $Id$
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6'
    Racc_Runtime_Revision = '$Id$'

    Racc_Runtime_Core_Version_R = '1.4.6'
    Racc_Runtime_Core_Revision_R = '$Id$'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end


# require 'ctokenizer'
require 'strscan'

module Vienna
  class RubyParser < Racc::Parser

module_eval(<<'...end ruby_parser.rb.y/module_eval...', 'ruby_parser.rb.y', 1446)


...end ruby_parser.rb.y/module_eval...
##### State transition tables begin ###

clist = [
'-10,-522,-66,444,444,451,-522,540,541,-95,782,-100,-98,-96,-522,-522',
'313,314,4,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522',
'-522,-522,-522,-93,-522,-96,696,444,444,-522,-522,-522,-522,-522,-522',
'-450,-87,313,314,444,599,816,-522,-522,-522,313,314,142,-522,-522,-99',
'-522,-95,-95,704,821,-448,626,144,602,-522,-450,-94,-92,-90,-88,452',
'313,314,813,-87,452,264,334,266,-519,-518,313,314,141,-94,822,-448,628',
'142,334,-85,-95,-80,-95,474,-93,-456,325,328,-522,441,441,339,341,344',
'347,322,323,326,329,331,333,336,338,343,345,346,-91,142,-87,145,144',
'-522,-522,-522,-522,-88,-522,-522,-86,-522,-522,-522,-522,-522,441,441',
'-87,-522,-10,-522,-10,-522,-523,-97,705,-97,441,-523,-87,142,500,808',
'-87,-87,596,-523,-523,142,598,805,-523,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,264,145,266,-86,-523',
'-523,-523,-523,-523,-523,-523,264,142,266,-85,805,129,-523,-523,-523',
'-99,551,-523,-523,-523,500,-523,324,327,330,332,335,337,340,342,-523',
'-523,-523,-523,324,327,330,332,335,337,340,342,-100,293,455,129,264',
'-97,266,142,129,264,-97,266,-97,334,803,264,-89,266,593,500,-96,325',
'328,-523,334,-523,339,341,344,347,322,323,326,329,331,333,336,338,343',
'345,346,453,801,594,595,334,-523,-523,-523,-523,-523,-523,-523,334,-523',
'-523,-523,-523,-523,142,-270,614,-523,-523,-523,-270,-523,264,-89,266',
'-91,-94,500,-270,-270,500,800,616,-270,-270,-270,-270,-270,-270,-270',
'-270,-270,-270,-270,-270,-270,-270,-270,-270,-270,829,761,-92,480,-270',
'-270,-270,-270,-270,-270,-270,-518,799,264,-96,266,-96,-270,-270,-270',
'480,142,-270,-270,-270,617,-270,476,477,462,540,541,502,520,773,-270',
'-270,-270,-270,540,541,616,518,519,476,477,324,327,330,332,335,337,340',
'342,159,836,796,324,327,330,332,335,337,340,342,-94,264,-94,266,264',
'-270,266,-270,795,264,155,266,-270,324,327,330,332,335,337,340,342,324',
'327,330,332,335,337,340,342,-270,-270,-270,-270,-270,-270,-270,-270',
'-270,-270,-270,-270,264,-274,266,-270,-270,-270,-274,-270,-447,264,264',
'266,266,-275,-274,-274,-89,-99,551,-274,-274,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-447,-274,-98,697,-275,-275',
'-274,-274,-274,-274,-274,-274,264,356,266,357,-89,-524,617,-274,-274',
'-274,-524,-95,778,-274,-274,-274,-274,-274,-524,-524,829,761,616,-524',
'-524,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524,-524',
'-524,-524,-274,-274,-274,-274,-524,-524,-524,-524,-524,-524,-524,761',
'617,-519,609,-519,-449,-524,-524,-524,-274,609,-524,-524,-524,794,-524',
'-89,616,-386,761,506,546,313,314,-524,-524,-524,-524,-89,-269,334,-449',
'-89,-274,-274,-274,-90,-274,-274,-274,-274,-274,-274,-274,-274,507,508',
'418,-274,334,-274,379,-274,-386,-269,-269,609,325,328,-524,334,-524',
'339,341,344,347,-541,-541,-541,-541,-541,-541,419,420,-94,862,-386,380',
'-386,-386,-305,-451,-524,-524,-524,-524,-524,-524,-524,792,-524,-524',
'-524,-524,-524,264,-522,266,-524,-524,-524,-522,-524,297,298,-305,-305',
'-451,-274,-522,-522,790,-516,840,-522,-522,-522,-522,-522,-522,-522',
'-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,-96,776,-274,-274',
'-522,-522,-522,-522,-522,-522,-522,690,691,784,692,-519,-445,-522,-522',
'-522,32,39,-522,-522,-522,660,-522,324,327,330,332,335,337,340,342,-522',
'-522,-522,-522,-516,-455,-445,-445,-97,779,142,324,327,330,332,335,337',
'340,342,-516,480,-255,324,327,330,332,335,337,340,342,-455,-455,-93',
'-456,334,-522,21,-522,30,-453,44,50,325,328,476,477,497,339,341,344',
'347,-541,-541,-541,-541,-541,-541,142,-522,-522,-522,-522,-522,-522',
'-522,-453,-522,-522,-522,-522,-522,425,8,843,-522,-522,-522,-454,-522',
'-269,-442,61,67,71,844,134,509,510,422,99,105,578,-100,424,25,773,34',
'42,48,56,65,68,72,-454,-269,-269,-442,142,100,108,5,9,16,23,27,609,579',
'580,54,60,66,73,77,86,88,90,93,97,104,142,10,17,609,29,32,39,313,314',
'761,356,130,357,133,87,142,96,103,-455,851,13,18,24,28,33,40,46,119',
'-445,30,-254,44,50,324,327,330,332,335,337,340,342,-275,-80,-455,-455',
'-442,57,334,854,532,546,609,257,142,-445,325,328,787,-452,157,160,162',
'164,113,724,142,-275,-275,-515,-275,-442,-442,61,67,71,531,134,258,259',
'609,99,105,480,-515,-452,25,773,34,42,48,126,128,68,72,-275,-275,723',
'716,142,136,108,5,9,16,23,27,476,477,478,54,60,66,73,77,86,88,90,93',
'97,104,112,10,17,549,29,32,39,707,901,-522,-256,130,142,133,87,142,96',
'103,139,114,13,18,24,28,33,40,46,21,334,30,866,44,50,594,595,462,325',
'328,869,925,118,306,452,682,-522,678,57,670,307,308,309,305,503,142',
'660,324,327,330,332,335,337,340,342,8,926,927,654,-522,-254,-522,-522',
'480,61,67,71,651,134,419,504,880,99,105,-518,142,882,25,635,34,42,48',
'56,65,68,72,625,476,477,524,425,100,108,5,9,16,23,27,613,611,609,54',
'60,66,73,77,86,88,90,93,97,104,609,10,17,588,29,32,39,773,609,-522,142',
'130,-65,133,87,585,96,103,582,581,13,18,24,28,33,40,46,21,609,30,496',
'44,50,546,530,528,324,327,330,332,335,337,340,342,-522,527,57,334,526',
'-257,513,264,306,266,480,325,328,902,505,307,308,309,305,8,903,905,142',
'-522,805,-522,-522,909,61,67,71,80,84,805,476,477,99,105,-518,805,805',
'25,914,34,42,48,56,65,68,72,805,511,918,408,880,100,108,5,9,16,23,27',
'36,129,51,54,60,66,73,77,86,88,90,93,97,104,306,10,17,474,29,32,39,307',
'308,309,305,74,464,82,87,460,96,103,110,609,13,18,24,28,33,40,46,21',
'457,30,456,44,50,450,430,928,467,609,157,160,162,164,469,429,425,787',
'57,157,160,162,164,496,422,474,415,324,327,330,332,335,337,340,342,8',
'880,414,141,611,388,334,321,142,61,67,71,80,134,325,328,878,99,105,304',
'-518,-519,25,805,34,42,48,56,65,68,72,946,805,805,805,880,100,108,5',
'9,16,23,27,36,24,51,54,60,66,73,77,86,88,90,93,97,104,306,10,17,300',
'29,32,39,307,308,309,305,74,296,82,87,142,96,103,110,295,13,18,24,28',
'33,40,46,467,147,157,160,162,164,469,140,111,191,805,199,204,,212,,',
',,57,238,242,,,496,255,178,182,187,196,201,206,209,213,217,,,,,,,,467',
'683,157,160,162,164,469,,324,327,330,332,335,337,340,342,,,,471,,,191',
',199,204,,212,,,,,,238,242,,,,255,178,182,187,196,201,206,209,213,217',
',,,,,,940,483,,,941,,467,,157,160,162,164,469,,218,221,656,,157,160',
'162,164,166,,256,471,,,,,810,,,,,169,,,,,156,159,,,181,185,190,194,198',
'203,208,211,215,219,129,605,491,,,606,,,155,,,163,,,,218,221,,,660,',
',119,,30,256,44,50,324,327,330,332,335,337,340,342,,467,,157,160,162',
'164,469,,181,185,190,194,198,203,208,211,215,219,129,471,,113,,467,468',
'157,160,162,164,469,61,67,71,,134,,,,99,105,,,471,25,,34,42,48,126,128',
'68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
'112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40',
'46,,,,,,,191,,199,204,,212,,118,,,,238,242,57,,408,255,178,182,187,196',
'201,206,209,213,217,324,327,330,332,335,337,340,342,,,179,183,188,,',
',,,,222,226,229,233,235,240,245,248,249,253,180,184,189,193,197,202',
'207,210,214,223,227,230,234,237,,,,250,254,177,395,396,397,398,205,',
',399,400,402,228,404,405,243,90,93,407,104,,,,,,,,,218,221,,,,,,119',
',30,256,44,50,,,,,,,,,,467,,157,160,162,164,469,,181,185,190,194,198',
'203,208,211,215,219,401,471,,113,,467,468,157,160,162,164,469,61,67',
'71,,134,,,,99,105,,,471,25,,34,42,48,126,128,68,72,,,,,,136,275,271',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',130,,133,87,,96,103,,,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212',
',,,,,238,242,57,,549,255,178,182,187,196,201,206,209,213,217,,,467,',
'157,160,162,164,469,,,,,,151,,157,160,162,164,166,471,,,,,,,,191,,199',
'204,169,212,,,,156,159,238,242,,,,255,178,182,187,196,201,206,209,213',
'217,,,,,,155,642,483,163,,643,,467,149,157,160,162,164,469,,218,221',
'656,,157,160,162,164,166,,256,471,,,,,,,,,,169,,,,,156,159,,,181,185',
'190,194,198,203,208,211,215,219,129,744,483,,,746,,,155,,,163,,,,218',
'221,191,,199,204,,212,,,256,,,238,242,,,,255,178,182,187,196,201,206',
'209,213,217,,,181,185,190,194,198,203,208,211,215,219,129,,151,,157',
'160,162,164,166,,,,,,,,,191,,199,204,169,212,,,,156,159,238,242,,,,255',
'178,182,187,196,201,206,209,213,217,,,,,,155,736,491,163,,737,,,630',
',,,,,,218,221,,151,,157,160,162,164,166,256,,,,,,,,,,,,169,,,,,156,159',
',181,185,190,194,198,203,208,211,215,219,129,733,483,,,734,,,,155,,',
'163,,,218,221,630,,,,,119,,30,256,44,50,,,,,,,,,,,,,,,,,,181,185,190',
'194,198,203,208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,144,,,,136,108,5,9,16,23,27,,,,54,60',
'66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96',
'103,139,114,13,18,24,28,33,40,46,,,,,,,145,,,,,,191,118,199,204,,212',
',57,,129,,238,242,,,,255,178,182,187,196,201,206,209,213,217,151,,157',
'160,162,164,166,151,,157,160,162,164,166,,,,,,169,,,,,156,159,169,,',
',,156,159,467,,157,160,162,164,166,,,,,,,155,,,163,,,169,155,,,163,',
'159,,,645,491,,,646,,,,,,,,,,218,221,,,155,,334,-516,,-516,256,-516',
'-516,,325,328,,,,339,341,344,347,-541,-541,-541,-541,-541,-541,,181',
'185,190,194,198,203,208,211,215,219,129,,,-516,,,,,,,,,-516,-516,-516',
',-516,,,,-516,-516,,,,-516,,-516,-516,-516,-516,-516,-516,-516,,,,,',
'-516,-516,-516,-516,-516,-516,-516,,,,-516,-516,-516,-516,-516,-516',
'-516,-516,-516,-516,-516,-516,-516,-516,,-516,-516,-516,,,,,-516,,-516',
'-516,,-516,,-516,-516,-516,-516,-516,-516,-516,-516,-516,119,,30,,44',
'50,-516,324,327,330,332,335,337,340,342,,,,,-516,,-516,,467,,157,160',
'162,164,166,,,,,,,113,,,,,,169,,,61,67,71,159,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,155,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114',
'13,18,24,28,33,40,46,-515,,-515,,-515,-515,151,,157,160,162,164,166',
'118,,,,,,57,,129,,,,169,,,,,156,159,,,,,-515,,,,,,,,,-515,-515,-515',
',-515,,,155,-515,-515,163,,,-515,,-515,-515,-515,-515,-515,-515,-515',
',356,,357,,-515,-515,-515,-515,-515,-515,-515,,,,-515,-515,-515,-515',
'-515,-515,-515,-515,-515,-515,-515,-515,-515,-515,,-515,-515,-515,,',
',,-515,,-515,-515,,-515,,-515,-515,-515,-515,-515,-515,-515,-515,-515',
',,,,,,-515,,,,,191,,199,204,,212,,,-515,,-515,238,242,,,,255,178,182',
'187,196,201,206,209,213,217,,,,,,,,,,,,151,,157,160,162,164,166,656',
',157,160,162,164,166,,,,,191,169,199,204,,212,156,159,169,,,238,242',
'156,159,,255,178,182,187,196,201,206,209,213,217,,,155,,,163,713,491',
',155,714,,163,,,,,,,,218,221,656,,157,160,162,164,166,,256,,,,,,,,,',
',169,,,,,156,159,,,181,185,190,194,198,203,208,211,215,219,129,710,483',
',,711,,,155,,,163,,,,218,221,191,,199,204,,212,,,256,,,238,242,,,,255',
'178,182,187,196,201,206,209,213,217,,,181,185,190,194,198,203,208,211',
'215,219,129,,151,,157,160,162,164,166,,,,,,,,,191,,199,204,169,212,',
',,156,159,238,242,,,,255,178,182,187,196,201,206,209,213,217,,,,,,155',
'645,491,163,,646,,,,,,,,,,218,221,467,,157,160,162,164,166,,256,,,,',
',,,,,,169,,,,,,159,,,181,185,190,194,198,203,208,211,215,219,129,642',
'483,,,643,,,155,,,,,,,218,221,,,,,,119,,30,256,44,50,,,,,,,,,,,,,,,',
',,181,185,190,194,198,203,208,211,215,219,129,,,113,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,467,,157',
'160,162,164,166,118,,,,,,57,,129,,,,169,,,,,,159,,,,,113,,,,,,,,,61',
'67,71,,134,,,155,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,,,,,,,191,,199',
'204,,212,,118,,,,238,242,57,,129,255,178,182,187,196,201,206,209,213',
'217,,,,,,,,,,,,467,,157,160,162,164,166,467,,157,160,162,164,166,,,',
',191,169,199,204,,212,,159,169,,,238,242,,159,,255,178,182,187,196,201',
'206,209,213,217,,,155,,,,490,491,,155,494,,,,,,,,,,218,221,467,,157',
'160,162,164,166,,256,,,,,,,,,,,169,,,,,,159,,,181,185,190,194,198,203',
'208,211,215,219,129,930,483,,,931,,,155,,,,,,,218,221,,,,,,119,,30,256',
'44,50,,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219,129,',
',113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,',
',,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,,',
',,,,191,,199,204,,212,,118,,,,238,242,57,,129,255,178,182,187,196,201',
'206,209,213,217,467,,157,160,162,164,166,467,,157,160,162,164,166,,',
',,,169,,,,,,159,169,,,,,,159,,,,,,,,,,,,,,155,,,,,,,155,,,,,,,,943,491',
',,944,,,,,,,,,,218,221,,,,,,,,-519,256,-519,,-519,-519,,,,,,,,,,,,,',
',,181,185,190,194,198,203,208,211,215,219,129,,-98,697,,-519,,,,,,,',
',-519,-519,-519,,-519,,,,-519,-519,,,,-519,,-519,-519,-519,-519,-519',
'-519,-519,,,,,,-519,-519,-519,-519,-519,-519,-519,,,,-519,-519,-519',
'-519,-519,-519,-519,-519,-519,-519,-519,-519,-519,-519,,-519,-519,-519',
',,,,-519,,-519,-519,,-519,,-519,-519,-519,-519,-519,-519,-519,-519,-519',
',,,,,,191,,199,204,,212,,,,,,238,242,-519,,-519,255,178,182,187,196',
'201,206,209,213,217,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,482,483,,,487,,,,,,,,,,218,221,,,,,,119,,30,256,44,50,',
',,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219,129,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,360,21,,30',
',44,50,,,,,,,118,,,,,,57,,129,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,',
'51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87',
',96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,238,242',
',,57,255,178,182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188,',
',,,,,222,226,229,233,235,240,245,248,249,253,180,184,189,193,197,202',
'207,210,214,223,227,230,234,237,,,,250,254,177,186,192,195,200,205,',
',216,220,225,228,232,239,243,,,251,,,,,,,,,,218,221,,360,21,,30,334',
'44,50,256,,,18,,325,328,,,,339,341,344,347,-541,-541,-541,-541,-541',
'-541,181,185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,',
'51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,366,87',
',96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,324,327,330',
'332,335,337,340,342,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,',
',99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,238,242,,,57',
'255,178,182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188,,,,,,',
'222,226,229,233,235,240,245,248,249,253,180,184,189,193,197,202,207',
'210,214,223,227,230,234,237,,,,250,254,177,186,192,195,200,205,,,216',
'220,225,228,232,239,243,,,251,,,,,,,,,,218,221,,360,21,,30,334,44,50',
'256,,,18,,325,328,,,,339,341,344,347,-541,-541,-541,-541,-541,-541,181',
'185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103',
'110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,324,327,330,332,335',
'337,340,342,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110',
',13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,334,,,,,,57,,325,328,',
',,339,341,344,347,322,323,326,329,331,333,,8,,,,,,,,,61,67,71,80,134',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,',
'51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87',
',96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,324',
'327,330,332,335,337,340,342,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103',
'110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,334,,,,,,57,,325,328',
',,,339,341,344,347,-541,-541,-541,-541,-541,-541,,8,,,,,,,,,61,67,71',
'80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74',
',82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,',
',,,57,324,327,330,332,335,337,340,342,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,334,,,',
',,57,,325,328,,,,339,341,344,347,322,323,326,329,331,333,336,8,,,,,',
',,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50',
',,,,,,,,,,,,57,324,327,330,332,335,337,340,342,,,,,,,,,,8,,,,,,,,,61',
'67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13',
'18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,',
'8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199',
'204,,212,,,,,,238,242,,,57,255,178,182,187,196,201,206,209,213,217,',
',,,,,,,,,179,183,188,,,,,,,222,226,229,233,235,240,245,248,249,253,180',
'184,189,193,197,202,207,210,214,223,227,230,234,237,,,,250,254,177,186',
'192,195,200,205,,,216,220,225,228,232,239,243,290,,251,,,,,,,,,,218',
'221,,,191,,199,204,,212,256,,,18,,238,242,,,,255,178,182,187,196,201',
'206,209,213,217,181,185,190,194,198,203,208,211,215,219,179,183,188',
',,,,,,222,226,229,233,235,240,245,248,249,253,180,184,189,193,197,202',
'207,210,214,223,227,230,234,237,,,,250,254,177,186,192,195,200,205,',
',216,220,225,228,232,239,243,,,251,,,,,,,,,,218,221,,360,21,,30,,44',
'50,256,,,18,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219',
'8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30',
',44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,',
'99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,238,242,,,57',
'255,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'191,,199,204,,212,,,,,,238,242,,,,255,178,182,187,196,201,206,209,213',
'217,,,,,,,,605,491,,,606,,,,,,,,,,218,221,,,,,,,,,256,,,,,,,,,,,,,,',
',,,,,181,185,190,194,198,203,208,211,215,219,605,491,,,606,,,,,,,,,',
'218,221,,360,21,,30,,44,50,256,,,,,,,,,,,,,,,,,,,,181,185,190,194,198',
'203,208,211,215,219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42',
'48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28',
'33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,',
',61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50',
',,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,366,87,,96,103,110',
',13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,238',
'242,,,57,255,178,182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188',
',,,,,,222,226,229,233,235,240,245,248,249,253,180,184,189,193,197,202',
'207,210,214,223,227,230,234,237,,,,250,254,177,186,192,195,200,205,',
',216,220,225,228,232,239,243,244,246,251,252,,,,,,,,,218,221,,360,21',
',30,,44,50,256,,,,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215',
'219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,74,,366,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,',
',25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110',
',13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,238,242,,,57,255,178',
'182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226',
'229,233,235,240,245,248,249,253,180,184,189,193,197,202,207,210,214',
'223,227,230,234,237,,,,250,254,177,186,192,195,200,205,,,216,220,225',
'228,232,239,243,,,251,,,,,,,,,,218,221,,360,21,,30,,44,50,256,,,,,,',
',,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67',
'71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16',
'23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,',
'74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18',
'24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,',
',,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44',
'50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110',
',13,18,24,28,33,40,46,15,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,',
',,,8,,,,,,,,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65,68,72,,',
',,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,781,,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,',
'54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87',
',96,103,641,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,436,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118',
',,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,',
'44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,',
',,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,',
'96,103,139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57',
',,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46',
'119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,139,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
'112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40',
'46,21,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275',
'271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,',
'44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,',
'54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87',
',96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118,,,,,',
'57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42',
'48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,,13,18,24',
'28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,',
'61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5',
'9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,',
',,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,',
'61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5',
'9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46',
'119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118',
',,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13',
'18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,8',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103',
'641,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,',
',,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96',
'103,436,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,436,,13,18,24,28,33,40,46,119,',
'30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,,,',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,',
'96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,641,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,,,,',
',,,334,,,,,,,,325,328,,,57,339,341,344,347,322,323,326,329,331,333,336',
'338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326,329',
'331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347,322',
'323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339,341',
'344,347,322,323,326,329,331,333,336,338,343,345,346,,,,,,,,,,,,,,,,',
'324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332',
'335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342',
',,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,334,,,,,,,,325,328',
',,,339,341,344,347,322,323,326,329,331,333,336,338,343,345,346,334,',
',,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343',
'345,346,334,764,,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331',
'333,336,338,343,345,346,334,667,,,,,,,325,328,,,,339,341,344,347,322',
'323,326,329,331,333,336,338,343,345,346,,,,,,,,,,,,,,,,,324,327,330',
'332,335,337,340,342,,,,,,,,,,,,,,,,,,,,-233,324,327,330,332,335,337',
'340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,',
',,,,,,,,,,,,324,327,330,332,335,337,340,342,334,,,,,,,,325,328,,,,339',
'341,344,347,322,323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325',
'328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343,345,346,334',
',,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343',
'345,346,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333',
'336,338,343,345,346,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342',
',,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,',
',,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330',
'332,335,337,340,342,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326',
'329,331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347',
'322,323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339',
'341,344,347,322,323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325',
'328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343,345,346,',
',,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324',
'327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335',
'337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,334',
',,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343',
'345,346,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333',
'336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326',
'329,331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347',
'322,323,326,329,331,333,336,338,343,345,346,,764,,,,,,,,,,,,,,,324,327',
'330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337',
'340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,',
',,,,,,,,,,,,324,327,330,332,335,337,340,342,334,,,,,,,,325,328,,,,339',
'341,344,347,322,323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325',
'328,,,,339,341,344,347,322,323,326,329,331,333,336,338,-541,-541,334',
',,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343',
'345,346,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333',
'336,338,-541,-541,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342',
',,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,',
',,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332',
'335,337,340,342,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326,329',
'331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347,322',
'323,326,329,331,333,336,338,343,345,346,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,,,324,327,330,332,335,337',
'340,342,,,,,,,,,,,,,,,,,,,,113,324,327,330,332,335,337,340,342,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16',
'23,27,279,,,54,60,66,282,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,',
'283,,133,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105',
'516,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,279,,,54',
'60,66,282,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,283,,133,87,,96',
'103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,411,,,25,,34,42',
'48,126,128,68,72,,,,,,136,275,271,9,16,23,27,279,,,54,60,66,282,77,377',
'88,90,93,378,104,,10,17,,29,32,39,,,,,374,,133,87,,96,103,113,,13,18',
'24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72',
',,,,,136,275,271,9,16,23,27,,,,54,60,66,282,77,86,88,90,93,97,104,279',
'10,17,,29,32,39,376,,,,283,,284,87,,96,103,,,13,18,24,28,33,40,46,,',
',,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72',
',,,,,136,275,271,9,16,23,27,279,,,54,60,66,282,77,377,88,90,93,378,104',
',10,17,,29,32,39,,,,,374,,133,87,,96,103,113,,13,18,24,28,33,40,46,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271',
'9,16,23,27,,279,,54,60,66,282,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,283,,284,87,,96,103,286,113,13,18,24,28,33,40,46,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27',
'279,,,54,60,66,282,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,283,,284',
'87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,279,,,54,60,66,282',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,283,,284,87,,96,103,113,',
'13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,275,271,9,16,23,27,279,,,54,60,66,282,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,897,,133,87,,96,103,113,,13,18,24,28,33',
'40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'275,271,9,16,23,27,279,,,54,60,66,282,77,86,88,90,93,97,104,,10,17,',
'29,32,39,,,,,283,,284,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23',
'27,279,,,54,60,66,282,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,283',
',284,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,',
',25,,34,42,48,126,128,68,72,,,,,,136,275,271,9,16,23,27,279,,,54,60',
'66,282,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,865,,133,87,,96,103',
'113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,275,271,9,16,23,27,,,,54,60,66,282,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,352,,82,87,,96,103,110,,13,18,24,28,33,40',
'46' ]
        racc_action_table = arr = Array.new(23393, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'84,482,742,474,357,151,482,310,310,943,656,350,734,733,482,482,730,730',
'1,482,482,482,482,482,482,482,482,482,482,482,482,482,482,482,351,482',
'482,482,144,145,482,482,482,482,482,482,398,713,629,629,356,375,688',
'482,482,482,369,369,685,482,482,581,482,736,490,490,698,395,394,11,375',
'482,398,841,350,734,733,151,603,603,684,713,656,310,558,310,734,733',
'438,438,8,699,699,395,394,8,576,351,943,742,943,703,64,64,576,576,482',
'474,357,576,576,576,576,576,576,576,576,576,576,576,576,576,576,576',
'581,730,736,11,272,482,482,482,482,482,482,482,841,482,482,482,482,482',
'144,145,713,482,84,482,84,482,483,494,494,944,356,483,713,629,299,680',
'713,490,374,483,483,369,374,679,483,483,483,483,483,483,483,483,483',
'483,483,483,483,483,483,483,483,603,272,603,699,483,483,483,483,483',
'483,483,375,438,375,64,677,272,483,483,483,321,321,483,483,483,886,483',
'558,558,558,558,558,558,558,558,483,483,483,483,576,576,576,576,576',
'576,576,576,38,38,152,708,319,737,319,576,709,599,944,599,944,562,675',
'299,494,299,370,269,940,562,562,483,555,483,562,562,562,562,562,562',
'562,562,562,562,562,562,562,562,562,152,673,370,370,564,483,483,483',
'483,483,483,483,720,483,483,483,483,483,712,88,384,483,483,483,88,483',
'886,737,886,321,952,850,88,88,727,672,384,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,88,938,938,38,270,88,88,88,88,88,88,88,940,671',
'269,940,269,940,88,88,88,523,668,88,88,88,385,88,270,270,166,315,315',
'270,290,717,88,88,88,88,738,738,385,290,290,523,523,562,562,562,562',
'562,562,562,562,166,727,666,555,555,555,555,555,555,555,555,952,850',
'952,850,727,88,727,88,665,631,166,631,88,564,564,564,564,564,564,564',
'564,720,720,720,720,720,720,720,720,88,88,88,88,88,88,88,88,88,88,88',
'88,315,487,315,88,88,88,487,88,396,738,367,738,367,513,487,487,714,429',
'429,487,487,487,487,487,487,487,487,487,487,487,487,487,487,487,396',
'487,487,487,513,513,487,487,487,487,487,487,750,79,750,79,714,486,763',
'487,487,487,486,645,645,487,487,711,487,746,486,486,706,706,763,486',
'486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,711',
'711,746,746,486,486,486,486,486,486,486,722,390,711,725,746,397,486',
'486,486,487,726,486,486,486,664,486,714,390,831,889,277,889,268,268',
'486,486,486,486,714,895,721,397,714,487,487,487,487,487,487,487,487',
'487,487,487,487,277,277,117,487,561,487,91,487,831,895,895,729,561,561',
'486,303,486,561,561,561,561,561,561,561,561,561,561,117,117,777,777',
'831,91,831,831,107,400,486,486,486,486,486,486,486,662,486,486,486,486',
'486,22,642,22,486,486,486,642,486,44,44,107,107,400,941,642,642,661',
'378,732,642,642,642,642,642,642,642,642,642,642,642,642,642,642,642',
'642,642,642,642,941,941,642,642,642,642,642,642,642,477,477,659,477',
'941,378,642,642,642,477,477,642,642,642,657,642,721,721,721,721,721',
'721,721,721,642,642,642,642,378,896,378,378,646,646,735,561,561,561',
'561,561,561,561,561,378,267,652,303,303,303,303,303,303,303,303,896',
'896,127,127,559,642,141,642,141,402,141,141,559,559,267,267,267,559',
'559,559,559,559,559,559,559,559,559,644,642,642,642,642,642,642,642',
'402,642,642,642,642,642,640,141,739,642,642,642,404,642,278,405,141',
'141,141,740,141,279,279,638,141,141,349,123,123,141,637,141,141,141',
'141,141,141,141,404,278,278,405,634,141,141,141,141,141,141,141,623',
'349,349,141,141,141,141,141,141,141,141,141,141,141,747,141,141,749',
'141,141,141,59,59,612,377,141,377,141,141,589,141,141,281,756,141,141',
'141,141,141,141,141,408,407,408,759,408,408,559,559,559,559,559,559',
'559,559,928,587,281,281,377,141,577,762,301,548,547,19,141,407,577,577',
'869,399,869,869,869,869,408,533,768,928,928,377,598,377,377,408,408',
'408,301,408,19,19,770,408,408,224,377,399,408,772,408,408,408,408,408',
'408,408,598,598,532,515,514,408,408,408,408,408,408,408,224,224,224',
'408,408,408,408,408,408,408,408,408,408,408,408,408,408,512,408,408',
'408,501,864,710,780,408,488,408,408,473,408,408,408,408,408,408,408',
'408,408,408,408,70,569,70,783,70,70,864,864,469,569,569,788,894,408',
'52,467,466,710,463,408,452,52,52,52,52,273,408,449,577,577,577,577,577',
'577,577,577,70,894,894,439,710,434,710,710,294,70,70,70,432,70,273,273',
'812,70,70,710,426,815,70,410,70,70,70,70,70,70,70,393,294,294,294,392',
'70,70,70,70,70,70,70,383,382,828,70,70,70,70,70,70,70,70,70,70,70,381',
'70,70,365,70,70,70,832,833,744,362,70,361,70,70,359,70,70,353,352,70',
'70,70,70,70,70,70,265,848,265,318,265,265,317,300,298,569,569,569,569',
'569,569,569,569,744,297,70,571,295,863,283,70,364,70,276,571,571,865',
'276,364,364,364,364,265,867,868,282,744,871,744,744,872,265,265,265',
'265,265,873,276,276,265,265,744,874,875,265,876,265,265,265,265,265',
'265,265,877,280,879,275,881,265,265,265,265,265,265,265,265,271,265',
'265,265,265,265,265,265,265,265,265,265,265,743,265,265,175,265,265',
'265,743,743,743,743,265,167,265,265,161,265,265,265,891,265,265,265',
'265,265,265,265,591,154,591,153,591,591,150,137,897,810,900,810,810',
'810,810,810,130,125,660,265,660,660,660,660,265,120,695,116,571,571',
'571,571,571,571,571,571,591,917,115,113,924,101,574,74,73,591,591,591',
'591,591,574,574,810,591,591,51,930,931,591,932,591,591,591,591,591,591',
'591,933,934,935,936,937,591,591,591,591,591,591,591,591,47,591,591,591',
'591,591,591,591,591,591,591,591,591,586,591,591,46,591,591,591,586,586',
'586,586,591,43,591,591,942,591,591,591,40,591,591,591,591,591,591,591',
'468,12,468,468,468,468,468,7,4,925,953,925,925,,925,,,,,591,925,925',
',,591,925,925,925,925,925,925,925,925,925,925,,,,,,,,878,468,878,878',
'878,878,878,,574,574,574,574,574,574,574,574,,,,878,,,595,,595,595,',
'595,,,,,,595,595,,,,595,595,595,595,595,595,595,595,595,595,,,,,,,925',
'925,,,925,,682,,682,682,682,682,682,,925,925,441,,441,441,441,441,441',
',925,682,,,,,682,,,,,441,,,,,441,441,,,925,925,925,925,925,925,925,925',
'925,925,925,595,595,,,595,,,441,,,441,,,,595,595,,,441,,,108,,108,595',
'108,108,274,274,274,274,274,274,274,274,,169,,169,169,169,169,169,,595',
'595,595,595,595,595,595,595,595,595,595,169,,108,,918,169,918,918,918',
'918,918,108,108,108,,108,,,,108,108,,,918,108,,108,108,108,108,108,108',
'108,,,,,,108,108,108,108,108,108,108,,,,108,108,108,108,108,108,108',
'108,108,108,108,108,108,108,,108,108,108,,,,,108,,108,108,,108,108,108',
'108,108,108,108,108,108,108,108,,,,,,,106,,106,106,,106,,108,,,,106',
'106,108,,108,106,106,106,106,106,106,106,106,106,106,260,260,260,260',
'260,260,260,260,,,106,106,106,,,,,,,106,106,106,106,106,106,106,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,,,,106',
'106,106,106,106,106,106,106,,,106,106,106,106,106,106,106,106,106,106',
'106,,,,,,,,,106,106,,,,,,320,,320,106,320,320,,,,,,,,,,471,,471,471',
'471,471,471,,106,106,106,106,106,106,106,106,106,106,106,471,,320,,880',
'471,880,880,880,880,880,320,320,320,,320,,,,320,320,,,880,320,,320,320',
'320,320,320,320,320,,,,,,320,320,320,320,320,320,320,,,,320,320,320',
'320,320,320,320,320,320,320,320,,320,320,,320,320,320,,,,,320,,320,320',
',320,320,,,320,320,320,320,320,320,320,,,,,,,418,,418,418,,418,,,,,',
'418,418,320,,320,418,418,418,418,418,418,418,418,418,418,,,813,,813',
'813,813,813,813,,,,,,13,,13,13,13,13,13,813,,,,,,,,593,,593,593,13,593',
',,,13,13,593,593,,,,593,593,593,593,593,593,593,593,593,593,,,,,,13',
'418,418,13,,418,,683,13,683,683,683,683,683,,418,418,903,,903,903,903',
'903,903,,418,683,,,,,,,,,,903,,,,,903,903,,,418,418,418,418,418,418',
'418,418,418,418,418,593,593,,,593,,,903,,,903,,,,593,593,580,,580,580',
',580,,,593,,,580,580,,,,580,580,580,580,580,580,580,580,580,580,,,593',
'593,593,593,593,593,593,593,593,593,593,,766,,766,766,766,766,766,,',
',,,,,,578,,578,578,766,578,,,,766,766,578,578,,,,578,578,578,578,578',
'578,578,578,578,578,,,,,,766,580,580,766,,580,,,766,,,,,,,580,580,,403',
',403,403,403,403,403,580,,,,,,,,,,,,403,,,,,403,403,,580,580,580,580',
'580,580,580,580,580,580,580,578,578,,,578,,,,403,,,403,,,578,578,403',
',,,,14,,14,578,14,14,,,,,,,,,,,,,,,,,,578,578,578,578,578,578,578,578',
'578,578,578,,,14,,,,,,,,,14,14,14,,14,,,,14,14,,,,14,,14,14,14,14,14',
'14,14,,14,,,,14,14,14,14,14,14,14,,,,14,14,14,14,14,14,14,14,14,14,14',
'14,14,14,,14,14,14,,,,,14,,14,14,,14,14,14,14,14,14,14,14,14,14,14,',
',,,,,14,,,,,,420,14,420,420,,420,,14,,14,,420,420,,,,420,420,420,420',
'420,420,420,420,420,420,457,,457,457,457,457,457,464,,464,464,464,464',
'464,,,,,,457,,,,,457,457,464,,,,,464,464,905,,905,905,905,905,905,,',
',,,,457,,,457,,,905,464,,,464,,905,,,420,420,,,420,,,,,,,,,,420,420',
',,905,,556,97,,97,420,97,97,,556,556,,,,556,556,556,556,556,556,556',
'556,556,556,,420,420,420,420,420,420,420,420,420,420,420,,,97,,,,,,',
',,97,97,97,,97,,,,97,97,,,,97,,97,97,97,97,97,97,97,,,,,,97,97,97,97',
'97,97,97,,,,97,97,97,97,97,97,97,97,97,97,97,97,97,97,,97,97,97,,,,',
'97,,97,97,,97,,97,97,97,97,97,97,97,97,97,604,,604,,604,604,97,556,556',
'556,556,556,556,556,556,,,,,97,,97,,792,,792,792,792,792,792,,,,,,,604',
',,,,,792,,,604,604,604,792,604,,,,604,604,,,,604,,604,604,604,604,604',
'604,604,,,792,,,604,604,604,604,604,604,604,,,,604,604,604,604,604,604',
'604,604,604,604,604,604,604,604,,604,604,604,,,,,604,,604,604,,604,604',
'604,604,604,604,604,604,604,604,604,86,,86,,86,86,149,,149,149,149,149',
'149,604,,,,,,604,,604,,,,149,,,,,149,149,,,,,86,,,,,,,,,86,86,86,,86',
',,149,86,86,149,,,86,,86,86,86,86,86,86,86,,86,,86,,86,86,86,86,86,86',
'86,,,,86,86,86,86,86,86,86,86,86,86,86,86,86,86,,86,86,86,,,,,86,,86',
'86,,86,,86,86,86,86,86,86,86,86,86,,,,,,,86,,,,,508,,508,508,,508,,',
'86,,86,508,508,,,,508,508,508,508,508,508,508,508,508,508,,,,,,,,,,',
',630,,630,630,630,630,630,784,,784,784,784,784,784,,,,,506,630,506,506',
',506,630,630,784,,,506,506,784,784,,506,506,506,506,506,506,506,506',
'506,506,,,630,,,630,508,508,,784,508,,784,,,,,,,,508,508,790,,790,790',
'790,790,790,,508,,,,,,,,,,,790,,,,,790,790,,,508,508,508,508,508,508',
'508,508,508,508,508,506,506,,,506,,,790,,,790,,,,506,506,504,,504,504',
',504,,,506,,,504,504,,,,504,504,504,504,504,504,504,504,504,504,,,506',
'506,506,506,506,506,506,506,506,506,506,,803,,803,803,803,803,803,,',
',,,,,,503,,503,503,803,503,,,,803,803,503,503,,,,503,503,503,503,503',
'503,503,503,503,503,,,,,,803,504,504,803,,504,,,,,,,,,,504,504,808,',
'808,808,808,808,808,,504,,,,,,,,,,,808,,,,,,808,,,504,504,504,504,504',
'504,504,504,504,504,504,503,503,,,503,,,808,,,,,,,503,503,,,,,,607,',
'607,503,607,607,,,,,,,,,,,,,,,,,,503,503,503,503,503,503,503,503,503',
'503,503,,,607,,,,,,,,,607,607,607,,607,,,,607,607,,,,607,,607,607,607',
'607,607,607,607,,,,,,607,607,607,607,607,607,607,,,,607,607,607,607',
'607,607,607,607,607,607,607,607,607,607,,607,607,607,,,,,607,,607,607',
',607,607,607,607,607,607,607,607,607,607,607,489,,489,,489,489,801,',
'801,801,801,801,801,607,,,,,,607,,607,,,,801,,,,,,801,,,,,489,,,,,,',
',,489,489,489,,489,,,801,489,489,,,,489,,489,489,489,489,489,489,489',
',,,,,489,489,489,489,489,489,489,,,,489,489,489,489,489,489,489,489',
'489,489,489,489,489,489,,489,489,489,,,,,489,,489,489,,489,489,489,489',
'489,489,489,489,489,489,489,,,,,,,259,,259,259,,259,,489,,,,259,259',
'489,,489,259,259,259,259,259,259,259,259,259,259,,,,,,,,,,,,946,,946',
'946,946,946,946,460,,460,460,460,460,460,,,,,901,946,901,901,,901,,946',
'460,,,901,901,,460,,901,901,901,901,901,901,901,901,901,901,,,946,,',
',259,259,,460,259,,,,,,,,,,259,259,805,,805,805,805,805,805,,259,,,',
',,,,,,,805,,,,,,805,,,259,259,259,259,259,259,259,259,259,259,259,901',
'901,,,901,,,805,,,,,,,901,901,,,,,,5,,5,901,5,5,,,,,,,,,,,,,,,,,,901',
'901,901,901,901,901,901,901,901,901,901,,,5,,,,,,,,,5,5,5,,5,,,,5,5',
',,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,,5,5,5,5,5,5,5,5,5,5,5,5,5',
'5,,5,5,5,,,,,5,,5,5,,5,5,5,5,5,5,5,5,5,5,5,,,,,,,927,,927,927,,927,',
'5,,,,927,927,5,,5,927,927,927,927,927,927,927,927,927,927,909,,909,909',
'909,909,909,914,,914,914,914,914,914,,,,,,909,,,,,,909,914,,,,,,914',
',,,,,,,,,,,,,909,,,,,,,914,,,,,,,,927,927,,,927,,,,,,,,,,927,927,,,',
',,,,643,927,643,,643,643,,,,,,,,,,,,,,,,927,927,927,927,927,927,927',
'927,927,927,927,,643,643,,643,,,,,,,,,643,643,643,,643,,,,643,643,,',
',643,,643,643,643,643,643,643,643,,,,,,643,643,643,643,643,643,643,',
',,643,643,643,643,643,643,643,643,643,643,643,643,643,643,,643,643,643',
',,,,643,,643,643,,643,,643,643,643,643,643,643,643,643,643,,,,,,,257',
',257,257,,257,,,,,,257,257,643,,643,257,257,257,257,257,257,257,257',
'257,257,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',257,257,,,257,,,,,,,,,,257,257,,,,,,481,,481,257,481,481,,,,,,,,,,',
',,,,,,,257,257,257,257,257,257,257,257,257,257,257,,,481,,,,,,,,,481',
'481,481,,481,,,,481,481,,,,481,,481,481,481,481,481,481,481,,,,,,481',
'481,481,481,481,481,481,,,,481,481,481,481,481,481,481,481,481,481,481',
'481,481,481,,481,481,481,,,,,481,,481,481,,481,481,481,481,481,481,481',
'481,481,481,481,389,389,,389,,389,389,,,,,,,481,,,,,,481,,481,,,,,,',
',,,,,,,,,389,,,,,,,,,389,389,389,389,389,,,,389,389,,,,389,,389,389',
'389,389,389,389,389,,,,,,389,389,389,389,389,389,389,389,,389,389,389',
'389,389,389,389,389,389,389,389,389,,389,389,,389,389,389,,,,,389,,389',
'389,,389,389,389,,389,389,389,389,389,389,389,,,,,80,,80,80,,80,,,,',
',80,80,,,389,80,80,80,80,80,80,80,80,80,80,,,,,,,,,,,80,80,80,,,,,,',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80',
'80,,,,80,80,80,80,80,80,80,80,,,80,80,80,80,80,80,80,,,80,,,,,,,,,,80',
'80,,82,82,,82,553,82,82,80,,,80,,553,553,,,,553,553,553,553,553,553',
'553,553,553,553,80,80,80,80,80,80,80,80,80,80,82,,,,,,,,,82,82,82,82',
'82,,,,82,82,,,,82,,82,82,82,82,82,82,82,,,,,,82,82,82,82,82,82,82,82',
',82,82,82,82,82,82,82,82,82,82,82,82,,82,82,,82,82,82,,,,,82,,82,82',
',82,82,82,,82,82,82,82,82,82,82,499,499,,499,,499,499,,,,,553,553,553',
'553,553,553,553,553,82,,,,,,,,,,,,,,,,,,499,,,,,,,,,499,499,499,499',
'499,,,,499,499,,,,499,,499,499,499,499,499,499,499,,,,,,499,499,499',
'499,499,499,499,499,,499,499,499,499,499,499,499,499,499,499,499,499',
',499,499,,499,499,499,,,,,499,,499,499,,499,499,499,,499,499,499,499',
'499,499,499,,,,,517,,517,517,,517,,,,,,517,517,,,499,517,517,517,517',
'517,517,517,517,517,517,,,,,,,,,,,517,517,517,,,,,,,517,517,517,517',
'517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517,517',
'517,517,517,,,,517,517,517,517,517,517,517,517,,,517,517,517,517,517',
'517,517,,,517,,,,,,,,,,517,517,,455,455,,455,552,455,455,517,,,517,',
'552,552,,,,552,552,552,552,552,552,552,552,552,552,517,517,517,517,517',
'517,517,517,517,517,455,,,,,,,,,455,455,455,455,455,,,,455,455,,,,455',
',455,455,455,455,455,455,455,,,,,,455,455,455,455,455,455,455,455,,455',
'455,455,455,455,455,455,455,455,455,455,455,,455,455,,455,455,455,,',
',,455,,455,455,,455,455,455,,455,455,455,455,455,455,455,529,529,,529',
',529,529,,,,,552,552,552,552,552,552,552,552,455,,,,,,,,,,,,,,,,,,529',
',,,,,,,,529,529,529,529,529,,,,529,529,,,,529,,529,529,529,529,529,529',
'529,,,,,,529,529,529,529,529,529,529,529,,529,529,529,529,529,529,529',
'529,529,529,529,529,,529,529,,529,529,529,,,,,529,,529,529,,529,529',
'529,,529,529,529,529,529,529,529,453,453,,453,,453,453,,,,,,,566,,,',
',,529,,566,566,,,,566,566,566,566,566,566,566,566,566,566,,453,,,,,',
',,,453,453,453,453,453,,,,453,453,,,,453,,453,453,453,453,453,453,453',
',,,,,453,453,453,453,453,453,453,453,,453,453,453,453,453,453,453,453',
'453,453,453,453,,453,453,,453,453,453,,,,,453,,453,453,,453,453,453',
',453,453,453,453,453,453,453,446,446,,446,,446,446,,,,,,,,,,,,,453,566',
'566,566,566,566,566,566,566,,,,,,,,,,446,,,,,,,,,446,446,446,446,446',
',,,446,446,,,,446,,446,446,446,446,446,446,446,,,,,,446,446,446,446',
'446,446,446,446,,446,446,446,446,446,446,446,446,446,446,446,446,,446',
'446,,446,446,446,,,,,446,,446,446,,446,446,446,,446,446,446,446,446',
'446,446,95,95,,95,,95,95,,,,,,,563,,,,,,446,,563,563,,,,563,563,563',
'563,563,563,563,563,563,563,,95,,,,,,,,,95,95,95,95,95,,,,95,95,,,,95',
',95,95,95,95,95,95,95,,,,,,95,95,95,95,95,95,95,95,,95,95,95,95,95,95',
'95,95,95,95,95,95,,95,95,,95,95,95,,,,,95,,95,95,,95,95,95,,95,95,95',
'95,95,95,95,443,443,,443,,443,443,,,,,,,,,,,,,95,563,563,563,563,563',
'563,563,563,,,,,,,,,,443,,,,,,,,,443,443,443,443,443,,,,443,443,,,,443',
',443,443,443,443,443,443,443,,,,,,443,443,443,443,443,443,443,443,,443',
'443,443,443,443,443,443,443,443,443,443,443,,443,443,,443,443,443,,',
',,443,,443,443,,443,443,443,,443,443,443,443,443,443,443,542,542,,542',
',542,542,,,,,,,568,,,,,,443,,568,568,,,,568,568,568,568,568,568,568',
'568,568,568,568,542,,,,,,,,,542,542,542,542,542,,,,542,542,,,,542,,542',
'542,542,542,542,542,542,,,,,,542,542,542,542,542,542,542,542,,542,542',
'542,542,542,542,542,542,542,542,542,542,,542,542,,542,542,542,,,,,542',
',542,542,,542,542,542,,542,542,542,542,542,542,542,545,545,,545,,545',
'545,,,,,,,,,,,,,542,568,568,568,568,568,568,568,568,,,,,,,,,,545,,,',
',,,,,545,545,545,545,545,,,,545,545,,,,545,,545,545,545,545,545,545',
'545,,,,,,545,545,545,545,545,545,545,545,,545,545,545,545,545,545,545',
'545,545,545,545,545,,545,545,,545,545,545,,,,,545,,545,545,,545,545',
'545,,545,545,545,545,545,545,545,583,583,,583,,583,583,,,,,,,,,,,,,545',
',,,,,,,,,,,,,,,,,583,,,,,,,,,583,583,583,583,583,,,,583,583,,,,583,',
'583,583,583,583,583,583,583,,,,,,583,583,583,583,583,583,583,583,,583',
'583,583,583,583,583,583,583,583,583,583,583,,583,583,,583,583,583,,',
',,583,,583,583,,583,583,583,,583,583,583,583,583,583,583,584,584,,584',
',584,584,,,,,,,,,,,,,583,,,,,,,,,,,,,,,,,,584,,,,,,,,,584,584,584,584',
'584,,,,584,584,,,,584,,584,584,584,584,584,584,584,,,,,,584,584,584',
'584,584,584,584,584,,584,584,584,584,584,584,584,584,584,584,584,584',
',584,584,,584,584,584,,,,,584,,584,584,,584,584,584,,584,584,584,584',
'584,584,584,,,,,36,,36,36,,36,,,,,,36,36,,,584,36,36,36,36,36,36,36',
'36,36,36,,,,,,,,,,,36,36,36,,,,,,,36,36,36,36,36,36,36,36,36,36,36,36',
'36,36,36,36,36,36,36,36,36,36,36,36,,,,36,36,36,36,36,36,36,36,,,36',
'36,36,36,36,36,36,36,,36,,,,,,,,,,36,36,,,585,,585,585,,585,36,,,36',
',585,585,,,,585,585,585,585,585,585,585,585,585,585,36,36,36,36,36,36',
'36,36,36,36,585,585,585,,,,,,,585,585,585,585,585,585,585,585,585,585',
'585,585,585,585,585,585,585,585,585,585,585,585,585,585,,,,585,585,585',
'585,585,585,585,585,,,585,585,585,585,585,585,585,,,585,,,,,,,,,,585',
'585,,476,476,,476,,476,476,585,,,585,,,,,,,,,,,,,,,,,585,585,585,585',
'585,585,585,585,585,585,476,,,,,,,,,476,476,476,476,476,,,,476,476,',
',,476,,476,476,476,476,476,476,476,,,,,,476,476,476,476,476,476,476',
'476,,476,476,476,476,476,476,476,476,476,476,476,476,,476,476,,476,476',
'476,,,,,476,,476,476,,476,476,476,,476,476,476,476,476,476,476,761,761',
',761,,761,761,,,,,,,,,,,,,476,,,,,,,,,,,,,,,,,,761,,,,,,,,,761,761,761',
'761,761,,,,761,761,,,,761,,761,761,761,761,761,761,761,,,,,,761,761',
'761,761,761,761,761,761,,761,761,761,761,761,761,761,761,761,761,761',
'761,,761,761,,761,761,761,,,,,761,,761,761,,761,761,761,,761,761,761',
'761,761,761,761,,,,,380,,380,380,,380,,,,,,380,380,,,761,380,380,380',
'380,380,380,380,380,380,380,,,,,,,,,,,,,,,,,,,,,,,,,,,,,379,,379,379',
',379,,,,,,379,379,,,,379,379,379,379,379,379,379,379,379,379,,,,,,,',
'380,380,,,380,,,,,,,,,,380,380,,,,,,,,,380,,,,,,,,,,,,,,,,,,,,380,380',
'380,380,380,380,380,380,380,380,379,379,,,379,,,,,,,,,,379,379,,919',
'919,,919,,919,919,379,,,,,,,,,,,,,,,,,,,,379,379,379,379,379,379,379',
'379,379,379,919,,,,,,,,,919,919,919,919,919,,,,919,919,,,,919,,919,919',
'919,919,919,919,919,,,,,,919,919,919,919,919,919,919,919,,919,919,919',
'919,919,919,919,919,919,919,919,919,,919,919,,919,919,919,,,,,919,,919',
'919,,919,919,919,,919,919,919,919,919,919,919,751,751,,751,,751,751',
',,,,,,,,,,,,919,,,,,,,,,,,,,,,,,,751,,,,,,,,,751,751,751,751,751,,,',
'751,751,,,,751,,751,751,751,751,751,751,751,,,,,,751,751,751,751,751',
'751,751,751,,751,751,751,751,751,751,751,751,751,751,751,751,,751,751',
',751,751,751,,,,,751,,751,751,,751,751,751,,751,751,751,751,751,751',
'751,366,366,,366,,366,366,,,,,,,,,,,,,751,,,,,,,,,,,,,,,,,,366,,,,,',
',,,366,366,366,366,366,,,,366,366,,,,366,,366,366,366,366,366,366,366',
',,,,,366,366,366,366,366,366,366,366,,366,366,366,366,366,366,366,366',
'366,366,366,366,,366,366,,366,366,366,,,,,366,,366,366,,366,366,366',
',366,366,366,366,366,366,366,837,837,,837,,837,837,,,,,,,,,,,,,366,',
',,,,,,,,,,,,,,,,837,,,,,,,,,837,837,837,837,837,,,,837,837,,,,837,,837',
'837,837,837,837,837,837,,,,,,837,837,837,837,837,837,837,837,,837,837',
'837,837,837,837,837,837,837,837,837,837,,837,837,,837,837,837,,,,,837',
',837,837,,837,837,837,,837,837,837,837,837,837,837,842,842,,842,,842',
'842,,,,,,,,,,,,,837,,,,,,,,,,,,,,,,,,842,,,,,,,,,842,842,842,842,842',
',,,842,842,,,,842,,842,842,842,842,842,842,842,,,,,,842,842,842,842',
'842,842,842,842,,842,842,842,842,842,842,842,842,842,842,842,842,,842',
'842,,842,842,842,,,,,842,,842,842,,842,842,842,,842,842,842,842,842',
'842,842,,,,,18,,18,18,,18,,,,,,18,18,,,842,18,18,18,18,18,18,18,18,18',
'18,,,,,,,,,,,18,18,18,,,,,,,18,18,18,18,18,18,18,18,18,18,18,18,18,18',
'18,18,18,18,18,18,18,18,18,18,,,,18,18,18,18,18,18,18,18,,,18,18,18',
'18,18,18,18,18,18,18,18,,,,,,,,,18,18,,304,304,,304,,304,304,18,,,,',
',,,,,,,,,,,,,,,18,18,18,18,18,18,18,18,18,18,304,,,,,,,,,304,304,304',
'304,304,,,,304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304',
'304,304,304,304,304,304,,304,304,304,304,304,304,304,304,304,304,304',
'304,,304,304,,304,304,304,,,,,304,,304,304,,304,304,304,,304,304,304',
'304,304,304,304,854,854,,854,,854,854,,,,,,,,,,,,,304,,,,,,,,,,,,,,',
',,,854,,,,,,,,,854,854,854,854,854,,,,854,854,,,,854,,854,854,854,854',
'854,854,854,,,,,,854,854,854,854,854,854,854,854,,854,854,854,854,854',
'854,854,854,854,854,854,854,,854,854,,854,854,854,,,,,854,,854,854,',
'854,854,854,,854,854,854,854,854,854,854,858,858,,858,,858,858,,,,,',
',,,,,,,854,,,,,,,,,,,,,,,,,,858,,,,,,,,,858,858,858,858,858,,,,858,858',
',,,858,,858,858,858,858,858,858,858,,,,,,858,858,858,858,858,858,858',
'858,,858,858,858,858,858,858,858,858,858,858,858,858,,858,858,,858,858',
'858,,,,,858,,858,858,,858,858,858,,858,858,858,858,858,858,858,284,284',
',284,,284,284,,,,,,,,,,,,,858,,,,,,,,,,,,,,,,,,284,,,,,,,,,284,284,284',
'284,284,,,,284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284,284',
'284,284,284,284,284,284,,284,284,284,284,284,284,284,284,284,284,284',
'284,,284,284,,284,284,284,,,,,284,,284,284,,284,284,284,,284,284,284',
'284,284,284,284,600,600,,600,,600,600,,,,,,,,,,,,,284,,,,,,,,,,,,,,',
',,,600,,,,,,,,,600,600,600,600,600,,,,600,600,,,,600,,600,600,600,600',
'600,600,600,,,,,,600,600,600,600,600,600,600,600,,600,600,600,600,600',
'600,600,600,600,600,600,600,,600,600,,600,600,600,,,,,600,,600,600,',
'600,600,600,,600,600,600,600,600,600,600,,,,,627,,627,627,,627,,,,,',
'627,627,,,600,627,627,627,627,627,627,627,627,627,627,,,,,,,,,,,627',
'627,627,,,,,,,627,627,627,627,627,627,627,627,627,627,627,627,627,627',
'627,627,627,627,627,627,627,627,627,627,,,,627,627,627,627,627,627,627',
'627,,,627,627,627,627,627,627,627,,,627,,,,,,,,,,627,627,,632,632,,632',
',632,632,627,,,,,,,,,,,,,,,,,,,,627,627,627,627,627,627,627,627,627',
'627,632,,,,,,,,,632,632,632,632,632,,,,632,632,,,,632,,632,632,632,632',
'632,632,632,,,,,,632,632,632,632,632,632,632,632,,632,632,632,632,632',
'632,632,632,632,632,632,632,,632,632,,632,632,632,,,,,632,,632,632,',
'632,632,632,,632,632,632,632,632,632,632,687,687,,687,,687,687,,,,,',
',,,,,,,632,,,,,,,,,,,,,,,,,,687,,,,,,,,,687,687,687,687,687,,,,687,687',
',,,687,,687,687,687,687,687,687,687,,,,,,687,687,687,687,687,687,687',
'687,,687,687,687,687,687,687,687,687,687,687,687,687,,687,687,,687,687',
'687,,,,,687,,687,687,,687,687,687,,687,687,687,687,687,687,687,133,133',
',133,,133,133,,,,,,,,,,,,,687,,,,,,,,,,,,,,,,,,133,,,,,,,,,133,133,133',
'133,133,,,,133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133',
'133,133,133,133,133,133,,133,133,133,133,133,133,133,133,133,133,133',
'133,,133,133,,133,133,133,,,,,133,,133,133,,133,133,133,,133,133,133',
'133,133,133,133,893,893,,893,,893,893,,,,,,,,,,,,,133,,,,,,,,,,,,,,',
',,,893,,,,,,,,,893,893,893,893,893,,,,893,893,,,,893,,893,893,893,893',
'893,893,893,,,,,,893,893,893,893,893,893,893,893,,893,893,893,893,893',
'893,893,893,893,893,893,893,,893,893,,893,893,893,,,,,893,,893,893,',
'893,893,893,,893,893,893,893,893,893,893,3,3,,3,,3,3,,,,,,,,,,,,,893',
',,,,,,,,,,,,,,,,,3,,,,,,,,,3,3,3,3,3,,,,3,3,,,,3,,3,3,3,3,3,3,3,,,,',
',3,3,3,3,3,3,3,3,,3,3,3,3,3,3,3,3,3,3,3,3,,3,3,,3,3,3,,,,,3,,3,3,,3',
'3,3,,3,3,3,3,3,3,3,829,,829,,829,829,,,,,,,,,,,,,,3,,,,,,,,,,,,,,,,',
'829,,,,,,,,,829,829,829,,829,,,,829,829,,,,829,,829,829,829,829,829',
'829,829,,,,,,829,829,829,829,829,829,829,,,,829,829,829,829,829,829',
'829,829,829,829,829,,829,829,,829,829,829,,,,,829,,829,829,,829,829',
',,829,829,829,829,829,829,829,139,,139,,139,139,,,,,,,,,,,,,,829,,,',
',,,,,,,,,,,,,139,,,,,,,,,139,139,139,,139,,,,139,139,,,,139,,139,139',
'139,139,139,139,139,,,,,,139,139,139,139,139,139,139,,,,139,139,139',
'139,139,139,139,139,139,139,139,,139,139,,139,139,139,,,,,139,,139,139',
',139,139,,,139,139,139,139,139,139,139,143,,143,,143,143,,,,,,,,,,,',
',,139,,,,,,,,,,,,,,,,,143,,,,,,,,,143,143,143,,143,,,,143,143,,,,143',
',143,143,143,143,143,143,143,,,,,,143,143,143,143,143,143,143,,,,143',
'143,143,143,143,143,143,143,143,143,143,,143,143,,143,143,143,,,,,143',
',143,143,,143,143,,,143,143,143,143,143,143,143,119,,119,,119,119,,',
',,,,,,,,,,,143,,,,,,,,,,,,,,,,,119,,,,,,,,,119,119,119,,119,,,,119,119',
',,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119',
',,,119,119,119,119,119,119,119,119,119,119,119,,119,119,,119,119,119',
',,,,119,,119,119,,119,119,,,119,119,119,119,119,119,119,697,,697,,697',
'697,,,,,,,,,,,,,,119,,,,,,,,,,,,,,,,,697,,,,,,,,,697,697,697,,697,,',
',697,697,,,,697,,697,697,697,697,697,697,697,,,,,,697,697,697,697,697',
'697,697,,,,697,697,697,697,697,697,697,697,697,697,697,,697,697,,697',
'697,697,,,,,697,,697,697,,697,697,,,697,697,697,697,697,697,697,147',
',147,,147,147,,,,,,,,,,,,,,697,,,,,,,,,,,,,,,,,147,,,,,,,,,147,147,147',
',147,,,,147,147,,,,147,,147,147,147,147,147,147,147,,,,,,147,147,147',
'147,147,147,147,,,,147,147,147,147,147,147,147,147,147,147,147,,147',
'147,,147,147,147,,,,,147,,147,147,,147,147,,,147,147,147,147,147,147',
'147,704,,704,,704,704,,,,,,,,,,,,,,147,,,,,,,,,,,,,,,,,704,,,,,,,,,704',
'704,704,,704,,,,704,704,,,,704,,704,704,704,704,704,704,704,,,,,,704',
'704,704,704,704,704,704,,,,704,704,704,704,704,704,704,704,704,704,704',
',704,704,,704,704,704,,,,,704,,704,704,,704,704,,,704,704,704,704,704',
'704,704,705,,705,,705,705,,,,,,,,,,,,,,704,,,,,,,,,,,,,,,,,705,,,,,',
',,,705,705,705,,705,,,,705,705,,,,705,,705,705,705,705,705,705,705,',
',,,,705,705,705,705,705,705,705,,,,705,705,705,705,705,705,705,705,705',
'705,705,,705,705,,705,705,705,,,,,705,,705,705,,705,705,,,705,705,705',
'705,705,705,705,667,,667,,667,667,,,,,,,,,,,,,,705,,,,,,,,,,,,,,,,,667',
',,,,,,,,667,667,667,,667,,,,667,667,,,,667,,667,667,667,667,667,667',
'667,,,,,,667,667,667,667,667,667,667,,,,667,667,667,667,667,667,667',
'667,667,667,667,,667,667,,667,667,667,,,,,667,,667,667,,667,667,,,667',
'667,667,667,667,667,667,651,,651,,651,651,,,,,,,,,,,,,,667,,,,,,,,,',
',,,,,,,651,,,,,,,,,651,651,651,,651,,,,651,651,,,,651,,651,651,651,651',
'651,651,651,,,,,,651,651,651,651,651,651,651,,,,651,651,651,651,651',
'651,651,651,651,651,651,,651,651,,651,651,651,,,,,651,,651,651,,651',
'651,651,,651,651,651,651,651,651,651,641,,641,,641,641,,,,,,,,,,,,,',
'651,,,,,,,,,,,,,,,,,641,,,,,,,,,641,641,641,,641,,,,641,641,,,,641,',
'641,641,641,641,641,641,641,,,,,,641,641,641,641,641,641,641,,,,641',
'641,641,641,641,641,641,641,641,641,641,,641,641,,641,641,641,,,,,641',
',641,641,,641,641,,,641,641,641,641,641,641,641,617,,617,,617,617,,',
',,,,,,,,,,,641,,,,,,,,,,,,,,,,,617,,,,,,,,,617,617,617,,617,,,,617,617',
',,,617,,617,617,617,617,617,617,617,,,,,,617,617,617,617,617,617,617',
',,,617,617,617,617,617,617,617,617,617,617,617,617,617,617,,617,617',
'617,,,,,617,,617,617,,617,617,,,617,617,617,617,617,617,617,614,,614',
',614,614,,,,,,,,,,,,,,617,,,,,,,,,,,,,,,,,614,,,,,,,,,614,614,614,,614',
',,,614,614,,,,614,,614,614,614,614,614,614,614,,,,,,614,614,614,614',
'614,614,614,,,,614,614,614,614,614,614,614,614,614,614,614,614,614,614',
',614,614,614,,,,,614,,614,614,,614,614,614,,614,614,614,614,614,614',
'614,611,,611,,611,611,,,,,,,,,,,,,,614,,,,,,,,,,,,,,,,,611,,,,,,,,,611',
'611,611,,611,,,,611,611,,,,611,,611,611,611,611,611,611,611,,,,,,611',
'611,611,611,611,611,611,,,,611,611,611,611,611,611,611,611,611,611,611',
',611,611,,611,611,611,,,,,611,,611,611,,611,611,611,,611,611,611,611',
'611,611,611,602,,602,,602,602,,,,,,,,,,,,,,611,,,,,,,,,,,,,,,,,602,',
',,,,,,,602,602,602,,602,,,,602,602,,,,602,,602,602,602,602,602,602,602',
',,,,,602,602,602,602,602,602,602,,,,602,602,602,602,602,602,602,602',
'602,602,602,,602,602,,602,602,602,,,,,602,,602,602,,602,602,,,602,602',
'602,602,602,602,602,15,,15,,15,15,,,,,,,,,,,,,,602,,,,,,,,,,,,,,,,,15',
',,,,,,,,15,15,15,15,15,,,,15,15,,,,15,,15,15,15,15,15,15,15,,,,,,15',
'15,15,15,15,15,15,15,,15,15,15,15,15,15,15,15,15,15,15,15,,15,15,,15',
'15,15,,,,,15,,15,15,,15,15,15,,15,15,15,15,15,15,15,594,,594,,594,594',
',,,,,,,,,,,,,15,,,,,,,,,,,,,,,,,594,,,,,,,,,594,594,594,,594,,,,594',
'594,,,,594,,594,594,594,594,594,594,594,,,,,,594,594,594,594,594,594',
'594,,,,594,594,594,594,594,594,594,594,594,594,594,594,594,594,,594',
'594,594,,,,,594,,594,594,,594,594,594,594,594,594,594,594,594,594,594',
'21,,21,,21,21,,,,,,,,594,,,,,,594,,,,,,,,,,,,,,,,,21,,,,,,,,,21,21,21',
',21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,,21,21,21,21,21,21,21,',
',,21,21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,,,,,21,,21,21,,21',
'21,,,21,21,21,21,21,21,21,26,,26,,26,26,,,,,,,,,,,,,,21,,,,,,,,,,,,',
',,,,26,,,,,,,,,26,26,26,,26,,,,26,26,,,,26,,26,26,26,26,26,26,26,,,',
',,26,26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26,26,,26,26,,26',
'26,26,,,,,26,,26,26,,26,26,,,26,26,26,26,26,26,26,258,,258,,258,258',
',,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,258,,,,,,,,,258,258,258,,258,,,,258',
'258,,,,258,,258,258,258,258,258,258,258,,,,,,258,258,258,258,258,258',
'258,,,,258,258,258,258,258,258,258,258,258,258,258,258,258,258,,258',
'258,258,,,,,258,,258,258,,258,258,258,258,258,258,258,258,258,258,258',
'129,,129,,129,129,,,,,,,,258,,,,,,258,,,,,,,,,,,,,,,,,129,,,,,,,,,129',
'129,129,,129,,,,129,129,,,,129,,129,129,129,129,129,129,129,,,,,,129',
'129,129,129,129,129,129,,,,129,129,129,129,129,129,129,129,129,129,129',
'129,129,129,,129,129,129,,,,,129,,129,129,,129,129,129,129,129,129,129',
'129,129,129,129,30,,30,,30,30,,,,,,,,129,,,,,,129,,,,,,,,,,,,,,,,,30',
',,,,,,,,30,30,30,,30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30',
'30,30,30,30,30,,,,30,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30',
',,,,30,,30,30,,30,30,,,30,30,30,30,30,30,30,582,,582,,582,582,,,,,,',
',,,,,,,30,,,,,,,,,,,,,,,,,582,,,,,,,,,582,582,582,,582,,,,582,582,,',
',582,,582,582,582,582,582,582,582,,,,,,582,582,582,582,582,582,582,',
',,582,582,582,582,582,582,582,582,582,582,582,,582,582,,582,582,582',
',,,,582,,582,582,,582,582,,,582,582,582,582,582,582,582,579,,579,,579',
'579,,,,,,,,,,,,,,582,,,,,,,,,,,,,,,,,579,,,,,,,,,579,579,579,,579,,',
',579,579,,,,579,,579,579,579,579,579,579,579,,,,,,579,579,579,579,579',
'579,579,,,,579,579,579,579,579,579,579,579,579,579,579,579,579,579,',
'579,579,579,,,,,579,,579,579,,579,579,579,579,579,579,579,579,579,579',
'579,45,,45,,45,45,,,,,,,,579,,,,,,579,,,,,,,,,,,,,,,,,45,,,,,,,,,45',
'45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45',
'45,,,,45,45,45,45,45,45,45,45,45,45,45,,45,45,,45,45,45,,,,,45,,45,45',
',45,45,,,45,45,45,45,45,45,45,551,,551,,551,551,,,,,,,,,,,,,,45,,,,',
',,,,,,,,,,,,551,,,,,,,,,551,551,551,,551,,,,551,551,,,,551,,551,551',
'551,551,551,551,551,,,,,,551,551,551,551,551,551,551,,,,551,551,551',
'551,551,551,551,551,551,551,551,,551,551,,551,551,551,,,,,551,,551,551',
',551,551,,,551,551,551,551,551,551,551,549,,549,,549,549,,,,,,,,,,,',
',,551,,,,,,,,,,,,,,,,,549,,,,,,,,,549,549,549,,549,,,,549,549,,,,549',
',549,549,549,549,549,549,549,,,,,,549,549,549,549,549,549,549,,,,549',
'549,549,549,549,549,549,549,549,549,549,,549,549,,549,549,549,,,,,549',
',549,549,,549,549,,,549,549,549,549,549,549,549,764,,764,,764,764,,',
',,,,,,,,,,,549,,,,,,,,,,,,,,,,,764,,,,,,,,,764,764,764,,764,,,,764,764',
',,,764,,764,764,764,764,764,764,764,,,,,,764,764,764,764,764,764,764',
',,,764,764,764,764,764,764,764,764,764,764,764,,764,764,,764,764,764',
',,,,764,,764,764,,764,764,,,764,764,764,764,764,764,764,546,,546,,546',
'546,,,,,,,,,,,,,,764,,,,,,,,,,,,,,,,,546,,,,,,,,,546,546,546,,546,,',
',546,546,,,,546,,546,546,546,546,546,546,546,,,,,,546,546,546,546,546',
'546,546,,,,546,546,546,546,546,546,546,546,546,546,546,,546,546,,546',
'546,546,,,,,546,,546,546,,546,546,546,,546,546,546,546,546,546,546,50',
',50,,50,50,,,,,,,,,,,,,,546,,,,,,,,,,,,,,,,,50,,,,,,,,,50,50,50,,50',
',,,50,50,,,,50,,50,50,50,50,50,50,50,,,,,,50,50,50,50,50,50,50,,,,50',
'50,50,50,50,50,50,50,50,50,50,,50,50,,50,50,50,,,,,50,,50,50,,50,50',
',,50,50,50,50,50,50,50,528,,528,,528,528,,,,,,,,,,,,,,50,,,,,,,,,,,',
',,,,,528,,,,,,,,,528,528,528,,528,,,,528,528,,,,528,,528,528,528,528',
'528,528,528,,,,,,528,528,528,528,528,528,528,,,,528,528,528,528,528',
'528,528,528,528,528,528,,528,528,,528,528,528,,,,,528,,528,528,,528',
'528,,,528,528,528,528,528,528,528,527,,527,,527,527,,,,,,,,,,,,,,528',
',,,,,,,,,,,,,,,,527,,,,,,,,,527,527,527,,527,,,,527,527,,,,527,,527',
'527,527,527,527,527,527,,,,,,527,527,527,527,527,527,527,,,,527,527',
'527,527,527,527,527,527,527,527,527,,527,527,,527,527,527,,,,,527,,527',
'527,,527,527,,,527,527,527,527,527,527,527,776,,776,,776,776,,,,,,,',
',,,,,,527,,,,,,,,,,,,,,,,,776,,,,,,,,,776,776,776,,776,,,,776,776,,',
',776,,776,776,776,776,776,776,776,,,,,,776,776,776,776,776,776,776,',
',,776,776,776,776,776,776,776,776,776,776,776,,776,776,,776,776,776',
',,,,776,,776,776,,776,776,,,776,776,776,776,776,776,776,778,,778,,778',
'778,,,,,,,,,,,,,,776,,,,,,,,,,,,,,,,,778,,,,,,,,,778,778,778,,778,,',
',778,778,,,,778,,778,778,778,778,778,778,778,,,,,,778,778,778,778,778',
'778,778,,,,778,778,778,778,778,778,778,778,778,778,778,,778,778,,778',
'778,778,,,,,778,,778,778,,778,778,,,778,778,778,778,778,778,778,507',
',507,,507,507,,,,,,,,,,,,,,778,,,,,,,,,,,,,,,,,507,,,,,,,,,507,507,507',
',507,,,,507,507,,,,507,,507,507,507,507,507,507,507,,,,,,507,507,507',
'507,507,507,507,,,,507,507,507,507,507,507,507,507,507,507,507,507,507',
'507,,507,507,507,,,,,507,,507,507,,507,507,507,507,507,507,507,507,507',
'507,507,53,,53,,53,53,,,,,,,,507,,,,,,507,,,,,,,,,,,,,,,,,53,,,,,,,',
',53,53,53,,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,,53,53,53,53',
'53,53,53,,,,53,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53,,,,,53',
',53,53,,53,53,,,53,53,53,53,53,53,53,56,,56,,56,56,,,,,,,,,,,,,,53,',
',,,,,,,,,,,,,,,56,,,,,,,,,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56',
'56,56,,,,,,56,56,56,56,56,56,56,,,,56,56,56,56,56,56,56,56,56,56,56',
'56,56,56,,56,56,56,,,,,56,,56,56,,56,56,56,56,56,56,56,56,56,56,56,57',
',57,,57,57,,,,,,,,56,,,,,,56,,,,,,,,,,,,,,,,,57,,,,,,,,,57,57,57,,57',
',,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,,57',
'57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57,,,,,57,,57,57,,57,57',
',,57,57,57,57,57,57,57,779,,779,,779,779,,,,,,,,,,,,,,57,,,,,,,,,,,',
',,,,,779,,,,,,,,,779,779,779,,779,,,,779,779,,,,779,,779,779,779,779',
'779,779,779,,,,,,779,779,779,779,779,779,779,,,,779,779,779,779,779',
'779,779,779,779,779,779,,779,779,,779,779,779,,,,,779,,779,779,,779',
'779,,,779,779,779,779,779,779,779,63,,63,,63,63,,,,,,,,,,,,,,779,,,',
',,,,,,,,,,,,,63,,,,,,,,,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63',
'63,63,,,,,,63,63,63,63,63,63,63,,,,63,63,63,63,63,63,63,63,63,63,63',
',63,63,,63,63,63,,,,,63,,63,63,,63,63,,,63,63,63,63,63,63,63,781,,781',
',781,781,,,,,,,,,,,,,,63,,,,,,,,,,,,,,,,,781,,,,,,,,,781,781,781,,781',
',,,781,781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781,781,781',
'781,781,781,,,,781,781,781,781,781,781,781,781,781,781,781,,781,781',
',781,781,781,,,,,781,,781,781,,781,781,,,781,781,781,781,781,781,781',
'65,,65,,65,65,,,,,,,,,,,,,,781,,,,,,,,,,,,,,,,,65,,,,,,,,,65,65,65,',
'65,,,,65,65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,',
',65,65,65,65,65,65,65,65,65,65,65,65,65,65,,65,65,65,,,,,65,,65,65,',
'65,65,65,65,65,65,65,65,65,65,65,926,,926,,926,926,,,,,,,,65,,,,,,65',
',,,,,,,,,,,,,,,,926,,,,,,,,,926,926,926,,926,,,,926,926,,,,926,,926',
'926,926,926,926,926,926,,,,,,926,926,926,926,926,926,926,,,,926,926',
'926,926,926,926,926,926,926,926,926,926,926,926,,926,926,926,,,,,926',
',926,926,,926,926,926,926,926,926,926,926,926,926,926,293,,293,,293',
'293,,,,,,,,926,,,,,,926,,,,,,,,,,,,,,,,,293,,,,,,,,,293,293,293,,293',
',,,293,293,,,,293,,293,293,293,293,293,293,293,,,,,,293,293,293,293',
'293,293,293,,,,293,293,293,293,293,293,293,293,293,293,293,,293,293',
',293,293,293,,,,,293,,293,293,,293,293,,,293,293,293,293,293,293,293',
'87,,87,,87,87,,,,,,,,,,,,,,293,,,,,,,,,,,,,,,,,87,,,,,,,,,87,87,87,',
'87,,,,87,87,,,,87,,87,87,87,87,87,87,87,,,,,,87,87,87,87,87,87,87,,',
',87,87,87,87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,87,,87,87,,87',
'87,,,87,87,87,87,87,87,87,862,,862,,862,862,,,,,,,,,,,,,,87,,,,,,,,',
',,,,,,,,862,,,,,,,,,862,862,862,,862,,,,862,862,,,,862,,862,862,862',
'862,862,862,862,,,,,,862,862,862,862,862,862,862,,,,862,862,862,862',
'862,862,862,862,862,862,862,,862,862,,862,862,862,,,,,862,,862,862,',
'862,862,,,862,862,862,862,862,862,862,451,,451,,451,451,,,,,,,,,,,,',
',862,,,,,,,,,,,,,,,,,451,,,,,,,,,451,451,451,,451,,,,451,451,,,,451',
',451,451,451,451,451,451,451,,,,,,451,451,451,451,451,451,451,,,,451',
'451,451,451,451,451,451,451,451,451,451,,451,451,,451,451,451,,,,,451',
',451,451,,451,451,,,451,451,451,451,451,451,451,96,,96,,96,96,,,,,,',
',,,,,,,451,,,,,,,,,,,,,,,,,96,,,,,,,,,96,96,96,,96,,,,96,96,,,,96,,96',
'96,96,96,96,96,96,,,,,,96,96,96,96,96,96,96,,,,96,96,96,96,96,96,96',
'96,96,96,96,96,96,96,,96,96,96,,,,,96,,96,96,,96,96,96,,96,96,96,96',
'96,96,96,360,,360,,360,360,,,,,,,,,,,,,,96,,,,,,,,,,,,,,,,,360,,,,,',
',,,360,360,360,360,360,,,,360,360,,,,360,,360,360,360,360,360,360,360',
',,,,,360,360,360,360,360,360,360,360,,360,360,360,360,360,360,360,360',
'360,360,360,360,,360,360,,360,360,360,,,,,360,,360,360,,360,360,360',
',360,360,360,360,360,360,360,436,,436,,436,436,,,,,,,,,,,,,,360,,,,',
',,,,,,,,,,,,436,,,,,,,,,436,436,436,,436,,,,436,436,,,,436,,436,436',
'436,436,436,436,436,,,,,,436,436,436,436,436,436,436,,,,436,436,436',
'436,436,436,436,436,436,436,436,,436,436,,436,436,436,,,,,436,,436,436',
',436,436,,,436,436,436,436,436,436,436,430,,430,,430,430,,,,,,,,,,,',
',,436,,,,,,,,,,,,,,,,,430,,,,,,,,,430,430,430,,430,,,,430,430,,,,430',
',430,430,430,430,430,430,430,,,,,,430,430,430,430,430,430,430,,,,430',
'430,430,430,430,430,430,430,430,430,430,,430,430,,430,430,430,,,,,430',
',430,430,,430,430,,,430,430,430,430,430,430,430,425,,425,,425,425,,',
',,,,,,,,,,,430,,,,,,,,,,,,,,,,,425,,,,,,,,,425,425,425,,425,,,,425,425',
',,,425,,425,425,425,425,425,425,425,,,,,,425,425,425,425,425,425,425',
',,,425,425,425,425,425,425,425,425,425,425,425,,425,425,,425,425,425',
',,,,425,,425,425,,425,425,,,425,425,425,425,425,425,425,424,,424,,424',
'424,,,,,,,,,,,,,,425,,,,,,,,,,,,,,,,,424,,,,,,,,,424,424,424,,424,,',
',424,424,,,,424,,424,424,424,424,424,424,424,,,,,,424,424,424,424,424',
'424,424,,,,424,424,424,424,424,424,424,424,424,424,424,,424,424,,424',
'424,424,,,,,424,,424,424,,424,424,,,424,424,424,424,424,424,424,305',
',305,,305,305,,,,,,,,,,,,,,424,,,,,,,,,,,,,,,,,305,,,,,,,,,305,305,305',
',305,,,,305,305,,,,305,,305,305,305,305,305,305,305,,,,,,305,305,305',
'305,305,305,305,,,,305,305,305,305,305,305,305,305,305,305,305,,305',
'305,,305,305,305,,,,,305,,305,305,,305,305,,,305,305,305,305,305,305',
'305,306,,306,,306,306,,,,,,,,,,,,,,305,,,,,,,,,,,,,,,,,306,,,,,,,,,306',
'306,306,306,306,,,,306,306,,,,306,,306,306,306,306,306,306,306,,,,,',
'306,306,306,306,306,306,306,306,,306,306,306,306,306,306,306,306,306',
'306,306,306,,306,306,,306,306,306,,,,,306,,306,306,,306,306,306,,306',
'306,306,306,306,306,306,307,,307,,307,307,,,,,,,,,,,,,,306,,,,,,,,,',
',,,,,,,307,,,,,,,,,307,307,307,,307,,,,307,307,,,,307,,307,307,307,307',
'307,307,307,,,,,,307,307,307,307,307,307,307,,,,307,307,307,307,307',
'307,307,307,307,307,307,,307,307,,307,307,307,,,,,307,,307,307,,307',
'307,,,307,307,307,307,307,307,307,308,,308,,308,308,,,,,,,,,,,,,,307',
',,,,,,,,,,,,,,,,308,,,,,,,,,308,308,308,,308,,,,308,308,,,,308,,308',
'308,308,308,308,308,308,,,,,,308,308,308,308,308,308,308,,,,308,308',
'308,308,308,308,308,308,308,308,308,,308,308,,308,308,308,,,,,308,,308',
'308,,308,308,,,308,308,308,308,308,308,308,309,,309,,309,309,,,,,,,',
',,,,,,308,,,,,,,,,,,,,,,,,309,,,,,,,,,309,309,309,,309,,,,309,309,,',
',309,,309,309,309,309,309,309,309,,,,,,309,309,309,309,309,309,309,',
',,309,309,309,309,309,309,309,309,309,309,309,,309,309,,309,309,309',
',,,,309,,309,309,,309,309,,,309,309,309,309,309,309,309,422,,422,,422',
'422,,,,,,,,,,,,,,309,,,,,,,,,,,,,,,,,422,,,,,,,,,422,422,422,,422,,',
',422,422,,,,422,,422,422,422,422,422,422,422,,,,,,422,422,422,422,422',
'422,422,,,,422,422,422,422,422,422,422,422,422,422,422,422,422,422,',
'422,422,422,,,,,422,,422,422,,422,422,,422,422,422,422,422,422,422,422',
'100,,100,,100,100,,,,,,,,422,,,,,,422,,,,,,,,,,,,,,,,,100,,,,,,,,,100',
'100,100,,100,,,,100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100',
'100,100,100,100,100,100,,,,100,100,100,100,100,100,100,100,100,100,100',
'100,100,100,,100,100,100,,,,,100,,100,100,,100,100,100,100,100,100,100',
'100,100,100,100,313,,313,,313,313,,,,,,,,100,,,,,,100,,,,,,,,,,,,,,',
',,313,,,,,,,,,313,313,313,,313,,,,313,313,,,,313,,313,313,313,313,313',
'313,313,,,,,,313,313,313,313,313,313,313,,,,313,313,313,313,313,313',
'313,313,313,313,313,,313,313,,313,313,313,,,,,313,,313,313,,313,313',
',,313,313,313,313,313,313,313,314,,314,,314,314,,,,,,,,,,,,,,313,,,',
',,,,,,,,,,,,,314,,,,,,,,,314,314,314,,314,,,,314,314,,,,314,,314,314',
'314,314,314,314,314,,,,,,314,314,314,314,314,314,314,,,,314,314,314',
'314,314,314,314,314,314,314,314,,314,314,,314,314,314,,,,,314,,314,314',
',314,314,,,314,314,314,314,314,314,314,419,,419,,419,419,,,,,,,,,,,',
',,314,,,,,,,,,,,,,,,,,419,,,,,,,,,419,419,419,,419,,,,419,419,,,,419',
',419,419,419,419,419,419,419,,,,,,419,419,419,419,419,419,419,,,,419',
'419,419,419,419,419,419,419,419,419,419,419,419,419,,419,419,419,,,',
',419,,419,419,,419,419,419,419,419,419,419,419,419,419,419,415,,415',
',415,415,,,,,,,,419,,,,,,419,,,,,,,,,,,,,,,,,415,,,,,,,,,415,415,415',
',415,,,,415,415,,,,415,,415,415,415,415,415,415,415,,,,,,415,415,415',
'415,415,415,415,,,,415,415,415,415,415,415,415,415,415,415,415,415,415',
'415,,415,415,415,,,,,415,,415,415,,415,415,415,415,415,415,415,415,415',
'415,415,414,,414,,414,414,,,,,,,,415,,,,,,415,,,,,,,,,,,,,,,,,414,,',
',,,,,,414,414,414,,414,,,,414,414,,,,414,,414,414,414,414,414,414,414',
',,,,,414,414,414,414,414,414,414,,,,414,414,414,414,414,414,414,414',
'414,414,414,,414,414,,414,414,414,,,,,414,,414,414,,414,414,,,414,414',
'414,414,414,414,414,103,,103,,103,103,,,,,,,,,,,,,,414,,,,,,,,,,,,,',
',,,103,,,,,,,,,103,103,103,,103,,,,103,103,,,,103,,103,103,103,103,103',
'103,103,,,,,,103,103,103,103,103,103,103,,,,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,,103,103,103,,,,,103,,103,103,,103,103',
',,103,103,103,103,103,103,103,118,,118,,118,118,,,,,,,,,,,,,,103,,,',
',,,,,,,,,,,,,118,,,,,,,,,118,118,118,,118,,,,118,118,,,,118,,118,118',
'118,118,118,118,118,,,,,,118,118,118,118,118,118,118,,,,118,118,118',
'118,118,118,118,118,118,118,118,,118,118,,118,118,118,,,,,118,,118,118',
',118,118,,,118,118,118,118,118,118,118,401,,401,,401,401,,,,,,,,,,,',
',,118,,,,,,,,,,,,,,,,,401,,,,,,,,,401,401,401,,401,,,,401,401,,,,401',
',401,401,401,401,401,401,401,,,,,,401,401,401,401,401,401,401,,,,401',
'401,401,401,401,401,401,401,401,401,401,,401,401,,401,401,401,,,,,401',
',401,401,,401,401,,,401,401,401,401,401,401,401,322,,322,,322,322,,',
',,,,,,,,,,,401,,,,,,,,,,,,,,,,,322,,,,,,,,,322,322,322,,322,,,,322,322',
',,,322,,322,322,322,322,322,322,322,,,,,,322,322,322,322,322,322,322',
',,,322,322,322,322,322,322,322,322,322,322,322,,322,322,,322,322,322',
',,,,322,,322,322,,322,322,,,322,322,322,322,322,322,322,323,,323,,323',
'323,,,,,,,,,,,,,,322,,,,,,,,,,,,,,,,,323,,,,,,,,,323,323,323,,323,,',
',323,323,,,,323,,323,323,323,323,323,323,323,,,,,,323,323,323,323,323',
'323,323,,,,323,323,323,323,323,323,323,323,323,323,323,,323,323,,323',
'323,323,,,,,323,,323,323,,323,323,,,323,323,323,323,323,323,323,324',
',324,,324,324,,,,,,,,,,,,,,323,,,,,,,,,,,,,,,,,324,,,,,,,,,324,324,324',
',324,,,,324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324',
'324,324,324,324,,,,324,324,324,324,324,324,324,324,324,324,324,,324',
'324,,324,324,324,,,,,324,,324,324,,324,324,,,324,324,324,324,324,324',
'324,325,,325,,325,325,,,,,,,,,,,,,,324,,,,,,,,,,,,,,,,,325,,,,,,,,,325',
'325,325,,325,,,,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325',
'325,325,325,325,325,325,,,,325,325,325,325,325,325,325,325,325,325,325',
',325,325,,325,325,325,,,,,325,,325,325,,325,325,,,325,325,325,325,325',
'325,325,326,,326,,326,326,,,,,,,,,,,,,,325,,,,,,,,,,,,,,,,,326,,,,,',
',,,326,326,326,,326,,,,326,326,,,,326,,326,326,326,326,326,326,326,',
',,,,326,326,326,326,326,326,326,,,,326,326,326,326,326,326,326,326,326',
'326,326,,326,326,,326,326,326,,,,,326,,326,326,,326,326,,,326,326,326',
'326,326,326,326,327,,327,,327,327,,,,,,,,,,,,,,326,,,,,,,,,,,,,,,,,327',
',,,,,,,,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327,327,327',
'327,,,,,,327,327,327,327,327,327,327,,,,327,327,327,327,327,327,327',
'327,327,327,327,,327,327,,327,327,327,,,,,327,,327,327,,327,327,,,327',
'327,327,327,327,327,327,328,,328,,328,328,,,,,,,,,,,,,,327,,,,,,,,,',
',,,,,,,328,,,,,,,,,328,328,328,,328,,,,328,328,,,,328,,328,328,328,328',
'328,328,328,,,,,,328,328,328,328,328,328,328,,,,328,328,328,328,328',
'328,328,328,328,328,328,,328,328,,328,328,328,,,,,328,,328,328,,328',
'328,,,328,328,328,328,328,328,328,329,,329,,329,329,,,,,,,,,,,,,,328',
',,,,,,,,,,,,,,,,329,,,,,,,,,329,329,329,,329,,,,329,329,,,,329,,329',
'329,329,329,329,329,329,,,,,,329,329,329,329,329,329,329,,,,329,329',
'329,329,329,329,329,329,329,329,329,,329,329,,329,329,329,,,,,329,,329',
'329,,329,329,,,329,329,329,329,329,329,329,330,,330,,330,330,,,,,,,',
',,,,,,329,,,,,,,,,,,,,,,,,330,,,,,,,,,330,330,330,,330,,,,330,330,,',
',330,,330,330,330,330,330,330,330,,,,,,330,330,330,330,330,330,330,',
',,330,330,330,330,330,330,330,330,330,330,330,,330,330,,330,330,330',
',,,,330,,330,330,,330,330,,,330,330,330,330,330,330,330,331,,331,,331',
'331,,,,,,,,,,,,,,330,,,,,,,,,,,,,,,,,331,,,,,,,,,331,331,331,,331,,',
',331,331,,,,331,,331,331,331,331,331,331,331,,,,,,331,331,331,331,331',
'331,331,,,,331,331,331,331,331,331,331,331,331,331,331,,331,331,,331',
'331,331,,,,,331,,331,331,,331,331,,,331,331,331,331,331,331,331,332',
',332,,332,332,,,,,,,,,,,,,,331,,,,,,,,,,,,,,,,,332,,,,,,,,,332,332,332',
',332,,,,332,332,,,,332,,332,332,332,332,332,332,332,,,,,,332,332,332',
'332,332,332,332,,,,332,332,332,332,332,332,332,332,332,332,332,,332',
'332,,332,332,332,,,,,332,,332,332,,332,332,,,332,332,332,332,332,332',
'332,333,,333,,333,333,,,,,,,,,,,,,,332,,,,,,,,,,,,,,,,,333,,,,,,,,,333',
'333,333,,333,,,,333,333,,,,333,,333,333,333,333,333,333,333,,,,,,333',
'333,333,333,333,333,333,,,,333,333,333,333,333,333,333,333,333,333,333',
',333,333,,333,333,333,,,,,333,,333,333,,333,333,,,333,333,333,333,333',
'333,333,334,,334,,334,334,,,,,,,,,,,,,,333,,,,,,,,,,,,,,,,,334,,,,,',
',,,334,334,334,,334,,,,334,334,,,,334,,334,334,334,334,334,334,334,',
',,,,334,334,334,334,334,334,334,,,,334,334,334,334,334,334,334,334,334',
'334,334,,334,334,,334,334,334,,,,,334,,334,334,,334,334,,,334,334,334',
'334,334,334,334,335,,335,,335,335,,,,,,,,,,,,,,334,,,,,,,,,,,,,,,,,335',
',,,,,,,,335,335,335,,335,,,,335,335,,,,335,,335,335,335,335,335,335',
'335,,,,,,335,335,335,335,335,335,335,,,,335,335,335,335,335,335,335',
'335,335,335,335,,335,335,,335,335,335,,,,,335,,335,335,,335,335,,,335',
'335,335,335,335,335,335,336,,336,,336,336,,,,,,,,,,,,,,335,,,,,,,,,',
',,,,,,,336,,,,,,,,,336,336,336,,336,,,,336,336,,,,336,,336,336,336,336',
'336,336,336,,,,,,336,336,336,336,336,336,336,,,,336,336,336,336,336',
'336,336,336,336,336,336,,336,336,,336,336,336,,,,,336,,336,336,,336',
'336,,,336,336,336,336,336,336,336,337,,337,,337,337,,,,,,,,,,,,,,336',
',,,,,,,,,,,,,,,,337,,,,,,,,,337,337,337,,337,,,,337,337,,,,337,,337',
'337,337,337,337,337,337,,,,,,337,337,337,337,337,337,337,,,,337,337',
'337,337,337,337,337,337,337,337,337,,337,337,,337,337,337,,,,,337,,337',
'337,,337,337,,,337,337,337,337,337,337,337,338,,338,,338,338,,,,,,,',
',,,,,,337,,,,,,,,,,,,,,,,,338,,,,,,,,,338,338,338,,338,,,,338,338,,',
',338,,338,338,338,338,338,338,338,,,,,,338,338,338,338,338,338,338,',
',,338,338,338,338,338,338,338,338,338,338,338,,338,338,,338,338,338',
',,,,338,,338,338,,338,338,,,338,338,338,338,338,338,338,339,,339,,339',
'339,,,,,,,,,,,,,,338,,,,,,,,,,,,,,,,,339,,,,,,,,,339,339,339,,339,,',
',339,339,,,,339,,339,339,339,339,339,339,339,,,,,,339,339,339,339,339',
'339,339,,,,339,339,339,339,339,339,339,339,339,339,339,,339,339,,339',
'339,339,,,,,339,,339,339,,339,339,,,339,339,339,339,339,339,339,340',
',340,,340,340,,,,,,,,,,,,,,339,,,,,,,,,,,,,,,,,340,,,,,,,,,340,340,340',
',340,,,,340,340,,,,340,,340,340,340,340,340,340,340,,,,,,340,340,340',
'340,340,340,340,,,,340,340,340,340,340,340,340,340,340,340,340,,340',
'340,,340,340,340,,,,,340,,340,340,,340,340,,,340,340,340,340,340,340',
'340,341,,341,,341,341,,,,,,,,,,,,,,340,,,,,,,,,,,,,,,,,341,,,,,,,,,341',
'341,341,,341,,,,341,341,,,,341,,341,341,341,341,341,341,341,,,,,,341',
'341,341,341,341,341,341,,,,341,341,341,341,341,341,341,341,341,341,341',
',341,341,,341,341,341,,,,,341,,341,341,,341,341,,,341,341,341,341,341',
'341,341,342,,342,,342,342,,,,,,,,,,,,,,341,,,,,,,,,,,,,,,,,342,,,,,',
',,,342,342,342,,342,,,,342,342,,,,342,,342,342,342,342,342,342,342,',
',,,,342,342,342,342,342,342,342,,,,342,342,342,342,342,342,342,342,342',
'342,342,,342,342,,342,342,342,,,,,342,,342,342,,342,342,,,342,342,342',
'342,342,342,342,343,,343,,343,343,,,,,,,,,,,,,,342,,,,,,,,,,,,,,,,,343',
',,,,,,,,343,343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343',
'343,,,,,,343,343,343,343,343,343,343,,,,343,343,343,343,343,343,343',
'343,343,343,343,,343,343,,343,343,343,,,,,343,,343,343,,343,343,,,343',
'343,343,343,343,343,343,344,,344,,344,344,,,,,,,,,,,,,,343,,,,,,,,,',
',,,,,,,344,,,,,,,,,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344',
'344,344,344,,,,,,344,344,344,344,344,344,344,,,,344,344,344,344,344',
'344,344,344,344,344,344,,344,344,,344,344,344,,,,,344,,344,344,,344',
'344,,,344,344,344,344,344,344,344,345,,345,,345,345,,,,,,,,,,,,,,344',
',,,,,,,,,,,,,,,,345,,,,,,,,,345,345,345,,345,,,,345,345,,,,345,,345',
'345,345,345,345,345,345,,,,,,345,345,345,345,345,345,345,,,,345,345',
'345,345,345,345,345,345,345,345,345,,345,345,,345,345,345,,,,,345,,345',
'345,,345,345,,,345,345,345,345,345,345,345,346,,346,,346,346,,,,,,,',
',,,,,,345,,,,,,,,,,,,,,,,,346,,,,,,,,,346,346,346,,346,,,,346,346,,',
',346,,346,346,346,346,346,346,346,,,,,,346,346,346,346,346,346,346,',
',,346,346,346,346,346,346,346,346,346,346,346,,346,346,,346,346,346',
',,,,346,,346,346,,346,346,,,346,346,346,346,346,346,346,347,,347,,347',
'347,,,,,,,,,,,,,,346,,,,,,,,,,,,,,,,,347,,,,,,,,,347,347,347,,347,,',
',347,347,,,,347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347',
'347,347,,,,347,347,347,347,347,347,347,347,347,347,347,,347,347,,347',
'347,347,,,,,347,,347,347,,347,347,,,347,347,347,347,347,347,347,822',
',822,,822,822,,,,,,,,,,,,,,347,,,,,,,,,,,,,,,,,822,,,,,,,,,822,822,822',
',822,,,,822,822,,,,822,,822,822,822,822,822,822,822,,,,,,822,822,822',
'822,822,822,822,,,,822,822,822,822,822,822,822,822,822,822,822,,822',
'822,,822,822,822,,,,,822,,822,822,,822,822,,,822,822,822,822,822,822',
'822,388,,388,,388,388,,,,,,,,,,,,,,822,,,,,,,,,,,,,,,,,388,,,,,,,,,388',
'388,388,,388,,,,388,388,,,,388,,388,388,388,388,388,388,388,,,,,,388',
'388,388,388,388,388,388,,,,388,388,388,388,388,388,388,388,388,388,388',
',388,388,,388,388,388,,,,,388,,388,388,,388,388,388,,388,388,388,388',
'388,388,388,140,,140,,140,140,,,,,,,,,,,,,,388,,,,,,,,,,,,,,,,,140,',
',,,,,,,140,140,140,,140,,,,140,140,,,,140,,140,140,140,140,140,140,140',
',,,,,140,140,140,140,140,140,140,,,,140,140,140,140,140,140,140,140',
'140,140,140,,140,140,,140,140,140,,,,,140,,140,140,,140,140,140,,140',
'140,140,140,140,140,140,112,,112,,112,112,,,,,,,,,,,,,,140,,,,,,,,,',
',,,,,,,112,,,,,,,,,112,112,112,,112,,,,112,112,,,,112,,112,112,112,112',
'112,112,112,,,,,,112,112,112,112,112,112,112,,,,112,112,112,112,112',
'112,112,112,112,112,112,,112,112,,112,112,112,,,,,112,,112,112,,112',
'112,,,112,112,112,112,112,112,112,376,,376,,376,376,,,,,,,,,,,,,,112',
',,,,,,,,,,,,,,,,376,,,,,,,,,376,376,376,,376,,,,376,376,,,,376,,376',
'376,376,376,376,376,376,,,,,,376,376,376,376,376,376,376,,,,376,376',
'376,376,376,376,376,376,376,376,376,,376,376,,376,376,376,,,,,376,,376',
'376,,376,376,,,376,376,376,376,376,376,376,114,,114,,114,114,,,,,,,',
',,,,,,376,,,,,,,,,,,,,,,,,114,,,,,,,,,114,114,114,,114,,,,114,114,,',
',114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114,',
',,114,114,114,114,114,114,114,114,114,114,114,,114,114,,114,114,114',
',,,,114,,114,114,,114,114,,,114,114,114,114,114,114,114,836,,836,,836',
'836,,,,,,,,,,,,,,114,,,,,,,,,,,,,,,,,836,,,,,,,,,836,836,836,,836,,',
',836,836,,,,836,,836,836,836,836,836,836,836,,,,,,836,836,836,836,836',
'836,836,,,,836,836,836,836,836,836,836,836,836,836,836,,836,836,,836',
'836,836,,,,,836,,836,836,,836,836,836,,836,836,836,836,836,836,836,840',
',840,,840,840,,,,,,,,,,,,,,836,,,,,,,,,,,,,,,,,840,,,,,,,,,840,840,840',
',840,,,,840,840,,,,840,,840,840,840,840,840,840,840,,,,,,840,840,840',
'840,840,840,840,,,,840,840,840,840,840,840,840,840,840,840,840,,840',
'840,,840,840,840,,,,,840,,840,840,,840,840,,,840,840,840,840,840,840',
'840,696,,696,,696,696,,,,,,,,,,,,,,840,,,,,,,,,,,,,,,,,696,,,,,,,,,696',
'696,696,,696,,,,696,696,,,,696,,696,696,696,696,696,696,696,,,,,,696',
'696,696,696,696,696,696,,,,696,696,696,696,696,696,696,696,696,696,696',
',696,696,,696,696,696,,,,,696,,696,696,,696,696,,,696,696,696,696,696',
'696,696,,,,,,,,560,,,,,,,,560,560,,,696,560,560,560,560,560,560,560',
'560,560,560,560,560,560,560,560,557,,,,,,,,557,557,,,,557,557,557,557',
'557,557,557,557,557,557,557,557,557,557,557,797,,,,,,,,797,797,,,,797',
'797,797,797,797,797,797,797,797,797,797,797,797,797,797,554,,,,,,,,554',
'554,,,,554,554,554,554,554,554,554,554,554,554,554,554,554,554,554,',
',,,,,,,,,,,,,,,560,560,560,560,560,560,560,560,,,,,,,,,,,,,,,,,,,,,557',
'557,557,557,557,557,557,557,,,,,,,,,,,,,,,,,,,,,797,797,797,797,797',
'797,797,797,,,,,,,,,,,,,,,,,,,,,554,554,554,554,554,554,554,554,550',
',,,,,,,550,550,,,,550,550,550,550,550,550,550,550,550,550,550,550,550',
'550,550,621,,,,,,,,621,621,,,,621,621,621,621,621,621,621,621,621,621',
'621,621,621,621,621,447,621,,,,,,,447,447,,,,447,447,447,447,447,447',
'447,447,447,447,447,447,447,447,447,826,447,,,,,,,826,826,,,,826,826',
'826,826,826,826,826,826,826,826,826,826,826,826,826,,,,,,,,,,,,,,,,',
'550,550,550,550,550,550,550,550,,,,,,,,,,,,,,,,,,,,621,621,621,621,621',
'621,621,621,621,,,,,,,,,,,,,,,,,,,,,447,447,447,447,447,447,447,447',
',,,,,,,,,,,,,,,,,,,,826,826,826,826,826,826,826,826,824,,,,,,,,824,824',
',,,824,824,824,824,824,824,824,824,824,824,824,824,824,824,824,890,',
',,,,,,890,890,,,,890,890,890,890,890,890,890,890,890,890,890,890,890',
'890,890,857,,,,,,,,857,857,,,,857,857,857,857,857,857,857,857,857,857',
'857,857,857,857,857,565,,,,,,,,565,565,,,,565,565,565,565,565,565,565',
'565,565,565,565,565,565,565,565,,,,,,,,,,,,,,,,,824,824,824,824,824',
'824,824,824,,,,,,,,,,,,,,,,,,,,,890,890,890,890,890,890,890,890,,,,',
',,,,,,,,,,,,,,,,857,857,857,857,857,857,857,857,,,,,,,,,,,,,,,,,,,,',
'565,565,565,565,565,565,565,565,883,,,,,,,,883,883,,,,883,883,883,883',
'883,883,883,883,883,883,883,883,883,883,883,820,,,,,,,,820,820,,,,820',
'820,820,820,820,820,820,820,820,820,820,820,820,820,820,75,,,,,,,,75',
'75,,,,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,731,,,,,,,,731,731',
',,,731,731,731,731,731,731,731,731,731,731,731,731,731,731,731,,,,,',
',,,,,,,,,,,883,883,883,883,883,883,883,883,,,,,,,,,,,,,,,,,,,,,820,820',
'820,820,820,820,820,820,,,,,,,,,,,,,,,,,,,,,75,75,75,75,75,75,75,75',
',,,,,,,,,,,,,,,,,,,,731,731,731,731,731,731,731,731,131,,,,,,,,131,131',
',,,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,567,',
',,,,,,567,567,,,,567,567,567,567,567,567,567,567,567,567,567,567,567',
'567,567,570,,,,,,,,570,570,,,,570,570,570,570,570,570,570,570,570,570',
'570,570,570,570,570,650,,,,,,,,650,650,,,,650,650,650,650,650,650,650',
'650,650,650,650,650,650,650,650,,650,,,,,,,,,,,,,,,131,131,131,131,131',
'131,131,131,,,,,,,,,,,,,,,,,,,,,567,567,567,567,567,567,567,567,,,,',
',,,,,,,,,,,,,,,,570,570,570,570,570,570,570,570,,,,,,,,,,,,,,,,,,,,',
'650,650,650,650,650,650,650,650,521,,,,,,,,521,521,,,,521,521,521,521',
'521,521,521,521,521,521,521,521,521,521,521,573,,,,,,,,573,573,,,,573',
'573,573,573,573,573,573,573,573,573,573,573,573,573,818,,,,,,,,818,818',
',,,818,818,818,818,818,818,818,818,818,818,818,818,818,818,818,575,',
',,,,,,575,575,,,,575,575,575,575,575,575,575,575,575,575,575,575,575',
'575,,,,,,,,,,,,,,,,,,,521,521,521,521,521,521,521,521,,,,,,,,,,,,,,',
',,,,,,573,573,573,573,573,573,573,573,,,,,,,,,,,,,,,,,,,,818,818,818',
'818,818,818,818,818,,,,,,,,,,,,,,,,,,,,,575,575,575,575,575,575,575',
'575,572,,,,,,,,572,572,,,,572,572,572,572,572,572,572,572,572,572,572',
'572,572,572,572,312,,,,,,,,312,312,,,,312,312,312,312,312,312,312,312',
'312,312,312,312,312,312,312,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,286,,,,,572,572,572,572,572,572,572,572,',
',,,,,,,,,,,,,,,,,,286,312,312,312,312,312,312,312,312,286,286,286,,286',
',,,286,286,,,,286,,286,286,286,286,286,286,286,,,,,,286,286,286,286',
'286,286,286,110,,,286,286,286,286,286,286,286,286,286,286,286,,286,286',
',286,286,286,,,,,286,,286,286,,286,286,110,,286,286,286,286,286,286',
'286,110,110,110,,110,,,,110,110,286,,,110,,110,110,110,110,110,110,110',
',,,,,110,110,110,110,110,110,110,102,,,110,110,110,110,110,110,110,110',
'110,110,110,,110,110,,110,110,110,,,,,110,,110,110,,110,110,102,,110',
'110,110,110,110,110,110,102,102,102,,102,,,,102,102,110,,,102,,102,102',
'102,102,102,102,102,,,,,,102,102,102,102,102,102,102,516,,,102,102,102',
'102,102,102,102,102,102,102,102,,102,102,,102,102,102,,,,,102,,102,102',
',102,102,516,,102,102,102,102,102,102,102,516,516,516,,516,,,,516,516',
',,,516,,516,516,516,516,516,516,516,,,,,,516,516,516,516,516,516,516',
',,,516,516,516,516,516,516,516,516,516,516,516,89,516,516,,516,516,516',
'89,,,,516,,516,516,,516,516,,,516,516,516,516,516,516,516,,,,,,89,,',
',,,,,,89,89,89,,89,,,,89,89,,,,89,,89,89,89,89,89,89,89,,,,,,89,89,89',
'89,89,89,89,35,,,89,89,89,89,89,89,89,89,89,89,89,,89,89,,89,89,89,',
',,,89,,89,89,,89,89,35,,89,89,89,89,89,89,89,35,35,35,,35,,,,35,35,',
',,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,635,,35,35,35',
'35,35,35,35,35,35,35,35,,35,35,,35,35,35,,,,,35,,35,35,,35,35,35,635',
'35,35,35,35,35,35,35,,635,635,635,,635,,,,635,635,,,,635,,635,635,635',
'635,635,635,635,,,,,,635,635,635,635,635,635,635,773,,,635,635,635,635',
'635,635,635,635,635,635,635,,635,635,,635,635,635,,,,,635,,635,635,',
'635,635,773,,635,635,635,635,635,635,635,773,773,773,,773,,,,773,773',
',,,773,,773,773,773,773,773,773,773,,,,,,773,773,773,773,773,773,773',
'851,,,773,773,773,773,773,773,773,773,773,773,773,,773,773,,773,773',
'773,,,,,773,,773,773,,773,773,851,,773,773,773,773,773,773,773,851,851',
'851,,851,,,,851,851,,,,851,,851,851,851,851,851,851,851,,,,,,851,851',
'851,851,851,851,851,411,,,851,851,851,851,851,851,851,851,851,851,851',
',851,851,,851,851,851,,,,,851,,851,851,,851,851,411,,851,851,851,851',
'851,851,851,411,411,411,,411,,,,411,411,,,,411,,411,411,411,411,411',
'411,411,,,,,,411,411,411,411,411,411,411,716,,,411,411,411,411,411,411',
'411,411,411,411,411,,411,411,,411,411,411,,,,,411,,411,411,,411,411',
'716,,411,411,411,411,411,411,411,716,716,716,,716,,,,716,716,,,,716',
',716,716,716,716,716,716,716,,,,,,716,716,716,716,716,716,716,782,,',
'716,716,716,716,716,716,716,716,716,716,716,,716,716,,716,716,716,,',
',,716,,716,716,,716,716,782,,716,716,716,716,716,716,716,782,782,782',
',782,,,,782,782,,,,782,,782,782,782,782,782,782,782,,,,,,782,782,782',
'782,782,782,782,78,,,782,782,782,782,782,782,782,782,782,782,782,,782',
'782,,782,782,782,,,,,782,,782,782,,782,782,78,,782,782,782,782,782,782',
'782,78,78,78,,78,,,,78,78,,,,78,,78,78,78,78,78,78,78,,,,,,78,78,78',
'78,78,78,78,,,,78,78,78,78,78,78,78,78,78,78,78,,78,78,,78,78,78,,,',
',78,,78,78,,78,78,78,,78,78,78,78,78,78,78' ]
        racc_action_check = arr = Array.new(23393, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    18,   nil,  8431,  1340,  3524,   nil,  1304,   -53,   nil,
   nil,    -1,  1297,  1815,  2183, 10351,   nil,   nil,  7129,   772,
   nil, 10591,   479,   nil,   nil,   nil, 10711,   nil,   nil,   nil,
 11071,   nil,   nil,   nil,   nil, 22745,  5907,   nil,   197,   nil,
  1177,   nil,   nil,  1185,   537, 11431,  1161,  1175,   nil,   nil,
 12031,  1139,   952, 12751,   nil,   nil, 12871, 12991,   nil,   793,
   nil,   nil,   nil, 13231,    67, 13471,   nil,   nil,   nil,   nil,
   970,   nil,   nil,  1108,  1162, 21631,   nil,   nil, 23271,   410,
  4239,   nil,  4344,   nil,     0,   nil,  2663, 13831,   292, 22670,
   nil,   476,   nil,   nil,   nil,  5178, 14191,  2423,   nil,   nil,
 15631,  1218, 22506, 16351,   nil,   nil,  1628,   505,  1502,   nil,
 22431,   nil, 20191,  1108, 20431,  1214,  1107,   472, 16471,  8911,
  1105,   nil,   nil,   753,   nil,  1122,   nil,   693,   nil, 10951,
  1135, 21795,   nil,  8189,   nil,   nil,   nil,  1184,   nil,  8671,
 20071,   730,   nil,  8791,     9,    10,   nil,  9151,   nil,  2582,
  1129,   -30,   161,  1126,  1081,   nil,   nil,   nil,   nil,   nil,
   nil,  1068,   nil,   nil,   nil,   nil,   267,  1065,   nil,  1430,
   nil,   nil,   nil,   nil,   nil,  1143,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   809,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  3886, 10831,  3361,
  1523,   nil,   nil,   nil,   nil,  1090,   nil,   618,   513,   194,
   232,  1029,    58,   892,  1377,  1019,  1021,   445,   670,   686,
  1028,   738,   983,  1022,  7597,   nil, 22356,   nil,   nil,   nil,
   269,   nil,   nil, 13711,   918,   989,   nil,  1105,  1095,   101,
   975,   776,   nil,   585,  7234, 14911, 15031, 15151, 15271, 15391,
   -63,   nil, 22262, 15751, 15871,   287,   nil,  1037,   949,    90,
  1736,   170, 16711, 16831, 16951, 17071, 17191, 17311, 17431, 17551,
 17671, 17791, 17911, 18031, 18151, 18271, 18391, 18511, 18631, 18751,
 18871, 18991, 19111, 19231, 19351, 19471, 19591, 19711,   nil,   682,
   -58,   -35,   991,  1014,   nil,   nil,    21,   -25,   nil,   948,
 14311,  1042,   927,   nil,  1083,   924,  6763,   297,   nil,    17,
   145,   nil,   nil,   nil,    73,    50, 20311,   765,   572,  6416,
  6362,  1011,  1000,   906,   161,   220,   nil,   nil, 19951,  4115,
   399,   nil,   936,   910,   -37,   -38,   336,   430,   -59,   778,
   506, 16591,   630,  2037,   668,   671,   nil,   748,   850,   nil,
   899, 23046,   nil,   nil, 16231, 16111,   nil,   nil,  1862, 15991,
  2315,   nil, 15511,   nil, 14791, 14671,   880,   nil,   nil,   415,
 14551,   nil,   888,   nil,   881,   nil, 14431,   nil,    49,   867,
   nil,  1355,   nil,  5299,   nil,   nil,  5057, 21191,   nil,   853,
   nil, 14071,   903,  4936,   nil,  4694,   nil,  2254,   nil,   nil,
  3318,   nil,   nil,   901,  2261,   nil,   856,   880,  1243,   891,
   nil,  1664,   nil,   812,   -26,   nil,  6117,   581,   nil,   nil,
   nil,  3994,     1,   150,   nil,   nil,   484,   434,   809,  3235,
    29,   nil,   nil,   nil,   116,   nil,   nil,   nil,   nil,  4465,
   nil,   895,   nil,  3007,  2952,   nil,  2849, 12631,  2794,   nil,
   nil,   nil,   805,   341,   775,   790, 22581,  4589,   nil,   nil,
   nil, 22015,   nil,   249,   nil,   nil,   nil, 12271, 12151,  4815,
   nil,   nil,   774,   760,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  5420,   nil,   nil,  5541, 11911,   822,   814, 11671,
 21135, 11551,  4694,  4344, 20999,   251,  2419, 20943,    79,   725,
 20915,   574,   240,  5187,   272, 21439,  4945, 21823,  5429,   968,
 21851,  1107, 22234, 22043,  1249, 22098,    91,   867,  2075, 11311,
  2020,    -8, 11191,  5662,  5783,  6012,  1271,   735,   nil,   692,
   nil,  1210,   nil,  1917, 10471,  1394,   nil,   nil,   789,    95,
  7718,   nil, 10231,    39,  2543,   nil,   nil,  3115,   nil,   nil,
   nil, 10111,   775,   nil,  9991,   nil,   nil,  9871,   nil,   nil,
   nil, 21163,   nil,   757,   nil,   nil,   nil,  7842,   nil,     9,
  2744,   255,  7947,   nil,   655, 22821,   nil,   659,   652,   nil,
   660,  9751,   626,  3760,   605,   455,   669,   nil,   nil,   nil,
 21879,  9631,   585,   nil,   nil,   nil,   -25,   540,   nil,   542,
  1141,   509,   487,   nil,   411,   346,   254,  9511,   200,   nil,
   nil,   210,   254,   142,   nil,   114,   nil,    68,   nil,    35,
    27,   nil,  1345,  1868,   -52,   -90,   nil,  8068,   -77,   nil,
   nil,   nil,   nil,   nil,   nil,  1193, 20791,  9031,   -79,    56,
   nil,   nil,   nil,    56,  9271,  9391,   441,   nil,    92,    97,
   884,   389,   143,    12,   414,   nil, 23121,   229,   nil,   nil,
   280,   555,   471,   nil,   nil,   479,   486,   250,   nil,   532,
   -23, 21659,   610,   -56,   -57,   558,    -6,   168,   296,   715,
   726,   nil,   -33,  1151,  1004,   nil,   391,   677,   nil,   774,
   333,  6642,   nil,   nil,   nil,   nil,   737,   nil,   nil,   723,
   nil,  6238,   820,   353, 11791,   nil,  1973,   nil,   742,   nil,
   850,   nil,   779, 22896,   nil,   nil, 12391,   569, 12511, 13111,
   823, 13351, 23196,   842,  2751,   nil,   nil,   nil,   851,   nil,
  2810,   nil,  2479,   nil,   nil,   nil,   nil, 20971,   nil,   nil,
   nil,  3154,   nil,  2905,   nil,  3377,   nil,   nil,  2968,   nil,
  1132,   nil,   892,  1803,   nil,   900,   nil,   nil, 22070,   nil,
 21603,   nil, 19831,   nil, 21355,   nil, 21219,   nil,   999,  8551,
   nil,   478,   940,  1019,   nil,   nil, 20551,  6884,   nil,   nil,
 20671,     4,  7005,   nil,   nil,   nil,   nil,   nil,  1039,   nil,
   247, 22971,   nil,   nil,  7355,   nil,   nil, 21411,  7476,   nil,
   nil,   nil, 13951,   982,   848,  1029,   nil,   997,   998,   793,
   nil,  1001,  1004,  1010,  1016,  1017,  1019,  1027,  1285,  1029,
  1687,  1031,   nil, 21575,   nil,   nil,   153,   nil,   nil,   490,
 21383,  1150,   nil,  8310,   879,   454,   596,  1127,   nil,   nil,
  1168,  3416,   nil,  1878,   nil,  2287,   nil,   nil,   nil,  3589,
   nil,   nil,   nil,   nil,  3596,   nil,   nil,  1117,  1453,  6521,
   nil,   nil,   nil,   nil,  1200,  1339, 13591,  3650,   761,   nil,
  1125,  1126,  1139,  1147,  1148,  1149,  1150,  1151,   269,   nil,
   195,   533,  1172,   -48,    96,   nil,  3311,   nil,   nil,   nil,
   nil,   nil,   246,  1210,   nil ]

racc_action_default = [
    -2,  -541,    -1,  -540,  -541,  -385,    -3,  -541,  -529,  -448,
  -438,  -286,  -541,  -478,  -541,  -541,  -447,  -439,  -423,  -541,
   -65,  -541,  -527,  -449,  -421,  -311,  -541,  -450,  -423,  -405,
  -541,    -5,  -457,  -423,  -309,   -69,  -541,    -6,  -269,  -458,
  -413,  -401,  -310,  -541,  -541,  -541,  -419,  -404,  -312,   -79,
  -541,  -541,    -9,  -541,  -452,  -406,  -301,  -541,  -261,   -40,
  -451,  -313,  -262,  -541,  -455,  -302,  -453,  -314,  -303,  -263,
  -527,  -315,  -304,  -529,  -541,   -46,  -264,  -454,  -541,   -48,
  -541,  -265,  -540,   -49,  -306,  -266,  -442,  -541,  -517,  -541,
  -444,   -53,  -268,  -443,  -402,  -540,  -540,  -445,  -403,  -307,
  -278,  -541,  -541,  -540,  -446,  -308,  -541,  -232,  -281,   -41,
   -77,   955,  -541,  -541,  -541,  -541,  -540,  -541,  -541,  -541,
  -540,  -511,  -384,  -269,  -247,  -254,  -301,  -455,  -302,  -540,
  -541,  -233,  -243,  -540,  -306,  -248,  -278,  -541,   -63,  -541,
  -541,  -529,  -530,  -541,  -540,  -540,  -287,  -541,  -483,  -478,
  -500,  -484,  -541,  -541,  -540,  -501,  -498,  -481,  -370,  -502,
  -480,  -540,  -479,  -497,  -482,  -477,  -541,  -540,  -489,  -541,
  -487,  -495,  -288,  -285,  -378,   -57,    -8,  -177,  -126,  -170,
  -178,  -117,  -127,  -171,  -161,  -118,  -176,  -128,  -152,  -160,
  -119,  -139,  -169,  -155,  -132,  -179,  -120,  -181,  -133,  -141,
  -164,  -121,  -185,  -134,  -138,  -151,  -122,  -186,  -136,  -129,
  -165,  -137,  -142,  -123,  -154,  -140,  -146,  -124,  -143,  -145,
  -147,  -144,  -156,  -168,  -541,  -148,  -167,  -172,  -158,  -157,
  -174,  -433,  -187,  -180,  -166,  -149,  -109,  -159,  -130,  -106,
  -173,  -110,  -131,  -108,  -435,  -163,  -434,  -432,  -150,  -183,
  -175,  -107,  -436,  -184,  -182,  -125,  -135,  -541,  -540,  -541,
  -224,   -45,    -4,  -538,  -536,  -528,  -537,  -541,   -47,  -541,
  -541,  -385,  -541,  -541,  -209,  -281,  -541,  -541,   -92,  -541,
   -70,   -85,  -529,  -541,  -540,  -305,   -73,  -111,   -17,  -113,
  -541,  -112,  -114,  -541,  -541,  -541,   -81,  -440,  -441,  -541,
  -541,  -541,  -407,  -210,  -540,  -541,  -541,  -541,  -541,  -541,
  -541,   -51,  -225,  -541,  -541,  -541,   -52,  -541,  -528,  -527,
  -541,  -275,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,
  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,
  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -541,  -328,  -541,
  -269,  -455,  -541,  -541,  -327,  -375,  -540,  -540,  -115,   -22,
  -541,   -67,  -529,   -13,   -14,  -541,  -540,  -527,  -267,  -529,
  -541,  -269,  -455,  -104,  -541,  -541,  -541,  -101,  -102,  -541,
  -541,  -541,  -540,  -541,  -533,  -533,  -234,   -50,  -541,  -540,
  -533,  -509,  -541,  -541,  -541,  -176,  -169,  -179,  -164,  -146,
  -147,  -541,  -148,  -478,  -187,  -106,  -507,  -107,  -529,   -64,
   -75,  -541,  -514,  -249,  -541,  -252,  -253,  -244,  -541,  -540,
  -541,  -250,  -252,  -245,  -541,  -541,  -529,  -241,  -242,  -275,
  -541,  -255,  -541,   -39,   -38,   -30,  -541,  -284,  -529,  -541,
   -44,  -540,  -357,  -540,  -360,  -358,  -540,  -190,   -31,  -540,
  -499,  -541,  -541,  -540,  -368,  -540,  -503,  -541,  -506,  -470,
  -541,  -475,  -486,  -541,  -541,  -473,  -333,  -484,  -340,  -541,
  -331,  -541,  -329,  -529,  -540,   -58,  -540,  -541,  -437,  -424,
  -425,  -541,  -518,  -520,  -383,  -381,  -521,  -519,  -529,  -540,
  -518,  -520,  -382,  -521,  -519,    -7,  -539,  -408,  -422,  -540,
  -318,  -317,  -409,  -541,  -541,  -410,  -541,  -540,  -541,  -440,
  -441,   -82,  -541,   -91,  -529,   -71,  -541,  -541,   -21,   -20,
   -19,  -198,   -36,  -414,  -412,  -415,  -411,  -541,  -541,  -540,
  -417,  -418,  -541,  -541,   -26,   -27,   -23,   -24,   -25,  -320,
  -322,  -321,  -540,   -43,   -42,  -540,  -541,  -541,  -541,  -541,
  -230,  -541,  -214,  -219,  -211,  -226,  -220,  -212,  -227,  -221,
  -213,  -222,  -201,  -223,  -206,  -202,  -228,  -203,  -229,  -215,
  -204,  -216,  -205,  -199,  -217,  -200,  -529,  -218,  -541,  -540,
  -541,  -275,  -541,  -540,  -540,  -541,   -16,   -66,  -273,  -529,
   -12,  -528,  -272,  -541,  -540,  -541,  -101,  -103,  -102,  -541,
  -540,  -459,  -541,  -541,  -540,  -518,  -519,  -540,  -271,  -316,
  -393,  -540,  -540,  -276,  -535,  -235,  -534,  -535,  -237,   -37,
  -254,  -188,   -29,  -541,  -510,  -277,  -526,  -541,  -525,  -529,
  -478,  -541,  -540,  -280,  -529,  -541,   -83,   -78,  -540,  -251,
  -256,  -541,  -518,  -274,  -529,  -518,  -519,  -512,  -513,  -238,
  -188,  -541,  -260,  -283,  -531,  -493,  -484,  -540,  -362,  -540,
  -541,  -540,  -540,  -356,  -541,  -541,  -541,  -541,  -529,  -491,
  -485,  -541,  -541,  -540,  -505,  -540,  -490,  -540,  -504,  -540,
  -540,  -496,  -541,  -541,  -338,  -529,  -488,  -540,  -541,  -431,
  -428,  -429,  -430,  -426,  -380,   -61,  -541,  -541,  -541,  -386,
  -240,  -239,  -379,   -59,  -541,  -541,  -540,  -319,  -541,  -540,
   -88,   -90,  -529,  -518,  -519,   -80,  -541,   -74,   -18,  -416,
  -207,  -208,  -540,  -420,   -28,  -541,  -541,  -541,  -294,  -541,
  -529,  -197,  -541,  -522,  -274,  -529,  -518,  -519,  -541,  -541,
  -541,  -116,   -68,   -15,  -101,  -105,  -102,  -529,  -461,  -541,
  -541,  -540,  -377,   -55,  -376,   -54,  -540,  -396,  -395,  -394,
  -325,  -540,  -540,  -533,  -541,  -298,  -478,  -508,  -529,  -463,
  -541,  -279,   -76,  -541,  -246,  -257,  -541,  -386,  -541,  -541,
  -258,  -541,  -541,  -541,  -347,  -349,  -367,  -366,  -363,  -364,
  -541,  -352,  -541,  -354,  -359,  -388,  -387,  -191,  -369,  -371,
  -372,  -541,  -468,  -541,  -466,  -541,  -476,  -474,  -541,  -471,
  -336,  -332,  -341,  -541,  -330,  -541,  -427,   -62,  -195,   -35,
  -196,  -532,  -541,   -60,  -193,   -33,  -194,   -34,  -541,  -541,
  -323,   -86,   -72,  -541,  -291,  -292,  -541,  -540,  -293,  -282,
  -541,  -386,  -540,  -374,  -373,  -386,  -296,  -460,  -541,  -398,
  -541,  -541,  -326,  -400,  -540,   -11,  -236,  -189,  -540,  -462,
  -299,   -84,  -541,  -259,  -492,  -541,  -361,  -540,  -540,  -541,
  -494,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -541,  -334,
  -541,  -339,   -56,  -192,   -32,  -289,  -541,  -290,  -256,  -540,
  -231,  -541,  -297,  -540,  -541,  -100,   -93,  -541,  -397,  -399,
  -541,  -541,  -275,  -541,  -344,  -541,  -346,  -365,  -353,  -541,
  -350,  -355,  -469,  -467,  -541,  -464,  -472,  -337,  -541,  -540,
  -389,  -391,  -390,  -295,  -540,  -541,  -540,  -541,   -99,  -300,
  -522,  -274,  -540,  -540,  -540,  -540,  -540,  -335,  -540,  -392,
  -522,   -98,  -529,  -518,  -519,  -345,  -541,  -342,  -348,  -351,
  -465,  -324,  -386,  -540,  -343 ]

clist = [
'31,547,269,143,138,426,311,231,612,158,481,280,489,175,165,316,433,291',
'261,285,236,299,384,475,499,132,381,417,385,310,292,423,542,632,132',
'390,265,545,236,315,288,662,699,676,263,661,319,681,52,262,387,362,637',
'473,529,647,361,673,122,762,52,291,285,597,680,812,432,174,320,472,828',
'615,618,285,292,498,132,624,870,428,443,446,236,664,358,132,285,410',
'786,224,811,668,263,386,285,403,789,317,37,270,391,375,525,752,276,639',
'754,409,236,152,176,406,639,416,389,355,353,416,657,268,132,627,383',
'394,146,517,427,348,132,788,359,855,604,607,488,393,454,435,268,22,920',
'442,442,756,448,449,268,850,302,132,165,458,267,172,294,523,268,717',
'458,3,301,693,247,268,458,675,6,2,600,833,463,481,1,489,,,,,,,369,,',
',,,,,,,,870,,,,881,,,777,,,,,,,,,,428,,,,19,,117,,,,,,,,,117,19,,,,',
',117,,729,,438,117,440,,,,,,,,277,,,,,,647,,,514,117,427,,709,361,486',
'917,709,117,515,619,117,831,,,,285,,117,,117,,772,512,132,117,,534,745',
'536,537,538,,349,811,841,522,19,583,584,,644,117,786,370,783,937,845',
'951,,19,907,,,,117,52,370,492,,432,,,117,,277,623,,,365,122,174,,,,',
',719,539,709,,589,922,539,117,,361,263,19,,,,548,638,709,117,117,535',
'117,442,442,685,117,832,634,,495,,,,,,,,684,428,676,472,,,365,,,,,610',
',591,,712,868,622,681,636,867,263,872,676,,,590,285,858,601,268,,268',
'268,268,876,165,586,543,544,,,687,,,,,,427,,,,486,,,,,,,,132,,,,,,,',
',,658,132,,,663,,,,658,,,,856,,,,,735,,428,,,842,,,,,,,117,,603,747',
'442,727,492,19,,,,,,695,,837,698,,,701,758,703,,,,636,19,629,277,952',
',291,,285,132,117,933,427,486,,,486,132,,292,,19,117,19,117,117,117',
'236,,718,117,117,,365,,132,,428,,749,,,694,,,432,,,,,700,817,428,533',
'763,,,774,939,823,,,,,,492,738,,,492,,770,,,291,,,19,,732,,921,,19,427',
',750,292,486,,472,472,,117,,236,,741,,427,,,,486,,117,19,132,,701,,753',
'701,893,755,365,757,760,117,636,,,132,,766,117,,285,277,748,,,132,751',
'768,132,117,236,,165,,492,,416,743,,,698,,919,730,,,,,,492,,659,,19',
'769,658,19,458,700,458,458,700,,19,,19,,,,,677,458,,458,679,458,268',
'458,458,,,709,,848,,665,19,,666,,,117,,636,819,671,268,672,,117,,285',
'825,827,760,,,701,698,19,,879,,,472,,,117,688,,760,,,,,,277,,,,,698',
',,,,,,,19,,706,,698,,,,,,,861,,19,,849,19,,,285,117,853,539,694,700',
',,,285,165,,,722,,847,,,,,,472,,472,,,725,,,726,,117,900,,117,19,19',
',,,392,,,19,,942,117,,886,412,,413,19,,117,421,117,,,117,,472,884,,',
',,739,740,,,,,,,,431,434,285,,,,,,19,,,277,,,,,,131,,,,,,,,,131,,,,',
'458,458,260,,458,458,458,458,458,458,458,274,428,,,,,,,,608,,760,,,',
',,,,,303,19,,,,,131,312,486,,117,,,,,131,,,117,117,,,,,,,610,268,427',
',277,,486,815,458,458,458,458,458,,760,,698,,,,131,,,,131,132,,131,',
'458,,,131,,64,,131,,131,19,,,131,260,,,64,,,19,,,,131,,,437,,,492,,277',
',131,131,,281,,,,864,447,,,,,,,871,,873,852,,,,,,,,874,,875,,12,,,877',
',,,,,,,,12,,,,351,117,,,64,,,,117,,,372,,,,,19,64,,,728,19,,,372,,,',
'372,,894,,281,19,,,,19,,,,,,,,,,,889,,,,620,891,,64,,,,,,,,12,,899,',
',,,,,19,131,,,12,,,640,,,932,,934,,392,,935,648,101,,,936,,,765,,19',
',652,,101,,924,117,,,521,,,,,,12,669,,,,,,,,,,953,,,,,938,,,,,550,,552',
'553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569',
'570,571,572,573,574,575,576,577,,,354,,,587,101,,,,,,592,,,,,,,101,',
',,,64,,,,,,,,,,,834,835,,,838,621,,,64,,281,,620,,,,633,,,,,,101,,846',
'131,,,64,,64,447,131,,649,,131,,,131,,521,131,,,860,653,650,12,,,,,131',
',,,,,,,,,,,,,12,131,,,,,,,,,759,,,640,686,,392,64,,,12,,12,64,,,,,,',
',131,,,,,885,,,131,775,887,,,,,64,,,,780,,,,,715,892,131,,,,,,,,,,,281',
',,,,,,,12,720,721,,,,12,,,,,101,,,,,,,,,131,,,923,64,731,,64,,12,101',
',929,,64,459,64,,,,,,461,,,,,,465,,101,,101,131,742,,,64,,,,,,,,,,,131',
',,,,,,,,,131,,64,131,,12,,131,12,,131,,,131,,12,767,12,,281,,771,,,',
',863,38,101,,,,64,,101,,,131,12,38,,,,,,64,,131,64,,,,,,,798,,101,,278',
',12,,797,,,,,,,,,814,,,,,,,,,888,,,,,64,64,,,,12,818,820,64,,,,,,824',
'826,350,64,12,,38,12,,,,101,,371,101,,,839,,38,,101,,101,,,371,,,,,',
',,278,64,,,281,,,,,,101,12,12,,,,,,,12,,859,,38,,,857,,12,,,,,101,,',
',,818,,824,826,,131,,,,,,,,,,,,,64,,,,12,,,101,,,,,,,,,,,,,101,,,101',
',,,,883,281,,,,,,,,,,,,,131,,,,890,,,,,,,,,,,,,12,,101,101,,64,,,,883',
'101,,,,,64,,,,101,,,,,,,,281,,,,,,,,,372,,,,38,,,,,,,,,,,101,,,,,,,',
'38,,278,,,12,,,,,,,,,131,12,,,,,38,,38,,,,,,,,,,64,,,,,64,,,,,,,,,896',
'101,,64,,,,64,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,38,,,,,,64,,,12,,,,,12,',
',,,,,,,38,,,12,,,101,12,,64,,,,,,,101,,,,,,278,,,,,,,,,,,,,,,,,,,,12',
',,,,,,785,,791,793,,38,,,38,,,,,,802,38,804,38,806,12,807,809,,,,,,',
',,,,,,,,,,38,689,,,,101,,,,,101,,,,,,,,,898,,,101,38,,,101,,,,272,,',
',,272,,,,,278,,,,,,,,,,272,,,38,,,,272,,,,101,,,,,38,,,38,,,,,,,,,272',
',,,,,,,,101,,272,,,,,,,272,,,,,,272,272,,,,38,38,,272,,272,,272,38,',
',272,272,,,,,38,,,,,,,,,,,,,,,272,,,,,,,,,,,,,,,,,38,,,278,,,,,,,,,',
',904,906,,,908,910,911,912,913,915,916,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',38,,,,,,,,,,,,,,,,,,,,,,,,945,947,948,949,950,278,,,,,,,,,,,,,,,,954',
',,,,,,,,,,,,,,,,,,38,,,,,,,,,,38,272,,,,,,,,,,,278,,,,,,,,,371,,,,,',
',,,,,,,,272,,272,272,272,272,272,272,272,272,272,272,272,272,272,272',
'272,272,272,272,272,272,272,272,272,272,272,272,,,,,,,,,,,,,,38,,,,',
'38,,,,,,,,,895,,,38,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,272,,,272,272',
',38,,,,,272,,272,272,,,,,272,,,,,,272,,,,,,,38,,,,,,,,272,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,272,,,,,,,,,,',
'272,272,,,,,,,,,,,,,,,,,,272,,,,,272,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,,,,,,,,,,,,,,,,,,272,,,',
',,272,,,,,,,,,,272,,,,,,,,,,,,,,,,272,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,272',
',,,,,,,,,,,,,,,,,,272,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',272,,,,,,,,,272,,,272,,272,272,,272,272,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,272,,,,272,,,,,,,,,,,272,,,,,,,,,,,272' ]
        racc_goto_table = arr = Array.new(2812, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'7,90,19,32,39,25,36,53,13,118,38,47,38,39,110,36,28,57,21,59,54,19,61',
'40,83,34,11,66,63,19,58,66,87,98,34,63,9,87,54,19,17,108,26,135,95,107',
'19,136,10,6,36,44,49,103,83,140,43,108,64,14,10,57,59,51,108,104,61',
'64,32,102,84,62,62,59,58,130,34,62,137,36,41,41,54,112,17,34,59,48,115',
'127,101,112,95,7,59,53,114,6,8,127,7,52,130,65,127,67,65,39,54,116,8',
'75,67,7,52,74,92,7,105,30,34,100,60,99,79,31,7,22,34,113,18,15,38,38',
'25,78,117,21,30,5,120,7,7,121,21,118,30,122,125,34,110,7,126,81,128',
'129,30,49,7,4,131,132,133,30,7,134,3,2,94,14,139,38,1,38,,,,,,,30,,',
',,,,,,,,137,,,,104,,,26,,,,,,,,,,36,,,,24,,24,,,,,,,,,24,24,,,,,,24',
',90,,30,24,30,,,,,,,,24,,,,,,140,,,44,24,7,,38,43,54,104,38,24,48,28',
'24,26,,,,59,,24,,24,,49,32,34,24,,19,51,19,19,19,,24,101,26,21,24,41',
'41,,25,24,115,24,112,104,26,84,,24,114,,,,24,10,24,64,,61,,,24,,24,11',
',,12,64,64,,,,,,130,95,38,,44,14,95,24,,43,95,24,,,,6,63,38,24,24,10',
'24,7,7,103,24,49,36,,8,,,,,,,,102,36,135,102,,,12,,,,,7,,9,,25,108,21',
'136,47,107,95,108,135,,,6,59,98,95,30,,30,30,30,108,110,10,30,30,,,41',
',,,,,7,,,,54,,,,,,,,34,,,,,,,,,,7,34,,,110,,,,7,,,,62,,,,,25,,36,,,87',
',,,,,,24,,30,25,7,61,64,24,,,,,,39,,83,32,,,7,28,39,,,,47,24,30,24,26',
',57,,59,34,24,108,7,54,,,54,34,,58,,24,24,24,24,24,24,54,,17,24,24,',
'12,,34,,36,,11,,,64,,,61,,,,,64,40,36,12,63,,,66,13,40,,,,,,64,19,,',
'64,,11,,,57,,,24,,32,,90,,24,7,,19,58,54,,102,102,,24,,54,,17,,7,,,',
'54,,24,24,34,,7,,39,7,83,39,12,7,7,24,47,,,34,,53,24,,59,24,95,,,34',
'95,118,34,24,54,,110,,64,,7,10,,,32,,83,30,,,,,,64,,106,,24,95,7,24',
'7,64,7,7,64,,24,,24,,,,,106,7,,7,106,7,30,7,7,,,38,,11,,12,24,,12,,',
'24,,47,21,12,30,12,,24,,59,21,21,7,,,7,32,24,,102,,,102,,,24,12,,7,',
',,,,24,,,,,32,,,,,,,,24,,12,,32,,,,,,,47,,24,,7,24,,,59,24,7,95,64,64',
',,,59,110,,,12,,95,,,,,,102,,102,,,12,,,12,,24,11,,24,24,24,,,,29,,',
'24,,25,24,,19,29,,29,24,,24,29,24,,,24,,102,21,,,,,12,12,,,,,,,,29,29',
'59,,,,,,24,,,24,,,,,,33,,,,,,,,,33,,,,,7,7,33,,7,7,7,7,7,7,7,33,36,',
',,,,,,77,,7,,,,,,,,,33,24,,,,,33,33,54,,24,,,,,33,,,24,24,,,,,,,7,30',
'7,,24,,54,12,7,7,7,7,7,,7,,32,,,,33,,,,33,34,,33,,7,,,33,,50,,33,,33',
'24,,,33,33,,,50,,,24,,,,33,,,45,,,64,,24,,33,33,,50,,,,24,33,,,,,,,106',
',106,12,,,,,,,,106,,106,,23,,,106,,,,,,,,,23,,,,50,24,,,50,,,,24,,,50',
',,,,24,50,,,77,24,,,50,,,,50,,24,,50,24,,,,24,,,,,,,,,,,12,,,,29,12',
',50,,,,,,,,23,,12,,,,,,,24,33,,,23,,,29,,,106,,106,,29,,106,29,20,,',
'106,,,77,,24,,29,,20,,12,24,,,33,,,,,,23,29,,,,,,,,,,106,,,,,12,,,,',
'33,,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33',
'33,33,33,33,,,20,,,45,20,,,,,,45,,,,,,,20,,,,,50,,,,,,,,,,,77,77,,,77',
'33,,,50,,50,,29,,,,45,,,,,,20,,77,33,,,50,,50,33,33,,45,,33,,,33,,33',
'33,,,77,45,33,23,,,,,33,,,,,,,,,,,,,,23,33,,,,,,,,,29,,,29,45,,29,50',
',,23,,23,50,,,,,,,,33,,,,,77,,,33,29,77,,,,,50,,,,29,,,,,45,77,33,,',
',,,,,,,,50,,,,,,,,23,33,33,,,,23,,,,,20,,,,,,,,,33,,,77,50,33,,50,,23',
'20,,77,,50,109,50,,,,,,109,,,,,,109,,20,,20,33,45,,,50,,,,,,,,,,,33',
',,,,,,,,,33,,50,33,,23,,33,23,,33,,,33,,23,45,23,,50,,45,,,,,29,27,20',
',,,50,,20,,,33,23,27,,,,,,50,,33,50,,,,,,,45,,20,,27,,23,,33,,,,,,,',
',45,,,,,,,,,29,,,,,50,50,,,,23,33,33,50,,,,,,33,33,27,50,23,,27,23,',
',,20,,27,20,,,45,,27,,20,,20,,,27,,,,,,,,27,50,,,50,,,,,,20,23,23,,',
',,,,23,,45,,27,,,33,,23,,,,,20,,,,,33,,33,33,,33,,,,,,,,,,,,,50,,,,23',
',,20,,,,,,,,,,,,,20,,,20,,,,,33,50,,,,,,,,,,,,,33,,,,33,,,,,,,,,,,,',
'23,,20,20,,50,,,,33,20,,,,,50,,,,20,,,,,,,,50,,,,,,,,,50,,,,27,,,,,',
',,,,,20,,,,,,,,27,,27,,,23,,,,,,,,,33,23,,,,,27,,27,,,,,,,,,,50,,,,',
'50,,,,,,,,,50,20,,50,,,,50,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,27,,,,,,50',
',,23,,,,,23,,,,,,,,,27,,,23,,,20,23,,50,,,,,,,20,,,,,,27,,,,,,,,,,,',
',,,,,,,,23,,,,,,,109,,109,109,,27,,,27,,,,,,109,27,109,27,109,23,109',
'109,,,,,,,,,,,,,,,,,27,27,,,,20,,,,,20,,,,,,,,,20,,,20,27,,,20,,,,42',
',,,,42,,,,,27,,,,,,,,,,42,,,27,,,,42,,,,20,,,,,27,,,27,,,,,,,,,42,,',
',,,,,,20,,42,,,,,,,42,,,,,,42,42,,,,27,27,,42,,42,,42,27,,,42,42,,,',
',27,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,27,,,27,,,,,,,,,,,109,109,,,109',
'109,109,109,109,109,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,',
',,,,,,,,,,,,109,109,109,109,109,27,,,,,,,,,,,,,,,,109,,,,,,,,,,,,,,',
',,,,27,,,,,,,,,,27,42,,,,,,,,,,,27,,,,,,,,,27,,,,,,,,,,,,,,42,,42,42',
'42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42',
'42,,,,,,,,,,,,,,27,,,,,27,,,,,,,,,27,,,27,,,,27,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,42,,,42,42,,27,,,,,42,,42,42,,,,,42,,,,,,42,,,,,,,27,,,,,,,',
'42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42',
',,,,,,,,,,42,42,,,,,,,,,,,,,,,,,,42,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,,,,,,,,,,,,,,,,,,42,',
',,,,42,,,,,,,,,,42,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42',
',,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'42,,,,,,,,,42,,,42,,42,42,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,42,,,,42,,,,,,,,,,,42,,,,,,,,,,,42' ]
        racc_goto_check = arr = Array.new(2812, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   172,   167,   163,   159,   136,    27,    -3,    95,    14,
    45,   -69,   241,  -374,  -553,  -631,   nil,     4,    50,   -24,
  1117,    -3,    49,  1011,   209,  -124,  -446,  1473,  -124,   694,
    93,  -163,    -5,   845,    20,   nil,   -50,   nil,  -247,    -1,
  -152,   -64,  1949,   -26,   -31,   836,   nil,   -24,   -23,  -359,
   952,  -311,    12,   -11,     2,   nil,   nil,   -19,    -6,   -16,
    26,   -74,  -313,   -68,    53,  -501,   -89,  -310,   nil,   nil,
   nil,   nil,   nil,   nil,    36,     5,   nil,   503,    32,   113,
   nil,   140,   nil,  -245,  -636,   nil,   nil,  -278,   nil,   nil,
  -316,   nil,    38,   nil,  -207,    22,   nil,   nil,  -370,    17,
  -273,  -592,  -100,  -116,  -618,  -323,   209,  -396,  -400,  1252,
     1,   nil,  -358,  -531,  -564,  -572,    96,   -16,    -4,   nil,
  -749,  -468,  -609,   nil,   nil,   101,   128,    71,   114,  -139,
  -192,   114,  -316,   144,  -292,  -414,  -417,  -712,   nil,     4,
  -367 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   363,   nil,   318,
   364,   nil,   382,   nil,   830,   nil,   367,   nil,   nil,   nil,
   137,   109,     7,   115,   273,   nil,   nil,   123,   nil,   125,
    59,   nil,   439,    75,    79,    83,   135,    91,   708,   nil,
   nil,   nil,    14,    20,   nil,   nil,    35,    43,    49,   nil,
   127,   373,   nil,   287,   493,   241,   289,    94,    98,   107,
   nil,   116,   nil,   120,   484,   702,   nil,   124,    58,    62,
    69,    76,    81,    85,   368,    92,    95,   nil,   nil,   173,
    11,   nil,    26,   nil,   nil,    45,    53,   nil,    63,    70,
   nil,    78,   nil,    89,   nil,   501,   102,   106,   nil,   nil,
   nil,   470,   170,   nil,   466,   nil,   154,   nil,   161,   nil,
   674,   445,   nil,   nil,   nil,   148,   nil,   nil,   631,   485,
   nil,   nil,   nil,    41,    47,    55,   nil,   nil,   nil,   nil,
   479,   nil,   nil,   nil,   167,   168,   171,   655,   150,   153,
   121 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_1,
  0, 153, :_reduce_2,
  2, 151, :_reduce_3,
  2, 152, :_reduce_4,
  1, 154, :_reduce_5,
  1, 154, :_reduce_6,
  3, 154, :_reduce_7,
  2, 154, :_reduce_8,
  1, 157, :_reduce_9,
  1, 157, :_reduce_none,
  4, 160, :_reduce_11,
  2, 161, :_reduce_12,
  1, 165, :_reduce_13,
  1, 165, :_reduce_14,
  3, 165, :_reduce_15,
  2, 165, :_reduce_none,
  0, 180, :_reduce_17,
  4, 159, :_reduce_18,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 159, :_reduce_23,
  3, 159, :_reduce_24,
  3, 159, :_reduce_25,
  3, 159, :_reduce_26,
  3, 159, :_reduce_none,
  4, 159, :_reduce_none,
  3, 159, :_reduce_29,
  3, 159, :_reduce_none,
  3, 159, :_reduce_31,
  6, 159, :_reduce_32,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 179, :_reduce_none,
  3, 179, :_reduce_42,
  3, 179, :_reduce_43,
  3, 179, :_reduce_44,
  2, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 168, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_50,
  2, 170, :_reduce_51,
  2, 170, :_reduce_52,
  1, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 189, :_reduce_none,
  2, 183, :_reduce_57,
  3, 183, :_reduce_none,
  4, 183, :_reduce_59,
  5, 183, :_reduce_none,
  4, 183, :_reduce_none,
  5, 183, :_reduce_none,
  2, 183, :_reduce_63,
  2, 183, :_reduce_64,
  1, 171, :_reduce_none,
  3, 171, :_reduce_none,
  1, 193, :_reduce_none,
  3, 193, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  3, 192, :_reduce_none,
  5, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 196, :_reduce_none,
  3, 196, :_reduce_none,
  2, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 198, :_reduce_none,
  3, 198, :_reduce_none,
  1, 197, :_reduce_none,
  4, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  2, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_94,
  3, 169, :_reduce_95,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  2, 169, :_reduce_99,
  1, 169, :_reduce_none,
  1, 200, :_reduce_101,
  1, 200, :_reduce_102,
  2, 201, :_reduce_103,
  1, 201, :_reduce_104,
  3, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_109,
  1, 202, :_reduce_110,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 182, :_reduce_188,
  5, 182, :_reduce_none,
  3, 182, :_reduce_190,
  5, 182, :_reduce_none,
  6, 182, :_reduce_192,
  5, 182, :_reduce_193,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  4, 182, :_reduce_none,
  3, 182, :_reduce_none,
  3, 182, :_reduce_199,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  3, 182, :_reduce_202,
  3, 182, :_reduce_203,
  3, 182, :_reduce_204,
  3, 182, :_reduce_205,
  3, 182, :_reduce_206,
  4, 182, :_reduce_none,
  4, 182, :_reduce_none,
  2, 182, :_reduce_none,
  2, 182, :_reduce_210,
  3, 182, :_reduce_211,
  3, 182, :_reduce_212,
  3, 182, :_reduce_213,
  3, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  3, 182, :_reduce_223,
  2, 182, :_reduce_224,
  2, 182, :_reduce_225,
  3, 182, :_reduce_226,
  3, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_229,
  3, 182, :_reduce_none,
  6, 182, :_reduce_231,
  1, 182, :_reduce_none,
  1, 178, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  4, 209, :_reduce_none,
  2, 209, :_reduce_none,
  3, 213, :_reduce_238,
  1, 214, :_reduce_239,
  1, 214, :_reduce_none,
  1, 174, :_reduce_241,
  1, 174, :_reduce_none,
  1, 185, :_reduce_243,
  2, 185, :_reduce_244,
  2, 185, :_reduce_245,
  4, 185, :_reduce_246,
  1, 185, :_reduce_247,
  1, 188, :_reduce_none,
  2, 216, :_reduce_249,
  2, 216, :_reduce_250,
  2, 215, :_reduce_251,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 210, :_reduce_254,
  2, 210, :_reduce_255,
  3, 210, :_reduce_256,
  4, 210, :_reduce_257,
  3, 177, :_reduce_none,
  4, 177, :_reduce_none,
  2, 177, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  2, 208, :_reduce_267,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 208, :_reduce_271,
  3, 208, :_reduce_none,
  3, 208, :_reduce_273,
  3, 208, :_reduce_274,
  2, 208, :_reduce_275,
  3, 208, :_reduce_276,
  3, 208, :_reduce_277,
  1, 208, :_reduce_278,
  4, 208, :_reduce_279,
  3, 208, :_reduce_280,
  1, 208, :_reduce_281,
  5, 208, :_reduce_none,
  4, 208, :_reduce_none,
  3, 208, :_reduce_none,
  2, 208, :_reduce_285,
  1, 208, :_reduce_286,
  2, 208, :_reduce_287,
  2, 208, :_reduce_288,
  6, 208, :_reduce_289,
  6, 208, :_reduce_290,
  5, 208, :_reduce_291,
  5, 208, :_reduce_292,
  5, 208, :_reduce_293,
  4, 208, :_reduce_294,
  7, 208, :_reduce_none,
  5, 208, :_reduce_296,
  6, 208, :_reduce_297,
  4, 208, :_reduce_298,
  5, 208, :_reduce_299,
  7, 208, :_reduce_300,
  1, 208, :_reduce_301,
  1, 208, :_reduce_302,
  1, 208, :_reduce_303,
  1, 208, :_reduce_none,
  1, 173, :_reduce_none,
  1, 225, :_reduce_none,
  1, 231, :_reduce_none,
  1, 234, :_reduce_none,
  1, 235, :_reduce_none,
  1, 237, :_reduce_none,
  1, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 242, :_reduce_none,
  1, 245, :_reduce_none,
  1, 246, :_reduce_none,
  1, 226, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 233, :_reduce_323,
  5, 233, :_reduce_324,
  1, 163, :_reduce_325,
  2, 163, :_reduce_326,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 250, :_reduce_none,
  3, 250, :_reduce_none,
  1, 253, :_reduce_none,
  3, 253, :_reduce_none,
  1, 252, :_reduce_none,
  4, 252, :_reduce_none,
  6, 252, :_reduce_none,
  3, 252, :_reduce_none,
  5, 252, :_reduce_none,
  2, 252, :_reduce_none,
  4, 252, :_reduce_none,
  1, 252, :_reduce_none,
  3, 252, :_reduce_none,
  6, 254, :_reduce_none,
  8, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 190, :_reduce_357,
  1, 190, :_reduce_none,
  3, 260, :_reduce_none,
  1, 260, :_reduce_none,
  4, 260, :_reduce_361,
  1, 261, :_reduce_none,
  2, 261, :_reduce_none,
  1, 262, :_reduce_none,
  3, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  2, 230, :_reduce_368,
  4, 265, :_reduce_none,
  1, 265, :_reduce_none,
  3, 266, :_reduce_371,
  3, 266, :_reduce_372,
  4, 223, :_reduce_none,
  4, 223, :_reduce_374,
  2, 186, :_reduce_375,
  4, 186, :_reduce_none,
  4, 186, :_reduce_none,
  2, 229, :_reduce_378,
  4, 229, :_reduce_379,
  4, 229, :_reduce_380,
  3, 229, :_reduce_381,
  3, 229, :_reduce_none,
  3, 229, :_reduce_none,
  2, 229, :_reduce_384,
  1, 229, :_reduce_385,
  4, 229, :_reduce_386,
  4, 228, :_reduce_387,
  4, 228, :_reduce_388,
  5, 239, :_reduce_389,
  1, 269, :_reduce_390,
  1, 269, :_reduce_none,
  6, 162, :_reduce_392,
  1, 162, :_reduce_393,
  1, 270, :_reduce_394,
  1, 270, :_reduce_395,
  1, 270, :_reduce_396,
  2, 271, :_reduce_397,
  1, 271, :_reduce_398,
  2, 164, :_reduce_399,
  1, 164, :_reduce_400,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 218, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 273, :_reduce_none,
  3, 274, :_reduce_408,
  3, 219, :_reduce_409,
  3, 220, :_reduce_410,
  3, 221, :_reduce_none,
  3, 221, :_reduce_412,
  0, 277, :_reduce_413,
  2, 277, :_reduce_414,
  1, 278, :_reduce_415,
  2, 278, :_reduce_416,
  3, 222, :_reduce_none,
  3, 222, :_reduce_none,
  0, 280, :_reduce_419,
  3, 280, :_reduce_none,
  0, 275, :_reduce_421,
  2, 275, :_reduce_422,
  0, 276, :_reduce_423,
  2, 276, :_reduce_424,
  1, 279, :_reduce_425,
  2, 279, :_reduce_426,
  3, 279, :_reduce_427,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  2, 206, :_reduce_432,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  3, 207, :_reduce_437,
  1, 272, :_reduce_438,
  1, 272, :_reduce_439,
  2, 272, :_reduce_none,
  2, 272, :_reduce_none,
  1, 199, :_reduce_442,
  1, 199, :_reduce_443,
  1, 199, :_reduce_444,
  1, 199, :_reduce_445,
  1, 199, :_reduce_446,
  1, 199, :_reduce_447,
  1, 199, :_reduce_448,
  1, 199, :_reduce_449,
  1, 199, :_reduce_450,
  1, 199, :_reduce_451,
  1, 199, :_reduce_452,
  1, 199, :_reduce_453,
  1, 199, :_reduce_454,
  1, 224, :_reduce_none,
  1, 172, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 243, :_reduce_459,
  3, 243, :_reduce_460,
  2, 243, :_reduce_461,
  3, 247, :_reduce_462,
  2, 247, :_reduce_463,
  6, 267, :_reduce_464,
  8, 267, :_reduce_465,
  4, 267, :_reduce_466,
  6, 267, :_reduce_467,
  4, 267, :_reduce_468,
  6, 267, :_reduce_469,
  2, 267, :_reduce_470,
  4, 267, :_reduce_471,
  6, 267, :_reduce_472,
  2, 267, :_reduce_473,
  4, 267, :_reduce_474,
  2, 267, :_reduce_475,
  4, 267, :_reduce_476,
  1, 267, :_reduce_477,
  0, 267, :_reduce_478,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_484,
  3, 251, :_reduce_485,
  2, 251, :_reduce_486,
  1, 284, :_reduce_487,
  3, 284, :_reduce_none,
  1, 255, :_reduce_489,
  3, 255, :_reduce_490,
  3, 285, :_reduce_491,
  3, 286, :_reduce_none,
  1, 256, :_reduce_none,
  3, 256, :_reduce_none,
  1, 283, :_reduce_495,
  3, 283, :_reduce_496,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 257, :_reduce_499,
  1, 257, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 259, :_reduce_503,
  3, 259, :_reduce_504,
  2, 258, :_reduce_505,
  1, 258, :_reduce_none,
  1, 248, :_reduce_none,
  3, 248, :_reduce_none,
  1, 227, :_reduce_509,
  2, 227, :_reduce_510,
  1, 212, :_reduce_511,
  3, 212, :_reduce_512,
  3, 289, :_reduce_513,
  2, 289, :_reduce_514,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 187, :_reduce_518,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 268, :_reduce_522,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  0, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 194, :_reduce_none,
  2, 175, :_reduce_none,
  0, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  0, 156, :_reduce_none ]

racc_reduce_n = 541

racc_shift_n = 955

racc_token_table = {
  false => 0,
  :error => 1,
  "!" => 2,
  :tTILDE => 3,
  :tUPLUS => 4,
  :tPOW => 5,
  :tUMINUS_NUM => 6,
  :tUMINUS => 7,
  :tSTAR2 => 8,
  :tDIVIDE => 9,
  :tPERCENT => 10,
  :tPLUS => 11,
  :tMINUS => 12,
  :tLSHFT => 13,
  :tRSHFT => 14,
  :tAMPER2 => 15,
  :tPIPE => 16,
  :tCARET => 17,
  ">" => 18,
  :tGEQ => 19,
  "<" => 20,
  :tLEQ => 21,
  :tCMP => 22,
  :tEQ => 23,
  :tEQQ => 24,
  :tNEQ => 25,
  :tMATCH => 26,
  :tNMATCH => 27,
  :tANDOP => 28,
  :tOROP => 29,
  :tDOT2 => 30,
  :tDOT3 => 31,
  "?" => 32,
  ":" => 33,
  :kRESCUE_MOD => 34,
  "=" => 35,
  :tOP_ASGN => 36,
  :kDEFINED => 37,
  :kNOT => 38,
  :kOR => 39,
  :kAND => 40,
  :kIF_MOD => 41,
  :kUNLESS_MOD => 42,
  :kWHILE_MOD => 43,
  :kUNTIL_MOD => 44,
  :tLBRACE_ARG => 45,
  :tLOWEST => 46,
  :kCLASS => 47,
  :kMODULE => 48,
  :kDEF => 49,
  :kUNDEF => 50,
  :kBEGIN => 51,
  :kRESCUE => 52,
  :kENSURE => 53,
  :kEND => 54,
  :kIF => 55,
  :kUNLESS => 56,
  :kTHEN => 57,
  :kELSIF => 58,
  :kELSE => 59,
  :kCASE => 60,
  :kWHEN => 61,
  :kWHILE => 62,
  :kUNTIL => 63,
  :kFOR => 64,
  :kBREAK => 65,
  :kNEXT => 66,
  :kREDO => 67,
  :kRETRY => 68,
  :kIN => 69,
  :kDO => 70,
  :kDO_COND => 71,
  :kDO_BLOCK => 72,
  :kDO_LAMBDA => 73,
  :kRETURN => 74,
  :kYIELD => 75,
  :kSUPER => 76,
  :kSELF => 77,
  :kNIL => 78,
  :kTRUE => 79,
  :kFALSE => 80,
  :kALIAS => 81,
  :klBEGIN => 82,
  :klEND => 83,
  :k__LINE__ => 84,
  :k__FILE__ => 85,
  :k__ENCODING__ => 86,
  :kDEFined => 87,
  :kBLOCK_GIVEN => 88,
  :tIDENTIFIER => 89,
  :tFID => 90,
  :tGVAR => 91,
  :tIVAR => 92,
  :tCONSTANT => 93,
  :tCVAR => 94,
  :tLABEL => 95,
  :tINTEGER => 96,
  :tFLOAT => 97,
  :tSTRING_CONTENT => 98,
  :tCHAR => 99,
  :tNTH_REF => 100,
  :tBACK_REF => 101,
  :tREGEXP_END => 102,
  :tAREF => 103,
  :tASET => 104,
  :tCOLON2 => 105,
  :tCOLON3 => 106,
  :tASSOC => 107,
  :tLPAREN => 108,
  :tLPAREN_ARG => 109,
  :tRPAREN => 110,
  :tLBRACK => 111,
  :tLBRACE => 112,
  :tSTAR => 113,
  :tAMPER => 114,
  :tLAMBDA => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSTRING_DBEG => 122,
  :tSTRING_DVAR => 123,
  :tSTRING_END => 124,
  :tLAMBEG => 125,
  :tSTRING => 126,
  :tXSTRING_END => 127,
  "{" => 128,
  "}" => 129,
  "[" => 130,
  "." => 131,
  "," => 132,
  "|" => 133,
  "^" => 134,
  "&" => 135,
  "+" => 136,
  "-" => 137,
  "*" => 138,
  "/" => 139,
  "%" => 140,
  "~" => 141,
  "`" => 142,
  "(" => 143,
  ")" => 144,
  "]" => 145,
  ";" => 146,
  " " => 147,
  "\\n" => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"!\"",
  "tTILDE",
  "tUPLUS",
  "tPOW",
  "tUMINUS_NUM",
  "tUMINUS",
  "tSTAR2",
  "tDIVIDE",
  "tPERCENT",
  "tPLUS",
  "tMINUS",
  "tLSHFT",
  "tRSHFT",
  "tAMPER2",
  "tPIPE",
  "tCARET",
  "\">\"",
  "tGEQ",
  "\"<\"",
  "tLEQ",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tMATCH",
  "tNMATCH",
  "tANDOP",
  "tOROP",
  "tDOT2",
  "tDOT3",
  "\"?\"",
  "\":\"",
  "kRESCUE_MOD",
  "\"=\"",
  "tOP_ASGN",
  "kDEFINED",
  "kNOT",
  "kOR",
  "kAND",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "tLBRACE_ARG",
  "tLOWEST",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kALIAS",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "kDEFined",
  "kBLOCK_GIVEN",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tLABEL",
  "tINTEGER",
  "tFLOAT",
  "tSTRING_CONTENT",
  "tCHAR",
  "tNTH_REF",
  "tBACK_REF",
  "tREGEXP_END",
  "tAREF",
  "tASET",
  "tCOLON2",
  "tCOLON3",
  "tASSOC",
  "tLPAREN",
  "tLPAREN_ARG",
  "tRPAREN",
  "tLBRACK",
  "tLBRACE",
  "tSTAR",
  "tAMPER",
  "tLAMBDA",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tLAMBEG",
  "tSTRING",
  "tXSTRING_END",
  "\"{\"",
  "\"}\"",
  "\"[\"",
  "\".\"",
  "\",\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "\"`\"",
  "\"(\"",
  "\")\"",
  "\"]\"",
  "\";\"",
  "\" \"",
  "\"\\\\n\"",
  "$start",
  "target",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "do_block",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "k_while",
  "do",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "f_args",
  "operation3",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "sym",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 103)
  def _reduce_1(val, _values, result)
                        # puts 'well, we got here..'
                    # puts val[0]
                    @parser_result = val[0]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 111)
  def _reduce_2(val, _values, result)
                        self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 115)
  def _reduce_3(val, _values, result)
                        # puts 'program'
                    # puts val[1]
                    result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 122)
  def _reduce_4(val, _values, result)
                        # puts 'top_compstmt'
                    # puts val[0]
                    # puts val[1]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 130)
  def _reduce_5(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 134)
  def _reduce_6(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 138)
  def _reduce_7(val, _values, result)
                        result = val[0] + [val[2]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 142)
  def _reduce_8(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 147)
  def _reduce_9(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 153)
  def _reduce_11(val, _values, result)
                        # puts "erm wtf?!"
                    # puts val[1]
                    result = self.node_bodystmt(val[0], val[1], val[2], val[3])
                    # if val[1]
                      # pp result
                    # end
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 163)
  def _reduce_12(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 168)
  def _reduce_13(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 172)
  def _reduce_14(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 176)
  def _reduce_15(val, _values, result)
                        result = val[0] + [val[2]]
		              
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 182)
  def _reduce_17(val, _values, result)
                        self.lex_state = :EXPR_FNAME
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 186)
  def _reduce_18(val, _values, result)
                        result = node :alias, :lhs => val[1], :rhs => val[3] 
                  
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 194)
  def _reduce_23(val, _values, result)
                        result = node :if, :expr => val[2], :stmt => [val[0]], :tail => []
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 198)
  def _reduce_24(val, _values, result)
                		    result = node :unless, :expr => val[2], :stmt => [val[0]], :tail => []
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 202)
  def _reduce_25(val, _values, result)
                		    result = node :while, :expr => val[2], :stmt => [val[0]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 206)
  def _reduce_26(val, _values, result)
                		    result = node :until, :expr => val[2], :stmt => [val[0]]
            		  
    result
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 212)
  def _reduce_29(val, _values, result)
                		    result = node :assign, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 217)
  def _reduce_31(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 221)
  def _reduce_32(val, _values, result)
                		    puts "in here for #{val[0]}"
            		  
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 235)
  def _reduce_42(val, _values, result)
                  	    result = node :andop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 239)
  def _reduce_43(val, _values, result)
                  	    result = node :orop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 243)
  def _reduce_44(val, _values, result)
                  	    result = node :not, :expr => val[2]
              	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 254)
  def _reduce_50(val, _values, result)
                  	    result = node :return, :call_args => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 258)
  def _reduce_51(val, _values, result)
                	      result = node :break, :call_args => val[1]
            	    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 262)
  def _reduce_52(val, _values, result)
                	      result = node :next, :call_args => val[1]
            	    
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 273)
  def _reduce_57(val, _values, result)
                        # command call - no brackets/recv
          		      result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 279)
  def _reduce_59(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 286)
  def _reduce_63(val, _values, result)
          		          result = node :super, :call_args => val[1]
      		        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 290)
  def _reduce_64(val, _values, result)
            	          result = node :yield, :call_args => val[1]
        	        
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 331)
  def _reduce_94(val, _values, result)
    		                result = node :call, :recv => val[0], :meth => '[]', :args => val[2]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 335)
  def _reduce_95(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2], :call_args => {}
                  
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 342)
  def _reduce_99(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 348)
  def _reduce_101(val, _values, result)
                        puts 'ERROR: cant use identifier for class/mod name'
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 352)
  def _reduce_102(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 358)
  def _reduce_103(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 361)
  def _reduce_104(val, _values, result)
      	                result = node :path, :cname => val[0]
  	              
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 370)
  def _reduce_109(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 375)
  def _reduce_110(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 411)
  def _reduce_188(val, _values, result)
                        result = node :assign, :lhs => val[0], :rhs => val[2]
                  
    result
  end
.,.,

# reduce 189 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 416)
  def _reduce_190(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 191 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 421)
  def _reduce_192(val, _values, result)
                		    result = node :aset_op_asgn, :recv => val[0], :call_args => val[2], :op => val[4], :arg => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 425)
  def _reduce_193(val, _values, result)
                		    result = node :op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2], :call_args => {}), :op => val[3], :rhs => val[4]
                    # result = node :dot_identifier_op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
            		  
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 435)
  def _reduce_199(val, _values, result)
                		    result = node :dot2, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 439)
  def _reduce_200(val, _values, result)
                		    result = node :dot3, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 443)
  def _reduce_201(val, _values, result)
                		    result = node :opt_plus, :recv => val[0], :meth => '+', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 447)
  def _reduce_202(val, _values, result)
                		    result = node :opt_minus, :recv => val[0], :meth => '-', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 451)
  def _reduce_203(val, _values, result)
                		    result = node :opt_mult, :recv => val[0], :meth => '*', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 455)
  def _reduce_204(val, _values, result)
                		    result = node :opt_div, :recv => val[0], :meth => '/', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 459)
  def _reduce_205(val, _values, result)
                		    result = node :opt_mod, :recv => val[0], :meth => '%', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 463)
  def _reduce_206(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '**', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 470)
  def _reduce_210(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '-@', :call_args => { :args => []}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 474)
  def _reduce_211(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '|', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 478)
  def _reduce_212(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '^', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 482)
  def _reduce_213(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '&', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 486)
  def _reduce_214(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 490)
  def _reduce_215(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 494)
  def _reduce_216(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 498)
  def _reduce_217(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 502)
  def _reduce_218(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 506)
  def _reduce_219(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '==', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 510)
  def _reduce_220(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '===', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 514)
  def _reduce_221(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 518)
  def _reduce_222(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '=~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 522)
  def _reduce_223(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 526)
  def _reduce_224(val, _values, result)
                  	    result = node :not, :expr => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 530)
  def _reduce_225(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 534)
  def _reduce_226(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 538)
  def _reduce_227(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 542)
  def _reduce_228(val, _values, result)
                		    result = node :andop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 546)
  def _reduce_229(val, _values, result)
                		    result = node :orop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 230 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 551)
  def _reduce_231(val, _values, result)
                		    result = node :tertiary, :expr => val[0], :true => val[2], :false => val[5]
            		  
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 564)
  def _reduce_238(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 569)
  def _reduce_239(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 240 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 575)
  def _reduce_241(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 242 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 581)
  def _reduce_243(val, _values, result)
                		    result = node :call_args, :args => [val[0]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 585)
  def _reduce_244(val, _values, result)
                		    result = node :call_args, :args => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 589)
  def _reduce_245(val, _values, result)
                		    result = node :call_args, :assocs => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 593)
  def _reduce_246(val, _values, result)
                		    result = node :call_args, :args => val[0], :assocs => val[2], :block_arg => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 597)
  def _reduce_247(val, _values, result)
                		    result = node :call_args, :block_arg => val[0]
            		  
    result
  end
.,.,

# reduce 248 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 604)
  def _reduce_249(val, _values, result)
                        # puts "here for #{val[1]}"
                    # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 610)
  def _reduce_250(val, _values, result)
                        # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 616)
  def _reduce_251(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 252 omitted

# reduce 253 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 623)
  def _reduce_254(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 627)
  def _reduce_255(val, _values, result)
    		                result = [node(:splat, :val => val[1])]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 631)
  def _reduce_256(val, _values, result)
    		                result = val[0] + [val[2]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 635)
  def _reduce_257(val, _values, result)
    		                result = val[0] + [node(:splat, :val => val[3])]
		              
    result
  end
.,.,

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 650)
  def _reduce_267(val, _values, result)
                        # if val[0].node == :self
                      # result = val[0]
                    # else
                      # HACK: this rule shouldnt even exist. But for now it must for "identifier do .. end"
                      result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
                    # end
                  
    result
  end
.,.,

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 662)
  def _reduce_271(val, _values, result)
                  	    result = node :begin, :stmt => val[1]
              	  
    result
  end
.,.,

# reduce 272 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 667)
  def _reduce_273(val, _values, result)
                		    result = node :lparen, :stmt => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 671)
  def _reduce_274(val, _values, result)
                		    result = node :colon2, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 675)
  def _reduce_275(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 679)
  def _reduce_276(val, _values, result)
                		    result = node :array, :args => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 683)
  def _reduce_277(val, _values, result)
                		    result = node :assoc_list, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 687)
  def _reduce_278(val, _values, result)
                		    result = node :return
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 691)
  def _reduce_279(val, _values, result)
            	          result = node :yield, :call_args => val[2]
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 695)
  def _reduce_280(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 699)
  def _reduce_281(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 706)
  def _reduce_285(val, _values, result)
                		    result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 710)
  def _reduce_286(val, _values, result)
                		    # puts 2
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 714)
  def _reduce_287(val, _values, result)
                		    val[0][:brace_block] = val[1]
            		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 719)
  def _reduce_288(val, _values, result)
                		    result = node :lambda, :args => val[1][:args], :body => val[1][:body]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 723)
  def _reduce_289(val, _values, result)
                		    result = self.node :if, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 727)
  def _reduce_290(val, _values, result)
                		    result = self.node :unless, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 731)
  def _reduce_291(val, _values, result)
                        # puts "in node while"
            		    result = node :while, :expr => val[1], :stmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 736)
  def _reduce_292(val, _values, result)
                		    result = node :until, :expr => val[1], :stmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 740)
  def _reduce_293(val, _values, result)
                		    result = node :case, :expr => val[1], :body => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 744)
  def _reduce_294(val, _values, result)
                		    result = node :case, :expr => nil, :body => val[2]
            		  
    result
  end
.,.,

# reduce 295 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 749)
  def _reduce_296(val, _values, result)
                		    result = self.node_class(:cpath => val[1], :superclass => val[2], :bodystmt => val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 753)
  def _reduce_297(val, _values, result)
                		    result = node :class_shift, :expr => val[2], :bodystmt => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 757)
  def _reduce_298(val, _values, result)
                		    result = self.node_module(:cpath => val[1], :body => val[2])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 761)
  def _reduce_299(val, _values, result)
                		    result = self.node :def, :fname => val[1], :arglist => val[2], :bodystmt => val[3], :line_number => @current_def_linenumber
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 765)
  def _reduce_300(val, _values, result)
                		    result = self.node :def, :singleton => val[1], :fname => val[3], :arglist => val[4], :bodystmt => val[5], :line_number => @current_def_linenumber
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 769)
  def _reduce_301(val, _values, result)
                		    result = node :break, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 773)
  def _reduce_302(val, _values, result)
                		    result = node :next, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 777)
  def _reduce_303(val, _values, result)
                		    result = node :redo
            		  
    result
  end
.,.,

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

# reduce 312 omitted

# reduce 313 omitted

# reduce 314 omitted

# reduce 315 omitted

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

# reduce 322 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 815)
  def _reduce_323(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 819)
  def _reduce_324(val, _values, result)
                  	    result = [self.node(:elsif, :expr => val[1], :stmt => val[3])] + val[4]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 824)
  def _reduce_325(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 828)
  def _reduce_326(val, _values, result)
                  	    result = [self.node(:else, :stmt => val[1])]
              	  
    result
  end
.,.,

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

# reduce 356 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 868)
  def _reduce_357(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

# reduce 358 omitted

# reduce 359 omitted

# reduce 360 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 876)
  def _reduce_361(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 890)
  def _reduce_368(val, _values, result)
                        result = {:args => val[0], :body => val[1]}
                  
    result
  end
.,.,

# reduce 369 omitted

# reduce 370 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 898)
  def _reduce_371(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 902)
  def _reduce_372(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 373 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 908)
  def _reduce_374(val, _values, result)
                        result = node :brace_block, :params => val[1], :stmt => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 913)
  def _reduce_375(val, _values, result)
                        val[0][:brace_block] = val[1]
                    result = val[0]
                  
    result
  end
.,.,

# reduce 376 omitted

# reduce 377 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 921)
  def _reduce_378(val, _values, result)
                        result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 925)
  def _reduce_379(val, _values, result)
                        result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 929)
  def _reduce_380(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2], :args => val[3]
              	    puts "tCOLON2call"
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 934)
  def _reduce_381(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2]
              	    puts "tCOLON2call.noargs."
              	  
    result
  end
.,.,

# reduce 382 omitted

# reduce 383 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 941)
  def _reduce_384(val, _values, result)
                		    result = node :super, :call_args => val[1], :paren => true
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 945)
  def _reduce_385(val, _values, result)
                		    result = node :super, :call_args => nil, :inherit => true
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 949)
  def _reduce_386(val, _values, result)
                        result = node :call, :recv => val[0], :meth => '[]', :call_args => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 955)
  def _reduce_387(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 959)
  def _reduce_388(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 964)
  def _reduce_389(val, _values, result)
                        result = [node(:when, :args => val[1], :stmt => val[3])] + val[4]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 969)
  def _reduce_390(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 391 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 975)
  def _reduce_392(val, _values, result)
                        result = node :rescue, :list => val[1], :var => val[2], :stmt => val[4], :opt_rescue => val[5]
                    # puts result
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 980)
  def _reduce_393(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 985)
  def _reduce_394(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 989)
  def _reduce_395(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 993)
  def _reduce_396(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 998)
  def _reduce_397(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1002)
  def _reduce_398(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1007)
  def _reduce_399(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1011)
  def _reduce_400(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

# reduce 401 omitted

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

# reduce 405 omitted

# reduce 406 omitted

# reduce 407 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1026)
  def _reduce_408(val, _values, result)
                        result = node :string, :value => val[1], :beg => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1031)
  def _reduce_409(val, _values, result)
                        result = node :xstring, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1036)
  def _reduce_410(val, _values, result)
                        result = node :regexp, :value => val[1]
                  
    result
  end
.,.,

# reduce 411 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1042)
  def _reduce_412(val, _values, result)
                		    result = node :words, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1047)
  def _reduce_413(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1051)
  def _reduce_414(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1056)
  def _reduce_415(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1060)
  def _reduce_416(val, _values, result)
                        result = val[0] + [val[1]]
                  
    result
  end
.,.,

# reduce 417 omitted

# reduce 418 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1068)
  def _reduce_419(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

# reduce 420 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1075)
  def _reduce_421(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1080)
  def _reduce_422(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1085)
  def _reduce_423(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1090)
  def _reduce_424(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1095)
  def _reduce_425(val, _values, result)
                        result = node :string_content, :value => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1099)
  def _reduce_426(val, _values, result)
                        result = node :string_dvar, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1103)
  def _reduce_427(val, _values, result)
                        result = node :string_dbeg, :value => val[1]
                  
    result
  end
.,.,

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

# reduce 431 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1113)
  def _reduce_432(val, _values, result)
                        result = node :symbol, :name => val[1]
                  
    result
  end
.,.,

# reduce 433 omitted

# reduce 434 omitted

# reduce 435 omitted

# reduce 436 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1123)
  def _reduce_437(val, _values, result)
                        result = node :dsym, :contents => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1128)
  def _reduce_438(val, _values, result)
                        result = node :numeric, :value => val[0], :float => false
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1132)
  def _reduce_439(val, _values, result)
                        result = node :numeric, :value => val[0], :float => true
                  
    result
  end
.,.,

# reduce 440 omitted

# reduce 441 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1140)
  def _reduce_442(val, _values, result)
                        result = node :identifier, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1144)
  def _reduce_443(val, _values, result)
                        result = node :ivar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1148)
  def _reduce_444(val, _values, result)
                        result = node :gvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1152)
  def _reduce_445(val, _values, result)
                        result = node :constant, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1156)
  def _reduce_446(val, _values, result)
                        result = node :cvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1160)
  def _reduce_447(val, _values, result)
                        result = node :nil, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1164)
  def _reduce_448(val, _values, result)
                        result = node :self, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1168)
  def _reduce_449(val, _values, result)
                        result = node :true, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1172)
  def _reduce_450(val, _values, result)
                        result = node :false, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1176)
  def _reduce_451(val, _values, result)
                        result = node :__FILE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1180)
  def _reduce_452(val, _values, result)
                        result = node :__LINE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1184)
  def _reduce_453(val, _values, result)
                        result = node :__ENCODING__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1188)
  def _reduce_454(val, _values, result)
                        # added for block_given? support.. :D
                    result = node :block_given, :name => val[0]
                  
    result
  end
.,.,

# reduce 455 omitted

# reduce 456 omitted

# reduce 457 omitted

# reduce 458 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1201)
  def _reduce_459(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1205)
  def _reduce_460(val, _values, result)
                		    result = node :superclass, :expr => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1207)
  def _reduce_461(val, _values, result)
     puts 'OMFG' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1211)
  def _reduce_462(val, _values, result)
                        result = val[1]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1216)
  def _reduce_463(val, _values, result)
                        result = val[0]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1222)
  def _reduce_464(val, _values, result)
                        result = node_args(val[0], val[2], val[4], nil, val[5])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1226)
  def _reduce_465(val, _values, result)
                 		    result = node_args(val[0], val[2], val[4], val[6], val[7])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1230)
  def _reduce_466(val, _values, result)
                  	    result = node_args(val[0], val[2], nil, nil, val[3])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1234)
  def _reduce_467(val, _values, result)
                		    result = node_args(val[0], val[2], nil, val[4], val[5])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1238)
  def _reduce_468(val, _values, result)
                		    result = node_args(val[0], nil, val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1242)
  def _reduce_469(val, _values, result)
                		    result = node_args(val[0], nil, val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1246)
  def _reduce_470(val, _values, result)
                 		    result = node_args(val[0], nil, nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1250)
  def _reduce_471(val, _values, result)
                		    result = node_args(nil, val[0], val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1254)
  def _reduce_472(val, _values, result)
                		    result = node_args(nil, val[0], val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1258)
  def _reduce_473(val, _values, result)
                 		    result = node_args(nil, val[0], nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1262)
  def _reduce_474(val, _values, result)
                 		    result = node_args(nil, val[0], nil, val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1266)
  def _reduce_475(val, _values, result)
                 		    result = node_args(nil, nil, val[0], nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1270)
  def _reduce_476(val, _values, result)
                 		    result = node_args(nil, nil, val[0], val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1274)
  def _reduce_477(val, _values, result)
                 		    result = node_args(nil, nil, nil, nil, val[0])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1278)
  def _reduce_478(val, _values, result)
                  	    result = node_args(nil, nil, nil, nil, nil)
              	  
    result
  end
.,.,

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1289)
  def _reduce_484(val, _values, result)
                        # result = val[0]
              	    result = node :norm_arg, :value => val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1295)
  def _reduce_485(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1298)
  def _reduce_486(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1303)
  def _reduce_487(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 488 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1309)
  def _reduce_489(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1313)
  def _reduce_490(val, _values, result)
                        # val[0] + val[2]
                    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1319)
  def _reduce_491(val, _values, result)
                        result = [val[0], val[2]]
                  
    result
  end
.,.,

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1329)
  def _reduce_495(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1333)
  def _reduce_496(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 497 omitted

# reduce 498 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1341)
  def _reduce_499(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1350)
  def _reduce_503(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1354)
  def _reduce_504(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1359)
  def _reduce_505(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1368)
  def _reduce_509(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1372)
  def _reduce_510(val, _values, result)
                  	    result = val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1377)
  def _reduce_511(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1381)
  def _reduce_512(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1386)
  def _reduce_513(val, _values, result)
                        result = node :assoc, :key => val[0], :value => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1390)
  def _reduce_514(val, _values, result)
                        result = node :label_assoc, :key => val[0], :value => val[1]
                  
    result
  end
.,.,

# reduce 515 omitted

# reduce 516 omitted

# reduce 517 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1400)
  def _reduce_518(val, _values, result)
                      
    result
  end
.,.,

# reduce 519 omitted

# reduce 520 omitted

# reduce 521 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1407)
  def _reduce_522(val, _values, result)
                        puts 4
                  
    result
  end
.,.,

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyParser
  end   # module Vienna


