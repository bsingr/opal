#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
  #
# $Id$
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6'
    Racc_Runtime_Revision = '$Id$'

    Racc_Runtime_Core_Version_R = '1.4.6'
    Racc_Runtime_Core_Revision_R = '$Id$'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end


# require 'ctokenizer'
require 'strscan'

module Vienna
  class RubyParser < Racc::Parser

module_eval(<<'...end ruby_parser.rb.y/module_eval...', 'ruby_parser.rb.y', 1424)


...end ruby_parser.rb.y/module_eval...
##### State transition tables begin ###

clist = [
'-10,-520,-66,442,442,144,-520,453,538,-93,779,538,538,141,-520,-520',
'312,313,142,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520',
'-520,-520,-520,-94,-520,-96,693,442,442,-520,-520,-520,-520,-520,-520',
'451,-87,312,313,442,596,449,-520,-520,-520,312,313,611,-520,-520,4,-520',
'145,-93,-454,-448,813,144,478,599,-520,-85,-95,613,142,312,313,129,312',
'313,-87,450,263,333,265,263,263,265,265,-94,819,-448,474,475,818,333',
'-86,500,-80,-95,701,-100,292,324,327,-520,439,439,338,340,343,346,321',
'322,325,328,330,332,335,337,342,344,345,450,142,145,-94,859,-520,-520',
'-520,-520,-88,-520,-520,-87,-520,-520,-520,-520,-520,439,439,-87,-520',
'-10,-520,-10,-520,-521,-97,702,-94,439,-521,-87,142,-95,810,-87,-85',
'593,-521,-521,142,595,472,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-521,-521,142,263,-86,265,-521,-521,-521',
'-521,-521,-521,-521,263,-87,265,-92,507,508,-521,-521,-521,-99,548,-521',
'-521,-521,-97,-521,323,326,329,331,334,336,339,341,-521,-521,-521,-521',
'323,326,329,331,334,336,339,341,263,263,265,265,614,-97,498,142,805',
'-100,-94,802,-94,333,802,-95,-89,-95,498,498,613,324,327,-521,333,-521',
'338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,129,263',
'-99,265,333,-521,-521,-521,-521,-521,-521,-521,333,-521,-521,-521,-521',
'-521,129,-269,-98,-521,-521,-521,-269,-521,-97,-89,-97,-91,498,-92,-269',
'-269,498,-514,-96,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269',
'-269,-269,-269,-269,-269,-269,-269,263,-449,265,800,-269,-269,-269,-269',
'-269,-269,-269,-91,263,263,265,265,-443,-269,-269,-269,798,518,-269',
'-269,-269,142,-269,-449,-96,-90,516,517,263,797,265,-269,-269,-269,-269',
'-514,-517,-443,-443,312,313,-88,323,326,329,331,334,336,339,341,-514',
'833,-516,323,326,329,331,334,336,339,341,263,305,265,796,263,-269,265',
'-269,306,307,308,304,-269,323,326,329,331,334,336,339,341,323,326,329',
'331,334,336,339,341,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269',
'-269,-269,142,-273,614,-269,-269,-269,-273,-269,-516,826,758,-96,-445',
'-96,-273,-273,-89,770,613,-273,-273,-273,-273,-273,-273,-273,-273,-273',
'-273,-273,-273,-273,-273,-273,793,-273,-98,694,-445,305,-273,-273,-273',
'-273,-273,-273,306,307,308,304,-89,-522,614,-273,-273,-273,-522,296',
'297,-273,-273,460,-273,-273,-522,-522,826,758,613,-522,-522,-522,-522',
'-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,159',
'792,-273,-273,-522,-522,-522,-522,-522,-522,-522,758,758,543,-447,-517',
'-446,-522,-522,-522,-273,155,-522,-522,-522,606,-522,-89,606,355,-384',
'356,478,-97,776,-522,-522,-522,-522,-89,-447,333,-446,-89,-273,-273',
'-273,-90,-273,-273,-273,-273,-273,-273,-273,-273,474,475,495,-273,333',
'-273,263,-273,265,-384,-95,775,324,327,-522,333,-522,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,-384,898,-384,-384,-453',
'-522,-522,-522,-522,-522,-522,-522,791,-522,-522,-522,-522,-522,263',
'-520,265,-522,-522,-522,-520,-522,591,592,606,-453,-453,-273,-520,-520',
'789,-520,787,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520',
'-520,-520,-520,-520,-520,-520,-96,773,-273,-273,-520,-520,-520,-520',
'-520,-520,-520,-93,-454,837,-451,-517,-520,-520,-520,-520,478,781,-520',
'-520,-520,657,-520,323,326,329,331,334,336,339,341,-520,-520,-520,-520',
'-520,-451,-520,-520,142,474,475,323,326,329,331,334,336,339,341,-516',
'478,-254,323,326,329,331,334,336,339,341,142,-440,-99,548,333,-520,21',
'-520,30,-443,44,50,324,327,474,475,522,338,340,343,346,-539,-539,-539',
'-539,-539,-539,-440,-520,-520,-520,-520,-520,-520,-520,-443,-520,-520',
'-520,-520,-520,423,8,840,-520,-520,-520,623,-520,-273,530,61,67,71,841',
'134,-100,422,420,99,105,312,313,770,25,142,34,42,48,56,65,68,72,625',
'-273,-273,529,606,100,108,5,9,16,23,27,378,142,-517,54,60,66,73,77,86',
'88,90,93,97,104,606,10,17,758,29,32,39,142,848,-520,-253,130,379,133',
'87,-450,96,103,-80,851,13,18,24,28,33,40,46,119,543,30,606,44,50,323',
'326,329,331,334,336,339,341,-450,721,142,-520,606,57,333,770,720,713',
'142,-268,142,546,324,327,784,922,157,160,162,164,113,704,-255,142,-520',
'142,-520,-520,-274,61,67,71,863,134,-268,-268,460,99,105,-516,923,924',
'25,866,34,42,48,126,128,68,72,450,679,-274,-274,675,136,108,5,9,16,23',
'27,667,657,651,54,60,66,73,77,86,88,90,93,97,104,112,10,17,-253,29,32',
'39,648,575,877,355,130,356,133,87,142,96,103,139,114,13,18,24,28,33',
'40,46,21,333,30,879,44,50,576,577,632,324,327,622,423,118,478,610,608',
'606,-440,57,606,585,770,606,142,504,142,-65,323,326,329,331,334,336',
'339,341,8,582,474,475,476,-513,256,-440,-440,61,67,71,579,134,505,506',
'578,99,105,-274,-513,606,25,494,34,42,48,56,65,68,72,257,258,543,528',
'526,100,108,5,9,16,23,27,525,-274,-274,54,60,66,73,77,86,88,90,93,97',
'104,524,10,17,-256,29,32,39,511,-274,899,900,130,902,133,87,142,96,103',
'802,-304,13,18,24,28,33,40,46,21,906,30,802,44,50,-274,-274,416,323',
'326,329,331,334,336,339,341,-304,-304,57,333,802,802,911,263,-268,265',
'802,324,327,590,509,915,417,418,406,8,465,877,157,160,162,164,467,501',
'61,67,71,80,84,-268,-268,129,99,105,591,592,472,25,462,34,42,48,56,65',
'68,72,458,606,417,502,455,100,108,5,9,16,23,27,36,875,51,54,60,66,73',
'77,86,88,90,93,97,104,454,10,17,448,29,32,39,428,-453,925,606,74,427',
'82,87,423,96,103,110,420,13,18,24,28,33,40,46,21,472,30,413,44,50,-453',
'-453,877,465,412,157,160,162,164,467,478,141,608,57,503,387,320,142',
'494,303,-516,-517,323,326,329,331,334,336,339,341,8,802,943,802,474',
'475,333,802,802,61,67,71,80,134,324,327,680,99,105,877,24,299,25,295',
'34,42,48,56,65,68,72,142,294,147,140,111,100,108,5,9,16,23,27,36,802',
'51,54,60,66,73,77,86,88,90,93,97,104,305,10,17,,29,32,39,306,307,308',
'304,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,323,326,329,331,334',
'336,339,341,305,191,,199,204,,212,306,307,308,304,57,237,241,,,494,254',
'178,182,187,196,201,206,209,213,217,,,687,688,465,689,157,160,162,164',
'467,32,39,,,323,326,329,331,334,336,339,341,469,,,,,466,191,,199,204',
'784,212,157,160,162,164,,237,241,,,,254,178,182,187,196,201,206,209',
'213,217,,,,,,,937,481,,,938,,465,,157,160,162,164,467,,218,221,653,',
'157,160,162,164,166,,255,469,,,,,466,,,,,169,,,,,156,159,,,181,185,190',
'194,198,203,208,211,215,219,129,602,489,,,603,,,155,,,163,,,,218,221',
',,657,,,119,,30,255,44,50,323,326,329,331,334,336,339,341,,465,,157',
'160,162,164,467,,181,185,190,194,198,203,208,211,215,219,129,469,,113',
',465,807,157,160,162,164,467,61,67,71,,134,,,,99,105,,,469,25,,34,42',
'48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18',
'24,28,33,40,46,,,,,,,191,,199,204,,212,,118,,,,237,241,57,,406,254,178',
'182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226',
'229,232,234,239,244,247,248,252,180,184,189,193,197,202,207,210,214',
'223,227,230,233,236,,,,249,253,177,394,395,396,397,205,,,398,399,401',
'228,77,403,242,90,93,405,104,,,,,,,,,218,221,,,,,,119,,30,255,44,50',
',,,,,,,,,465,,157,160,162,164,467,,181,185,190,194,198,203,208,211,215',
'219,400,469,,113,465,,157,160,162,164,467,,61,67,71,,134,,,,99,105,',
'469,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60',
'66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103',
',,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,,,,,237,241,57,,546',
'254,178,182,187,196,201,206,209,213,217,,,465,,157,160,162,164,467,',
',,,,151,,157,160,162,164,166,469,,,,,,,,191,,199,204,169,212,,,,156',
'159,237,241,,,,254,178,182,187,196,201,206,209,213,217,,,,,,155,639',
'481,163,,640,,465,627,157,160,162,164,467,,218,221,151,,157,160,162',
'164,166,,255,469,,,,,,,,,,169,,,,,156,159,,,181,185,190,194,198,203',
'208,211,215,219,129,741,481,,,743,,,155,,,163,,,,218,221,191,,199,204',
',212,,,255,,,237,241,,,,254,178,182,187,196,201,206,209,213,217,,,181',
'185,190,194,198,203,208,211,215,219,129,,151,,157,160,162,164,166,,',
',,,,,,191,,199,204,169,212,,,,156,159,237,241,,,,254,178,182,187,196',
'201,206,209,213,217,,,,,,155,733,489,163,,734,,,627,,,,,,,218,221,,151',
',157,160,162,164,166,255,,,,,,,,,,,,169,,,,,156,159,,181,185,190,194',
'198,203,208,211,215,219,129,730,481,,,731,,,,155,,,163,,,218,221,149',
',,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211',
'215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,144,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24',
'28,33,40,46,,,,,,,145,,,,,,191,118,199,204,,212,,57,,129,,237,241,,',
',254,178,182,187,196,201,206,209,213,217,653,,157,160,162,164,166,653',
',157,160,162,164,166,,,,,,169,,,,,156,159,169,,,,,156,159,465,,157,160',
'162,164,166,,,,,,,155,,,163,,,169,155,,,163,,159,,,642,489,,,643,,,',
',,,,,,218,221,,,155,,333,-514,,-514,255,-514,-514,,324,327,,,,338,340',
'343,346,-539,-539,-539,-539,-539,-539,,181,185,190,194,198,203,208,211',
'215,219,129,,,-514,,,,,,,,,-514,-514,-514,,-514,,,,-514,-514,,,,-514',
',-514,-514,-514,-514,-514,-514,-514,,,,,,-514,-514,-514,-514,-514,-514',
'-514,,,,-514,-514,-514,-514,-514,-514,-514,-514,-514,-514,-514,-514',
'-514,-514,,-514,-514,-514,,,,,-514,,-514,-514,,-514,,-514,-514,-514',
'-514,-514,-514,-514,-514,-514,119,,30,,44,50,-514,323,326,329,331,334',
'336,339,341,,,,,-514,,-514,,465,,157,160,162,164,166,,,,,,,113,,,,,',
'169,,,61,67,71,159,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,155',
',,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17',
',29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,-513',
',-513,,-513,-513,151,,157,160,162,164,166,118,,,,,,57,,129,,,,169,,',
',,156,159,,,,,-513,,,,,,,,,-513,-513,-513,,-513,,,155,-513,-513,163',
',,-513,,-513,-513,-513,-513,-513,-513,-513,,355,,356,,-513,-513,-513',
'-513,-513,-513,-513,,,,-513,-513,-513,-513,-513,-513,-513,-513,-513',
'-513,-513,-513,-513,-513,,-513,-513,-513,,,,,-513,,-513,-513,,-513,',
'-513,-513,-513,-513,-513,-513,-513,-513,-513,,,,,,,-513,,,,,191,,199',
'204,,212,,,-513,,-513,237,241,,,,254,178,182,187,196,201,206,209,213',
'217,,,,,,,,,,,,653,,157,160,162,164,166,151,,157,160,162,164,166,,,',
',191,169,199,204,,212,156,159,169,,,237,241,156,159,,254,178,182,187',
'196,201,206,209,213,217,,,155,,,163,710,489,,155,711,,163,,,,,,,,218',
'221,151,,157,160,162,164,166,,255,,,,,,,,,,,169,,,,,156,159,,,181,185',
'190,194,198,203,208,211,215,219,129,707,481,,,708,,,155,,,163,,,,218',
'221,191,,199,204,,212,,,255,,,237,241,,,,254,178,182,187,196,201,206',
'209,213,217,,,181,185,190,194,198,203,208,211,215,219,129,,151,,157',
'160,162,164,166,,,,,,,,,191,,199,204,169,212,,,,156,159,237,241,,,,254',
'178,182,187,196,201,206,209,213,217,,,,,,155,642,489,163,,643,,,,,,',
',,,218,221,465,,157,160,162,164,166,,255,,,,,,,,,,,169,,,,,,159,,,181',
'185,190,194,198,203,208,211,215,219,129,639,481,,,640,,,155,,,,,,,218',
'221,,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190,194,198,203',
'208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13',
'18,24,28,33,40,46,119,,30,,44,50,465,,157,160,162,164,166,118,,,,,,57',
',129,,,,169,,,,,,159,,,,,113,,,,,,,,,61,67,71,,134,,,155,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114',
'13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,118,,,,237,241,57,,129',
'254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,465,,157,160,162',
'164,166,465,,157,160,162,164,166,,,,,191,169,199,204,,212,,159,169,',
',237,241,,159,,254,178,182,187,196,201,206,209,213,217,,,155,,,,488',
'489,,155,492,,,,,,,,,,218,221,465,,157,160,162,164,166,,255,,,,,,,,',
',,169,,,,,,159,,,181,185,190,194,198,203,208,211,215,219,129,927,481',
',,928,,,155,,,,,,,218,221,,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181',
'185,190,194,198,203,208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,',
',54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,139,114,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,118',
',,,237,241,57,,129,254,178,182,187,196,201,206,209,213,217,465,,157',
'160,162,164,166,465,,157,160,162,164,166,,,,,,169,,,,,,159,169,,,,,',
'159,,,,,,,,,,,,,,155,,,,,,,155,,,,,,,,940,489,,,941,,,,,,,,,,218,221',
',,,,,,,-517,255,-517,,-517,-517,,,,,,,,,,,,,,,,181,185,190,194,198,203',
'208,211,215,219,129,,-98,694,,-517,,,,,,,,,-517,-517,-517,,-517,,,,-517',
'-517,,,,-517,,-517,-517,-517,-517,-517,-517,-517,,,,,,-517,-517,-517',
'-517,-517,-517,-517,,,,-517,-517,-517,-517,-517,-517,-517,-517,-517',
'-517,-517,-517,-517,-517,,-517,-517,-517,,,,,-517,,-517,-517,,-517,',
'-517,-517,-517,-517,-517,-517,-517,-517,-517,,,,,,,191,,199,204,,212',
',,,,,237,241,-517,,-517,254,178,182,187,196,201,206,209,213,217,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,480,481,,,485',
',,,,,,,,,218,221,,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190',
'194,198,203,208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103',
'139,114,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,118,,,,,,57,,129',
',,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40',
'46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201,206',
'209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239,244',
'247,248,252,180,184,189,193,197,202,207,210,214,223,227,230,233,236',
',,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238,242,,,250',
',,,,,,,,,218,221,,359,21,,30,333,44,50,255,,,18,,324,327,,,,338,340',
'343,346,-539,-539,-539,-539,-539,-539,181,185,190,194,198,203,208,211',
'215,219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,365,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,323,326,329,331,334,336,339,341,57,,,,,,,,,,,,,,,',
',,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,',
',,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,,,,,191',
',199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201,206,209,213',
'217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239,244,247,248',
'252,180,184,189,193,197,202,207,210,214,223,227,230,233,236,,,,249,253',
'177,186,192,195,200,205,,,216,220,225,228,,238,242,,,250,,,,,,,,,,218',
'221,,359,21,,30,333,44,50,255,,,18,,324,327,,,,338,340,343,346,-539',
'-539,-539,-539,-539,-539,181,185,190,194,198,203,208,211,215,219,8,',
',,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44',
'50,,,,,323,326,329,331,334,336,339,341,57,,,,,,,,,,,,,,,,,,8,,,,,,,',
',61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50',
',,,,,,333,,,,,,57,,324,327,,,,338,340,343,346,-539,-539,-539,-539,-539',
'-539,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,,,,,,,57,323,326,329,331,334,336,339,341,,,,,,,',
',,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,',
',,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21',
',30,,44,50,,,,,,,333,,,,,,57,,324,327,,,,338,340,343,346,-539,-539,-539',
'-539,-539,-539,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,323,326,329,331,334,336,339,341',
',,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,333,,,,,,57,,324,327,,,,338,340,343,346,321,322',
'325,328,330,332,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,323,326,329,331,334,336,339,341',
',,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,333,,,,,,57,,324,327,,,,338,340,343,346,321,322',
'325,328,330,332,335,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42',
'48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28',
'33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,323,326,329,331,334,336,339',
'341,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40',
'46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201,206',
'209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239,244',
'247,248,252,180,184,189,193,197,202,207,210,214,223,227,230,233,236',
',,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238,242,289,,250',
',,,,,,,,,218,221,,,191,,199,204,,212,255,,,18,,237,241,,,,254,178,182',
'187,196,201,206,209,213,217,181,185,190,194,198,203,208,211,215,219',
'179,183,188,,,,,,,222,226,229,232,234,239,244,247,248,252,180,184,189',
'193,197,202,207,210,214,223,227,230,233,236,,,,249,253,177,186,192,195',
'200,205,,,216,220,225,228,,238,242,,,250,,,,,,,,,,218,221,,359,21,,30',
',44,50,255,,,18,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215',
'219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,237',
'241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,191,,199,204,,212,,,,,,237,241,,,,254,178,182,187,196,201,206',
'209,213,217,,,,,,,,602,489,,,603,,,,,,,,,,218,221,,,,,,,,,255,,,,,,',
',,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219,602,489,,,603,',
',,,,,,,,218,221,,359,21,,30,,44,50,255,,,,,,,,,,,,,,,,,,,,181,185,190',
'194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18',
'24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,',
',,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44',
'50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,365,87,,96,103,110',
',13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,237',
'241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188',
',,,,,,222,226,229,232,234,239,244,247,248,252,180,184,189,193,197,202',
'207,210,214,223,227,230,233,236,,,,249,253,177,186,192,195,200,205,',
',216,220,225,228,,238,242,243,245,250,251,,,,,,,,,218,221,,359,21,,30',
',44,50,255,,,,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219',
'8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30',
',44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,',
'99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
'80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74',
',365,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24',
'28,33,40,46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187',
'196,201,206,209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232',
'234,239,244,247,248,252,180,184,189,193,197,202,207,210,214,223,227',
'230,233,236,,,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238',
'242,,,250,,,,,,,,,,218,221,,359,21,,30,,44,50,255,,,,,,,,,,,,,,,,,,',
',181,185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134,',
',,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
'80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74',
',82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,',
',,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24',
'28,33,40,46,15,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,778,,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,',
'54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87',
',96,103,638,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,434,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118',
',,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,',
'44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,',
',,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,',
'96,103,139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57',
',,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46',
'21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,',
',,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42',
'48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,21,,30,,44',
'50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,',
'134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,',
',54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118,,',
',,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,,13,18,24,28,33,40,46,119,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,',
',,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,',
',25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,',
',,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,114,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103',
'139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,',
',,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,',
'44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,',
'134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,638,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118',
',,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,434,,13,18,24,28,33,40,46,119,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,434,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,638,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,,,,,,,,333,,,,,,,,324,327,,,57,338,340,343,346,321,322',
'325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343',
'346,321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,',
',,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333,,',
',,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,',
',,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326',
'329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336',
'339,341,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332',
'335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325',
'328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,342,344,345,,,,,,,,,,,,',
',,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329',
'331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339',
'341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,333,,,,,,,,324',
'327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333',
',,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332',
'335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325',
'328,330,332,335,337,342,344,345,,,,,,,,,,,,,,,,,323,326,329,331,334',
'336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,',
',,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,',
'323,326,329,331,334,336,339,341,333,,,,,,,,324,327,,,,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324',
'327,,,,338,340,343,346,321,322,325,328,330,332,335,337,-539,-539,333',
',,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,,761,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,',
',,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323',
'326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336',
'339,341,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332',
'335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325',
'328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,342,344,345,,,,,,,,,,,,',
',,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329',
'331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339',
'341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,333,,,,,,,,324',
'327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333',
',,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,333,664,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330',
'332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322',
'325,328,330,332,335,337,342,344,345,,761,,,,,,,,,,,,,,,323,326,329,331',
'334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341',
',,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,',
',,,-232,323,326,329,331,334,336,339,341,333,278,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,-539,-539,,,,,,,113,,,,',
',,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,282,,133,87,278,96,103,,,13,18,24,28,33,40,46,,,,,,,,,,,409,323',
'326,329,331,334,336,339,341,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,281',
'77,86,88,90,93,97,104,278,10,17,,29,32,39,375,,,,282,,133,87,,96,103',
',,13,18,24,28,33,40,46,,,,,,113,,,,,514,,,,61,67,71,,134,,,,99,105,',
',,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60',
'66,281,77,376,88,90,93,377,104,,10,17,,29,32,39,,,,,373,,133,87,,96',
'103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103,113,,13,18,24',
'28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,278,,54,60,66,281,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,282,,283,87,,96,103,285,113,13,18,24,28,33,40,46',
',61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,862,,133,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,',
'278,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,351,,82',
'87,,96,103,110,113,13,18,24,28,33,40,46,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66',
'281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103,113',
',13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,376,88,90,93',
'377,104,,10,17,,29,32,39,,,,,373,,133,87,,96,103,113,,13,18,24,28,33',
'40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,',
'29,32,39,,,,,282,,283,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23',
'27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282',
',283,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,',
',25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60',
'66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103',
'113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,281,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,894,,133,87,,96,103,,,13,18,24,28,33,40',
'46' ]
        racc_action_table = arr = Array.new(23301, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'84,480,739,356,355,271,480,152,309,350,653,735,314,8,480,480,368,368',
'8,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,838,480',
'480,480,472,144,480,480,480,480,480,480,152,710,436,436,145,374,151',
'480,480,480,727,727,383,480,480,1,480,271,64,64,397,685,11,269,374,480',
'350,733,383,682,626,626,271,600,600,710,653,309,552,309,735,314,735',
'314,696,696,397,269,269,695,573,838,269,739,488,488,38,38,573,573,480',
'356,355,573,573,573,573,573,573,573,573,573,573,573,573,573,573,573',
'151,368,11,774,774,480,480,480,480,480,480,480,733,480,480,480,480,480',
'472,144,710,480,84,480,84,480,481,492,492,949,145,481,710,436,940,681',
'710,64,373,481,481,727,373,700,481,481,481,481,481,481,481,481,481,481',
'481,481,481,481,481,481,481,626,600,696,600,481,481,481,481,481,481',
'481,374,488,374,38,278,278,481,481,481,320,320,481,481,481,941,481,552',
'552,552,552,552,552,552,552,481,481,481,481,573,573,573,573,573,573',
'573,573,596,22,596,22,389,734,268,573,677,349,949,676,949,567,674,940',
'492,940,847,298,389,567,567,481,555,481,567,567,567,567,567,567,567',
'567,567,567,567,567,567,567,567,705,318,578,318,561,481,481,481,481',
'481,481,481,717,481,481,481,481,481,706,88,731,481,481,481,88,481,941',
'734,941,320,883,349,88,88,724,377,730,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,268,399,268,672,88,88,88,88,88,88,88,578,847,298',
'847,298,377,88,88,88,670,289,88,88,88,709,88,399,937,731,289,289,628',
'669,628,88,88,88,88,377,731,377,377,267,267,730,567,567,567,567,567',
'567,567,567,377,724,730,555,555,555,555,555,555,555,555,883,583,883',
'668,724,88,724,88,583,583,583,583,88,561,561,561,561,561,561,561,561',
'717,717,717,717,717,717,717,717,88,88,88,88,88,88,88,88,88,88,88,88',
'665,485,760,88,88,88,485,88,937,703,703,937,395,937,485,485,711,714',
'760,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,663',
'485,485,485,395,363,485,485,485,485,485,485,363,363,363,363,711,484',
'384,485,485,485,484,44,44,485,485,166,485,743,484,484,935,935,384,484',
'484,484,484,484,484,484,484,484,484,484,484,484,484,484,484,484,166',
'662,743,743,484,484,484,484,484,484,484,886,719,886,396,743,394,484',
'484,484,485,166,484,484,484,722,484,711,723,79,828,79,266,643,643,484',
'484,484,484,711,396,718,394,711,485,485,485,485,485,485,485,485,485',
'485,485,485,266,266,266,485,551,485,366,485,366,828,642,642,551,551',
'484,302,484,551,551,551,551,551,551,551,551,551,551,551,551,551,551',
'551,828,861,828,828,280,484,484,484,484,484,484,484,661,484,484,484',
'484,484,747,639,747,484,484,484,639,484,861,861,726,280,280,938,639',
'639,659,741,658,639,639,639,639,639,639,639,639,639,639,639,639,639',
'639,639,639,639,639,639,938,938,639,639,639,639,639,639,639,127,127',
'729,401,938,741,639,639,639,521,656,639,639,639,654,639,718,718,718',
'718,718,718,718,718,639,639,639,639,741,401,741,741,732,521,521,551',
'551,551,551,551,551,551,551,741,293,649,302,302,302,302,302,302,302',
'302,641,403,427,427,550,639,141,639,141,405,141,141,550,550,293,293',
'293,550,550,550,550,550,550,550,550,550,550,403,639,639,639,639,639',
'639,639,405,639,639,639,639,639,637,141,736,639,639,639,393,639,708',
'300,141,141,141,737,141,123,123,635,141,141,59,59,634,141,631,141,141',
'141,141,141,141,141,393,708,708,300,620,141,141,141,141,141,141,141',
'91,744,708,141,141,141,141,141,141,141,141,141,141,141,746,141,141,609',
'141,141,141,586,753,707,756,141,91,141,141,398,141,141,584,759,141,141',
'141,141,141,141,141,406,545,406,544,406,406,550,550,550,550,550,550',
'550,550,398,531,765,707,767,141,566,769,530,513,512,277,141,510,566',
'566,657,891,657,657,657,657,406,499,777,486,707,471,707,707,511,406',
'406,406,780,406,277,277,467,406,406,707,891,891,406,785,406,406,406',
'406,406,406,406,465,464,511,511,461,406,406,406,406,406,406,406,450',
'447,437,406,406,406,406,406,406,406,406,406,406,406,406,406,406,432',
'406,406,406,430,348,809,376,406,376,406,406,424,406,406,406,406,406',
'406,406,406,406,406,406,70,568,70,812,70,70,348,348,408,568,568,392',
'391,406,224,382,381,825,376,406,380,364,829,830,361,276,406,360,566',
'566,566,566,566,566,566,566,70,358,224,224,224,376,19,376,376,70,70',
'70,352,70,276,276,351,70,70,595,376,845,70,317,70,70,70,70,70,70,70',
'19,19,316,299,297,70,70,70,70,70,70,70,296,595,595,70,70,70,70,70,70',
'70,70,70,70,70,294,70,70,860,70,70,70,282,925,862,864,70,865,70,70,281',
'70,70,868,107,70,70,70,70,70,70,70,264,869,264,870,264,264,925,925,117',
'568,568,568,568,568,568,568,568,107,107,70,571,871,872,873,70,892,70',
'874,571,571,369,279,876,117,117,274,264,807,878,807,807,807,807,807',
'272,264,264,264,264,264,892,892,270,264,264,369,369,175,264,167,264',
'264,264,264,264,264,264,161,888,272,272,154,264,264,264,264,264,264',
'264,264,807,264,264,264,264,264,264,264,264,264,264,264,264,153,264',
'264,150,264,264,264,137,893,894,897,264,130,264,264,125,264,264,264',
'120,264,264,264,264,264,264,264,588,692,588,116,588,588,893,893,914',
'466,115,466,466,466,466,466,275,113,921,264,275,101,74,73,264,51,927',
'928,571,571,571,571,571,571,571,571,588,929,930,931,275,275,574,932',
'933,588,588,588,588,588,574,574,466,588,588,934,47,46,588,43,588,588',
'588,588,588,588,588,939,40,12,7,4,588,588,588,588,588,588,588,588,950',
'588,588,588,588,588,588,588,588,588,588,588,588,52,588,588,,588,588',
'588,52,52,52,52,588,,588,588,,588,588,588,,588,588,588,588,588,588,588',
'273,273,273,273,273,273,273,273,740,922,,922,922,,922,740,740,740,740',
'588,922,922,,,588,922,922,922,922,922,922,922,922,922,922,,,475,475',
'469,475,469,469,469,469,469,475,475,,,574,574,574,574,574,574,574,574',
'469,,,,,469,592,,592,592,866,592,866,866,866,866,,592,592,,,,592,592',
'592,592,592,592,592,592,592,592,,,,,,,922,922,,,922,,169,,169,169,169',
'169,169,,922,922,439,,439,439,439,439,439,,922,169,,,,,169,,,,,439,',
',,,439,439,,,922,922,922,922,922,922,922,922,922,922,922,592,592,,,592',
',,439,,,439,,,,592,592,,,439,,,108,,108,592,108,108,259,259,259,259',
'259,259,259,259,,679,,679,679,679,679,679,,592,592,592,592,592,592,592',
'592,592,592,592,679,,108,,810,679,810,810,810,810,810,108,108,108,,108',
',,,108,108,,,810,108,,108,108,108,108,108,108,108,,,,,,108,108,108,108',
'108,108,108,,,,108,108,108,108,108,108,108,108,108,108,108,108,108,108',
',108,108,108,,,,,108,,108,108,,108,108,108,108,108,108,108,108,108,108',
'108,,,,,,,106,,106,106,,106,,108,,,,106,106,108,,108,106,106,106,106',
'106,106,106,106,106,106,,,,,,,,,,,106,106,106,,,,,,,106,106,106,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,106,106,,,,106,106,106,106,106,106,106,106,,,106,106,106,106,106',
'106,106,106,106,106,106,,,,,,,,,106,106,,,,,,319,,319,106,319,319,,',
',,,,,,,877,,877,877,877,877,877,,106,106,106,106,106,106,106,106,106',
'106,106,877,,319,680,,680,680,680,680,680,,319,319,319,,319,,,,319,319',
',680,,319,,319,319,319,319,319,319,319,,,,,,319,319,319,319,319,319',
'319,,,,319,319,319,319,319,319,319,319,319,319,319,,319,319,,319,319',
'319,,,,,319,,319,319,,319,319,,,319,319,319,319,319,319,319,,,,,,,416',
',416,416,,416,,,,,,416,416,319,,319,416,416,416,416,416,416,416,416',
'416,416,,,915,,915,915,915,915,915,,,,,,763,,763,763,763,763,763,915',
',,,,,,,590,,590,590,763,590,,,,763,763,590,590,,,,590,590,590,590,590',
'590,590,590,590,590,,,,,,763,416,416,763,,416,,875,763,875,875,875,875',
'875,,416,416,149,,149,149,149,149,149,,416,875,,,,,,,,,,149,,,,,149',
'149,,,416,416,416,416,416,416,416,416,416,416,416,590,590,,,590,,,149',
',,149,,,,590,590,577,,577,577,,577,,,590,,,577,577,,,,577,577,577,577',
'577,577,577,577,577,577,,,590,590,590,590,590,590,590,590,590,590,590',
',402,,402,402,402,402,402,,,,,,,,,575,,575,575,402,575,,,,402,402,575',
'575,,,,575,575,575,575,575,575,575,575,575,575,,,,,,402,577,577,402',
',577,,,402,,,,,,,577,577,,13,,13,13,13,13,13,577,,,,,,,,,,,,13,,,,,13',
'13,,577,577,577,577,577,577,577,577,577,577,577,575,575,,,575,,,,13',
',,13,,,575,575,13,,,,,14,,14,575,14,14,,,,,,,,,,,,,,,,,,575,575,575',
'575,575,575,575,575,575,575,575,,,14,,,,,,,,,14,14,14,,14,,,,14,14,',
',,14,,14,14,14,14,14,14,14,,14,,,,14,14,14,14,14,14,14,,,,14,14,14,14',
'14,14,14,14,14,14,14,14,14,14,,14,14,14,,,,,14,,14,14,,14,14,14,14,14',
'14,14,14,14,14,14,,,,,,,14,,,,,,418,14,418,418,,418,,14,,14,,418,418',
',,,418,418,418,418,418,418,418,418,418,418,787,,787,787,787,787,787',
'900,,900,900,900,900,900,,,,,,787,,,,,787,787,900,,,,,900,900,805,,805',
'805,805,805,805,,,,,,,787,,,787,,,805,900,,,900,,805,,,418,418,,,418',
',,,,,,,,,418,418,,,805,,549,97,,97,418,97,97,,549,549,,,,549,549,549',
'549,549,549,549,549,549,549,,418,418,418,418,418,418,418,418,418,418',
'418,,,97,,,,,,,,,97,97,97,,97,,,,97,97,,,,97,,97,97,97,97,97,97,97,',
',,,,97,97,97,97,97,97,97,,,,97,97,97,97,97,97,97,97,97,97,97,97,97,97',
',97,97,97,,,,,97,,97,97,,97,,97,97,97,97,97,97,97,97,97,601,,601,,601',
'601,97,549,549,549,549,549,549,549,549,,,,,97,,97,,911,,911,911,911',
'911,911,,,,,,,601,,,,,,911,,,601,601,601,911,601,,,,601,601,,,,601,',
'601,601,601,601,601,601,601,,,911,,,601,601,601,601,601,601,601,,,,601',
'601,601,601,601,601,601,601,601,601,601,601,601,601,,601,601,601,,,',
',601,,601,601,,601,601,601,601,601,601,601,601,601,601,601,86,,86,,86',
'86,627,,627,627,627,627,627,601,,,,,,601,,601,,,,627,,,,,627,627,,,',
',86,,,,,,,,,86,86,86,,86,,,627,86,86,627,,,86,,86,86,86,86,86,86,86',
',86,,86,,86,86,86,86,86,86,86,,,,86,86,86,86,86,86,86,86,86,86,86,86',
'86,86,,86,86,86,,,,,86,,86,86,,86,,86,86,86,86,86,86,86,86,86,,,,,,',
'86,,,,,506,,506,506,,506,,,86,,86,506,506,,,,506,506,506,506,506,506',
'506,506,506,506,,,,,,,,,,,,781,,781,781,781,781,781,462,,462,462,462',
'462,462,,,,,504,781,504,504,,504,781,781,462,,,504,504,462,462,,504',
'504,504,504,504,504,504,504,504,504,,,781,,,781,506,506,,462,506,,462',
',,,,,,,506,506,455,,455,455,455,455,455,,506,,,,,,,,,,,455,,,,,455,455',
',,506,506,506,506,506,506,506,506,506,506,506,504,504,,,504,,,455,,',
'455,,,,504,504,502,,502,502,,502,,,504,,,502,502,,,,502,502,502,502',
'502,502,502,502,502,502,,,504,504,504,504,504,504,504,504,504,504,504',
',800,,800,800,800,800,800,,,,,,,,,501,,501,501,800,501,,,,800,800,501',
'501,,,,501,501,501,501,501,501,501,501,501,501,,,,,,800,502,502,800',
',502,,,,,,,,,,502,502,798,,798,798,798,798,798,,502,,,,,,,,,,,798,,',
',,,798,,,502,502,502,502,502,502,502,502,502,502,502,501,501,,,501,',
',798,,,,,,,501,501,,,,,,604,,604,501,604,604,,,,,,,,,,,,,,,,,,501,501',
'501,501,501,501,501,501,501,501,501,,,604,,,,,,,,,604,604,604,,604,',
',,604,604,,,,604,,604,604,604,604,604,604,604,,,,,,604,604,604,604,604',
'604,604,,,,604,604,604,604,604,604,604,604,604,604,604,604,604,604,',
'604,604,604,,,,,604,,604,604,,604,604,604,604,604,604,604,604,604,604',
'604,487,,487,,487,487,902,,902,902,902,902,902,604,,,,,,604,,604,,,',
'902,,,,,,902,,,,,487,,,,,,,,,487,487,487,,487,,,902,487,487,,,,487,',
'487,487,487,487,487,487,487,,,,,,487,487,487,487,487,487,487,,,,487',
'487,487,487,487,487,487,487,487,487,487,487,487,487,,487,487,487,,,',
',487,,487,487,,487,487,487,487,487,487,487,487,487,487,487,,,,,,,258',
',258,258,,258,,487,,,,258,258,487,,487,258,258,258,258,258,258,258,258',
'258,258,,,,,,,,,,,,802,,802,802,802,802,802,943,,943,943,943,943,943',
',,,,898,802,898,898,,898,,802,943,,,898,898,,943,,898,898,898,898,898',
'898,898,898,898,898,,,802,,,,258,258,,943,258,,,,,,,,,,258,258,906,',
'906,906,906,906,906,,258,,,,,,,,,,,906,,,,,,906,,,258,258,258,258,258',
'258,258,258,258,258,258,898,898,,,898,,,906,,,,,,,898,898,,,,,,5,,5',
'898,5,5,,,,,,,,,,,,,,,,,,898,898,898,898,898,898,898,898,898,898,898',
',,5,,,,,,,,,5,5,5,,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,',
',,5,5,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,,,,5,,5,5,,5,5,5,5,5,5,5,5,5,5',
'5,,,,,,,924,,924,924,,924,,5,,,,924,924,5,,5,924,924,924,924,924,924',
'924,924,924,924,789,,789,789,789,789,789,458,,458,458,458,458,458,,',
',,,789,,,,,,789,458,,,,,,458,,,,,,,,,,,,,,789,,,,,,,458,,,,,,,,924,924',
',,924,,,,,,,,,,924,924,,,,,,,,640,924,640,,640,640,,,,,,,,,,,,,,,,924',
'924,924,924,924,924,924,924,924,924,924,,640,640,,640,,,,,,,,,640,640',
'640,,640,,,,640,640,,,,640,,640,640,640,640,640,640,640,,,,,,640,640',
'640,640,640,640,640,,,,640,640,640,640,640,640,640,640,640,640,640,640',
'640,640,,640,640,640,,,,,640,,640,640,,640,,640,640,640,640,640,640',
'640,640,640,,,,,,,256,,256,256,,256,,,,,,256,256,640,,640,256,256,256',
'256,256,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,256,256,,,256,,,,,,,,,,256,256,,,,,,479,,479,256',
'479,479,,,,,,,,,,,,,,,,,,256,256,256,256,256,256,256,256,256,256,256',
',,479,,,,,,,,,479,479,479,,479,,,,479,479,,,,479,,479,479,479,479,479',
'479,479,,,,,,479,479,479,479,479,479,479,,,,479,479,479,479,479,479',
'479,479,479,479,479,479,479,479,,479,479,479,,,,,479,,479,479,,479,479',
'479,479,479,479,479,479,479,479,479,388,388,,388,,388,388,,,,,,,479',
',,,,,479,,479,,,,,,,,,,,,,,,,388,,,,,,,,,388,388,388,388,388,,,,388',
'388,,,,388,,388,388,388,388,388,388,388,,,,,,388,388,388,388,388,388',
'388,388,,388,388,388,388,388,388,388,388,388,388,388,388,,388,388,,388',
'388,388,,,,,388,,388,388,,388,388,388,,388,388,388,388,388,388,388,',
',,,80,,80,80,,80,,,,,,80,80,,,388,80,80,80,80,80,80,80,80,80,80,,,,',
',,,,,,80,80,80,,,,,,,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80',
'80,80,80,80,80,80,80,80,,,,80,80,80,80,80,80,80,80,,,80,80,80,80,,80',
'80,,,80,,,,,,,,,,80,80,,82,82,,82,553,82,82,80,,,80,,553,553,,,,553',
'553,553,553,553,553,553,553,553,553,80,80,80,80,80,80,80,80,80,80,82',
',,,,,,,,82,82,82,82,82,,,,82,82,,,,82,,82,82,82,82,82,82,82,,,,,,82',
'82,82,82,82,82,82,82,,82,82,82,82,82,82,82,82,82,82,82,82,,82,82,,82',
'82,82,,,,,82,,82,82,,82,82,82,,82,82,82,82,82,82,82,497,497,,497,,497',
'497,,,,,553,553,553,553,553,553,553,553,82,,,,,,,,,,,,,,,,,,497,,,,',
',,,,497,497,497,497,497,,,,497,497,,,,497,,497,497,497,497,497,497,497',
',,,,,497,497,497,497,497,497,497,497,,497,497,497,497,497,497,497,497',
'497,497,497,497,,497,497,,497,497,497,,,,,497,,497,497,,497,497,497',
',497,497,497,497,497,497,497,,,,,515,,515,515,,515,,,,,,515,515,,,497',
'515,515,515,515,515,515,515,515,515,515,,,,,,,,,,,515,515,515,,,,,,',
'515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515',
'515,515,515,515,515,515,515,,,,515,515,515,515,515,515,515,515,,,515',
'515,515,515,,515,515,,,515,,,,,,,,,,515,515,,453,453,,453,556,453,453',
'515,,,515,,556,556,,,,556,556,556,556,556,556,556,556,556,556,515,515',
'515,515,515,515,515,515,515,515,453,,,,,,,,,453,453,453,453,453,,,,453',
'453,,,,453,,453,453,453,453,453,453,453,,,,,,453,453,453,453,453,453',
'453,453,,453,453,453,453,453,453,453,453,453,453,453,453,,453,453,,453',
'453,453,,,,,453,,453,453,,453,453,453,,453,453,453,453,453,453,453,527',
'527,,527,,527,527,,,,,556,556,556,556,556,556,556,556,453,,,,,,,,,,',
',,,,,,,527,,,,,,,,,527,527,527,527,527,,,,527,527,,,,527,,527,527,527',
'527,527,527,527,,,,,,527,527,527,527,527,527,527,527,,527,527,527,527',
'527,527,527,527,527,527,527,527,,527,527,,527,527,527,,,,,527,,527,527',
',527,527,527,,527,527,527,527,527,527,527,451,451,,451,,451,451,,,,',
',,558,,,,,,527,,558,558,,,,558,558,558,558,558,558,558,558,558,558,',
'451,,,,,,,,,451,451,451,451,451,,,,451,451,,,,451,,451,451,451,451,451',
'451,451,,,,,,451,451,451,451,451,451,451,451,,451,451,451,451,451,451',
'451,451,451,451,451,451,,451,451,,451,451,451,,,,,451,,451,451,,451',
'451,451,,451,451,451,451,451,451,451,444,444,,444,,444,444,,,,,,,,,',
',,,451,558,558,558,558,558,558,558,558,,,,,,,,,,444,,,,,,,,,444,444',
'444,444,444,,,,444,444,,,,444,,444,444,444,444,444,444,444,,,,,,444',
'444,444,444,444,444,444,444,,444,444,444,444,444,444,444,444,444,444',
'444,444,,444,444,,444,444,444,,,,,444,,444,444,,444,444,444,,444,444',
'444,444,444,444,444,95,95,,95,,95,95,,,,,,,560,,,,,,444,,560,560,,,',
'560,560,560,560,560,560,560,560,560,560,,95,,,,,,,,,95,95,95,95,95,',
',,95,95,,,,95,,95,95,95,95,95,95,95,,,,,,95,95,95,95,95,95,95,95,,95',
'95,95,95,95,95,95,95,95,95,95,95,,95,95,,95,95,95,,,,,95,,95,95,,95',
'95,95,,95,95,95,95,95,95,95,441,441,,441,,441,441,,,,,,,,,,,,,95,560',
'560,560,560,560,560,560,560,,,,,,,,,,441,,,,,,,,,441,441,441,441,441',
',,,441,441,,,,441,,441,441,441,441,441,441,441,,,,,,441,441,441,441',
'441,441,441,441,,441,441,441,441,441,441,441,441,441,441,441,441,,441',
'441,,441,441,441,,,,,441,,441,441,,441,441,441,,441,441,441,441,441',
'441,441,539,539,,539,,539,539,,,,,,,563,,,,,,441,,563,563,,,,563,563',
'563,563,563,563,563,563,563,563,,539,,,,,,,,,539,539,539,539,539,,,',
'539,539,,,,539,,539,539,539,539,539,539,539,,,,,,539,539,539,539,539',
'539,539,539,,539,539,539,539,539,539,539,539,539,539,539,539,,539,539',
',539,539,539,,,,,539,,539,539,,539,539,539,,539,539,539,539,539,539',
'539,542,542,,542,,542,542,,,,,,,,,,,,,539,563,563,563,563,563,563,563',
'563,,,,,,,,,,542,,,,,,,,,542,542,542,542,542,,,,542,542,,,,542,,542',
'542,542,542,542,542,542,,,,,,542,542,542,542,542,542,542,542,,542,542',
'542,542,542,542,542,542,542,542,542,542,,542,542,,542,542,542,,,,,542',
',542,542,,542,542,542,,542,542,542,542,542,542,542,580,580,,580,,580',
'580,,,,,,,565,,,,,,542,,565,565,,,,565,565,565,565,565,565,565,565,565',
'565,565,580,,,,,,,,,580,580,580,580,580,,,,580,580,,,,580,,580,580,580',
'580,580,580,580,,,,,,580,580,580,580,580,580,580,580,,580,580,580,580',
'580,580,580,580,580,580,580,580,,580,580,,580,580,580,,,,,580,,580,580',
',580,580,580,,580,580,580,580,580,580,580,581,581,,581,,581,581,,,,',
',,,,,,,,580,565,565,565,565,565,565,565,565,,,,,,,,,,581,,,,,,,,,581',
'581,581,581,581,,,,581,581,,,,581,,581,581,581,581,581,581,581,,,,,',
'581,581,581,581,581,581,581,581,,581,581,581,581,581,581,581,581,581',
'581,581,581,,581,581,,581,581,581,,,,,581,,581,581,,581,581,581,,581',
'581,581,581,581,581,581,,,,,36,,36,36,,36,,,,,,36,36,,,581,36,36,36',
'36,36,36,36,36,36,36,,,,,,,,,,,36,36,36,,,,,,,36,36,36,36,36,36,36,36',
'36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,,,,36,36,36,36,36,36',
'36,36,,,36,36,36,36,,36,36,36,,36,,,,,,,,,,36,36,,,582,,582,582,,582',
'36,,,36,,582,582,,,,582,582,582,582,582,582,582,582,582,582,36,36,36',
'36,36,36,36,36,36,36,582,582,582,,,,,,,582,582,582,582,582,582,582,582',
'582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,,,,582',
'582,582,582,582,582,582,582,,,582,582,582,582,,582,582,,,582,,,,,,,',
',,582,582,,474,474,,474,,474,474,582,,,582,,,,,,,,,,,,,,,,,582,582,582',
'582,582,582,582,582,582,582,474,,,,,,,,,474,474,474,474,474,,,,474,474',
',,,474,,474,474,474,474,474,474,474,,,,,,474,474,474,474,474,474,474',
'474,,474,474,474,474,474,474,474,474,474,474,474,474,,474,474,,474,474',
'474,,,,,474,,474,474,,474,474,474,,474,474,474,474,474,474,474,758,758',
',758,,758,758,,,,,,,,,,,,,474,,,,,,,,,,,,,,,,,,758,,,,,,,,,758,758,758',
'758,758,,,,758,758,,,,758,,758,758,758,758,758,758,758,,,,,,758,758',
'758,758,758,758,758,758,,758,758,758,758,758,758,758,758,758,758,758',
'758,,758,758,,758,758,758,,,,,758,,758,758,,758,758,758,,758,758,758',
'758,758,758,758,,,,,379,,379,379,,379,,,,,,379,379,,,758,379,379,379',
'379,379,379,379,379,379,379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,378,,378,378',
',378,,,,,,378,378,,,,378,378,378,378,378,378,378,378,378,378,,,,,,,',
'379,379,,,379,,,,,,,,,,379,379,,,,,,,,,379,,,,,,,,,,,,,,,,,,,,379,379',
'379,379,379,379,379,379,379,379,378,378,,,378,,,,,,,,,,378,378,,916',
'916,,916,,916,916,378,,,,,,,,,,,,,,,,,,,,378,378,378,378,378,378,378',
'378,378,378,916,,,,,,,,,916,916,916,916,916,,,,916,916,,,,916,,916,916',
'916,916,916,916,916,,,,,,916,916,916,916,916,916,916,916,,916,916,916',
'916,916,916,916,916,916,916,916,916,,916,916,,916,916,916,,,,,916,,916',
'916,,916,916,916,,916,916,916,916,916,916,916,748,748,,748,,748,748',
',,,,,,,,,,,,916,,,,,,,,,,,,,,,,,,748,,,,,,,,,748,748,748,748,748,,,',
'748,748,,,,748,,748,748,748,748,748,748,748,,,,,,748,748,748,748,748',
'748,748,748,,748,748,748,748,748,748,748,748,748,748,748,748,,748,748',
',748,748,748,,,,,748,,748,748,,748,748,748,,748,748,748,748,748,748',
'748,365,365,,365,,365,365,,,,,,,,,,,,,748,,,,,,,,,,,,,,,,,,365,,,,,',
',,,365,365,365,365,365,,,,365,365,,,,365,,365,365,365,365,365,365,365',
',,,,,365,365,365,365,365,365,365,365,,365,365,365,365,365,365,365,365',
'365,365,365,365,,365,365,,365,365,365,,,,,365,,365,365,,365,365,365',
',365,365,365,365,365,365,365,834,834,,834,,834,834,,,,,,,,,,,,,365,',
',,,,,,,,,,,,,,,,834,,,,,,,,,834,834,834,834,834,,,,834,834,,,,834,,834',
'834,834,834,834,834,834,,,,,,834,834,834,834,834,834,834,834,,834,834',
'834,834,834,834,834,834,834,834,834,834,,834,834,,834,834,834,,,,,834',
',834,834,,834,834,834,,834,834,834,834,834,834,834,839,839,,839,,839',
'839,,,,,,,,,,,,,834,,,,,,,,,,,,,,,,,,839,,,,,,,,,839,839,839,839,839',
',,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,,839,839,839,839',
'839,839,839,839,,839,839,839,839,839,839,839,839,839,839,839,839,,839',
'839,,839,839,839,,,,,839,,839,839,,839,839,839,,839,839,839,839,839',
'839,839,,,,,18,,18,18,,18,,,,,,18,18,,,839,18,18,18,18,18,18,18,18,18',
'18,,,,,,,,,,,18,18,18,,,,,,,18,18,18,18,18,18,18,18,18,18,18,18,18,18',
'18,18,18,18,18,18,18,18,18,18,,,,18,18,18,18,18,18,18,18,,,18,18,18',
'18,,18,18,18,18,18,18,,,,,,,,,18,18,,303,303,,303,,303,303,18,,,,,,',
',,,,,,,,,,,,,18,18,18,18,18,18,18,18,18,18,303,,,,,,,,,303,303,303,303',
'303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303',
'303,303,303,303,303,,303,303,303,303,303,303,303,303,303,303,303,303',
',303,303,,303,303,303,,,,,303,,303,303,,303,303,303,,303,303,303,303',
'303,303,303,851,851,,851,,851,851,,,,,,,,,,,,,303,,,,,,,,,,,,,,,,,,851',
',,,,,,,,851,851,851,851,851,,,,851,851,,,,851,,851,851,851,851,851,851',
'851,,,,,,851,851,851,851,851,851,851,851,,851,851,851,851,851,851,851',
'851,851,851,851,851,,851,851,,851,851,851,,,,,851,,851,851,,851,851',
'851,,851,851,851,851,851,851,851,855,855,,855,,855,855,,,,,,,,,,,,,851',
',,,,,,,,,,,,,,,,,855,,,,,,,,,855,855,855,855,855,,,,855,855,,,,855,',
'855,855,855,855,855,855,855,,,,,,855,855,855,855,855,855,855,855,,855',
'855,855,855,855,855,855,855,855,855,855,855,,855,855,,855,855,855,,',
',,855,,855,855,,855,855,855,,855,855,855,855,855,855,855,283,283,,283',
',283,283,,,,,,,,,,,,,855,,,,,,,,,,,,,,,,,,283,,,,,,,,,283,283,283,283',
'283,,,,283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283',
'283,283,283,283,283,,283,283,283,283,283,283,283,283,283,283,283,283',
',283,283,,283,283,283,,,,,283,,283,283,,283,283,283,,283,283,283,283',
'283,283,283,597,597,,597,,597,597,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,,,597',
',,,,,,,,597,597,597,597,597,,,,597,597,,,,597,,597,597,597,597,597,597',
'597,,,,,,597,597,597,597,597,597,597,597,,597,597,597,597,597,597,597',
'597,597,597,597,597,,597,597,,597,597,597,,,,,597,,597,597,,597,597',
'597,,597,597,597,597,597,597,597,,,,,624,,624,624,,624,,,,,,624,624',
',,597,624,624,624,624,624,624,624,624,624,624,,,,,,,,,,,624,624,624',
',,,,,,624,624,624,624,624,624,624,624,624,624,624,624,624,624,624,624',
'624,624,624,624,624,624,624,624,,,,624,624,624,624,624,624,624,624,',
',624,624,624,624,,624,624,,,624,,,,,,,,,,624,624,,629,629,,629,,629',
'629,624,,,,,,,,,,,,,,,,,,,,624,624,624,624,624,624,624,624,624,624,629',
',,,,,,,,629,629,629,629,629,,,,629,629,,,,629,,629,629,629,629,629,629',
'629,,,,,,629,629,629,629,629,629,629,629,,629,629,629,629,629,629,629',
'629,629,629,629,629,,629,629,,629,629,629,,,,,629,,629,629,,629,629',
'629,,629,629,629,629,629,629,629,684,684,,684,,684,684,,,,,,,,,,,,,629',
',,,,,,,,,,,,,,,,,684,,,,,,,,,684,684,684,684,684,,,,684,684,,,,684,',
'684,684,684,684,684,684,684,,,,,,684,684,684,684,684,684,684,684,,684',
'684,684,684,684,684,684,684,684,684,684,684,,684,684,,684,684,684,,',
',,684,,684,684,,684,684,684,,684,684,684,684,684,684,684,133,133,,133',
',133,133,,,,,,,,,,,,,684,,,,,,,,,,,,,,,,,,133,,,,,,,,,133,133,133,133',
'133,,,,133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133',
'133,133,133,133,133,,133,133,133,133,133,133,133,133,133,133,133,133',
',133,133,,133,133,133,,,,,133,,133,133,,133,133,133,,133,133,133,133',
'133,133,133,890,890,,890,,890,890,,,,,,,,,,,,,133,,,,,,,,,,,,,,,,,,890',
',,,,,,,,890,890,890,890,890,,,,890,890,,,,890,,890,890,890,890,890,890',
'890,,,,,,890,890,890,890,890,890,890,890,,890,890,890,890,890,890,890',
'890,890,890,890,890,,890,890,,890,890,890,,,,,890,,890,890,,890,890',
'890,,890,890,890,890,890,890,890,3,3,,3,,3,3,,,,,,,,,,,,,890,,,,,,,',
',,,,,,,,,,3,,,,,,,,,3,3,3,3,3,,,,3,3,,,,3,,3,3,3,3,3,3,3,,,,,,3,3,3',
'3,3,3,3,3,,3,3,3,3,3,3,3,3,3,3,3,3,,3,3,,3,3,3,,,,,3,,3,3,,3,3,3,,3',
'3,3,3,3,3,3,826,,826,,826,826,,,,,,,,,,,,,,3,,,,,,,,,,,,,,,,,826,,,',
',,,,,826,826,826,,826,,,,826,826,,,,826,,826,826,826,826,826,826,826',
',,,,,826,826,826,826,826,826,826,,,,826,826,826,826,826,826,826,826',
'826,826,826,,826,826,,826,826,826,,,,,826,,826,826,,826,826,,,826,826',
'826,826,826,826,826,139,,139,,139,139,,,,,,,,,,,,,,826,,,,,,,,,,,,,',
',,,139,,,,,,,,,139,139,139,,139,,,,139,139,,,,139,,139,139,139,139,139',
'139,139,,,,,,139,139,139,139,139,139,139,,,,139,139,139,139,139,139',
'139,139,139,139,139,,139,139,,139,139,139,,,,,139,,139,139,,139,139',
',,139,139,139,139,139,139,139,143,,143,,143,143,,,,,,,,,,,,,,139,,,',
',,,,,,,,,,,,,143,,,,,,,,,143,143,143,,143,,,,143,143,,,,143,,143,143',
'143,143,143,143,143,,,,,,143,143,143,143,143,143,143,,,,143,143,143',
'143,143,143,143,143,143,143,143,,143,143,,143,143,143,,,,,143,,143,143',
',143,143,,,143,143,143,143,143,143,143,119,,119,,119,119,,,,,,,,,,,',
',,143,,,,,,,,,,,,,,,,,119,,,,,,,,,119,119,119,,119,,,,119,119,,,,119',
',119,119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,,119',
'119,119,119,119,119,119,119,119,119,119,,119,119,,119,119,119,,,,,119',
',119,119,,119,119,,,119,119,119,119,119,119,119,694,,694,,694,694,,',
',,,,,,,,,,,119,,,,,,,,,,,,,,,,,694,,,,,,,,,694,694,694,,694,,,,694,694',
',,,694,,694,694,694,694,694,694,694,,,,,,694,694,694,694,694,694,694',
',,,694,694,694,694,694,694,694,694,694,694,694,,694,694,,694,694,694',
',,,,694,,694,694,,694,694,,,694,694,694,694,694,694,694,147,,147,,147',
'147,,,,,,,,,,,,,,694,,,,,,,,,,,,,,,,,147,,,,,,,,,147,147,147,,147,,',
',147,147,,,,147,,147,147,147,147,147,147,147,,,,,,147,147,147,147,147',
'147,147,,,,147,147,147,147,147,147,147,147,147,147,147,,147,147,,147',
'147,147,,,,,147,,147,147,,147,147,,,147,147,147,147,147,147,147,701',
',701,,701,701,,,,,,,,,,,,,,147,,,,,,,,,,,,,,,,,701,,,,,,,,,701,701,701',
',701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701,701',
'701,701,701,701,,,,701,701,701,701,701,701,701,701,701,701,701,,701',
'701,,701,701,701,,,,,701,,701,701,,701,701,,,701,701,701,701,701,701',
'701,702,,702,,702,702,,,,,,,,,,,,,,701,,,,,,,,,,,,,,,,,702,,,,,,,,,702',
'702,702,,702,,,,702,702,,,,702,,702,702,702,702,702,702,702,,,,,,702',
'702,702,702,702,702,702,,,,702,702,702,702,702,702,702,702,702,702,702',
',702,702,,702,702,702,,,,,702,,702,702,,702,702,,,702,702,702,702,702',
'702,702,664,,664,,664,664,,,,,,,,,,,,,,702,,,,,,,,,,,,,,,,,664,,,,,',
',,,664,664,664,,664,,,,664,664,,,,664,,664,664,664,664,664,664,664,',
',,,,664,664,664,664,664,664,664,,,,664,664,664,664,664,664,664,664,664',
'664,664,,664,664,,664,664,664,,,,,664,,664,664,,664,664,,,664,664,664',
'664,664,664,664,648,,648,,648,648,,,,,,,,,,,,,,664,,,,,,,,,,,,,,,,,648',
',,,,,,,,648,648,648,,648,,,,648,648,,,,648,,648,648,648,648,648,648',
'648,,,,,,648,648,648,648,648,648,648,,,,648,648,648,648,648,648,648',
'648,648,648,648,,648,648,,648,648,648,,,,,648,,648,648,,648,648,648',
',648,648,648,648,648,648,648,638,,638,,638,638,,,,,,,,,,,,,,648,,,,',
',,,,,,,,,,,,638,,,,,,,,,638,638,638,,638,,,,638,638,,,,638,,638,638',
'638,638,638,638,638,,,,,,638,638,638,638,638,638,638,,,,638,638,638',
'638,638,638,638,638,638,638,638,,638,638,,638,638,638,,,,,638,,638,638',
',638,638,,,638,638,638,638,638,638,638,614,,614,,614,614,,,,,,,,,,,',
',,638,,,,,,,,,,,,,,,,,614,,,,,,,,,614,614,614,,614,,,,614,614,,,,614',
',614,614,614,614,614,614,614,,,,,,614,614,614,614,614,614,614,,,,614',
'614,614,614,614,614,614,614,614,614,614,614,614,614,,614,614,614,,,',
',614,,614,614,,614,614,,,614,614,614,614,614,614,614,611,,611,,611,611',
',,,,,,,,,,,,,614,,,,,,,,,,,,,,,,,611,,,,,,,,,611,611,611,,611,,,,611',
'611,,,,611,,611,611,611,611,611,611,611,,,,,,611,611,611,611,611,611',
'611,,,,611,611,611,611,611,611,611,611,611,611,611,611,611,611,,611',
'611,611,,,,,611,,611,611,,611,611,611,,611,611,611,611,611,611,611,608',
',608,,608,608,,,,,,,,,,,,,,611,,,,,,,,,,,,,,,,,608,,,,,,,,,608,608,608',
',608,,,,608,608,,,,608,,608,608,608,608,608,608,608,,,,,,608,608,608',
'608,608,608,608,,,,608,608,608,608,608,608,608,608,608,608,608,,608',
'608,,608,608,608,,,,,608,,608,608,,608,608,608,,608,608,608,608,608',
'608,608,599,,599,,599,599,,,,,,,,,,,,,,608,,,,,,,,,,,,,,,,,599,,,,,',
',,,599,599,599,,599,,,,599,599,,,,599,,599,599,599,599,599,599,599,',
',,,,599,599,599,599,599,599,599,,,,599,599,599,599,599,599,599,599,599',
'599,599,,599,599,,599,599,599,,,,,599,,599,599,,599,599,,,599,599,599',
'599,599,599,599,15,,15,,15,15,,,,,,,,,,,,,,599,,,,,,,,,,,,,,,,,15,,',
',,,,,,15,15,15,15,15,,,,15,15,,,,15,,15,15,15,15,15,15,15,,,,,,15,15',
'15,15,15,15,15,15,,15,15,15,15,15,15,15,15,15,15,15,15,,15,15,,15,15',
'15,,,,,15,,15,15,,15,15,15,,15,15,15,15,15,15,15,591,,591,,591,591,',
',,,,,,,,,,,,15,,,,,,,,,,,,,,,,,591,,,,,,,,,591,591,591,,591,,,,591,591',
',,,591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591,591,591',
',,,591,591,591,591,591,591,591,591,591,591,591,591,591,591,,591,591',
'591,,,,,591,,591,591,,591,591,591,591,591,591,591,591,591,591,591,21',
',21,,21,21,,,,,,,,591,,,,,,591,,,,,,,,,,,,,,,,,21,,,,,,,,,21,21,21,',
'21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,,21,21,21,21,21,21,21,,',
',21,21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,,,,,21,,21,21,,21',
'21,,,21,21,21,21,21,21,21,26,,26,,26,26,,,,,,,,,,,,,,21,,,,,,,,,,,,',
',,,,26,,,,,,,,,26,26,26,,26,,,,26,26,,,,26,,26,26,26,26,26,26,26,,,',
',,26,26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26,26,,26,26,,26',
'26,26,,,,,26,,26,26,,26,26,,,26,26,26,26,26,26,26,257,,257,,257,257',
',,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,257,,,,,,,,,257,257,257,,257,,,,257',
'257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257',
'257,,,,257,257,257,257,257,257,257,257,257,257,257,257,257,257,,257',
'257,257,,,,,257,,257,257,,257,257,257,257,257,257,257,257,257,257,257',
'129,,129,,129,129,,,,,,,,257,,,,,,257,,,,,,,,,,,,,,,,,129,,,,,,,,,129',
'129,129,,129,,,,129,129,,,,129,,129,129,129,129,129,129,129,,,,,,129',
'129,129,129,129,129,129,,,,129,129,129,129,129,129,129,129,129,129,129',
'129,129,129,,129,129,129,,,,,129,,129,129,,129,129,129,129,129,129,129',
'129,129,129,129,30,,30,,30,30,,,,,,,,129,,,,,,129,,,,,,,,,,,,,,,,,30',
',,,,,,,,30,30,30,,30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30',
'30,30,30,30,30,,,,30,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30',
',,,,30,,30,30,,30,30,,,30,30,30,30,30,30,30,579,,579,,579,579,,,,,,',
',,,,,,,30,,,,,,,,,,,,,,,,,579,,,,,,,,,579,579,579,,579,,,,579,579,,',
',579,,579,579,579,579,579,579,579,,,,,,579,579,579,579,579,579,579,',
',,579,579,579,579,579,579,579,579,579,579,579,,579,579,,579,579,579',
',,,,579,,579,579,,579,579,,,579,579,579,579,579,579,579,576,,576,,576',
'576,,,,,,,,,,,,,,579,,,,,,,,,,,,,,,,,576,,,,,,,,,576,576,576,,576,,',
',576,576,,,,576,,576,576,576,576,576,576,576,,,,,,576,576,576,576,576',
'576,576,,,,576,576,576,576,576,576,576,576,576,576,576,576,576,576,',
'576,576,576,,,,,576,,576,576,,576,576,576,576,576,576,576,576,576,576',
'576,45,,45,,45,45,,,,,,,,576,,,,,,576,,,,,,,,,,,,,,,,,45,,,,,,,,,45',
'45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45',
'45,,,,45,45,45,45,45,45,45,45,45,45,45,,45,45,,45,45,45,,,,,45,,45,45',
',45,45,,,45,45,45,45,45,45,45,359,,359,,359,359,,,,,,,,,,,,,,45,,,,',
',,,,,,,,,,,,359,,,,,,,,,359,359,359,359,359,,,,359,359,,,,359,,359,359',
'359,359,359,359,359,,,,,,359,359,359,359,359,359,359,359,,359,359,359',
'359,359,359,359,359,359,359,359,359,,359,359,,359,359,359,,,,,359,,359',
'359,,359,359,359,,359,359,359,359,359,359,359,548,,548,,548,548,,,,',
',,,,,,,,,359,,,,,,,,,,,,,,,,,548,,,,,,,,,548,548,548,,548,,,,548,548',
',,,548,,548,548,548,548,548,548,548,,,,,,548,548,548,548,548,548,548',
',,,548,548,548,548,548,548,548,548,548,548,548,,548,548,,548,548,548',
',,,,548,,548,548,,548,548,,,548,548,548,548,548,548,548,546,,546,,546',
'546,,,,,,,,,,,,,,548,,,,,,,,,,,,,,,,,546,,,,,,,,,546,546,546,,546,,',
',546,546,,,,546,,546,546,546,546,546,546,546,,,,,,546,546,546,546,546',
'546,546,,,,546,546,546,546,546,546,546,546,546,546,546,,546,546,,546',
'546,546,,,,,546,,546,546,,546,546,,,546,546,546,546,546,546,546,761',
',761,,761,761,,,,,,,,,,,,,,546,,,,,,,,,,,,,,,,,761,,,,,,,,,761,761,761',
',761,,,,761,761,,,,761,,761,761,761,761,761,761,761,,,,,,761,761,761',
'761,761,761,761,,,,761,761,761,761,761,761,761,761,761,761,761,,761',
'761,,761,761,761,,,,,761,,761,761,,761,761,,,761,761,761,761,761,761',
'761,543,,543,,543,543,,,,,,,,,,,,,,761,,,,,,,,,,,,,,,,,543,,,,,,,,,543',
'543,543,,543,,,,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543',
'543,543,543,543,543,543,,,,543,543,543,543,543,543,543,543,543,543,543',
',543,543,,543,543,543,,,,,543,,543,543,,543,543,543,,543,543,543,543',
'543,543,543,50,,50,,50,50,,,,,,,,,,,,,,543,,,,,,,,,,,,,,,,,50,,,,,,',
',,50,50,50,,50,,,,50,50,,,,50,,50,50,50,50,50,50,50,,,,,,50,50,50,50',
'50,50,50,,,,50,50,50,50,50,50,50,50,50,50,50,,50,50,,50,50,50,,,,,50',
',50,50,,50,50,,,50,50,50,50,50,50,50,526,,526,,526,526,,,,,,,,,,,,,',
'50,,,,,,,,,,,,,,,,,526,,,,,,,,,526,526,526,,526,,,,526,526,,,,526,,526',
'526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,,526,526',
'526,526,526,526,526,526,526,526,526,,526,526,,526,526,526,,,,,526,,526',
'526,,526,526,,,526,526,526,526,526,526,526,525,,525,,525,525,,,,,,,',
',,,,,,526,,,,,,,,,,,,,,,,,525,,,,,,,,,525,525,525,,525,,,,525,525,,',
',525,,525,525,525,525,525,525,525,,,,,,525,525,525,525,525,525,525,',
',,525,525,525,525,525,525,525,525,525,525,525,,525,525,,525,525,525',
',,,,525,,525,525,,525,525,,,525,525,525,525,525,525,525,773,,773,,773',
'773,,,,,,,,,,,,,,525,,,,,,,,,,,,,,,,,773,,,,,,,,,773,773,773,,773,,',
',773,773,,,,773,,773,773,773,773,773,773,773,,,,,,773,773,773,773,773',
'773,773,,,,773,773,773,773,773,773,773,773,773,773,773,,773,773,,773',
'773,773,,,,,773,,773,773,,773,773,,,773,773,773,773,773,773,773,775',
',775,,775,775,,,,,,,,,,,,,,773,,,,,,,,,,,,,,,,,775,,,,,,,,,775,775,775',
',775,,,,775,775,,,,775,,775,775,775,775,775,775,775,,,,,,775,775,775',
'775,775,775,775,,,,775,775,775,775,775,775,775,775,775,775,775,,775',
'775,,775,775,775,,,,,775,,775,775,,775,775,,,775,775,775,775,775,775',
'775,505,,505,,505,505,,,,,,,,,,,,,,775,,,,,,,,,,,,,,,,,505,,,,,,,,,505',
'505,505,,505,,,,505,505,,,,505,,505,505,505,505,505,505,505,,,,,,505',
'505,505,505,505,505,505,,,,505,505,505,505,505,505,505,505,505,505,505',
'505,505,505,,505,505,505,,,,,505,,505,505,,505,505,505,505,505,505,505',
'505,505,505,505,53,,53,,53,53,,,,,,,,505,,,,,,505,,,,,,,,,,,,,,,,,53',
',,,,,,,,53,53,53,,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,,53,53',
'53,53,53,53,53,,,,53,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53',
',,,,53,,53,53,,53,53,,,53,53,53,53,53,53,53,56,,56,,56,56,,,,,,,,,,',
',,,53,,,,,,,,,,,,,,,,,56,,,,,,,,,56,56,56,,56,,,,56,56,,,,56,,56,56',
'56,56,56,56,56,,,,,,56,56,56,56,56,56,56,,,,56,56,56,56,56,56,56,56',
'56,56,56,56,56,56,,56,56,56,,,,,56,,56,56,,56,56,56,56,56,56,56,56,56',
'56,56,57,,57,,57,57,,,,,,,,56,,,,,,56,,,,,,,,,,,,,,,,,57,,,,,,,,,57',
'57,57,,57,,,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57',
'57,,,,57,57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57,,,,,57,,57,57',
',57,57,,,57,57,57,57,57,57,57,776,,776,,776,776,,,,,,,,,,,,,,57,,,,',
',,,,,,,,,,,,776,,,,,,,,,776,776,776,,776,,,,776,776,,,,776,,776,776',
'776,776,776,776,776,,,,,,776,776,776,776,776,776,776,,,,776,776,776',
'776,776,776,776,776,776,776,776,,776,776,,776,776,776,,,,,776,,776,776',
',776,776,,,776,776,776,776,776,776,776,63,,63,,63,63,,,,,,,,,,,,,,776',
',,,,,,,,,,,,,,,,63,,,,,,,,,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63',
'63,63,63,,,,,,63,63,63,63,63,63,63,,,,63,63,63,63,63,63,63,63,63,63',
'63,,63,63,,63,63,63,,,,,63,,63,63,,63,63,,,63,63,63,63,63,63,63,778',
',778,,778,778,,,,,,,,,,,,,,63,,,,,,,,,,,,,,,,,778,,,,,,,,,778,778,778',
',778,,,,778,778,,,,778,,778,778,778,778,778,778,778,,,,,,778,778,778',
'778,778,778,778,,,,778,778,778,778,778,778,778,778,778,778,778,,778',
'778,,778,778,778,,,,,778,,778,778,,778,778,,,778,778,778,778,778,778',
'778,65,,65,,65,65,,,,,,,,,,,,,,778,,,,,,,,,,,,,,,,,65,,,,,,,,,65,65',
'65,,65,,,,65,65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65',
',,,65,65,65,65,65,65,65,65,65,65,65,65,65,65,,65,65,65,,,,,65,,65,65',
',65,65,65,65,65,65,65,65,65,65,65,292,,292,,292,292,,,,,,,,65,,,,,,65',
',,,,,,,,,,,,,,,,292,,,,,,,,,292,292,292,,292,,,,292,292,,,,292,,292',
'292,292,292,292,292,292,,,,,,292,292,292,292,292,292,292,,,,292,292',
'292,292,292,292,292,292,292,292,292,,292,292,,292,292,292,,,,,292,,292',
'292,,292,292,,,292,292,292,292,292,292,292,923,,923,,923,923,,,,,,,',
',,,,,,292,,,,,,,,,,,,,,,,,923,,,,,,,,,923,923,923,,923,,,,923,923,,',
',923,,923,923,923,923,923,923,923,,,,,,923,923,923,923,923,923,923,',
',,923,923,923,923,923,923,923,923,923,923,923,923,923,923,,923,923,923',
',,,,923,,923,923,,923,923,923,923,923,923,923,923,923,923,923,859,,859',
',859,859,,,,,,,,923,,,,,,923,,,,,,,,,,,,,,,,,859,,,,,,,,,859,859,859',
',859,,,,859,859,,,,859,,859,859,859,859,859,859,859,,,,,,859,859,859',
'859,859,859,859,,,,859,859,859,859,859,859,859,859,859,859,859,,859',
'859,,859,859,859,,,,,859,,859,859,,859,859,,,859,859,859,859,859,859',
'859,87,,87,,87,87,,,,,,,,,,,,,,859,,,,,,,,,,,,,,,,,87,,,,,,,,,87,87',
'87,,87,,,,87,87,,,,87,,87,87,87,87,87,87,87,,,,,,87,87,87,87,87,87,87',
',,,87,87,87,87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,87,,87,87,',
'87,87,,,87,87,87,87,87,87,87,449,,449,,449,449,,,,,,,,,,,,,,87,,,,,',
',,,,,,,,,,,449,,,,,,,,,449,449,449,,449,,,,449,449,,,,449,,449,449,449',
'449,449,449,449,,,,,,449,449,449,449,449,449,449,,,,449,449,449,449',
'449,449,449,449,449,449,449,,449,449,,449,449,449,,,,,449,,449,449,',
'449,449,,,449,449,449,449,449,449,449,96,,96,,96,96,,,,,,,,,,,,,,449',
',,,,,,,,,,,,,,,,96,,,,,,,,,96,96,96,,96,,,,96,96,,,,96,,96,96,96,96',
'96,96,96,,,,,,96,96,96,96,96,96,96,,,,96,96,96,96,96,96,96,96,96,96',
'96,96,96,96,,96,96,96,,,,,96,,96,96,,96,96,96,,96,96,96,96,96,96,96',
'434,,434,,434,434,,,,,,,,,,,,,,96,,,,,,,,,,,,,,,,,434,,,,,,,,,434,434',
'434,,434,,,,434,434,,,,434,,434,434,434,434,434,434,434,,,,,,434,434',
'434,434,434,434,434,,,,434,434,434,434,434,434,434,434,434,434,434,',
'434,434,,434,434,434,,,,,434,,434,434,,434,434,,,434,434,434,434,434',
'434,434,428,,428,,428,428,,,,,,,,,,,,,,434,,,,,,,,,,,,,,,,,428,,,,,',
',,,428,428,428,,428,,,,428,428,,,,428,,428,428,428,428,428,428,428,',
',,,,428,428,428,428,428,428,428,,,,428,428,428,428,428,428,428,428,428',
'428,428,,428,428,,428,428,428,,,,,428,,428,428,,428,428,,,428,428,428',
'428,428,428,428,423,,423,,423,423,,,,,,,,,,,,,,428,,,,,,,,,,,,,,,,,423',
',,,,,,,,423,423,423,,423,,,,423,423,,,,423,,423,423,423,423,423,423',
'423,,,,,,423,423,423,423,423,423,423,,,,423,423,423,423,423,423,423',
'423,423,423,423,,423,423,,423,423,423,,,,,423,,423,423,,423,423,,,423',
'423,423,423,423,423,423,422,,422,,422,422,,,,,,,,,,,,,,423,,,,,,,,,',
',,,,,,,422,,,,,,,,,422,422,422,,422,,,,422,422,,,,422,,422,422,422,422',
'422,422,422,,,,,,422,422,422,422,422,422,422,,,,422,422,422,422,422',
'422,422,422,422,422,422,,422,422,,422,422,422,,,,,422,,422,422,,422',
'422,,,422,422,422,422,422,422,422,304,,304,,304,304,,,,,,,,,,,,,,422',
',,,,,,,,,,,,,,,,304,,,,,,,,,304,304,304,,304,,,,304,304,,,,304,,304',
'304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,,304,304',
'304,304,304,304,304,304,304,304,304,,304,304,,304,304,304,,,,,304,,304',
'304,,304,304,,,304,304,304,304,304,304,304,305,,305,,305,305,,,,,,,',
',,,,,,304,,,,,,,,,,,,,,,,,305,,,,,,,,,305,305,305,305,305,,,,305,305',
',,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305',
'305,,305,305,305,305,305,305,305,305,305,305,305,305,,305,305,,305,305',
'305,,,,,305,,305,305,,305,305,305,,305,305,305,305,305,305,305,306,',
'306,,306,306,,,,,,,,,,,,,,305,,,,,,,,,,,,,,,,,306,,,,,,,,,306,306,306',
',306,,,,306,306,,,,306,,306,306,306,306,306,306,306,,,,,,306,306,306',
'306,306,306,306,,,,306,306,306,306,306,306,306,306,306,306,306,,306',
'306,,306,306,306,,,,,306,,306,306,,306,306,,,306,306,306,306,306,306',
'306,307,,307,,307,307,,,,,,,,,,,,,,306,,,,,,,,,,,,,,,,,307,,,,,,,,,307',
'307,307,,307,,,,307,307,,,,307,,307,307,307,307,307,307,307,,,,,,307',
'307,307,307,307,307,307,,,,307,307,307,307,307,307,307,307,307,307,307',
',307,307,,307,307,307,,,,,307,,307,307,,307,307,,,307,307,307,307,307',
'307,307,308,,308,,308,308,,,,,,,,,,,,,,307,,,,,,,,,,,,,,,,,308,,,,,',
',,,308,308,308,,308,,,,308,308,,,,308,,308,308,308,308,308,308,308,',
',,,,308,308,308,308,308,308,308,,,,308,308,308,308,308,308,308,308,308',
'308,308,,308,308,,308,308,308,,,,,308,,308,308,,308,308,,,308,308,308',
'308,308,308,308,420,,420,,420,420,,,,,,,,,,,,,,308,,,,,,,,,,,,,,,,,420',
',,,,,,,,420,420,420,,420,,,,420,420,,,,420,,420,420,420,420,420,420',
'420,,,,,,420,420,420,420,420,420,420,,,,420,420,420,420,420,420,420',
'420,420,420,420,420,420,420,,420,420,420,,,,,420,,420,420,,420,420,',
'420,420,420,420,420,420,420,420,100,,100,,100,100,,,,,,,,420,,,,,,420',
',,,,,,,,,,,,,,,,100,,,,,,,,,100,100,100,,100,,,,100,100,,,,100,,100',
'100,100,100,100,100,100,,,,,,100,100,100,100,100,100,100,,,,100,100',
'100,100,100,100,100,100,100,100,100,100,100,100,,100,100,100,,,,,100',
',100,100,,100,100,100,100,100,100,100,100,100,100,100,312,,312,,312',
'312,,,,,,,,100,,,,,,100,,,,,,,,,,,,,,,,,312,,,,,,,,,312,312,312,,312',
',,,312,312,,,,312,,312,312,312,312,312,312,312,,,,,,312,312,312,312',
'312,312,312,,,,312,312,312,312,312,312,312,312,312,312,312,,312,312',
',312,312,312,,,,,312,,312,312,,312,312,,,312,312,312,312,312,312,312',
'313,,313,,313,313,,,,,,,,,,,,,,312,,,,,,,,,,,,,,,,,313,,,,,,,,,313,313',
'313,,313,,,,313,313,,,,313,,313,313,313,313,313,313,313,,,,,,313,313',
'313,313,313,313,313,,,,313,313,313,313,313,313,313,313,313,313,313,',
'313,313,,313,313,313,,,,,313,,313,313,,313,313,,,313,313,313,313,313',
'313,313,417,,417,,417,417,,,,,,,,,,,,,,313,,,,,,,,,,,,,,,,,417,,,,,',
',,,417,417,417,,417,,,,417,417,,,,417,,417,417,417,417,417,417,417,',
',,,,417,417,417,417,417,417,417,,,,417,417,417,417,417,417,417,417,417',
'417,417,417,417,417,,417,417,417,,,,,417,,417,417,,417,417,417,417,417',
'417,417,417,417,417,417,413,,413,,413,413,,,,,,,,417,,,,,,417,,,,,,',
',,,,,,,,,,413,,,,,,,,,413,413,413,,413,,,,413,413,,,,413,,413,413,413',
'413,413,413,413,,,,,,413,413,413,413,413,413,413,,,,413,413,413,413',
'413,413,413,413,413,413,413,413,413,413,,413,413,413,,,,,413,,413,413',
',413,413,413,413,413,413,413,413,413,413,413,412,,412,,412,412,,,,,',
',,413,,,,,,413,,,,,,,,,,,,,,,,,412,,,,,,,,,412,412,412,,412,,,,412,412',
',,,412,,412,412,412,412,412,412,412,,,,,,412,412,412,412,412,412,412',
',,,412,412,412,412,412,412,412,412,412,412,412,,412,412,,412,412,412',
',,,,412,,412,412,,412,412,,,412,412,412,412,412,412,412,103,,103,,103',
'103,,,,,,,,,,,,,,412,,,,,,,,,,,,,,,,,103,,,,,,,,,103,103,103,,103,,',
',103,103,,,,103,,103,103,103,103,103,103,103,,,,,,103,103,103,103,103',
'103,103,,,,103,103,103,103,103,103,103,103,103,103,103,103,103,103,',
'103,103,103,,,,,103,,103,103,,103,103,,,103,103,103,103,103,103,103',
'118,,118,,118,118,,,,,,,,,,,,,,103,,,,,,,,,,,,,,,,,118,,,,,,,,,118,118',
'118,,118,,,,118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118',
'118,118,118,118,118,,,,118,118,118,118,118,118,118,118,118,118,118,',
'118,118,,118,118,118,,,,,118,,118,118,,118,118,,,118,118,118,118,118',
'118,118,400,,400,,400,400,,,,,,,,,,,,,,118,,,,,,,,,,,,,,,,,400,,,,,',
',,,400,400,400,,400,,,,400,400,,,,400,,400,400,400,400,400,400,400,',
',,,,400,400,400,400,400,400,400,,,,400,400,400,400,400,400,400,400,400',
'400,400,,400,400,,400,400,400,,,,,400,,400,400,,400,400,,,400,400,400',
'400,400,400,400,321,,321,,321,321,,,,,,,,,,,,,,400,,,,,,,,,,,,,,,,,321',
',,,,,,,,321,321,321,,321,,,,321,321,,,,321,,321,321,321,321,321,321',
'321,,,,,,321,321,321,321,321,321,321,,,,321,321,321,321,321,321,321',
'321,321,321,321,,321,321,,321,321,321,,,,,321,,321,321,,321,321,,,321',
'321,321,321,321,321,321,322,,322,,322,322,,,,,,,,,,,,,,321,,,,,,,,,',
',,,,,,,322,,,,,,,,,322,322,322,,322,,,,322,322,,,,322,,322,322,322,322',
'322,322,322,,,,,,322,322,322,322,322,322,322,,,,322,322,322,322,322',
'322,322,322,322,322,322,,322,322,,322,322,322,,,,,322,,322,322,,322',
'322,,,322,322,322,322,322,322,322,323,,323,,323,323,,,,,,,,,,,,,,322',
',,,,,,,,,,,,,,,,323,,,,,,,,,323,323,323,,323,,,,323,323,,,,323,,323',
'323,323,323,323,323,323,,,,,,323,323,323,323,323,323,323,,,,323,323',
'323,323,323,323,323,323,323,323,323,,323,323,,323,323,323,,,,,323,,323',
'323,,323,323,,,323,323,323,323,323,323,323,324,,324,,324,324,,,,,,,',
',,,,,,323,,,,,,,,,,,,,,,,,324,,,,,,,,,324,324,324,,324,,,,324,324,,',
',324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324,324,',
',,324,324,324,324,324,324,324,324,324,324,324,,324,324,,324,324,324',
',,,,324,,324,324,,324,324,,,324,324,324,324,324,324,324,325,,325,,325',
'325,,,,,,,,,,,,,,324,,,,,,,,,,,,,,,,,325,,,,,,,,,325,325,325,,325,,',
',325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325,325',
'325,325,,,,325,325,325,325,325,325,325,325,325,325,325,,325,325,,325',
'325,325,,,,,325,,325,325,,325,325,,,325,325,325,325,325,325,325,326',
',326,,326,326,,,,,,,,,,,,,,325,,,,,,,,,,,,,,,,,326,,,,,,,,,326,326,326',
',326,,,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326,326,326',
'326,326,326,326,,,,326,326,326,326,326,326,326,326,326,326,326,,326',
'326,,326,326,326,,,,,326,,326,326,,326,326,,,326,326,326,326,326,326',
'326,327,,327,,327,327,,,,,,,,,,,,,,326,,,,,,,,,,,,,,,,,327,,,,,,,,,327',
'327,327,,327,,,,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327',
'327,327,327,327,327,327,,,,327,327,327,327,327,327,327,327,327,327,327',
',327,327,,327,327,327,,,,,327,,327,327,,327,327,,,327,327,327,327,327',
'327,327,328,,328,,328,328,,,,,,,,,,,,,,327,,,,,,,,,,,,,,,,,328,,,,,',
',,,328,328,328,,328,,,,328,328,,,,328,,328,328,328,328,328,328,328,',
',,,,328,328,328,328,328,328,328,,,,328,328,328,328,328,328,328,328,328',
'328,328,,328,328,,328,328,328,,,,,328,,328,328,,328,328,,,328,328,328',
'328,328,328,328,329,,329,,329,329,,,,,,,,,,,,,,328,,,,,,,,,,,,,,,,,329',
',,,,,,,,329,329,329,,329,,,,329,329,,,,329,,329,329,329,329,329,329',
'329,,,,,,329,329,329,329,329,329,329,,,,329,329,329,329,329,329,329',
'329,329,329,329,,329,329,,329,329,329,,,,,329,,329,329,,329,329,,,329',
'329,329,329,329,329,329,330,,330,,330,330,,,,,,,,,,,,,,329,,,,,,,,,',
',,,,,,,330,,,,,,,,,330,330,330,,330,,,,330,330,,,,330,,330,330,330,330',
'330,330,330,,,,,,330,330,330,330,330,330,330,,,,330,330,330,330,330',
'330,330,330,330,330,330,,330,330,,330,330,330,,,,,330,,330,330,,330',
'330,,,330,330,330,330,330,330,330,331,,331,,331,331,,,,,,,,,,,,,,330',
',,,,,,,,,,,,,,,,331,,,,,,,,,331,331,331,,331,,,,331,331,,,,331,,331',
'331,331,331,331,331,331,,,,,,331,331,331,331,331,331,331,,,,331,331',
'331,331,331,331,331,331,331,331,331,,331,331,,331,331,331,,,,,331,,331',
'331,,331,331,,,331,331,331,331,331,331,331,332,,332,,332,332,,,,,,,',
',,,,,,331,,,,,,,,,,,,,,,,,332,,,,,,,,,332,332,332,,332,,,,332,332,,',
',332,,332,332,332,332,332,332,332,,,,,,332,332,332,332,332,332,332,',
',,332,332,332,332,332,332,332,332,332,332,332,,332,332,,332,332,332',
',,,,332,,332,332,,332,332,,,332,332,332,332,332,332,332,333,,333,,333',
'333,,,,,,,,,,,,,,332,,,,,,,,,,,,,,,,,333,,,,,,,,,333,333,333,,333,,',
',333,333,,,,333,,333,333,333,333,333,333,333,,,,,,333,333,333,333,333',
'333,333,,,,333,333,333,333,333,333,333,333,333,333,333,,333,333,,333',
'333,333,,,,,333,,333,333,,333,333,,,333,333,333,333,333,333,333,334',
',334,,334,334,,,,,,,,,,,,,,333,,,,,,,,,,,,,,,,,334,,,,,,,,,334,334,334',
',334,,,,334,334,,,,334,,334,334,334,334,334,334,334,,,,,,334,334,334',
'334,334,334,334,,,,334,334,334,334,334,334,334,334,334,334,334,,334',
'334,,334,334,334,,,,,334,,334,334,,334,334,,,334,334,334,334,334,334',
'334,335,,335,,335,335,,,,,,,,,,,,,,334,,,,,,,,,,,,,,,,,335,,,,,,,,,335',
'335,335,,335,,,,335,335,,,,335,,335,335,335,335,335,335,335,,,,,,335',
'335,335,335,335,335,335,,,,335,335,335,335,335,335,335,335,335,335,335',
',335,335,,335,335,335,,,,,335,,335,335,,335,335,,,335,335,335,335,335',
'335,335,336,,336,,336,336,,,,,,,,,,,,,,335,,,,,,,,,,,,,,,,,336,,,,,',
',,,336,336,336,,336,,,,336,336,,,,336,,336,336,336,336,336,336,336,',
',,,,336,336,336,336,336,336,336,,,,336,336,336,336,336,336,336,336,336',
'336,336,,336,336,,336,336,336,,,,,336,,336,336,,336,336,,,336,336,336',
'336,336,336,336,337,,337,,337,337,,,,,,,,,,,,,,336,,,,,,,,,,,,,,,,,337',
',,,,,,,,337,337,337,,337,,,,337,337,,,,337,,337,337,337,337,337,337',
'337,,,,,,337,337,337,337,337,337,337,,,,337,337,337,337,337,337,337',
'337,337,337,337,,337,337,,337,337,337,,,,,337,,337,337,,337,337,,,337',
'337,337,337,337,337,337,338,,338,,338,338,,,,,,,,,,,,,,337,,,,,,,,,',
',,,,,,,338,,,,,,,,,338,338,338,,338,,,,338,338,,,,338,,338,338,338,338',
'338,338,338,,,,,,338,338,338,338,338,338,338,,,,338,338,338,338,338',
'338,338,338,338,338,338,,338,338,,338,338,338,,,,,338,,338,338,,338',
'338,,,338,338,338,338,338,338,338,339,,339,,339,339,,,,,,,,,,,,,,338',
',,,,,,,,,,,,,,,,339,,,,,,,,,339,339,339,,339,,,,339,339,,,,339,,339',
'339,339,339,339,339,339,,,,,,339,339,339,339,339,339,339,,,,339,339',
'339,339,339,339,339,339,339,339,339,,339,339,,339,339,339,,,,,339,,339',
'339,,339,339,,,339,339,339,339,339,339,339,340,,340,,340,340,,,,,,,',
',,,,,,339,,,,,,,,,,,,,,,,,340,,,,,,,,,340,340,340,,340,,,,340,340,,',
',340,,340,340,340,340,340,340,340,,,,,,340,340,340,340,340,340,340,',
',,340,340,340,340,340,340,340,340,340,340,340,,340,340,,340,340,340',
',,,,340,,340,340,,340,340,,,340,340,340,340,340,340,340,341,,341,,341',
'341,,,,,,,,,,,,,,340,,,,,,,,,,,,,,,,,341,,,,,,,,,341,341,341,,341,,',
',341,341,,,,341,,341,341,341,341,341,341,341,,,,,,341,341,341,341,341',
'341,341,,,,341,341,341,341,341,341,341,341,341,341,341,,341,341,,341',
'341,341,,,,,341,,341,341,,341,341,,,341,341,341,341,341,341,341,342',
',342,,342,342,,,,,,,,,,,,,,341,,,,,,,,,,,,,,,,,342,,,,,,,,,342,342,342',
',342,,,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342',
'342,342,342,342,,,,342,342,342,342,342,342,342,342,342,342,342,,342',
'342,,342,342,342,,,,,342,,342,342,,342,342,,,342,342,342,342,342,342',
'342,343,,343,,343,343,,,,,,,,,,,,,,342,,,,,,,,,,,,,,,,,343,,,,,,,,,343',
'343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343,343,,,,,,343',
'343,343,343,343,343,343,,,,343,343,343,343,343,343,343,343,343,343,343',
',343,343,,343,343,343,,,,,343,,343,343,,343,343,,,343,343,343,343,343',
'343,343,344,,344,,344,344,,,,,,,,,,,,,,343,,,,,,,,,,,,,,,,,344,,,,,',
',,,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344,344,344,',
',,,,344,344,344,344,344,344,344,,,,344,344,344,344,344,344,344,344,344',
'344,344,,344,344,,344,344,344,,,,,344,,344,344,,344,344,,,344,344,344',
'344,344,344,344,345,,345,,345,345,,,,,,,,,,,,,,344,,,,,,,,,,,,,,,,,345',
',,,,,,,,345,345,345,,345,,,,345,345,,,,345,,345,345,345,345,345,345',
'345,,,,,,345,345,345,345,345,345,345,,,,345,345,345,345,345,345,345',
'345,345,345,345,,345,345,,345,345,345,,,,,345,,345,345,,345,345,,,345',
'345,345,345,345,345,345,346,,346,,346,346,,,,,,,,,,,,,,345,,,,,,,,,',
',,,,,,,346,,,,,,,,,346,346,346,,346,,,,346,346,,,,346,,346,346,346,346',
'346,346,346,,,,,,346,346,346,346,346,346,346,,,,346,346,346,346,346',
'346,346,346,346,346,346,,346,346,,346,346,346,,,,,346,,346,346,,346',
'346,,,346,346,346,346,346,346,346,819,,819,,819,819,,,,,,,,,,,,,,346',
',,,,,,,,,,,,,,,,819,,,,,,,,,819,819,819,,819,,,,819,819,,,,819,,819',
'819,819,819,819,819,819,,,,,,819,819,819,819,819,819,819,,,,819,819',
'819,819,819,819,819,819,819,819,819,,819,819,,819,819,819,,,,,819,,819',
'819,,819,819,,,819,819,819,819,819,819,819,387,,387,,387,387,,,,,,,',
',,,,,,819,,,,,,,,,,,,,,,,,387,,,,,,,,,387,387,387,,387,,,,387,387,,',
',387,,387,387,387,387,387,387,387,,,,,,387,387,387,387,387,387,387,',
',,387,387,387,387,387,387,387,387,387,387,387,,387,387,,387,387,387',
',,,,387,,387,387,,387,387,387,,387,387,387,387,387,387,387,140,,140',
',140,140,,,,,,,,,,,,,,387,,,,,,,,,,,,,,,,,140,,,,,,,,,140,140,140,,140',
',,,140,140,,,,140,,140,140,140,140,140,140,140,,,,,,140,140,140,140',
'140,140,140,,,,140,140,140,140,140,140,140,140,140,140,140,,140,140',
',140,140,140,,,,,140,,140,140,,140,140,140,,140,140,140,140,140,140',
'140,112,,112,,112,112,,,,,,,,,,,,,,140,,,,,,,,,,,,,,,,,112,,,,,,,,,112',
'112,112,,112,,,,112,112,,,,112,,112,112,112,112,112,112,112,,,,,,112',
'112,112,112,112,112,112,,,,112,112,112,112,112,112,112,112,112,112,112',
',112,112,,112,112,112,,,,,112,,112,112,,112,112,,,112,112,112,112,112',
'112,112,375,,375,,375,375,,,,,,,,,,,,,,112,,,,,,,,,,,,,,,,,375,,,,,',
',,,375,375,375,,375,,,,375,375,,,,375,,375,375,375,375,375,375,375,',
',,,,375,375,375,375,375,375,375,,,,375,375,375,375,375,375,375,375,375',
'375,375,,375,375,,375,375,375,,,,,375,,375,375,,375,375,,,375,375,375',
'375,375,375,375,114,,114,,114,114,,,,,,,,,,,,,,375,,,,,,,,,,,,,,,,,114',
',,,,,,,,114,114,114,,114,,,,114,114,,,,114,,114,114,114,114,114,114',
'114,,,,,,114,114,114,114,114,114,114,,,,114,114,114,114,114,114,114',
'114,114,114,114,,114,114,,114,114,114,,,,,114,,114,114,,114,114,,,114',
'114,114,114,114,114,114,833,,833,,833,833,,,,,,,,,,,,,,114,,,,,,,,,',
',,,,,,,833,,,,,,,,,833,833,833,,833,,,,833,833,,,,833,,833,833,833,833',
'833,833,833,,,,,,833,833,833,833,833,833,833,,,,833,833,833,833,833',
'833,833,833,833,833,833,,833,833,,833,833,833,,,,,833,,833,833,,833',
'833,833,,833,833,833,833,833,833,833,837,,837,,837,837,,,,,,,,,,,,,',
'833,,,,,,,,,,,,,,,,,837,,,,,,,,,837,837,837,,837,,,,837,837,,,,837,',
'837,837,837,837,837,837,837,,,,,,837,837,837,837,837,837,837,,,,837',
'837,837,837,837,837,837,837,837,837,837,,837,837,,837,837,837,,,,,837',
',837,837,,837,837,,,837,837,837,837,837,837,837,693,,693,,693,693,,',
',,,,,,,,,,,837,,,,,,,,,,,,,,,,,693,,,,,,,,,693,693,693,,693,,,,693,693',
',,,693,,693,693,693,693,693,693,693,,,,,,693,693,693,693,693,693,693',
',,,693,693,693,693,693,693,693,693,693,693,693,,693,693,,693,693,693',
',,,,693,,693,693,,693,693,,,693,693,693,693,693,693,693,,,,,,,,547,',
',,,,,,547,547,,,693,547,547,547,547,547,547,547,547,547,547,547,547',
'547,547,547,880,,,,,,,,880,880,,,,880,880,880,880,880,880,880,880,880',
'880,880,880,880,880,880,554,,,,,,,,554,554,,,,554,554,554,554,554,554',
'554,554,554,554,554,554,554,554,554,557,,,,,,,,557,557,,,,557,557,557',
'557,557,557,557,557,557,557,557,557,557,557,557,,,,,,,,,,,,,,,,,547',
'547,547,547,547,547,547,547,,,,,,,,,,,,,,,,,,,,,880,880,880,880,880',
'880,880,880,,,,,,,,,,,,,,,,,,,,,554,554,554,554,554,554,554,554,,,,',
',,,,,,,,,,,,,,,,557,557,557,557,557,557,557,557,559,,,,,,,,559,559,',
',,559,559,559,559,559,559,559,559,559,559,559,559,559,559,559,519,,',
',,,,,519,519,,,,519,519,519,519,519,519,519,519,519,519,519,519,519',
'519,519,823,,,,,,,,823,823,,,,823,823,823,823,823,823,823,823,823,823',
'823,823,823,823,823,821,,,,,,,,821,821,,,,821,821,821,821,821,821,821',
'821,821,821,821,821,821,821,821,,,,,,,,,,,,,,,,,559,559,559,559,559',
'559,559,559,,,,,,,,,,,,,,,,,,,,,519,519,519,519,519,519,519,519,,,,',
',,,,,,,,,,,,,,,,823,823,823,823,823,823,823,823,,,,,,,,,,,,,,,,,,,,',
'821,821,821,821,821,821,821,821,562,,,,,,,,562,562,,,,562,562,562,562',
'562,562,562,562,562,562,562,562,562,562,562,564,,,,,,,,564,564,,,,564',
'564,564,564,564,564,564,564,564,564,564,564,564,564,564,817,,,,,,,,817',
'817,,,,817,817,817,817,817,817,817,817,817,817,817,817,817,817,817,728',
',,,,,,,728,728,,,,728,728,728,728,728,728,728,728,728,728,728,728,728',
'728,728,,,,,,,,,,,,,,,,,562,562,562,562,562,562,562,562,,,,,,,,,,,,',
',,,,,,,,564,564,564,564,564,564,564,564,,,,,,,,,,,,,,,,,,,,,817,817',
'817,817,817,817,817,817,,,,,,,,,,,,,,,,,,,,,728,728,728,728,728,728',
'728,728,569,,,,,,,,569,569,,,,569,569,569,569,569,569,569,569,569,569',
'569,569,569,569,569,311,,,,,,,,311,311,,,,311,311,311,311,311,311,311',
'311,311,311,311,311,311,311,311,572,,,,,,,,572,572,,,,572,572,572,572',
'572,572,572,572,572,572,572,572,572,572,647,,,,,,,,647,647,,,,647,647',
'647,647,647,647,647,647,647,647,647,647,647,647,647,,647,,,,,,,,,,,',
',,,,569,569,569,569,569,569,569,569,,,,,,,,,,,,,,,,,,,,,311,311,311',
'311,311,311,311,311,,,,,,,,,,,,,,,,,,,,,572,572,572,572,572,572,572',
'572,,,,,,,,,,,,,,,,,,,,647,647,647,647,647,647,647,647,75,,,,,,,,75',
'75,,,,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,131,,,,,,,,131,131',
',,,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,794,',
',,,,,,794,794,,,,794,794,794,794,794,794,794,794,794,794,794,794,794',
'794,794,815,,,,,,,,815,815,,,,815,815,815,815,815,815,815,815,815,815',
'815,815,815,815,815,,,,,,,,,,,,,,,,,75,75,75,75,75,75,75,75,,,,,,,,',
',,,,,,,,,,,,131,131,131,131,131,131,131,131,,,,,,,,,,,,,,,,,,,,,794',
'794,794,794,794,794,794,794,,,,,,,,,,,,,,,,,,,,,815,815,815,815,815',
'815,815,815,854,,,,,,,,854,854,,,,854,854,854,854,854,854,854,854,854',
'854,854,854,854,854,854,445,,,,,,,,445,445,,,,445,445,445,445,445,445',
'445,445,445,445,445,445,445,445,445,887,445,,,,,,,887,887,,,,887,887',
'887,887,887,887,887,887,887,887,887,887,887,887,887,618,,,,,,,,618,618',
',,,618,618,618,618,618,618,618,618,618,618,618,618,618,618,618,,618',
',,,,,,,,,,,,,,854,854,854,854,854,854,854,854,,,,,,,,,,,,,,,,,,,,,445',
'445,445,445,445,445,445,445,,,,,,,,,,,,,,,,,,,,,887,887,887,887,887',
'887,887,887,,,,,,,,,,,,,,,,,,,,618,618,618,618,618,618,618,618,618,570',
'110,,,,,,,570,570,,,,570,570,570,570,570,570,570,570,570,570,570,570',
'570,570,,,,,,,110,,,,,,,,,110,110,110,,110,,,,110,110,,,,110,,110,110',
'110,110,110,110,110,,,,,,110,110,110,110,110,110,110,,,,110,110,110',
'110,110,110,110,110,110,110,110,,110,110,,110,110,110,,,,,110,,110,110',
'285,110,110,,,110,110,110,110,110,110,110,,,,,,,,,,,110,570,570,570',
'570,570,570,570,570,,285,,,,,,,,,285,285,285,,285,,,,285,285,,,,285',
',285,285,285,285,285,285,285,,,,,,285,285,285,285,285,285,285,,,,285',
'285,285,285,285,285,285,285,285,285,285,89,285,285,,285,285,285,89,',
',,285,,285,285,,285,285,,,285,285,285,285,285,285,285,,,,,,89,,,,,285',
',,,89,89,89,,89,,,,89,89,,,,89,,89,89,89,89,89,89,89,,,,,,89,89,89,89',
'89,89,89,632,,,89,89,89,89,89,89,89,89,89,89,89,,89,89,,89,89,89,,,',
',89,,89,89,,89,89,632,,89,89,89,89,89,89,89,632,632,632,,632,,,,632',
'632,,,,632,,632,632,632,632,632,632,632,,,,,,632,632,632,632,632,632',
'632,35,,,632,632,632,632,632,632,632,632,632,632,632,,632,632,,632,632',
'632,,,,,632,,632,632,,632,632,35,,632,632,632,632,632,632,632,35,35',
'35,,35,,,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35',
',779,,35,35,35,35,35,35,35,35,35,35,35,,35,35,,35,35,35,,,,,35,,35,35',
',35,35,35,779,35,35,35,35,35,35,35,,779,779,779,,779,,,,779,779,,,,779',
',779,779,779,779,779,779,779,,,,,,779,779,779,779,779,779,779,78,,,779',
'779,779,779,779,779,779,779,779,779,779,,779,779,,779,779,779,,,,,779',
',779,779,,779,779,78,,779,779,779,779,779,779,779,78,78,78,,78,,,,78',
'78,,,,78,,78,78,78,78,78,78,78,,,,,,78,78,78,78,78,78,78,,409,,78,78',
'78,78,78,78,78,78,78,78,78,,78,78,,78,78,78,,,,,78,,78,78,,78,78,78',
'409,78,78,78,78,78,78,78,,409,409,409,,409,,,,409,409,,,,409,,409,409',
'409,409,409,409,409,,,,,,409,409,409,409,409,409,409,102,,,409,409,409',
'409,409,409,409,409,409,409,409,,409,409,,409,409,409,,,,,409,,409,409',
',409,409,102,,409,409,409,409,409,409,409,102,102,102,,102,,,,102,102',
',,,102,,102,102,102,102,102,102,102,,,,,,102,102,102,102,102,102,102',
'713,,,102,102,102,102,102,102,102,102,102,102,102,,102,102,,102,102',
'102,,,,,102,,102,102,,102,102,713,,102,102,102,102,102,102,102,713,713',
'713,,713,,,,713,713,,,,713,,713,713,713,713,713,713,713,,,,,,713,713',
'713,713,713,713,713,770,,,713,713,713,713,713,713,713,713,713,713,713',
',713,713,,713,713,713,,,,,713,,713,713,,713,713,770,,713,713,713,713',
'713,713,713,770,770,770,,770,,,,770,770,,,,770,,770,770,770,770,770',
'770,770,,,,,,770,770,770,770,770,770,770,514,,,770,770,770,770,770,770',
'770,770,770,770,770,,770,770,,770,770,770,,,,,770,,770,770,,770,770',
'514,,770,770,770,770,770,770,770,514,514,514,,514,,,,514,514,,,,514',
',514,514,514,514,514,514,514,,,,,,514,514,514,514,514,514,514,848,,',
'514,514,514,514,514,514,514,514,514,514,514,,514,514,,514,514,514,,',
',,514,,514,514,,514,514,848,,514,514,514,514,514,514,514,848,848,848',
',848,,,,848,848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848,848',
'848,848,848,848,,,,848,848,848,848,848,848,848,848,848,848,848,,848',
'848,,848,848,848,,,,,848,,848,848,,848,848,,,848,848,848,848,848,848',
'848' ]
        racc_action_check = arr = Array.new(23301, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    61,   nil,  8431,  1283,  3524,   nil,  1247,  -130,   nil,
   nil,    -2,  1245,  2037,  2183, 10351,   nil,   nil,  7129,   909,
   nil, 10591,    87,   nil,   nil,   nil, 10711,   nil,   nil,   nil,
 11071,   nil,   nil,   nil,   nil, 22577,  5907,   nil,    67,   nil,
  1133,   nil,   nil,  1139,   394, 11431,  1122,  1151,   nil,   nil,
 12151,  1109,  1271, 12871,   nil,   nil, 12991, 13111,   nil,   748,
   nil,   nil,   nil, 13351,    29, 13591,   nil,   nil,   nil,   nil,
   970,   nil,   nil,  1087,  1141, 21794,   nil,   nil, 22728,   478,
  4239,   nil,  4344,   nil,     0,   nil,  2663, 14071,   292, 22427,
   nil,   706,   nil,   nil,   nil,  5178, 14311,  2423,   nil,   nil,
 15631,  1198, 22879, 16351,   nil,   nil,  1628,   979,  1502,   nil,
 22234,   nil, 20191,  1086, 20431,  1186,  1083,   995, 16471,  8911,
  1072,   nil,   nil,   747,   nil,  1093,   nil,   637,   nil, 10951,
  1104, 21822,   nil,  8189,   nil,   nil,   nil,  1157,   nil,  8671,
 20071,   730,   nil,  8791,    10,    21,   nil,  9151,   nil,  1878,
  1099,    17,   -66,  1096,  1031,   nil,   nil,   nil,   nil,   nil,
   nil,  1027,   nil,   nil,   nil,   nil,   405,  1019,   nil,  1345,
   nil,   nil,   nil,   nil,   nil,  1104,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   888,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  3886, 10831,  3361,  1377,
   nil,   nil,   nil,   nil,  1090,   nil,   453,   331,   181,   -29,
  1001,   -65,  1031,  1199,   984,  1130,   892,   772,   104,   991,
   506,   932,   979,  7597,   nil, 22338,   nil,   nil,   nil,   257,
   nil,   nil, 13711,   618,   941,   nil,  1046,  1038,   194,   918,
   678,   nil,   585,  7234, 14911, 15031, 15151, 15271, 15391,   -63,
   nil, 21603, 15751, 15871,   -59,   nil,   980,   885,   128,  1736,
   170, 16711, 16831, 16951, 17071, 17191, 17311, 17431, 17551, 17671,
 17791, 17911, 18031, 18151, 18271, 18391, 18511, 18631, 18751, 18871,
 18991, 19111, 19231, 19351, 19471, 19591, 19711,   nil,   848,   172,
   -60,   931,   951,   nil,   nil,   -25,   -26,   nil,   877, 11551,
   964,   848,   nil,   438,   849,  6763,   435,   nil,   -23,  1017,
   nil,   nil,   nil,    73,    50, 20311,   885,   238,  6416,  6362,
   938,   936,   842,   -74,   353,   nil,   nil, 19951,  4115,   104,
   nil,   877,   854,   668,   430,   340,   428,   -39,   735,   223,
 16591,   570,  1973,   622,   nil,   630,   850,   nil,   848, 22804,
   nil,   nil, 16231, 16111,   nil,   nil,  1862, 15991,  2315,   nil,
 15511,   nil, 14791, 14671,   812,   nil,   nil,   693, 14551,   nil,
   820,   nil,   816,   nil, 14431,   nil,     9,   789,   nil,  1355,
   nil,  5299,   nil,   nil,  5057, 22042,   nil,   786,   nil, 14191,
   842,  4936,   nil,  4694,   nil,  2810,   nil,   nil,  3596,   nil,
   nil,   834,  2751,   nil,   788,   812,  1132,   815,   nil,  1282,
   nil,   745,     9,   nil,  6117,  1278,   nil,   nil,   nil,  3994,
     1,   150,   nil,   nil,   484,   434,   743,  3235,    65,   nil,
   nil,   nil,   116,   nil,   nil,   nil,   nil,  4465,   nil,   832,
   nil,  3007,  2952,   nil,  2849, 12751,  2794,   nil,   nil,   nil,
   736,   791,   728,   743, 23104,  4589,   nil,   nil,   nil, 21163,
   nil,   583,   nil,   nil,   nil, 12391, 12271,  4815,   nil,   nil,
   727,   738,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  5420,
   nil,   nil,  5541, 12031,   801,   792, 11791, 20915, 11671,  2419,
   725,   574,    79,  4344, 20971,   251,  4694, 20999,  4945, 21135,
  5187,   272, 21355,  5429, 21383,  5671,   867,   240,   968, 21575,
 22234,  1107, 21631,    91,  1249,  2075, 11311,  2020,   206, 11191,
  5662,  5783,  6012,   359,   711,   nil,   684,   nil,  1210,   nil,
  1917, 10471,  1394,   nil,   nil,   922,    86,  7718,   nil, 10231,
    40,  2543,   nil,   nil,  3115,   nil,   nil,   nil, 10111,   769,
   nil,  9991,   nil,   nil,  9871,   nil,   nil,   nil, 22098,   nil,
   749,   nil,   nil,   nil,  7842,   nil,    37,  2582,   213,  7947,
   nil,   643, 22502,   nil,   657,   652,   nil,   660,  9751,   626,
  3760,   578,   550,   517,   nil,   nil,   nil, 21658,  9631,   585,
   nil,   nil,   nil,   -25,   540,   nil,   550,   793,   511,   509,
   nil,   486,   466,   338,  9511,   285,   nil,   nil,   266,   306,
   215,   nil,   198,   nil,   114,   nil,   111,   108,   nil,  1430,
  1686,    27,   -73,   nil,  8068,   -62,   nil,   nil,   nil,   nil,
   nil,   nil,  1168, 20791,  9031,   -50,    55,   nil,   nil,   nil,
   122,  9271,  9391,   384,   nil,   130,   148,   764,   670,   204,
    12,   414,   nil, 22954,   318,   nil,   nil,   280,   555,   472,
   nil,   nil,   490,   493,   250,   nil,   581,    17, 21439,   641,
   240,   224,   556,     4,   168,   -60,   715,   726,   nil,   -33,
  1306,   572,   nil,   391,   664,   nil,   771,   479,  6642,   nil,
   nil,   nil,   nil,   726,   nil,   nil,   703,   nil,  6238,   791,
   303, 11911,   nil,  1815,   nil,   720,   nil,   816,   nil,   741,
 23029,   nil,   nil, 12511,    92, 12631, 13231,   758, 13471, 22653,
   767,  2744,   nil,   nil,   nil,   779,   nil,  2254,   nil,  3589,
   nil,   nil,   nil,   nil, 21850,   nil,   nil,   nil,  2968,   nil,
  2905,   nil,  3311,   nil,   nil,  2287,   nil,  1040,   nil,   822,
  1453,   nil,   846,   nil,   nil, 21878,   nil, 21411,   nil, 19831,
   nil, 21219,   nil, 21191,   nil,   935,  8551,   nil,   479,   862,
   941,   nil,   nil, 20551,  6884,   nil,   nil, 20671,   -35,  7005,
   nil,   nil,   nil,   nil,   nil,   975,   nil,   193, 23179,   nil,
   nil,  7355,   nil,   nil, 22014,  7476,   nil,   nil,   nil, 13951,
   936,   503,   981,   nil,   943,   945,  1311,   nil,   951,   961,
   963,   981,   982,   983,   987,  1868,   992,  1664,   998,   nil,
 20943,   nil,   nil,   246,   nil,   nil,   471, 22070,  1106,   nil,
  8310,   778,  1012,  1088,  1101,   nil,   nil,  1141,  3416,   nil,
  2261,   nil,  3154,   nil,   nil,   nil,  3377,   nil,   nil,   nil,
   nil,  2479,   nil,   nil,  1088,  1803,  6521,   nil,   nil,   nil,
   nil,  1178,  1339, 13831,  3650,   968,   nil,  1095,  1096,  1117,
  1118,  1119,  1123,  1124,  1135,   441,   nil,   298,   533,  1131,
   101,   153,   nil,  3318,   nil,   nil,   nil,   nil,   nil,    96,
  1160,   nil ]

racc_action_default = [
    -2,  -539,    -1,  -538,  -539,  -383,    -3,  -539,  -527,  -446,
  -436,  -285,  -539,  -476,  -539,  -539,  -445,  -437,  -421,  -539,
   -65,  -539,  -525,  -447,  -419,  -310,  -539,  -448,  -421,  -403,
  -539,    -5,  -455,  -421,  -308,   -69,  -539,    -6,  -268,  -456,
  -411,  -399,  -309,  -539,  -539,  -539,  -417,  -402,  -311,   -79,
  -539,  -539,    -9,  -539,  -450,  -404,  -300,  -539,  -260,   -40,
  -449,  -312,  -261,  -539,  -453,  -301,  -451,  -313,  -302,  -262,
  -525,  -314,  -303,  -527,  -539,   -46,  -263,  -452,  -539,   -48,
  -539,  -264,  -538,   -49,  -305,  -265,  -440,  -539,  -515,  -539,
  -442,   -53,  -267,  -441,  -400,  -538,  -538,  -443,  -401,  -306,
  -277,  -539,  -539,  -538,  -444,  -307,  -539,  -231,  -280,   -41,
   -77,   952,  -539,  -539,  -539,  -539,  -538,  -539,  -539,  -539,
  -538,  -509,  -382,  -268,  -246,  -253,  -300,  -453,  -301,  -538,
  -539,  -232,  -242,  -538,  -305,  -247,  -277,  -539,   -63,  -539,
  -539,  -527,  -528,  -539,  -538,  -538,  -286,  -539,  -481,  -476,
  -498,  -482,  -539,  -539,  -538,  -499,  -496,  -479,  -368,  -500,
  -478,  -538,  -477,  -495,  -480,  -475,  -539,  -538,  -487,  -539,
  -485,  -493,  -287,  -284,  -376,   -57,    -8,  -177,  -126,  -170,
  -178,  -117,  -127,  -171,  -161,  -118,  -176,  -128,  -152,  -160,
  -119,  -139,  -169,  -155,  -132,  -179,  -120,  -181,  -133,  -141,
  -164,  -121,  -185,  -134,  -138,  -151,  -122,  -186,  -136,  -129,
  -165,  -137,  -142,  -123,  -154,  -140,  -146,  -124,  -143,  -145,
  -147,  -144,  -156,  -168,  -539,  -148,  -167,  -172,  -158,  -157,
  -174,  -431,  -180,  -166,  -149,  -109,  -159,  -130,  -106,  -173,
  -110,  -131,  -108,  -433,  -163,  -432,  -430,  -150,  -183,  -175,
  -107,  -434,  -184,  -182,  -125,  -135,  -539,  -538,  -539,  -223,
   -45,    -4,  -536,  -534,  -526,  -535,  -539,   -47,  -539,  -539,
  -383,  -539,  -539,  -208,  -280,  -539,  -539,   -92,  -539,   -70,
   -85,  -527,  -539,  -538,  -304,   -73,  -111,   -17,  -113,  -539,
  -112,  -114,  -539,  -539,  -539,   -81,  -438,  -439,  -539,  -539,
  -539,  -405,  -209,  -538,  -539,  -539,  -539,  -539,  -539,  -539,
   -51,  -224,  -539,  -539,  -539,   -52,  -539,  -526,  -525,  -539,
  -274,  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,
  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,
  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -326,  -539,  -268,
  -453,  -539,  -539,  -325,  -373,  -538,  -538,  -115,   -22,  -539,
   -67,  -527,   -13,   -14,  -539,  -538,  -525,  -266,  -527,  -539,
  -268,  -453,  -104,  -539,  -539,  -539,  -101,  -102,  -539,  -539,
  -539,  -538,  -539,  -531,  -531,  -233,   -50,  -539,  -538,  -531,
  -507,  -539,  -539,  -539,  -176,  -169,  -179,  -164,  -146,  -147,
  -539,  -148,  -476,  -106,  -505,  -107,  -527,   -64,   -75,  -539,
  -512,  -248,  -539,  -251,  -252,  -243,  -539,  -538,  -539,  -249,
  -251,  -244,  -539,  -539,  -527,  -240,  -241,  -274,  -539,  -254,
  -539,   -39,   -38,   -30,  -539,  -283,  -527,  -539,   -44,  -538,
  -355,  -538,  -358,  -356,  -538,  -189,   -31,  -538,  -497,  -539,
  -539,  -538,  -366,  -538,  -501,  -539,  -504,  -468,  -539,  -473,
  -484,  -539,  -539,  -471,  -331,  -482,  -338,  -539,  -329,  -539,
  -327,  -527,  -538,   -58,  -538,  -539,  -435,  -422,  -423,  -539,
  -516,  -518,  -381,  -379,  -519,  -517,  -527,  -538,  -516,  -518,
  -380,  -519,  -517,    -7,  -537,  -406,  -420,  -538,  -317,  -316,
  -407,  -539,  -539,  -408,  -539,  -538,  -539,  -438,  -439,   -82,
  -539,   -91,  -527,   -71,  -539,  -539,   -21,   -20,   -19,  -197,
   -36,  -412,  -410,  -413,  -409,  -539,  -539,  -538,  -415,  -416,
  -539,  -539,   -26,   -27,   -23,   -24,   -25,  -319,  -320,  -538,
   -43,   -42,  -538,  -539,  -539,  -539,  -539,  -229,  -539,  -213,
  -218,  -210,  -225,  -219,  -211,  -226,  -220,  -212,  -221,  -200,
  -222,  -205,  -201,  -227,  -202,  -228,  -214,  -203,  -215,  -204,
  -198,  -216,  -199,  -527,  -217,  -539,  -538,  -539,  -274,  -539,
  -538,  -538,  -539,   -16,   -66,  -272,  -527,   -12,  -526,  -271,
  -539,  -538,  -539,  -101,  -103,  -102,  -539,  -538,  -457,  -539,
  -539,  -538,  -516,  -517,  -538,  -270,  -315,  -391,  -538,  -538,
  -275,  -533,  -234,  -532,  -533,  -236,   -37,  -253,  -187,   -29,
  -539,  -508,  -276,  -524,  -539,  -523,  -527,  -476,  -539,  -538,
  -279,  -527,  -539,   -83,   -78,  -538,  -250,  -255,  -539,  -516,
  -273,  -527,  -516,  -517,  -510,  -511,  -237,  -187,  -539,  -259,
  -282,  -529,  -491,  -482,  -538,  -360,  -538,  -539,  -538,  -538,
  -354,  -539,  -539,  -539,  -539,  -527,  -489,  -483,  -539,  -539,
  -538,  -503,  -538,  -488,  -538,  -502,  -538,  -538,  -494,  -539,
  -539,  -336,  -527,  -486,  -538,  -539,  -429,  -426,  -427,  -428,
  -424,  -378,   -61,  -539,  -539,  -539,  -384,  -239,  -238,  -377,
   -59,  -539,  -539,  -538,  -318,  -539,  -538,   -88,   -90,  -527,
  -516,  -517,   -80,  -539,   -74,   -18,  -414,  -206,  -207,  -538,
  -418,   -28,  -539,  -539,  -539,  -293,  -539,  -527,  -196,  -539,
  -520,  -273,  -527,  -516,  -517,  -539,  -539,  -539,  -116,   -68,
   -15,  -101,  -105,  -102,  -527,  -459,  -539,  -539,  -538,  -375,
   -55,  -374,   -54,  -538,  -394,  -393,  -392,  -323,  -538,  -538,
  -531,  -539,  -297,  -476,  -506,  -527,  -461,  -539,  -278,   -76,
  -539,  -245,  -256,  -539,  -384,  -539,  -539,  -257,  -539,  -539,
  -539,  -345,  -347,  -365,  -364,  -361,  -362,  -539,  -350,  -539,
  -352,  -357,  -386,  -385,  -190,  -367,  -369,  -370,  -539,  -466,
  -539,  -464,  -539,  -474,  -472,  -539,  -469,  -334,  -330,  -339,
  -539,  -328,  -539,  -425,   -62,  -194,   -35,  -195,  -530,  -539,
   -60,  -192,   -33,  -193,   -34,  -539,  -539,  -321,   -86,   -72,
  -539,  -290,  -291,  -539,  -538,  -292,  -281,  -539,  -384,  -538,
  -372,  -371,  -384,  -295,  -458,  -539,  -396,  -539,  -539,  -324,
  -398,  -538,   -11,  -235,  -188,  -538,  -460,  -298,   -84,  -539,
  -258,  -490,  -539,  -359,  -538,  -538,  -539,  -492,  -538,  -538,
  -538,  -538,  -538,  -538,  -538,  -539,  -332,  -539,  -337,   -56,
  -191,   -32,  -288,  -539,  -289,  -255,  -538,  -230,  -539,  -296,
  -538,  -539,  -100,   -93,  -539,  -395,  -397,  -539,  -539,  -274,
  -539,  -342,  -539,  -344,  -363,  -351,  -539,  -348,  -353,  -467,
  -465,  -539,  -462,  -470,  -335,  -539,  -538,  -387,  -389,  -388,
  -294,  -538,  -539,  -538,  -539,   -99,  -299,  -520,  -273,  -538,
  -538,  -538,  -538,  -538,  -333,  -538,  -390,  -520,   -98,  -527,
  -516,  -517,  -343,  -539,  -340,  -346,  -349,  -463,  -322,  -384,
  -538,  -341 ]

clist = [
'31,132,497,143,268,310,544,235,364,424,132,158,122,231,315,380,609,284',
'473,290,165,174,470,298,279,235,415,384,673,629,421,309,527,539,389',
'383,291,264,542,634,431,314,260,287,658,52,678,138,318,386,471,659,132',
'479,267,487,175,52,594,364,284,132,261,290,612,615,696,670,319,235,621',
'284,759,267,677,496,37,825,426,430,291,267,441,444,284,808,809,357,176',
'361,867,267,284,385,644,235,132,360,267,661,390,402,523,374,132,408',
'783,665,786,224,316,636,152,414,404,368,388,414,636,269,749,354,352',
'751,275,132,425,654,624,382,393,146,515,347,785,358,852,486,392,452',
'22,440,440,917,714,753,847,447,301,266,407,456,172,293,521,3,165,300',
'456,690,246,433,672,6,456,2,597,435,446,436,461,438,1,,457,601,604,',
'656,,,459,830,,,,,463,,,,,,,,,,674,,,,676,,867,,,426,,,364,,,,479,,487',
'878,,,,,774,,,,,,,,531,,262,,,,726,,,,,,,,,,484,,,,,,,,132,425,,,,,',
',,769,,,490,,284,,,,,,,,742,510,122,174,262,513,914,532,808,534,535',
'536,616,644,828,512,364,,580,581,,,641,360,706,,,,706,,,52,,620,948',
',,838,520,780,783,,904,,681,,934,470,,842,,430,,,,716,,267,,267,267',
'267,493,,,540,541,,829,635,,,533,,919,682,,440,440,673,631,,,545,,,',
',,,,426,662,,,663,,586,,706,673,,668,607,669,360,588,,,678,709,864,584',
',706,855,284,,865,589,,,,633,869,685,583,132,600,,484,587,,619,165,684',
',873,132,425,,,,,,,,,703,,490,,,626,,,,630,,,,655,,,,,853,,,655,,660',
',,,646,,,719,426,,732,,834,839,,,650,,,722,,,723,440,,744,,,,132,,,',
',,695,724,132,698,,691,,,,484,,,484,697,,284,683,290,,,132,425,633,235',
',736,737,755,490,,,930,490,,291,,746,537,949,,692,715,537,,426,868,262',
'870,700,,,470,470,,814,,871,712,872,426,,760,820,874,771,,430,,767,',
',,,,,936,735,,,,,,,484,290,,,729,,605,235,132,425,727,262,918,747,,484',
',890,291,598,490,,,132,425,738,,,,,,,,132,698,490,132,698,,,,754,757',
'267,697,,812,697,739,235,284,,,916,,763,,633,,,,765,,267,,,740,,414',
',165,,695,,,929,,931,,750,,932,752,,,,933,655,764,456,,456,456,768,',
',876,,,470,,,,456,845,456,,456,,456,456,,782,,788,790,,,950,,849,,,19',
',117,799,795,801,,803,284,804,806,117,19,757,,633,698,695,117,,,811',
',117,,691,697,816,,757,,,276,,706,822,824,,,,695,470,117,470,,,,725',
',,117,,695,117,,,,,,,117,,117,846,,284,836,117,,850,,,858,886,284,348',
',,888,19,,470,,165,117,,369,,897,,896,,19,,,,,117,,369,,,,,856,117,',
'276,,,,,,,,,939,883,745,,,,748,762,,,117,,,921,19,,,,,,,117,117,,117',
',,284,117,,,,,,766,,,881,,935,,,,,,,,,,,,267,,,,,,,456,456,,,456,456',
'456,456,456,456,456,426,,,,,,,,,,,757,901,903,,484,905,907,908,909,910',
'912,913,,,,,,,,,,,,,,,,,484,831,832,,,835,,607,132,425,,,,,,456,456',
'456,456,456,490,757,,695,,843,,,,,117,,,537,,,456,19,942,944,945,946',
'947,,,844,857,,,,,,,,,,19,,276,951,,,,,,117,,,,,,,,,,,19,117,19,117',
'117,117,,,,117,117,,,,,,,,131,,,,,,,,,131,882,,,,,884,259,,,,,,,,,273',
',,,,889,,,,,,,,19,,,,,,19,302,,,,,,131,311,,117,,,,,,131,,,,,,117,19',
',,,,,920,,,,,,117,,,926,,,117,,,276,,,131,,,,131,117,,131,,,,,131,,',
',131,,131,,,,131,259,,,,,,19,,,19,131,,,,,,19,,19,,131,131,,,,,,,445',
',,,,,,,,,,19,,,,,117,,,,,,,,117,,,,64,,,,,,19,,,,,,64,,117,,,,,,,,,276',
',,,,,,,,280,,,,19,,,,,,,,,,,,19,,,19,,,,117,,,,,,,,,,,,,,,,,,,,350,',
',,64,,,131,,,117,371,,117,19,19,,64,,,,,19,,371,117,,,371,,,19,280,117',
',117,,,117,,,,519,,,,,,,,,,,,,64,,,,,,,,19,,,276,,,547,,549,550,551',
'552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568',
'569,570,571,572,573,574,,,,,,,,,,,,,12,,,,,,,,,19,,,12,,,,,,117,,,,',
',,,117,117,618,,,,,,,,,,276,,,,,,,,,131,,,,,,445,131,,,,131,,,131,,519',
'131,,,,,647,,,,19,,131,,64,,12,,,,19,,,,,,,131,,12,,,276,64,,280,,,',
',,861,,,,,,,,,,,,64,,64,,131,,,,,,,,131,,12,,,,,,,,,,,,,,117,,131,,',
',,117,,,,,,,,19,,,,,19,,717,718,,,,,64,891,,,19,,64,,19,,,,131,,,,,728',
',391,,,,,101,,,,410,64,411,,,,419,,101,,,,,,,19,,131,,,,,280,,,,,429',
'432,,,,131,,,,,,,,,19,131,,,131,,,117,131,,,131,,64,131,,64,,,,12,,',
'64,,64,,,,,353,,,,101,,,,131,12,,,,,,,64,101,131,,,,,,,,,,,12,,12,,',
'794,,,,,64,,,,,,,,,,,38,,,,,101,280,,,,,,38,815,817,,,,,64,,821,823',
',,,,,,,,64,277,,64,12,,,,,,12,,,,,,,,,,,,,,,,,,,,,,,12,,,,,,,,64,64',
',349,,,,38,64,854,,,,,370,,,64,,,38,815,,821,823,,131,370,,,,,,,,277',
',,,,,,,,,12,,,12,64,,,280,,,12,,12,38,,,,,,101,,,880,,,,,,,,,,,12,,',
'131,617,101,,887,,,,,,,,,,,,,,,,12,,101,64,101,,880,637,,,,,,,391,,',
'645,,,,,,,,,,,649,,12,,280,,,,,,,,,,12,666,,12,,,,,,,,,,,,,101,,,,,',
'101,,,64,,,131,,,,,,,64,,,,,,12,12,,,101,38,280,,12,,,,,,,371,,12,,',
',,,,38,,277,,,,,,,,,,,,,,,,,,38,,38,,,12,,,,,617,,,101,,,101,,,,,,,101',
',101,64,,,,,64,,,,,,,,,893,,,64,,,101,64,,,,,,,,,38,,,,12,,38,,,,,,',
'101,,,,,,756,,,637,,,391,64,,,38,,,,,,,,,,,,,,101,,,,,,772,277,,64,',
',101,,,101,777,,,,,,,,,12,,,,,,,,,,12,,,,38,,,38,,,,,,,38,,38,,101,101',
',,,,,,101,,,,,,,,,101,,38,686,,,,,,,,,,,,,,,,,,,,,,38,,,,,,,101,271',
',,,,271,,,12,277,,,,12,,,,,,,271,,38,,,12,,271,,12,,,,,38,,,38,,,,,',
'860,,,,,271,,,,,,101,,,,,271,,,,,12,,271,,,,,,271,271,,38,38,,,,271',
',271,38,271,,,,271,271,12,,38,,,,,,885,,,,,,,,,,,271,,,,,,,,,101,,,',
',,38,,,277,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38',
',,,,,,,,,,,,,,,,,,,,,,,,101,,,,277,101,,,,,,,,,895,,,101,,,,101,,,,',
',,,,,,,,,,,,,38,,,,,,,,,,38,,271,,,,,101,,,,,277,,,,,,,,,370,,,,,,,',
',,,,101,,,271,,271,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,,,,,,,,,,,,,38,,,,,38',
',,,,,,,,892,,,38,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,271,271,,38',
',,,,271,,271,271,,,,,271,,,,,,271,,,,,,,38,,,,,,,,271,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,271',
'271,,,,,,,,,,,,,,,,,271,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,,,,,,,,,,,,,,,,,,271,,,,,,271',
',,,,,,,,,271,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,',
',,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271',
',,,,,,,,271,,,271,,271,271,,271,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,271,,,,271,,,,,,,,,,,271,,,,,,,,,,,271' ]
        racc_goto_table = arr = Array.new(3012, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'7,34,83,32,19,36,90,54,12,25,34,118,64,53,36,11,13,59,40,57,110,64,102',
'19,47,54,66,63,135,98,66,19,83,87,63,61,58,9,87,49,28,19,21,17,107,10',
'136,39,19,36,103,108,34,38,30,38,39,10,51,12,59,34,6,57,62,62,26,108',
'32,54,62,59,14,30,108,130,8,84,36,61,58,30,41,41,59,101,104,17,8,44',
'137,30,59,7,140,54,34,43,30,112,7,53,130,52,34,48,115,112,114,127,6',
'67,116,7,75,30,52,7,67,127,65,74,92,65,127,34,7,105,100,60,99,79,31',
'22,113,18,15,25,78,117,5,7,7,120,49,121,122,118,125,126,39,7,81,128',
'129,4,110,131,7,132,133,21,134,3,7,2,94,45,21,30,139,30,1,,109,38,38',
',106,,,109,14,,,,,109,,,,,,,,,,106,,,,106,,137,,,36,,,12,,,,38,,38,104',
',,,,26,,,,,,,,12,,95,,,,90,,,,,,,,,,54,,,,,,,,34,7,,,,,,,,49,,,64,,59',
',,,,,,,51,32,64,64,95,48,104,19,101,19,19,19,28,140,26,44,12,,41,41',
',,25,43,38,,,,38,,,10,,11,84,,,26,21,112,115,,114,,102,,104,102,,26',
',61,,,,130,,30,,30,30,30,8,,,30,30,,49,63,,,10,,14,103,,7,7,135,36,',
',6,,,,,,,,36,12,,,12,,44,,38,135,,12,7,12,43,9,,,136,25,107,45,,38,98',
'59,,108,45,,,,47,108,12,10,34,30,,54,6,,21,110,41,,108,34,7,,,,,,,,',
'12,,64,,,30,,,,45,,,,7,,,,,62,,,7,,110,,,,45,,,12,36,,25,,83,87,,,45',
',,12,,,12,7,,25,,,,34,,,,,,32,61,34,7,,64,,,,54,,,54,64,,59,45,57,,',
'34,7,47,54,,12,12,28,64,,,108,64,,58,,11,95,26,,39,17,95,,36,106,95',
'106,39,,,102,102,,40,,106,45,106,36,,63,40,106,66,,61,,11,,,,,,,13,19',
',,,,,,54,57,,,32,,77,54,34,7,30,95,90,19,,54,,83,58,95,64,,,34,7,17',
',,,,,,,34,7,64,34,7,,,,7,7,30,64,,12,64,45,54,59,,,83,,53,,47,,,,118',
',30,,,10,,7,,110,,32,,,106,,106,,39,,106,39,,,,106,7,45,7,,7,7,45,,',
'102,,,102,,,,7,11,7,,7,,7,7,,109,,109,109,,,106,,12,,,24,,24,109,45',
'109,,109,59,109,109,24,24,7,,47,7,32,24,,,45,,24,,64,64,21,,7,,,24,',
'38,21,21,,,,32,102,24,102,,,,77,,,24,,32,24,,,,,,,24,,24,7,,59,45,24',
',7,,,47,12,59,24,,,12,24,,102,,110,24,,24,,11,,12,,24,,,,,24,,24,,,',
',45,24,,24,,,,,,,,,25,19,95,,,,95,77,,,24,,,12,24,,,,,,,24,24,,24,,',
'59,24,,,,,,95,,,21,,12,,,,,,,,,,,,30,,,,,,,7,7,,,7,7,7,7,7,7,7,36,,',
',,,,,,,,7,109,109,,54,109,109,109,109,109,109,109,,,,,,,,,,,,,,,,,54',
'77,77,,,77,,7,34,7,,,,,,7,7,7,7,7,64,7,,32,,77,,,,,24,,,95,,,7,24,109',
'109,109,109,109,,,95,77,,,,,,,,,,24,,24,109,,,,,,24,,,,,,,,,,,24,24',
'24,24,24,24,,,,24,24,,,,,,,,33,,,,,,,,,33,77,,,,,77,33,,,,,,,,,33,,',
',,77,,,,,,,,24,,,,,,24,33,,,,,,33,33,,24,,,,,,33,,,,,,24,24,,,,,,77',
',,,,,24,,,77,,,24,,,24,,,33,,,,33,24,,33,,,,,33,,,,33,,33,,,,33,33,',
',,,,24,,,24,33,,,,,,24,,24,,33,33,,,,,,,33,,,,,,,,,,,24,,,,,24,,,,,',
',,24,,,,50,,,,,,24,,,,,,50,,24,,,,,,,,,24,,,,,,,,,50,,,,24,,,,,,,,,',
',,24,,,24,,,,24,,,,,,,,,,,,,,,,,,,,50,,,,50,,,33,,,24,50,,24,24,24,',
'50,,,,,24,,50,24,,,50,,,24,50,24,,24,,,24,,,,33,,,,,,,,,,,,,50,,,,,',
',,24,,,24,,,33,,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,,,,,,,,,,,,,23,,,,,,,,,24,,,23,,,,,,24,,,,,',
',,24,24,33,,,,,,,,,,24,,,,,,,,,33,,,,,,33,33,,,,33,,,33,,33,33,,,,,33',
',,,24,,33,,50,,23,,,,24,,,,,,,33,,23,,,24,50,,50,,,,,,24,,,,,,,,,,,',
'50,,50,,33,,,,,,,,33,,23,,,,,,,,,,,,,,24,,33,,,,,24,,,,,,,,24,,,,,24',
',33,33,,,,,50,24,,,24,,50,,24,,,,33,,,,,33,,29,,,,,20,,,,29,50,29,,',
',29,,20,,,,,,,24,,33,,,,,50,,,,,29,29,,,,33,,,,,,,,,24,33,,,33,,,24',
'33,,,33,,50,33,,50,,,,23,,,50,,50,,,,,20,,,,20,,,,33,23,,,,,,,50,20',
'33,,,,,,,,,,,23,,23,,,33,,,,,50,,,,,,,,,,,27,,,,,20,50,,,,,,27,33,33',
',,,,50,,33,33,,,,,,,,,50,27,,50,23,,,,,,23,,,,,,,,,,,,,,,,,,,,,,,23',
',,,,,,,50,50,,27,,,,27,50,33,,,,,27,,,50,,,27,33,,33,33,,33,27,,,,,',
',,27,,,,,,,,,,23,,,23,50,,,50,,,23,,23,27,,,,,,20,,,33,,,,,,,,,,,23',
',,33,29,20,,33,,,,,,,,,,,,,,,,23,,20,50,20,,33,29,,,,,,,29,,,29,,,,',
',,,,,,29,,23,,50,,,,,,,,,,23,29,,23,,,,,,,,,,,,,20,,,,,,20,,,50,,,33',
',,,,,,50,,,,,,23,23,,,20,27,50,,23,,,,,,,50,,23,,,,,,,27,,27,,,,,,,',
',,,,,,,,,,27,,27,,,23,,,,,29,,,20,,,20,,,,,,,20,,20,50,,,,,50,,,,,,',
',,50,,,50,,,20,50,,,,,,,,,27,,,,23,,27,,,,,,,20,,,,,,29,,,29,,,29,50',
',,27,,,,,,,,,,,,,,20,,,,,,29,27,,50,,,20,,,20,29,,,,,,,,,23,,,,,,,,',
',23,,,,27,,,27,,,,,,,27,,27,,20,20,,,,,,,20,,,,,,,,,20,,27,27,,,,,,',
',,,,,,,,,,,,,,,27,,,,,,,20,42,,,,,42,,,23,27,,,,23,,,,,,,42,,27,,,23',
',42,,23,,,,,27,,,27,,,,,,29,,,,,42,,,,,,20,,,,,42,,,,,23,,42,,,,,,42',
'42,,27,27,,,,42,,42,27,42,,,,42,42,23,,27,,,,,,29,,,,,,,,,,,42,,,,,',
',,,20,,,,,,27,,,27,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,27,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,27,20,,,,,,,,,20,,,20,,,,20,,,',
',,,,,,,,,,,,,,27,,,,,,,,,,27,,42,,,,,20,,,,,27,,,,,,,,,27,,,,,,,,,,',
',20,,,42,,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42',
'42,42,42,42,42,42,,,,,,,,,,,,,27,,,,,27,,,,,,,,,27,,,27,,,,27,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,42,,,42,42,,27,,,,,42,,42,42,,,,,42,,,,,,42,,',
',,,,27,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,42,,,,,,,,,,,42,42,,,,,,,,,,,,,,,,,42,,,,,42,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,,,,,,',
',,,,,,,,,,,42,,,,,,42,,,,,,,,,,42,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,42,,,,,,,,,42,,,42,,42,42,,42,42,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,42,,,,,,,,,,,42,,,,,,,,,,,42' ]
        racc_goto_check = arr = Array.new(3012, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   172,   165,   160,   155,   137,    40,    -3,    73,    15,
    42,   -80,   -74,  -365,  -537,  -623,   nil,     7,    55,   -22,
  1552,    21,    55,  1356,   684,  -120,  -420,  1677,  -100,  1447,
    28,  -155,    -5,  1000,    -4,   nil,   -51,   nil,  -203,    42,
  -157,   -62,  2152,    15,     7,    26,   nil,   -11,    -5,  -370,
  1172,  -315,    14,    -5,   -11,   nil,   nil,   -17,     0,   -18,
    33,   -61,  -319,   -69,     7,  -481,   -90,  -302,   nil,   nil,
   nil,   nil,   nil,   nil,    42,     8,   nil,   190,    35,   120,
   nil,   139,   nil,  -266,  -626,   nil,   nil,  -276,   nil,   nil,
  -310,   nil,    44,   nil,  -208,   209,   nil,   nil,  -373,    24,
  -265,  -594,  -147,  -119,  -594,  -312,  -261,  -395,  -388,    20,
     7,   nil,  -340,  -523,  -549,  -551,    99,   -13,    -2,   nil,
  -743,  -463,  -607,   nil,   nil,   101,   125,    91,   113,  -139,
  -191,   111,  -316,   142,  -293,  -427,  -416,  -697,   nil,     4,
  -326 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   362,   nil,   317,
   363,   nil,   381,   nil,   827,   nil,   366,   nil,   nil,   nil,
   137,   109,     7,   115,   272,   nil,   nil,   123,   nil,   125,
    59,   nil,   437,    75,    79,    83,   135,    91,   705,   nil,
   nil,   nil,    14,    20,   nil,   nil,    35,    43,    49,   nil,
   127,   372,   nil,   286,   491,   240,   288,    94,    98,   107,
   nil,   116,   nil,   120,   482,   699,   nil,   124,    58,    62,
    69,    76,    81,    85,   367,    92,    95,   nil,   nil,   173,
    11,   nil,    26,   nil,   nil,    45,    53,   nil,    63,    70,
   nil,    78,   nil,    89,   nil,   499,   102,   106,   nil,   nil,
   nil,   468,   170,   nil,   464,   nil,   154,   nil,   161,   nil,
   671,   443,   nil,   nil,   nil,   148,   nil,   nil,   628,   483,
   nil,   nil,   nil,    41,    47,    55,   nil,   nil,   nil,   nil,
   477,   nil,   nil,   nil,   167,   168,   171,   652,   150,   153,
   121 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_1,
  0, 153, :_reduce_2,
  2, 151, :_reduce_3,
  2, 152, :_reduce_4,
  1, 154, :_reduce_5,
  1, 154, :_reduce_6,
  3, 154, :_reduce_7,
  2, 154, :_reduce_8,
  1, 157, :_reduce_9,
  1, 157, :_reduce_none,
  4, 160, :_reduce_11,
  2, 161, :_reduce_12,
  1, 165, :_reduce_13,
  1, 165, :_reduce_14,
  3, 165, :_reduce_15,
  2, 165, :_reduce_none,
  0, 180, :_reduce_17,
  4, 159, :_reduce_18,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 159, :_reduce_23,
  3, 159, :_reduce_24,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  4, 159, :_reduce_none,
  3, 159, :_reduce_29,
  3, 159, :_reduce_none,
  3, 159, :_reduce_31,
  6, 159, :_reduce_32,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 179, :_reduce_none,
  3, 179, :_reduce_42,
  3, 179, :_reduce_43,
  3, 179, :_reduce_44,
  2, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 168, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_50,
  2, 170, :_reduce_51,
  2, 170, :_reduce_52,
  1, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 189, :_reduce_none,
  2, 183, :_reduce_57,
  3, 183, :_reduce_none,
  4, 183, :_reduce_59,
  5, 183, :_reduce_none,
  4, 183, :_reduce_none,
  5, 183, :_reduce_none,
  2, 183, :_reduce_63,
  2, 183, :_reduce_64,
  1, 171, :_reduce_none,
  3, 171, :_reduce_none,
  1, 193, :_reduce_none,
  3, 193, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  3, 192, :_reduce_none,
  5, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 196, :_reduce_none,
  3, 196, :_reduce_none,
  2, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 198, :_reduce_none,
  3, 198, :_reduce_none,
  1, 197, :_reduce_none,
  4, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  2, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_94,
  3, 169, :_reduce_95,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  2, 169, :_reduce_99,
  1, 169, :_reduce_none,
  1, 200, :_reduce_101,
  1, 200, :_reduce_102,
  2, 201, :_reduce_103,
  1, 201, :_reduce_104,
  3, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_109,
  1, 202, :_reduce_110,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 182, :_reduce_187,
  5, 182, :_reduce_none,
  3, 182, :_reduce_189,
  5, 182, :_reduce_none,
  6, 182, :_reduce_191,
  5, 182, :_reduce_192,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  4, 182, :_reduce_none,
  3, 182, :_reduce_none,
  3, 182, :_reduce_198,
  3, 182, :_reduce_199,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  3, 182, :_reduce_202,
  3, 182, :_reduce_203,
  3, 182, :_reduce_204,
  3, 182, :_reduce_205,
  4, 182, :_reduce_none,
  4, 182, :_reduce_none,
  2, 182, :_reduce_none,
  2, 182, :_reduce_209,
  3, 182, :_reduce_210,
  3, 182, :_reduce_211,
  3, 182, :_reduce_212,
  3, 182, :_reduce_213,
  3, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  2, 182, :_reduce_223,
  2, 182, :_reduce_224,
  3, 182, :_reduce_225,
  3, 182, :_reduce_226,
  3, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_none,
  6, 182, :_reduce_230,
  1, 182, :_reduce_none,
  1, 178, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  4, 209, :_reduce_none,
  2, 209, :_reduce_none,
  3, 213, :_reduce_237,
  1, 214, :_reduce_238,
  1, 214, :_reduce_none,
  1, 174, :_reduce_240,
  1, 174, :_reduce_none,
  1, 185, :_reduce_242,
  2, 185, :_reduce_243,
  2, 185, :_reduce_244,
  4, 185, :_reduce_245,
  1, 185, :_reduce_246,
  1, 188, :_reduce_none,
  2, 216, :_reduce_248,
  2, 216, :_reduce_249,
  2, 215, :_reduce_250,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 210, :_reduce_253,
  2, 210, :_reduce_254,
  3, 210, :_reduce_255,
  4, 210, :_reduce_256,
  3, 177, :_reduce_none,
  4, 177, :_reduce_none,
  2, 177, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  2, 208, :_reduce_266,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 208, :_reduce_270,
  3, 208, :_reduce_none,
  3, 208, :_reduce_272,
  3, 208, :_reduce_273,
  2, 208, :_reduce_274,
  3, 208, :_reduce_275,
  3, 208, :_reduce_276,
  1, 208, :_reduce_277,
  4, 208, :_reduce_278,
  3, 208, :_reduce_279,
  1, 208, :_reduce_280,
  5, 208, :_reduce_none,
  4, 208, :_reduce_none,
  3, 208, :_reduce_none,
  2, 208, :_reduce_284,
  1, 208, :_reduce_285,
  2, 208, :_reduce_286,
  2, 208, :_reduce_287,
  6, 208, :_reduce_288,
  6, 208, :_reduce_289,
  5, 208, :_reduce_290,
  5, 208, :_reduce_291,
  5, 208, :_reduce_292,
  4, 208, :_reduce_293,
  7, 208, :_reduce_none,
  5, 208, :_reduce_295,
  6, 208, :_reduce_296,
  4, 208, :_reduce_297,
  5, 208, :_reduce_298,
  7, 208, :_reduce_299,
  1, 208, :_reduce_300,
  1, 208, :_reduce_301,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 173, :_reduce_none,
  1, 225, :_reduce_none,
  1, 231, :_reduce_none,
  1, 234, :_reduce_none,
  1, 235, :_reduce_none,
  1, 237, :_reduce_none,
  1, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 242, :_reduce_none,
  1, 245, :_reduce_none,
  1, 246, :_reduce_none,
  1, 226, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 233, :_reduce_321,
  5, 233, :_reduce_322,
  1, 163, :_reduce_323,
  2, 163, :_reduce_324,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 250, :_reduce_none,
  3, 250, :_reduce_none,
  1, 253, :_reduce_none,
  3, 253, :_reduce_none,
  1, 252, :_reduce_none,
  4, 252, :_reduce_none,
  6, 252, :_reduce_none,
  3, 252, :_reduce_none,
  5, 252, :_reduce_none,
  2, 252, :_reduce_none,
  4, 252, :_reduce_none,
  1, 252, :_reduce_none,
  3, 252, :_reduce_none,
  6, 254, :_reduce_none,
  8, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 190, :_reduce_355,
  1, 190, :_reduce_none,
  3, 260, :_reduce_none,
  1, 260, :_reduce_none,
  4, 260, :_reduce_359,
  1, 261, :_reduce_none,
  2, 261, :_reduce_none,
  1, 262, :_reduce_none,
  3, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  2, 230, :_reduce_366,
  4, 265, :_reduce_none,
  1, 265, :_reduce_none,
  3, 266, :_reduce_369,
  3, 266, :_reduce_370,
  4, 223, :_reduce_none,
  4, 223, :_reduce_372,
  2, 186, :_reduce_373,
  4, 186, :_reduce_none,
  4, 186, :_reduce_none,
  2, 229, :_reduce_376,
  4, 229, :_reduce_377,
  4, 229, :_reduce_378,
  3, 229, :_reduce_379,
  3, 229, :_reduce_none,
  3, 229, :_reduce_none,
  2, 229, :_reduce_382,
  1, 229, :_reduce_383,
  4, 229, :_reduce_384,
  4, 228, :_reduce_385,
  4, 228, :_reduce_386,
  5, 239, :_reduce_387,
  1, 269, :_reduce_388,
  1, 269, :_reduce_none,
  6, 162, :_reduce_390,
  1, 162, :_reduce_none,
  1, 270, :_reduce_392,
  1, 270, :_reduce_393,
  1, 270, :_reduce_394,
  2, 271, :_reduce_395,
  1, 271, :_reduce_396,
  2, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 218, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 273, :_reduce_none,
  3, 274, :_reduce_406,
  3, 219, :_reduce_407,
  3, 220, :_reduce_408,
  3, 221, :_reduce_none,
  3, 221, :_reduce_410,
  0, 277, :_reduce_411,
  2, 277, :_reduce_412,
  1, 278, :_reduce_413,
  2, 278, :_reduce_414,
  3, 222, :_reduce_none,
  3, 222, :_reduce_none,
  0, 280, :_reduce_417,
  3, 280, :_reduce_none,
  0, 275, :_reduce_419,
  2, 275, :_reduce_420,
  0, 276, :_reduce_421,
  2, 276, :_reduce_422,
  1, 279, :_reduce_423,
  2, 279, :_reduce_424,
  3, 279, :_reduce_425,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  2, 206, :_reduce_430,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  3, 207, :_reduce_435,
  1, 272, :_reduce_436,
  1, 272, :_reduce_437,
  2, 272, :_reduce_none,
  2, 272, :_reduce_none,
  1, 199, :_reduce_440,
  1, 199, :_reduce_441,
  1, 199, :_reduce_442,
  1, 199, :_reduce_443,
  1, 199, :_reduce_444,
  1, 199, :_reduce_445,
  1, 199, :_reduce_446,
  1, 199, :_reduce_447,
  1, 199, :_reduce_448,
  1, 199, :_reduce_449,
  1, 199, :_reduce_450,
  1, 199, :_reduce_451,
  1, 199, :_reduce_452,
  1, 224, :_reduce_none,
  1, 172, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 243, :_reduce_457,
  3, 243, :_reduce_458,
  2, 243, :_reduce_459,
  3, 247, :_reduce_460,
  2, 247, :_reduce_461,
  6, 267, :_reduce_462,
  8, 267, :_reduce_463,
  4, 267, :_reduce_464,
  6, 267, :_reduce_465,
  4, 267, :_reduce_466,
  6, 267, :_reduce_467,
  2, 267, :_reduce_468,
  4, 267, :_reduce_469,
  6, 267, :_reduce_470,
  2, 267, :_reduce_471,
  4, 267, :_reduce_472,
  2, 267, :_reduce_473,
  4, 267, :_reduce_474,
  1, 267, :_reduce_475,
  0, 267, :_reduce_476,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_482,
  3, 251, :_reduce_483,
  2, 251, :_reduce_484,
  1, 284, :_reduce_485,
  3, 284, :_reduce_none,
  1, 255, :_reduce_487,
  3, 255, :_reduce_488,
  3, 285, :_reduce_none,
  3, 286, :_reduce_none,
  1, 256, :_reduce_none,
  3, 256, :_reduce_none,
  1, 283, :_reduce_493,
  3, 283, :_reduce_494,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 257, :_reduce_497,
  1, 257, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 259, :_reduce_501,
  3, 259, :_reduce_502,
  2, 258, :_reduce_503,
  1, 258, :_reduce_none,
  1, 248, :_reduce_none,
  3, 248, :_reduce_none,
  1, 227, :_reduce_507,
  2, 227, :_reduce_508,
  1, 212, :_reduce_509,
  3, 212, :_reduce_510,
  3, 289, :_reduce_511,
  2, 289, :_reduce_512,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 187, :_reduce_516,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 268, :_reduce_520,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  0, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 194, :_reduce_none,
  2, 175, :_reduce_none,
  0, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  0, 156, :_reduce_none ]

racc_reduce_n = 539

racc_shift_n = 952

racc_token_table = {
  false => 0,
  :error => 1,
  "!" => 2,
  :tTILDE => 3,
  :tUPLUS => 4,
  :tPOW => 5,
  :tUMINUS_NUM => 6,
  :tUMINUS => 7,
  :tSTAR2 => 8,
  :tDIVIDE => 9,
  :tPERCENT => 10,
  :tPLUS => 11,
  :tMINUS => 12,
  :tLSHFT => 13,
  :tRSHFT => 14,
  :tAMPER2 => 15,
  :tPIPE => 16,
  :tCARET => 17,
  ">" => 18,
  :tGEQ => 19,
  "<" => 20,
  :tLEQ => 21,
  :tCMP => 22,
  :tEQ => 23,
  :tEQQ => 24,
  :tNEQ => 25,
  :tMATCH => 26,
  :tNMATCH => 27,
  :tANDOP => 28,
  :tOROP => 29,
  :tDOT2 => 30,
  :tDOT3 => 31,
  "?" => 32,
  ":" => 33,
  :kRESCUE_MOD => 34,
  "=" => 35,
  :tOP_ASGN => 36,
  :kDEFINED => 37,
  :kNOT => 38,
  :kOR => 39,
  :kAND => 40,
  :kIF_MOD => 41,
  :kUNLESS_MOD => 42,
  :kWHILE_MOD => 43,
  :kUNTIL_MOD => 44,
  :tLBRACE_ARG => 45,
  :tLOWEST => 46,
  :kCLASS => 47,
  :kMODULE => 48,
  :kDEF => 49,
  :kUNDEF => 50,
  :kBEGIN => 51,
  :kRESCUE => 52,
  :kENSURE => 53,
  :kEND => 54,
  :kIF => 55,
  :kUNLESS => 56,
  :kTHEN => 57,
  :kELSIF => 58,
  :kELSE => 59,
  :kCASE => 60,
  :kWHEN => 61,
  :kWHILE => 62,
  :kUNTIL => 63,
  :kFOR => 64,
  :kBREAK => 65,
  :kNEXT => 66,
  :kREDO => 67,
  :kRETRY => 68,
  :kIN => 69,
  :kDO => 70,
  :kDO_COND => 71,
  :kDO_BLOCK => 72,
  :kDO_LAMBDA => 73,
  :kRETURN => 74,
  :kYIELD => 75,
  :kSUPER => 76,
  :kSELF => 77,
  :kNIL => 78,
  :kTRUE => 79,
  :kFALSE => 80,
  :kALIAS => 81,
  :klBEGIN => 82,
  :klEND => 83,
  :k__LINE__ => 84,
  :k__FILE__ => 85,
  :k__ENCODING__ => 86,
  :kDEFined => 87,
  :kBLOCK_GIVEN => 88,
  :tIDENTIFIER => 89,
  :tFID => 90,
  :tGVAR => 91,
  :tIVAR => 92,
  :tCONSTANT => 93,
  :tCVAR => 94,
  :tLABEL => 95,
  :tINTEGER => 96,
  :tFLOAT => 97,
  :tSTRING_CONTENT => 98,
  :tCHAR => 99,
  :tNTH_REF => 100,
  :tBACK_REF => 101,
  :tREGEXP_END => 102,
  :tAREF => 103,
  :tASET => 104,
  :tCOLON2 => 105,
  :tCOLON3 => 106,
  :tASSOC => 107,
  :tLPAREN => 108,
  :tLPAREN_ARG => 109,
  :tRPAREN => 110,
  :tLBRACK => 111,
  :tLBRACE => 112,
  :tSTAR => 113,
  :tAMPER => 114,
  :tLAMBDA => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSTRING_DBEG => 122,
  :tSTRING_DVAR => 123,
  :tSTRING_END => 124,
  :tLAMBEG => 125,
  :tSTRING => 126,
  :tXSTRING_END => 127,
  "{" => 128,
  "}" => 129,
  "[" => 130,
  "." => 131,
  "," => 132,
  "|" => 133,
  "^" => 134,
  "&" => 135,
  "+" => 136,
  "-" => 137,
  "*" => 138,
  "/" => 139,
  "%" => 140,
  "~" => 141,
  "`" => 142,
  "(" => 143,
  ")" => 144,
  "]" => 145,
  ";" => 146,
  " " => 147,
  "\\n" => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"!\"",
  "tTILDE",
  "tUPLUS",
  "tPOW",
  "tUMINUS_NUM",
  "tUMINUS",
  "tSTAR2",
  "tDIVIDE",
  "tPERCENT",
  "tPLUS",
  "tMINUS",
  "tLSHFT",
  "tRSHFT",
  "tAMPER2",
  "tPIPE",
  "tCARET",
  "\">\"",
  "tGEQ",
  "\"<\"",
  "tLEQ",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tMATCH",
  "tNMATCH",
  "tANDOP",
  "tOROP",
  "tDOT2",
  "tDOT3",
  "\"?\"",
  "\":\"",
  "kRESCUE_MOD",
  "\"=\"",
  "tOP_ASGN",
  "kDEFINED",
  "kNOT",
  "kOR",
  "kAND",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "tLBRACE_ARG",
  "tLOWEST",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kALIAS",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "kDEFined",
  "kBLOCK_GIVEN",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tLABEL",
  "tINTEGER",
  "tFLOAT",
  "tSTRING_CONTENT",
  "tCHAR",
  "tNTH_REF",
  "tBACK_REF",
  "tREGEXP_END",
  "tAREF",
  "tASET",
  "tCOLON2",
  "tCOLON3",
  "tASSOC",
  "tLPAREN",
  "tLPAREN_ARG",
  "tRPAREN",
  "tLBRACK",
  "tLBRACE",
  "tSTAR",
  "tAMPER",
  "tLAMBDA",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tLAMBEG",
  "tSTRING",
  "tXSTRING_END",
  "\"{\"",
  "\"}\"",
  "\"[\"",
  "\".\"",
  "\",\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "\"`\"",
  "\"(\"",
  "\")\"",
  "\"]\"",
  "\";\"",
  "\" \"",
  "\"\\\\n\"",
  "$start",
  "target",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "do_block",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "k_while",
  "do",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "f_args",
  "operation3",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "sym",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 103)
  def _reduce_1(val, _values, result)
                        # puts 'well, we got here..'
                    # puts val[0]
                    @parser_result = val[0]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 111)
  def _reduce_2(val, _values, result)
                        self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 115)
  def _reduce_3(val, _values, result)
                        # puts 'program'
                    # puts val[1]
                    result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 122)
  def _reduce_4(val, _values, result)
                        # puts 'top_compstmt'
                    # puts val[0]
                    # puts val[1]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 130)
  def _reduce_5(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 134)
  def _reduce_6(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 138)
  def _reduce_7(val, _values, result)
                        result = val[0] + [val[2]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 142)
  def _reduce_8(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 147)
  def _reduce_9(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 153)
  def _reduce_11(val, _values, result)
                        # puts "erm wtf?!"
                    # puts val[1]
                    result = self.node_bodystmt(val[0], val[1], val[2], val[3])
                    # if val[1]
                      # pp result
                    # end
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 163)
  def _reduce_12(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 168)
  def _reduce_13(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 172)
  def _reduce_14(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 176)
  def _reduce_15(val, _values, result)
                        result = val[0] + [val[2]]
		              
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 182)
  def _reduce_17(val, _values, result)
                        self.lex_state = :EXPR_FNAME
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 186)
  def _reduce_18(val, _values, result)
                        result = node :alias, :lhs => val[1], :rhs => val[3] 
                  
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 194)
  def _reduce_23(val, _values, result)
                		    result = node :if_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 198)
  def _reduce_24(val, _values, result)
                		    result = node :unless_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 206)
  def _reduce_29(val, _values, result)
                		    result = node :assign, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 211)
  def _reduce_31(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 215)
  def _reduce_32(val, _values, result)
                		    puts "in here for #{val[0]}"
            		  
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 229)
  def _reduce_42(val, _values, result)
                  	    result = node :andop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 233)
  def _reduce_43(val, _values, result)
                  	    result = node :orop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 237)
  def _reduce_44(val, _values, result)
                  	    result = node :not, :expr => val[2]
              	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 248)
  def _reduce_50(val, _values, result)
                  	    result = node :return, :call_args => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 252)
  def _reduce_51(val, _values, result)
                	      result = node :break, :call_args => val[1]
            	    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 256)
  def _reduce_52(val, _values, result)
                	      result = node :next, :call_args => val[1]
            	    
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 267)
  def _reduce_57(val, _values, result)
                        # command call - no brackets/recv
          		      result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 273)
  def _reduce_59(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 280)
  def _reduce_63(val, _values, result)
          		          result = node :super, :call_args => val[1]
      		        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 284)
  def _reduce_64(val, _values, result)
            	          result = node :yield, :call_args => val[1]
        	        
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 325)
  def _reduce_94(val, _values, result)
    		                result = node :call, :recv => val[0], :meth => '[]', :args => val[2]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 329)
  def _reduce_95(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2]
                  
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 336)
  def _reduce_99(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 342)
  def _reduce_101(val, _values, result)
                        puts 'ERROR: cant use identifier for class/mod name'
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 346)
  def _reduce_102(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 352)
  def _reduce_103(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 355)
  def _reduce_104(val, _values, result)
      	                result = node :path, :cname => val[0]
  	              
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 364)
  def _reduce_109(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 369)
  def _reduce_110(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 405)
  def _reduce_187(val, _values, result)
                        result = node :assign, :lhs => val[0], :rhs => val[2]
                  
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 410)
  def _reduce_189(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 415)
  def _reduce_191(val, _values, result)
                		    result = node :aset_op_asgn, :recv => val[0], :call_args => val[2], :op => val[4], :arg => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 419)
  def _reduce_192(val, _values, result)
                		    result = node :op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
                    # result = node :dot_identifier_op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
            		  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 429)
  def _reduce_198(val, _values, result)
                		    result = node :dot2, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 433)
  def _reduce_199(val, _values, result)
                		    result = node :dot3, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 437)
  def _reduce_200(val, _values, result)
                		    result = node :opt_plus, :recv => val[0], :meth => '+', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 441)
  def _reduce_201(val, _values, result)
                		    result = node :opt_minus, :recv => val[0], :meth => '-', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 445)
  def _reduce_202(val, _values, result)
                		    result = node :opt_mult, :recv => val[0], :meth => '*', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 449)
  def _reduce_203(val, _values, result)
                		    result = node :opt_div, :recv => val[0], :meth => '/', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 453)
  def _reduce_204(val, _values, result)
                		    result = node :opt_mod, :recv => val[0], :meth => '%', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 457)
  def _reduce_205(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '**', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 464)
  def _reduce_209(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '-@', :call_args => { :args => []}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 468)
  def _reduce_210(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '|', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 472)
  def _reduce_211(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '^', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 476)
  def _reduce_212(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '&', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 480)
  def _reduce_213(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 484)
  def _reduce_214(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 488)
  def _reduce_215(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 492)
  def _reduce_216(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 496)
  def _reduce_217(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 500)
  def _reduce_218(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '==', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 504)
  def _reduce_219(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '===', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 508)
  def _reduce_220(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 512)
  def _reduce_221(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '=~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 516)
  def _reduce_222(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 520)
  def _reduce_223(val, _values, result)
                  	    result = node :not, :expr => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 524)
  def _reduce_224(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 528)
  def _reduce_225(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 532)
  def _reduce_226(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 536)
  def _reduce_227(val, _values, result)
                		    result = node :andop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 540)
  def _reduce_228(val, _values, result)
                		    result = node :orop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 545)
  def _reduce_230(val, _values, result)
                		    result = node :tertiary, :expr => val[0], :true => val[2], :false => val[5]
            		  
    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 558)
  def _reduce_237(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 563)
  def _reduce_238(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 569)
  def _reduce_240(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 575)
  def _reduce_242(val, _values, result)
                		    result = node :call_args, :args => [val[0]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 579)
  def _reduce_243(val, _values, result)
                		    result = node :call_args, :args => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 583)
  def _reduce_244(val, _values, result)
                		    result = node :call_args, :assocs => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 587)
  def _reduce_245(val, _values, result)
                		    result = node :call_args, :args => val[0], :assocs => val[2], :block_arg => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 591)
  def _reduce_246(val, _values, result)
                		    result = node :call_args, :block_arg => val[0]
            		  
    result
  end
.,.,

# reduce 247 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 598)
  def _reduce_248(val, _values, result)
                        # puts "here for #{val[1]}"
                    # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 604)
  def _reduce_249(val, _values, result)
                        # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 610)
  def _reduce_250(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 251 omitted

# reduce 252 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 617)
  def _reduce_253(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 621)
  def _reduce_254(val, _values, result)
    		                result = [node :splat, :val => val[1]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 625)
  def _reduce_255(val, _values, result)
    		                result = val[0] + [val[2]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 629)
  def _reduce_256(val, _values, result)
    		                result = val[0] + [node :splat, :val => val[3]]
		              
    result
  end
.,.,

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 644)
  def _reduce_266(val, _values, result)
                        # if val[0].node == :self
                      # result = val[0]
                    # else
                      # HACK: this rule shouldnt even exist. But for now it must for "identifier do .. end"
                      result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
                    # end
                  
    result
  end
.,.,

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 656)
  def _reduce_270(val, _values, result)
                  	    result = node :begin, :stmt => val[1]
              	  
    result
  end
.,.,

# reduce 271 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 661)
  def _reduce_272(val, _values, result)
                		    result = node :lparen, :stmt => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 665)
  def _reduce_273(val, _values, result)
                		    result = node :colon2, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 669)
  def _reduce_274(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 673)
  def _reduce_275(val, _values, result)
                		    result = node :array, :args => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 677)
  def _reduce_276(val, _values, result)
                		    result = node :assoc_list, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 681)
  def _reduce_277(val, _values, result)
                		    result = node :return
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 685)
  def _reduce_278(val, _values, result)
            	          result = node :yield, :call_args => val[2]
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 689)
  def _reduce_279(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 693)
  def _reduce_280(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 700)
  def _reduce_284(val, _values, result)
                		    result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 704)
  def _reduce_285(val, _values, result)
                		    # puts 2
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 708)
  def _reduce_286(val, _values, result)
                		    val[0][:brace_block] = val[1]
            		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 713)
  def _reduce_287(val, _values, result)
                		    result = node :lambda, :args => val[1][:args], :body => val[1][:body]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 717)
  def _reduce_288(val, _values, result)
                		    result = self.node :if, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 721)
  def _reduce_289(val, _values, result)
                		    result = self.node :unless, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 725)
  def _reduce_290(val, _values, result)
                        # puts "in node while"
            		    result = node :while, :expr => val[1], :stmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 730)
  def _reduce_291(val, _values, result)
                		    result = node :until, :expr => val[1], :stmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 734)
  def _reduce_292(val, _values, result)
                		    result = node :case, :expr => val[1], :body => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 738)
  def _reduce_293(val, _values, result)
                		    result = node :case, :expr => nil, :body => val[2]
            		  
    result
  end
.,.,

# reduce 294 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 743)
  def _reduce_295(val, _values, result)
                		    result = self.node_class(:cpath => val[1], :superclass => val[2], :bodystmt => val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 747)
  def _reduce_296(val, _values, result)
                		    result = node :class_shift, :expr => val[2], :bodystmt => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 751)
  def _reduce_297(val, _values, result)
                		    result = self.node_module(:cpath => val[1], :body => val[2])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 755)
  def _reduce_298(val, _values, result)
                		    result = self.node :def, :fname => val[1], :arglist => val[2], :bodystmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 759)
  def _reduce_299(val, _values, result)
                		    result = self.node :def, :singleton => val[1], :fname => val[3], :arglist => val[4], :bodystmt => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 763)
  def _reduce_300(val, _values, result)
                		    result = node :break, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 767)
  def _reduce_301(val, _values, result)
                		    result = node :next, :call_args => nil
            		  
    result
  end
.,.,

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

# reduce 312 omitted

# reduce 313 omitted

# reduce 314 omitted

# reduce 315 omitted

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 805)
  def _reduce_321(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 809)
  def _reduce_322(val, _values, result)
                  	    result = [self.node(:elsif, :expr => val[1], :stmt => val[3])] + val[4]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 814)
  def _reduce_323(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 818)
  def _reduce_324(val, _values, result)
                  	    result = [self.node(:else, :stmt => val[1])]
              	  
    result
  end
.,.,

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 858)
  def _reduce_355(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 866)
  def _reduce_359(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 880)
  def _reduce_366(val, _values, result)
                        result = {:args => val[0], :body => val[1]}
                  
    result
  end
.,.,

# reduce 367 omitted

# reduce 368 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 888)
  def _reduce_369(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 892)
  def _reduce_370(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 371 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 898)
  def _reduce_372(val, _values, result)
                        result = node :brace_block, :params => val[1], :stmt => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 903)
  def _reduce_373(val, _values, result)
                        val[0][:brace_block] = val[1]
                    result = val[0]
                  
    result
  end
.,.,

# reduce 374 omitted

# reduce 375 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 911)
  def _reduce_376(val, _values, result)
                        result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 915)
  def _reduce_377(val, _values, result)
                        result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 919)
  def _reduce_378(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2], :args => val[3]
              	    puts "tCOLON2call"
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 924)
  def _reduce_379(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2]
              	    puts "tCOLON2call.noargs."
              	  
    result
  end
.,.,

# reduce 380 omitted

# reduce 381 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 931)
  def _reduce_382(val, _values, result)
                		    result = node :super, :call_args => val[1], :paren => true
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 935)
  def _reduce_383(val, _values, result)
                		    result = node :super, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 939)
  def _reduce_384(val, _values, result)
                        result = node :call, :recv => val[0], :meth => '[]', :call_args => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 945)
  def _reduce_385(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 949)
  def _reduce_386(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 954)
  def _reduce_387(val, _values, result)
                        result = [node(:when, :args => val[1], :stmt => val[3])] + val[4]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 959)
  def _reduce_388(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 389 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 965)
  def _reduce_390(val, _values, result)
                        result = node :rescue, :list => val[1], :var => val[2], :stmt => val[4], :opt_rescue => val[5]
                    # puts result
                  
    result
  end
.,.,

# reduce 391 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 972)
  def _reduce_392(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 976)
  def _reduce_393(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 980)
  def _reduce_394(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 985)
  def _reduce_395(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 989)
  def _reduce_396(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

# reduce 397 omitted

# reduce 398 omitted

# reduce 399 omitted

# reduce 400 omitted

# reduce 401 omitted

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

# reduce 405 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1007)
  def _reduce_406(val, _values, result)
                        result = node :string, :value => val[1], :beg => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1012)
  def _reduce_407(val, _values, result)
                        result = node :xstring, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1017)
  def _reduce_408(val, _values, result)
                        result = node :regexp, :value => val[1]
                  
    result
  end
.,.,

# reduce 409 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1023)
  def _reduce_410(val, _values, result)
                		    result = node :words, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1028)
  def _reduce_411(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1032)
  def _reduce_412(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1037)
  def _reduce_413(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1041)
  def _reduce_414(val, _values, result)
                        result = val[0] + [val[1]]
                  
    result
  end
.,.,

# reduce 415 omitted

# reduce 416 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1049)
  def _reduce_417(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

# reduce 418 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1056)
  def _reduce_419(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1061)
  def _reduce_420(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1066)
  def _reduce_421(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1071)
  def _reduce_422(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1076)
  def _reduce_423(val, _values, result)
                        result = node :string_content, :value => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1080)
  def _reduce_424(val, _values, result)
                        result = node :string_dvar, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1084)
  def _reduce_425(val, _values, result)
                        result = node :string_dbeg, :value => val[1]
                  
    result
  end
.,.,

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1094)
  def _reduce_430(val, _values, result)
                        result = node :symbol, :name => val[1]
                  
    result
  end
.,.,

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

# reduce 434 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1104)
  def _reduce_435(val, _values, result)
                        result = node :dsym, :contents => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1109)
  def _reduce_436(val, _values, result)
                        result = node :numeric, :value => val[0], :float => false
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1113)
  def _reduce_437(val, _values, result)
                        result = node :numeric, :value => val[0], :float => true
                  
    result
  end
.,.,

# reduce 438 omitted

# reduce 439 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1121)
  def _reduce_440(val, _values, result)
                        result = node :identifier, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1125)
  def _reduce_441(val, _values, result)
                        result = node :ivar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1129)
  def _reduce_442(val, _values, result)
                        result = node :gvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1133)
  def _reduce_443(val, _values, result)
                        result = node :constant, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1137)
  def _reduce_444(val, _values, result)
                        result = node :cvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1141)
  def _reduce_445(val, _values, result)
                        result = node :nil, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1145)
  def _reduce_446(val, _values, result)
                        result = node :self, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1149)
  def _reduce_447(val, _values, result)
                        result = node :true, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1153)
  def _reduce_448(val, _values, result)
                        result = node :false, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1157)
  def _reduce_449(val, _values, result)
                        result = node :__FILE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1161)
  def _reduce_450(val, _values, result)
                        result = node :__LINE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1165)
  def _reduce_451(val, _values, result)
                        result = node :__ENCODING__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1169)
  def _reduce_452(val, _values, result)
                        # added for block_given? support.. :D
                    result = node :block_given
                  
    result
  end
.,.,

# reduce 453 omitted

# reduce 454 omitted

# reduce 455 omitted

# reduce 456 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1182)
  def _reduce_457(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1186)
  def _reduce_458(val, _values, result)
                		    result = node :superclass, :expr => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1188)
  def _reduce_459(val, _values, result)
     puts 'OMFG' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1192)
  def _reduce_460(val, _values, result)
                        result = val[1]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1197)
  def _reduce_461(val, _values, result)
                        result = val[0]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1203)
  def _reduce_462(val, _values, result)
                        result = node_args(val[0], val[2], val[4], nil, val[5])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1207)
  def _reduce_463(val, _values, result)
                 		    result = node_args(val[0], val[2], val[4], val[6], val[7])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1211)
  def _reduce_464(val, _values, result)
                  	    result = node_args(val[0], val[2], nil, nil, val[3])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1215)
  def _reduce_465(val, _values, result)
                		    result = node_args(val[0], val[2], nil, val[4], val[5])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1219)
  def _reduce_466(val, _values, result)
                		    result = node_args(val[0], nil, val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1223)
  def _reduce_467(val, _values, result)
                		    result = node_args(val[0], nil, val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1227)
  def _reduce_468(val, _values, result)
                 		    result = node_args(val[0], nil, nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1231)
  def _reduce_469(val, _values, result)
                		    result = node_args(nil, val[0], val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1235)
  def _reduce_470(val, _values, result)
                		    result = node_args(nil, val[0], val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1239)
  def _reduce_471(val, _values, result)
                 		    result = node_args(nil, val[0], nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1243)
  def _reduce_472(val, _values, result)
                 		    result = node_args(nil, val[0], nil, val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1247)
  def _reduce_473(val, _values, result)
                 		    result = node_args(nil, nil, val[0], nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1251)
  def _reduce_474(val, _values, result)
                 		    result = node_args(nil, nil, val[0], val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1255)
  def _reduce_475(val, _values, result)
                 		    result = node_args(nil, nil, nil, nil, val[0])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1259)
  def _reduce_476(val, _values, result)
                  	    result = node_args(nil, nil, nil, nil, nil)
              	  
    result
  end
.,.,

# reduce 477 omitted

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1270)
  def _reduce_482(val, _values, result)
                        # result = val[0]
              	    result = node :norm_arg, :value => val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1276)
  def _reduce_483(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1279)
  def _reduce_484(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1284)
  def _reduce_485(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 486 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1290)
  def _reduce_487(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1294)
  def _reduce_488(val, _values, result)
                        # val[0] + val[2]
                    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1307)
  def _reduce_493(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1311)
  def _reduce_494(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 495 omitted

# reduce 496 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1319)
  def _reduce_497(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1328)
  def _reduce_501(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1332)
  def _reduce_502(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1337)
  def _reduce_503(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1346)
  def _reduce_507(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1350)
  def _reduce_508(val, _values, result)
                  	    result = val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1355)
  def _reduce_509(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1359)
  def _reduce_510(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1364)
  def _reduce_511(val, _values, result)
                        result = node :assoc, :key => val[0], :value => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1368)
  def _reduce_512(val, _values, result)
                        result = node :label_assoc, :key => val[0], :value => val[1]
                  
    result
  end
.,.,

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1378)
  def _reduce_516(val, _values, result)
                      
    result
  end
.,.,

# reduce 517 omitted

# reduce 518 omitted

# reduce 519 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1385)
  def _reduce_520(val, _values, result)
                        puts 4
                  
    result
  end
.,.,

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyParser
  end   # module Vienna


