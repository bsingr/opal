#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
  #
# $Id$
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6'
    Racc_Runtime_Revision = '$Id$'

    Racc_Runtime_Core_Version_R = '1.4.6'
    Racc_Runtime_Core_Revision_R = '$Id$'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end


# require 'ctokenizer'
require 'strscan'

module Vienna
  class RubyParser < Racc::Parser

module_eval(<<'...end ruby_parser.rb.y/module_eval...', 'ruby_parser.rb.y', 1428)


...end ruby_parser.rb.y/module_eval...
##### State transition tables begin ###

clist = [
'-10,-521,-66,442,442,144,-521,538,539,-93,538,539,-94,141,-521,-521',
'312,313,142,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-95,-521,-96,694,442,442,-521,-521,-521,-521,-521,-521',
'4,-87,312,313,442,597,780,-521,-521,-521,312,313,612,-521,-521,814,-521',
'145,-93,-455,-449,142,144,478,600,-521,-85,-97,614,-86,312,313,129,312',
'313,-87,819,263,333,265,263,449,265,453,-94,820,-449,474,475,811,333',
'-87,500,-80,-95,702,-100,292,324,327,-521,439,439,338,340,343,346,321',
'322,325,328,330,332,335,337,342,344,345,450,142,145,472,451,-521,-521',
'-521,-521,-88,-521,-521,-89,-521,-521,-521,-521,-521,439,439,-87,-521',
'-10,-521,-10,-521,-522,-97,703,-94,439,-522,-87,142,-95,450,-87,-85',
'594,-522,-522,142,596,806,-522,-522,-522,-522,-522,-522,-522,-522,-522',
'-522,-522,-522,-522,-522,-522,-522,-522,142,263,-86,265,-522,-522,-522',
'-522,-522,-522,-522,263,-87,265,-92,-94,860,-522,-522,-522,-99,549,-522',
'-522,-522,-97,-522,323,326,329,331,334,336,339,341,-522,-522,-522,-522',
'323,326,329,331,334,336,339,341,263,263,265,265,615,-100,498,142,803',
'-99,-94,803,-94,333,129,-95,-89,-95,498,498,614,324,327,-522,333,-522',
'338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,129,263',
'615,265,333,-522,-522,-522,-522,-522,-522,-522,333,-522,-522,-522,-522',
'-522,614,-269,-98,-522,-522,-522,-269,-522,-97,-92,-97,-91,498,-91,-269',
'-269,498,-515,-96,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269',
'-269,-269,-269,-269,-269,-269,-269,263,-450,265,801,-269,-269,-269,-269',
'-269,-269,-269,518,263,263,265,265,-444,-269,-269,-269,516,517,-269',
'-269,-269,799,-269,-450,-96,-90,538,539,263,142,265,-269,-269,-269,-269',
'-515,-518,-444,-444,507,508,-88,323,326,329,331,334,336,339,341,-515',
'834,-517,323,326,329,331,334,336,339,341,263,305,265,798,263,-269,265',
'-269,306,307,308,304,-269,323,326,329,331,334,336,339,341,323,326,329',
'331,334,336,339,341,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269',
'-269,-269,263,-273,265,-269,-269,-269,-273,-269,-517,312,313,-96,-446',
'-96,-273,-273,-89,797,615,-273,-273,-273,-273,-273,-273,-273,-273,-273',
'-273,-273,-273,-273,-273,-273,614,-273,-98,695,-446,305,-273,-273,-273',
'-273,-273,-273,306,307,308,304,-89,-523,142,-273,-273,-273,-523,827',
'759,-273,-273,460,-273,-273,-523,-523,759,771,544,-523,-523,-523,-523',
'-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,159',
'794,-273,-273,-523,-523,-523,-523,-523,-523,-523,355,793,356,-448,-518',
'-447,-523,-523,-523,-273,155,-523,-523,-523,759,-523,-89,607,263,-385',
'265,478,296,297,-523,-523,-523,-523,-89,-448,333,-447,-89,-273,-273',
'-273,-90,-273,-273,-273,-273,-273,-273,-273,-273,474,475,495,-273,333',
'-273,263,-273,265,-385,827,759,324,327,-523,333,-523,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,-385,899,-385,-385,-454',
'-523,-523,-523,-523,-523,-523,-523,607,-523,-523,-523,-523,-523,792',
'-521,607,-523,-523,-523,-521,-523,592,593,790,-454,-454,-273,-521,-521',
'788,-521,838,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-96,774,-273,-273,-521,-521,-521,-521',
'-521,-521,-521,-97,777,782,-452,-518,-521,-521,-521,-521,478,658,-521',
'-521,-521,142,-521,323,326,329,331,334,336,339,341,-521,-521,-521,-521',
'-521,-452,-521,-521,-254,474,475,323,326,329,331,334,336,339,341,-517',
'478,142,323,326,329,331,334,336,339,341,423,-441,-95,776,333,-521,21',
'-521,30,-444,44,50,324,327,474,475,522,338,340,343,346,-540,-540,-540',
'-540,-540,-540,-441,-521,-521,-521,-521,-521,-521,-521,-444,-521,-521',
'-521,-521,-521,841,8,842,-521,-521,-521,624,-521,-273,530,61,67,71,420',
'134,-93,-455,771,99,105,-99,549,142,25,607,34,42,48,56,65,68,72,626',
'-273,-273,529,142,100,108,5,9,16,23,27,378,607,-518,54,60,66,73,77,86',
'88,90,93,97,104,759,10,17,142,29,32,39,-100,422,-521,849,130,379,133',
'87,-451,96,103,312,313,13,18,24,28,33,40,46,119,-253,30,-80,44,50,323',
'326,329,331,334,336,339,341,-451,852,544,-521,607,57,333,722,142,607',
'771,-268,142,721,324,327,785,923,157,160,162,164,113,714,142,547,-521',
'705,-521,-521,-274,61,67,71,-255,134,-268,-268,142,99,105,-517,924,925',
'25,142,34,42,48,126,128,68,72,864,460,-274,-274,867,136,108,5,9,16,23',
'27,450,680,676,54,60,66,73,77,86,88,90,93,97,104,112,10,17,668,29,32',
'39,658,576,652,355,130,356,133,87,-253,96,103,139,114,13,18,24,28,33',
'40,46,21,333,30,649,44,50,577,578,878,324,327,142,880,118,478,633,623',
'423,-441,57,611,609,607,607,586,504,142,771,323,326,329,331,334,336',
'339,341,8,607,474,475,476,-514,256,-441,-441,61,67,71,142,134,505,506',
'-65,99,105,-274,-514,583,25,580,34,42,48,56,65,68,72,257,258,579,607',
'494,100,108,5,9,16,23,27,544,-274,-274,54,60,66,73,77,86,88,90,93,97',
'104,528,10,17,526,29,32,39,525,-274,524,-256,130,511,133,87,900,96,103',
'901,-304,13,18,24,28,33,40,46,21,903,30,142,44,50,-274,-274,416,323',
'326,329,331,334,336,339,341,-304,-304,57,333,803,907,803,263,-268,265',
'803,324,327,591,803,912,417,418,803,8,465,509,157,160,162,164,467,501',
'61,67,71,80,84,-268,-268,916,99,105,592,593,406,25,878,34,42,48,56,65',
'68,72,129,472,417,502,462,100,108,5,9,16,23,27,36,876,51,54,60,66,73',
'77,86,88,90,93,97,104,458,10,17,607,29,32,39,455,-454,454,448,74,428',
'82,87,926,96,103,110,607,13,18,24,28,33,40,46,21,427,30,423,44,50,-454',
'-454,420,465,472,157,160,162,164,467,478,413,878,57,503,412,141,609',
'494,387,320,142,323,326,329,331,334,336,339,341,8,303,-517,-518,474',
'475,333,803,944,61,67,71,80,134,324,327,681,99,105,803,803,803,25,878',
'34,42,48,56,65,68,72,24,299,295,142,294,100,108,5,9,16,23,27,36,147',
'51,54,60,66,73,77,86,88,90,93,97,104,305,10,17,140,29,32,39,306,307',
'308,304,74,111,82,87,803,96,103,110,,13,18,24,28,33,40,46,323,326,329',
'331,334,336,339,341,305,191,,199,204,,212,306,307,308,304,57,237,241',
',,494,254,178,182,187,196,201,206,209,213,217,,,688,689,465,690,157',
'160,162,164,467,32,39,,,323,326,329,331,334,336,339,341,469,,,,,466',
'191,,199,204,785,212,157,160,162,164,,237,241,,,,254,178,182,187,196',
'201,206,209,213,217,,,,,,,938,481,,,939,,465,,157,160,162,164,467,,218',
'221,654,,157,160,162,164,166,,255,469,,,,,466,,,,,169,,,,,156,159,,',
'181,185,190,194,198,203,208,211,215,219,129,603,489,,,604,,,155,,,163',
',,,218,221,,,658,,,119,,30,255,44,50,323,326,329,331,334,336,339,341',
',465,,157,160,162,164,467,,181,185,190,194,198,203,208,211,215,219,129',
'469,,113,,465,808,157,160,162,164,467,61,67,71,,134,,,,99,105,,,469',
'25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139',
'114,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,118,,,,237,241,57',
',406,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188,',
',,,,,222,226,229,232,234,239,244,247,248,252,180,184,189,193,197,202',
'207,210,214,223,227,230,233,236,,,,249,253,177,394,395,396,397,205,',
',398,399,401,228,77,403,242,90,93,405,104,,,,,,,,,218,221,,,,,,119,',
'30,255,44,50,,,,,,,,,,465,,157,160,162,164,467,,181,185,190,194,198',
'203,208,211,215,219,400,469,,113,465,,157,160,162,164,467,,61,67,71',
',134,,,,99,105,,469,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,,,,',
'237,241,57,,547,254,178,182,187,196,201,206,209,213,217,,,465,,157,160',
'162,164,467,,,,,,151,,157,160,162,164,166,469,,,,,,,,191,,199,204,169',
'212,,,,156,159,237,241,,,,254,178,182,187,196,201,206,209,213,217,,',
',,,155,640,481,163,,641,,465,628,157,160,162,164,467,,218,221,151,,157',
'160,162,164,166,,255,469,,,,,,,,,,169,,,,,156,159,,,181,185,190,194',
'198,203,208,211,215,219,129,742,481,,,744,,,155,,,163,,,,218,221,191',
',199,204,,212,,,255,,,237,241,,,,254,178,182,187,196,201,206,209,213',
'217,,,181,185,190,194,198,203,208,211,215,219,129,,151,,157,160,162',
'164,166,,,,,,,,,191,,199,204,169,212,,,,156,159,237,241,,,,254,178,182',
'187,196,201,206,209,213,217,,,,,,155,734,489,163,,735,,,628,,,,,,,218',
'221,,151,,157,160,162,164,166,255,,,,,,,,,,,,169,,,,,156,159,,181,185',
'190,194,198,203,208,211,215,219,129,731,481,,,732,,,,155,,,163,,,218',
'221,149,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190,194,198,203',
'208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,144,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114',
'13,18,24,28,33,40,46,,,,,,,145,,,,,,191,118,199,204,,212,,57,,129,,237',
'241,,,,254,178,182,187,196,201,206,209,213,217,654,,157,160,162,164',
'166,654,,157,160,162,164,166,,,,,,169,,,,,156,159,169,,,,,156,159,465',
',157,160,162,164,166,,,,,,,155,,,163,,,169,155,,,163,,159,,,643,489',
',,644,,,,,,,,,,218,221,,,155,,333,-515,,-515,255,-515,-515,,324,327',
',,,338,340,343,346,-540,-540,-540,-540,-540,-540,,181,185,190,194,198',
'203,208,211,215,219,129,,,-515,,,,,,,,,-515,-515,-515,,-515,,,,-515',
'-515,,,,-515,,-515,-515,-515,-515,-515,-515,-515,,,,,,-515,-515,-515',
'-515,-515,-515,-515,,,,-515,-515,-515,-515,-515,-515,-515,-515,-515',
'-515,-515,-515,-515,-515,,-515,-515,-515,,,,,-515,,-515,-515,,-515,',
'-515,-515,-515,-515,-515,-515,-515,-515,-515,119,,30,,44,50,-515,323',
'326,329,331,334,336,339,341,,,,,-515,,-515,,465,,157,160,162,164,166',
',,,,,,113,,,,,,169,,,61,67,71,159,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,155,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24',
'28,33,40,46,-514,,-514,,-514,-514,151,,157,160,162,164,166,118,,,,,',
'57,,129,,,,169,,,,,156,159,,,,,-514,,,,,,,,,-514,-514,-514,,-514,,,155',
'-514,-514,163,,,-514,,-514,-514,-514,-514,-514,-514,-514,,355,,356,',
'-514,-514,-514,-514,-514,-514,-514,,,,-514,-514,-514,-514,-514,-514',
'-514,-514,-514,-514,-514,-514,-514,-514,,-514,-514,-514,,,,,-514,,-514',
'-514,,-514,,-514,-514,-514,-514,-514,-514,-514,-514,-514,,,,,,,-514',
',,,,191,,199,204,,212,,,-514,,-514,237,241,,,,254,178,182,187,196,201',
'206,209,213,217,,,,,,,,,,,,654,,157,160,162,164,166,151,,157,160,162',
'164,166,,,,,191,169,199,204,,212,156,159,169,,,237,241,156,159,,254',
'178,182,187,196,201,206,209,213,217,,,155,,,163,711,489,,155,712,,163',
',,,,,,,218,221,151,,157,160,162,164,166,,255,,,,,,,,,,,169,,,,,156,159',
',,181,185,190,194,198,203,208,211,215,219,129,708,481,,,709,,,155,,',
'163,,,,218,221,191,,199,204,,212,,,255,,,237,241,,,,254,178,182,187',
'196,201,206,209,213,217,,,181,185,190,194,198,203,208,211,215,219,129',
',151,,157,160,162,164,166,,,,,,,,,191,,199,204,169,212,,,,156,159,237',
'241,,,,254,178,182,187,196,201,206,209,213,217,,,,,,155,643,489,163',
',644,,,,,,,,,,218,221,465,,157,160,162,164,166,,255,,,,,,,,,,,169,,',
',,,159,,,181,185,190,194,198,203,208,211,215,219,129,640,481,,,641,',
',155,,,,,,,218,221,,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190',
'194,198,203,208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103',
'139,114,13,18,24,28,33,40,46,119,,30,,44,50,465,,157,160,162,164,166',
'118,,,,,,57,,129,,,,169,,,,,,159,,,,,113,,,,,,,,,61,67,71,,134,,,155',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,',
'96,103,139,114,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,118,,,',
'237,241,57,,129,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,465',
',157,160,162,164,166,465,,157,160,162,164,166,,,,,191,169,199,204,,212',
',159,169,,,237,241,,159,,254,178,182,187,196,201,206,209,213,217,,,155',
',,,488,489,,155,492,,,,,,,,,,218,221,465,,157,160,162,164,166,,255,',
',,,,,,,,,169,,,,,,159,,,181,185,190,194,198,203,208,211,215,219,129',
'928,481,,,929,,,155,,,,,,,218,221,,,,,,119,,30,255,44,50,,,,,,,,,,,',
',,,,,,181,185,190,194,198,203,208,211,215,219,129,,,113,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,114,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212',
',118,,,,237,241,57,,129,254,178,182,187,196,201,206,209,213,217,465',
',157,160,162,164,166,465,,157,160,162,164,166,,,,,,169,,,,,,159,169',
',,,,,159,,,,,,,,,,,,,,155,,,,,,,155,,,,,,,,941,489,,,942,,,,,,,,,,218',
'221,,,,,,,,-518,255,-518,,-518,-518,,,,,,,,,,,,,,,,181,185,190,194,198',
'203,208,211,215,219,129,,-98,695,,-518,,,,,,,,,-518,-518,-518,,-518',
',,,-518,-518,,,,-518,,-518,-518,-518,-518,-518,-518,-518,,,,,,-518,-518',
'-518,-518,-518,-518,-518,,,,-518,-518,-518,-518,-518,-518,-518,-518',
'-518,-518,-518,-518,-518,-518,,-518,-518,-518,,,,,-518,,-518,-518,,-518',
',-518,-518,-518,-518,-518,-518,-518,-518,-518,,,,,,,191,,199,204,,212',
',,,,,237,241,-518,,-518,254,178,182,187,196,201,206,209,213,217,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,480,481,,,485',
',,,,,,,,,218,221,,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190',
'194,198,203,208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103',
'139,114,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,118,,,,,,57,,129',
',,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40',
'46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201,206',
'209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239,244',
'247,248,252,180,184,189,193,197,202,207,210,214,223,227,230,233,236',
',,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238,242,,,250',
',,,,,,,,,218,221,,359,21,,30,333,44,50,255,,,18,,324,327,,,,338,340',
'343,346,-540,-540,-540,-540,-540,-540,181,185,190,194,198,203,208,211',
'215,219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,365,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,323,326,329,331,334,336,339,341,57,,,,,,,,,,,,,,,',
',,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,',
',,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,,,,,191',
',199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201,206,209,213',
'217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239,244,247,248',
'252,180,184,189,193,197,202,207,210,214,223,227,230,233,236,,,,249,253',
'177,186,192,195,200,205,,,216,220,225,228,,238,242,,,250,,,,,,,,,,218',
'221,,359,21,,30,333,44,50,255,,,18,,324,327,,,,338,340,343,346,-540',
'-540,-540,-540,-540,-540,181,185,190,194,198,203,208,211,215,219,8,',
',,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44',
'50,,,,,323,326,329,331,334,336,339,341,57,,,,,,,,,,,,,,,,,,8,,,,,,,',
',61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50',
',,,,,,333,,,,,,57,,324,327,,,,338,340,343,346,-540,-540,-540,-540,-540',
'-540,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,,,,,,,57,323,326,329,331,334,336,339,341,,,,,,,',
',,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,',
',,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21',
',30,,44,50,,,,,,,333,,,,,,57,,324,327,,,,338,340,343,346,-540,-540,-540',
'-540,-540,-540,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,323,326,329,331,334,336,339,341',
',,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,333,,,,,,57,,324,327,,,,338,340,343,346,321,322',
'325,328,330,332,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,323,326,329,331,334,336,339,341',
',,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,333,,,,,,57,,324,327,,,,338,340,343,346,321,322',
'325,328,330,332,335,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42',
'48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28',
'33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,323,326,329,331,334,336,339',
'341,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40',
'46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201,206',
'209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239,244',
'247,248,252,180,184,189,193,197,202,207,210,214,223,227,230,233,236',
',,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238,242,289,,250',
',,,,,,,,,218,221,,,191,,199,204,,212,255,,,18,,237,241,,,,254,178,182',
'187,196,201,206,209,213,217,181,185,190,194,198,203,208,211,215,219',
'179,183,188,,,,,,,222,226,229,232,234,239,244,247,248,252,180,184,189',
'193,197,202,207,210,214,223,227,230,233,236,,,,249,253,177,186,192,195',
'200,205,,,216,220,225,228,,238,242,,,250,,,,,,,,,,218,221,,359,21,,30',
',44,50,255,,,18,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215',
'219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,237',
'241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,191,,199,204,,212,,,,,,237,241,,,,254,178,182,187,196,201,206',
'209,213,217,,,,,,,,603,489,,,604,,,,,,,,,,218,221,,,,,,,,,255,,,,,,',
',,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219,603,489,,,604,',
',,,,,,,,218,221,,359,21,,30,,44,50,255,,,,,,,,,,,,,,,,,,,,181,185,190',
'194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18',
'24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,',
',,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44',
'50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,365,87,,96,103,110',
',13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,237',
'241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188',
',,,,,,222,226,229,232,234,239,244,247,248,252,180,184,189,193,197,202',
'207,210,214,223,227,230,233,236,,,,249,253,177,186,192,195,200,205,',
',216,220,225,228,,238,242,243,245,250,251,,,,,,,,,218,221,,359,21,,30',
',44,50,255,,,,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219',
'8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30',
',44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,',
'99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
'80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74',
',365,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24',
'28,33,40,46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187',
'196,201,206,209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232',
'234,239,244,247,248,252,180,184,189,193,197,202,207,210,214,223,227',
'230,233,236,,,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238',
'242,,,250,,,,,,,,,,218,221,,359,21,,30,,44,50,255,,,,,,,,,,,,,,,,,,',
',181,185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134,',
',,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
'80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74',
',82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,',
',,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24',
'28,33,40,46,15,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,779,,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,',
'54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87',
',96,103,639,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,434,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118',
',,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,',
'44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,',
',,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,',
'96,103,139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57',
',,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46',
'21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,',
',,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42',
'48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,21,,30,,44',
'50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,',
'134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,',
',54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118,,',
',,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,,13,18,24,28,33,40,46,119,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,',
',,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,',
',25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,',
',,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,114,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103',
'139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,',
',,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,',
'44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,',
'134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,639,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118',
',,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,434,,13,18,24,28,33,40,46,119,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,434,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,639,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,,,,,,,,333,,,,,,,,324,327,,,57,338,340,343,346,321,322',
'325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343',
'346,321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,',
',,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333,,',
',,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,',
',,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326',
'329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336',
'339,341,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332',
'335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325',
'328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,342,344,345,,,,,,,,,,,,',
',,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329',
'331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339',
'341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,333,,,,,,,,324',
'327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333',
',,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332',
'335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325',
'328,330,332,335,337,342,344,345,,,,,,,,,,,,,,,,,323,326,329,331,334',
'336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,',
',,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,',
'323,326,329,331,334,336,339,341,333,,,,,,,,324,327,,,,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324',
'327,,,,338,340,343,346,321,322,325,328,330,332,335,337,-540,-540,333',
',,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,,762,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,',
',,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323',
'326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336',
'339,341,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332',
'335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325',
'328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,342,344,345,,,,,,,,,,,,',
',,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329',
'331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339',
'341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,333,,,,,,,,324',
'327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333',
',,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,333,665,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330',
'332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322',
'325,328,330,332,335,337,342,344,345,,762,,,,,,,,,,,,,,,323,326,329,331',
'334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341',
',,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,',
',,,-232,323,326,329,331,334,336,339,341,333,278,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,-540,-540,,,,,,,113,,,,',
',,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,282,,133,87,278,96,103,,,13,18,24,28,33,40,46,,,,,,,,,,,409,323',
'326,329,331,334,336,339,341,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,281',
'77,86,88,90,93,97,104,278,10,17,,29,32,39,375,,,,282,,133,87,,96,103',
',,13,18,24,28,33,40,46,,,,,,113,,,,,514,,,,61,67,71,,134,,,,99,105,',
',,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60',
'66,281,77,376,88,90,93,377,104,,10,17,,29,32,39,,,,,373,,133,87,,96',
'103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103,113,,13,18,24',
'28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,278,,54,60,66,281,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,282,,283,87,,96,103,285,113,13,18,24,28,33,40,46',
',61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,863,,133,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,',
'278,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,351,,82',
'87,,96,103,110,113,13,18,24,28,33,40,46,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66',
'281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103,113',
',13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,376,88,90,93',
'377,104,,10,17,,29,32,39,,,,,373,,133,87,,96,103,113,,13,18,24,28,33',
'40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,',
'29,32,39,,,,,282,,283,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23',
'27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282',
',283,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,',
',25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60',
'66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103',
'113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,281,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,895,,133,87,,96,103,,,13,18,24,28,33,40',
'46' ]
        racc_action_table = arr = Array.new(23301, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'84,480,740,356,355,271,480,309,309,350,736,736,839,8,480,480,368,368',
'8,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,734,480',
'480,480,472,144,480,480,480,480,480,480,1,711,436,436,145,374,654,480',
'480,480,728,728,383,480,480,686,480,271,64,64,397,683,11,269,374,480',
'350,735,383,839,627,627,271,601,601,711,696,309,553,309,736,151,736',
'152,697,697,397,269,269,682,574,734,269,740,488,488,38,38,574,574,480',
'356,355,574,574,574,574,574,574,574,574,574,574,574,574,574,574,574',
'654,368,11,701,152,480,480,480,480,480,480,480,735,480,480,480,480,480',
'472,144,711,480,84,480,84,480,481,492,492,950,145,481,711,436,941,151',
'711,64,373,481,481,728,373,678,481,481,481,481,481,481,481,481,481,481',
'481,481,481,481,481,481,481,627,601,697,601,481,481,481,481,481,481',
'481,374,488,374,38,775,775,481,481,481,320,320,481,481,481,942,481,553',
'553,553,553,553,553,553,553,481,481,481,481,574,574,574,574,574,574',
'574,574,597,22,597,22,389,349,268,574,677,579,950,675,950,568,706,941',
'492,941,848,298,389,568,568,481,556,481,568,568,568,568,568,568,568',
'568,568,568,568,568,568,568,568,707,318,761,318,562,481,481,481,481',
'481,481,481,718,481,481,481,481,481,761,88,732,481,481,481,88,481,942',
'349,942,320,884,579,88,88,725,377,731,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,268,399,268,673,88,88,88,88,88,88,88,289,848,298',
'848,298,377,88,88,88,289,289,88,88,88,671,88,399,938,732,314,314,629',
'710,629,88,88,88,88,377,732,377,377,278,278,731,568,568,568,568,568',
'568,568,568,377,725,731,556,556,556,556,556,556,556,556,884,584,884',
'670,725,88,725,88,584,584,584,584,88,562,562,562,562,562,562,562,562',
'718,718,718,718,718,718,718,718,88,88,88,88,88,88,88,88,88,88,88,88',
'314,485,314,88,88,88,485,88,938,267,267,938,395,938,485,485,712,669',
'384,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,384',
'485,485,485,395,363,485,485,485,485,485,485,363,363,363,363,712,484',
'666,485,485,485,484,704,704,485,485,166,485,744,484,484,887,715,887',
'484,484,484,484,484,484,484,484,484,484,484,484,484,484,484,484,484',
'166,664,744,744,484,484,484,484,484,484,484,79,663,79,396,744,394,484',
'484,484,485,166,484,484,484,720,484,712,723,366,829,366,266,44,44,484',
'484,484,484,712,396,719,394,712,485,485,485,485,485,485,485,485,485',
'485,485,485,266,266,266,485,552,485,748,485,748,829,936,936,552,552',
'484,302,484,552,552,552,552,552,552,552,552,552,552,552,552,552,552',
'552,829,862,829,829,280,484,484,484,484,484,484,484,724,484,484,484',
'484,484,662,640,727,484,484,484,640,484,862,862,660,280,280,939,640',
'640,659,742,730,640,640,640,640,640,640,640,640,640,640,640,640,640',
'640,640,640,640,640,640,939,939,640,640,640,640,640,640,640,644,644',
'657,401,939,742,640,640,640,521,655,640,640,640,733,640,719,719,719',
'719,719,719,719,719,640,640,640,640,742,401,742,742,650,521,521,552',
'552,552,552,552,552,552,552,742,293,642,302,302,302,302,302,302,302',
'302,638,403,643,643,551,640,141,640,141,405,141,141,551,551,293,293',
'293,551,551,551,551,551,551,551,551,551,551,403,640,640,640,640,640',
'640,640,405,640,640,640,640,640,737,141,738,640,640,640,393,640,709',
'300,141,141,141,636,141,127,127,635,141,141,427,427,632,141,621,141',
'141,141,141,141,141,141,393,709,709,300,745,141,141,141,141,141,141',
'141,91,747,709,141,141,141,141,141,141,141,141,141,141,141,610,141,141',
'587,141,141,141,123,123,708,754,141,91,141,141,398,141,141,59,59,141',
'141,141,141,141,141,141,406,757,406,585,406,406,551,551,551,551,551',
'551,551,551,398,760,546,708,545,141,567,531,766,768,770,277,141,530',
'567,567,658,892,658,658,658,658,406,513,512,510,708,499,708,708,511',
'406,406,406,778,406,277,277,486,406,406,708,892,892,406,471,406,406',
'406,406,406,406,406,781,467,511,511,786,406,406,406,406,406,406,406',
'465,464,461,406,406,406,406,406,406,406,406,406,406,406,406,406,406',
'450,406,406,406,447,348,437,376,406,376,406,406,432,406,406,406,406',
'406,406,406,406,406,406,406,70,569,70,430,70,70,348,348,810,569,569',
'424,813,406,224,408,392,391,376,406,382,381,826,380,364,276,406,830',
'567,567,567,567,567,567,567,567,70,831,224,224,224,376,19,376,376,70',
'70,70,361,70,276,276,360,70,70,596,376,358,70,352,70,70,70,70,70,70',
'70,19,19,351,846,317,70,70,70,70,70,70,70,316,596,596,70,70,70,70,70',
'70,70,70,70,70,70,299,70,70,297,70,70,70,296,926,294,861,70,282,70,70',
'863,70,70,865,107,70,70,70,70,70,70,70,264,866,264,281,264,264,926,926',
'117,569,569,569,569,569,569,569,569,107,107,70,572,869,870,871,70,893',
'70,872,572,572,369,873,874,117,117,875,264,808,279,808,808,808,808,808',
'272,264,264,264,264,264,893,893,877,264,264,369,369,274,264,879,264',
'264,264,264,264,264,264,270,175,272,272,167,264,264,264,264,264,264',
'264,264,808,264,264,264,264,264,264,264,264,264,264,264,264,161,264',
'264,889,264,264,264,154,894,153,150,264,137,264,264,895,264,264,264',
'898,264,264,264,264,264,264,264,589,130,589,125,589,589,894,894,120',
'466,693,466,466,466,466,466,275,116,915,264,275,115,113,922,264,101',
'74,73,572,572,572,572,572,572,572,572,589,51,928,929,275,275,575,930',
'931,589,589,589,589,589,575,575,466,589,589,932,933,934,589,935,589',
'589,589,589,589,589,589,47,46,43,940,40,589,589,589,589,589,589,589',
'589,12,589,589,589,589,589,589,589,589,589,589,589,589,52,589,589,7',
'589,589,589,52,52,52,52,589,4,589,589,951,589,589,589,,589,589,589,589',
'589,589,589,273,273,273,273,273,273,273,273,741,923,,923,923,,923,741',
'741,741,741,589,923,923,,,589,923,923,923,923,923,923,923,923,923,923',
',,475,475,469,475,469,469,469,469,469,475,475,,,575,575,575,575,575',
'575,575,575,469,,,,,469,593,,593,593,867,593,867,867,867,867,,593,593',
',,,593,593,593,593,593,593,593,593,593,593,,,,,,,923,923,,,923,,169',
',169,169,169,169,169,,923,923,439,,439,439,439,439,439,,923,169,,,,',
'169,,,,,439,,,,,439,439,,,923,923,923,923,923,923,923,923,923,923,923',
'593,593,,,593,,,439,,,439,,,,593,593,,,439,,,108,,108,593,108,108,259',
'259,259,259,259,259,259,259,,680,,680,680,680,680,680,,593,593,593,593',
'593,593,593,593,593,593,593,680,,108,,811,680,811,811,811,811,811,108',
'108,108,,108,,,,108,108,,,811,108,,108,108,108,108,108,108,108,,,,,',
'108,108,108,108,108,108,108,,,,108,108,108,108,108,108,108,108,108,108',
'108,108,108,108,,108,108,108,,,,,108,,108,108,,108,108,108,108,108,108',
'108,108,108,108,108,,,,,,,106,,106,106,,106,,108,,,,106,106,108,,108',
'106,106,106,106,106,106,106,106,106,106,,,,,,,,,,,106,106,106,,,,,,',
'106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,106,106,106,106,106,106,,,,106,106,106,106,106,106,106,106,,,106',
'106,106,106,106,106,106,106,106,106,106,,,,,,,,,106,106,,,,,,319,,319',
'106,319,319,,,,,,,,,,878,,878,878,878,878,878,,106,106,106,106,106,106',
'106,106,106,106,106,878,,319,681,,681,681,681,681,681,,319,319,319,',
'319,,,,319,319,,681,,319,,319,319,319,319,319,319,319,,,,,,319,319,319',
'319,319,319,319,,,,319,319,319,319,319,319,319,319,319,319,319,,319',
'319,,319,319,319,,,,,319,,319,319,,319,319,,,319,319,319,319,319,319',
'319,,,,,,,416,,416,416,,416,,,,,,416,416,319,,319,416,416,416,416,416',
'416,416,416,416,416,,,916,,916,916,916,916,916,,,,,,764,,764,764,764',
'764,764,916,,,,,,,,591,,591,591,764,591,,,,764,764,591,591,,,,591,591',
'591,591,591,591,591,591,591,591,,,,,,764,416,416,764,,416,,876,764,876',
'876,876,876,876,,416,416,149,,149,149,149,149,149,,416,876,,,,,,,,,',
'149,,,,,149,149,,,416,416,416,416,416,416,416,416,416,416,416,591,591',
',,591,,,149,,,149,,,,591,591,578,,578,578,,578,,,591,,,578,578,,,,578',
'578,578,578,578,578,578,578,578,578,,,591,591,591,591,591,591,591,591',
'591,591,591,,402,,402,402,402,402,402,,,,,,,,,576,,576,576,402,576,',
',,402,402,576,576,,,,576,576,576,576,576,576,576,576,576,576,,,,,,402',
'578,578,402,,578,,,402,,,,,,,578,578,,13,,13,13,13,13,13,578,,,,,,,',
',,,,13,,,,,13,13,,578,578,578,578,578,578,578,578,578,578,578,576,576',
',,576,,,,13,,,13,,,576,576,13,,,,,14,,14,576,14,14,,,,,,,,,,,,,,,,,',
'576,576,576,576,576,576,576,576,576,576,576,,,14,,,,,,,,,14,14,14,,14',
',,,14,14,,,,14,,14,14,14,14,14,14,14,,14,,,,14,14,14,14,14,14,14,,,',
'14,14,14,14,14,14,14,14,14,14,14,14,14,14,,14,14,14,,,,,14,,14,14,,14',
'14,14,14,14,14,14,14,14,14,14,,,,,,,14,,,,,,418,14,418,418,,418,,14',
',14,,418,418,,,,418,418,418,418,418,418,418,418,418,418,788,,788,788',
'788,788,788,901,,901,901,901,901,901,,,,,,788,,,,,788,788,901,,,,,901',
'901,806,,806,806,806,806,806,,,,,,,788,,,788,,,806,901,,,901,,806,,',
'418,418,,,418,,,,,,,,,,418,418,,,806,,550,97,,97,418,97,97,,550,550',
',,,550,550,550,550,550,550,550,550,550,550,,418,418,418,418,418,418',
'418,418,418,418,418,,,97,,,,,,,,,97,97,97,,97,,,,97,97,,,,97,,97,97',
'97,97,97,97,97,,,,,,97,97,97,97,97,97,97,,,,97,97,97,97,97,97,97,97',
'97,97,97,97,97,97,,97,97,97,,,,,97,,97,97,,97,,97,97,97,97,97,97,97',
'97,97,602,,602,,602,602,97,550,550,550,550,550,550,550,550,,,,,97,,97',
',912,,912,912,912,912,912,,,,,,,602,,,,,,912,,,602,602,602,912,602,',
',,602,602,,,,602,,602,602,602,602,602,602,602,,,912,,,602,602,602,602',
'602,602,602,,,,602,602,602,602,602,602,602,602,602,602,602,602,602,602',
',602,602,602,,,,,602,,602,602,,602,602,602,602,602,602,602,602,602,602',
'602,86,,86,,86,86,628,,628,628,628,628,628,602,,,,,,602,,602,,,,628',
',,,,628,628,,,,,86,,,,,,,,,86,86,86,,86,,,628,86,86,628,,,86,,86,86',
'86,86,86,86,86,,86,,86,,86,86,86,86,86,86,86,,,,86,86,86,86,86,86,86',
'86,86,86,86,86,86,86,,86,86,86,,,,,86,,86,86,,86,,86,86,86,86,86,86',
'86,86,86,,,,,,,86,,,,,506,,506,506,,506,,,86,,86,506,506,,,,506,506',
'506,506,506,506,506,506,506,506,,,,,,,,,,,,782,,782,782,782,782,782',
'462,,462,462,462,462,462,,,,,504,782,504,504,,504,782,782,462,,,504',
'504,462,462,,504,504,504,504,504,504,504,504,504,504,,,782,,,782,506',
'506,,462,506,,462,,,,,,,,506,506,455,,455,455,455,455,455,,506,,,,,',
',,,,,455,,,,,455,455,,,506,506,506,506,506,506,506,506,506,506,506,504',
'504,,,504,,,455,,,455,,,,504,504,502,,502,502,,502,,,504,,,502,502,',
',,502,502,502,502,502,502,502,502,502,502,,,504,504,504,504,504,504',
'504,504,504,504,504,,801,,801,801,801,801,801,,,,,,,,,501,,501,501,801',
'501,,,,801,801,501,501,,,,501,501,501,501,501,501,501,501,501,501,,',
',,,801,502,502,801,,502,,,,,,,,,,502,502,799,,799,799,799,799,799,,502',
',,,,,,,,,,799,,,,,,799,,,502,502,502,502,502,502,502,502,502,502,502',
'501,501,,,501,,,799,,,,,,,501,501,,,,,,605,,605,501,605,605,,,,,,,,',
',,,,,,,,,501,501,501,501,501,501,501,501,501,501,501,,,605,,,,,,,,,605',
'605,605,,605,,,,605,605,,,,605,,605,605,605,605,605,605,605,,,,,,605',
'605,605,605,605,605,605,,,,605,605,605,605,605,605,605,605,605,605,605',
'605,605,605,,605,605,605,,,,,605,,605,605,,605,605,605,605,605,605,605',
'605,605,605,605,487,,487,,487,487,903,,903,903,903,903,903,605,,,,,',
'605,,605,,,,903,,,,,,903,,,,,487,,,,,,,,,487,487,487,,487,,,903,487',
'487,,,,487,,487,487,487,487,487,487,487,,,,,,487,487,487,487,487,487',
'487,,,,487,487,487,487,487,487,487,487,487,487,487,487,487,487,,487',
'487,487,,,,,487,,487,487,,487,487,487,487,487,487,487,487,487,487,487',
',,,,,,258,,258,258,,258,,487,,,,258,258,487,,487,258,258,258,258,258',
'258,258,258,258,258,,,,,,,,,,,,803,,803,803,803,803,803,944,,944,944',
'944,944,944,,,,,899,803,899,899,,899,,803,944,,,899,899,,944,,899,899',
'899,899,899,899,899,899,899,899,,,803,,,,258,258,,944,258,,,,,,,,,,258',
'258,907,,907,907,907,907,907,,258,,,,,,,,,,,907,,,,,,907,,,258,258,258',
'258,258,258,258,258,258,258,258,899,899,,,899,,,907,,,,,,,899,899,,',
',,,5,,5,899,5,5,,,,,,,,,,,,,,,,,,899,899,899,899,899,899,899,899,899',
'899,899,,,5,,,,,,,,,5,5,5,,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5',
'5,5,5,,,,5,5,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,,,,5,,5,5,,5,5,5,5,5,5',
'5,5,5,5,5,,,,,,,925,,925,925,,925,,5,,,,925,925,5,,5,925,925,925,925',
'925,925,925,925,925,925,790,,790,790,790,790,790,458,,458,458,458,458',
'458,,,,,,790,,,,,,790,458,,,,,,458,,,,,,,,,,,,,,790,,,,,,,458,,,,,,',
',925,925,,,925,,,,,,,,,,925,925,,,,,,,,641,925,641,,641,641,,,,,,,,',
',,,,,,,925,925,925,925,925,925,925,925,925,925,925,,641,641,,641,,,',
',,,,,641,641,641,,641,,,,641,641,,,,641,,641,641,641,641,641,641,641',
',,,,,641,641,641,641,641,641,641,,,,641,641,641,641,641,641,641,641',
'641,641,641,641,641,641,,641,641,641,,,,,641,,641,641,,641,,641,641',
'641,641,641,641,641,641,641,,,,,,,256,,256,256,,256,,,,,,256,256,641',
',641,256,256,256,256,256,256,256,256,256,256,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,256,256,,,256,,,,,,,,,,256,256',
',,,,,479,,479,256,479,479,,,,,,,,,,,,,,,,,,256,256,256,256,256,256,256',
'256,256,256,256,,,479,,,,,,,,,479,479,479,,479,,,,479,479,,,,479,,479',
'479,479,479,479,479,479,,,,,,479,479,479,479,479,479,479,,,,479,479',
'479,479,479,479,479,479,479,479,479,479,479,479,,479,479,479,,,,,479',
',479,479,,479,479,479,479,479,479,479,479,479,479,479,388,388,,388,',
'388,388,,,,,,,479,,,,,,479,,479,,,,,,,,,,,,,,,,388,,,,,,,,,388,388,388',
'388,388,,,,388,388,,,,388,,388,388,388,388,388,388,388,,,,,,388,388',
'388,388,388,388,388,388,,388,388,388,388,388,388,388,388,388,388,388',
'388,,388,388,,388,388,388,,,,,388,,388,388,,388,388,388,,388,388,388',
'388,388,388,388,,,,,80,,80,80,,80,,,,,,80,80,,,388,80,80,80,80,80,80',
'80,80,80,80,,,,,,,,,,,80,80,80,,,,,,,80,80,80,80,80,80,80,80,80,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,,,,80,80,80,80,80,80,80,80,,',
'80,80,80,80,,80,80,,,80,,,,,,,,,,80,80,,82,82,,82,554,82,82,80,,,80',
',554,554,,,,554,554,554,554,554,554,554,554,554,554,80,80,80,80,80,80',
'80,80,80,80,82,,,,,,,,,82,82,82,82,82,,,,82,82,,,,82,,82,82,82,82,82',
'82,82,,,,,,82,82,82,82,82,82,82,82,,82,82,82,82,82,82,82,82,82,82,82',
'82,,82,82,,82,82,82,,,,,82,,82,82,,82,82,82,,82,82,82,82,82,82,82,497',
'497,,497,,497,497,,,,,554,554,554,554,554,554,554,554,82,,,,,,,,,,,',
',,,,,,497,,,,,,,,,497,497,497,497,497,,,,497,497,,,,497,,497,497,497',
'497,497,497,497,,,,,,497,497,497,497,497,497,497,497,,497,497,497,497',
'497,497,497,497,497,497,497,497,,497,497,,497,497,497,,,,,497,,497,497',
',497,497,497,,497,497,497,497,497,497,497,,,,,515,,515,515,,515,,,,',
',515,515,,,497,515,515,515,515,515,515,515,515,515,515,,,,,,,,,,,515',
'515,515,,,,,,,515,515,515,515,515,515,515,515,515,515,515,515,515,515',
'515,515,515,515,515,515,515,515,515,515,,,,515,515,515,515,515,515,515',
'515,,,515,515,515,515,,515,515,,,515,,,,,,,,,,515,515,,453,453,,453',
'557,453,453,515,,,515,,557,557,,,,557,557,557,557,557,557,557,557,557',
'557,515,515,515,515,515,515,515,515,515,515,453,,,,,,,,,453,453,453',
'453,453,,,,453,453,,,,453,,453,453,453,453,453,453,453,,,,,,453,453',
'453,453,453,453,453,453,,453,453,453,453,453,453,453,453,453,453,453',
'453,,453,453,,453,453,453,,,,,453,,453,453,,453,453,453,,453,453,453',
'453,453,453,453,527,527,,527,,527,527,,,,,557,557,557,557,557,557,557',
'557,453,,,,,,,,,,,,,,,,,,527,,,,,,,,,527,527,527,527,527,,,,527,527',
',,,527,,527,527,527,527,527,527,527,,,,,,527,527,527,527,527,527,527',
'527,,527,527,527,527,527,527,527,527,527,527,527,527,,527,527,,527,527',
'527,,,,,527,,527,527,,527,527,527,,527,527,527,527,527,527,527,451,451',
',451,,451,451,,,,,,,559,,,,,,527,,559,559,,,,559,559,559,559,559,559',
'559,559,559,559,,451,,,,,,,,,451,451,451,451,451,,,,451,451,,,,451,',
'451,451,451,451,451,451,451,,,,,,451,451,451,451,451,451,451,451,,451',
'451,451,451,451,451,451,451,451,451,451,451,,451,451,,451,451,451,,',
',,451,,451,451,,451,451,451,,451,451,451,451,451,451,451,444,444,,444',
',444,444,,,,,,,,,,,,,451,559,559,559,559,559,559,559,559,,,,,,,,,,444',
',,,,,,,,444,444,444,444,444,,,,444,444,,,,444,,444,444,444,444,444,444',
'444,,,,,,444,444,444,444,444,444,444,444,,444,444,444,444,444,444,444',
'444,444,444,444,444,,444,444,,444,444,444,,,,,444,,444,444,,444,444',
'444,,444,444,444,444,444,444,444,95,95,,95,,95,95,,,,,,,561,,,,,,444',
',561,561,,,,561,561,561,561,561,561,561,561,561,561,,95,,,,,,,,,95,95',
'95,95,95,,,,95,95,,,,95,,95,95,95,95,95,95,95,,,,,,95,95,95,95,95,95',
'95,95,,95,95,95,95,95,95,95,95,95,95,95,95,,95,95,,95,95,95,,,,,95,',
'95,95,,95,95,95,,95,95,95,95,95,95,95,441,441,,441,,441,441,,,,,,,,',
',,,,95,561,561,561,561,561,561,561,561,,,,,,,,,,441,,,,,,,,,441,441',
'441,441,441,,,,441,441,,,,441,,441,441,441,441,441,441,441,,,,,,441',
'441,441,441,441,441,441,441,,441,441,441,441,441,441,441,441,441,441',
'441,441,,441,441,,441,441,441,,,,,441,,441,441,,441,441,441,,441,441',
'441,441,441,441,441,540,540,,540,,540,540,,,,,,,564,,,,,,441,,564,564',
',,,564,564,564,564,564,564,564,564,564,564,,540,,,,,,,,,540,540,540',
'540,540,,,,540,540,,,,540,,540,540,540,540,540,540,540,,,,,,540,540',
'540,540,540,540,540,540,,540,540,540,540,540,540,540,540,540,540,540',
'540,,540,540,,540,540,540,,,,,540,,540,540,,540,540,540,,540,540,540',
'540,540,540,540,543,543,,543,,543,543,,,,,,,,,,,,,540,564,564,564,564',
'564,564,564,564,,,,,,,,,,543,,,,,,,,,543,543,543,543,543,,,,543,543',
',,,543,,543,543,543,543,543,543,543,,,,,,543,543,543,543,543,543,543',
'543,,543,543,543,543,543,543,543,543,543,543,543,543,,543,543,,543,543',
'543,,,,,543,,543,543,,543,543,543,,543,543,543,543,543,543,543,581,581',
',581,,581,581,,,,,,,566,,,,,,543,,566,566,,,,566,566,566,566,566,566',
'566,566,566,566,566,581,,,,,,,,,581,581,581,581,581,,,,581,581,,,,581',
',581,581,581,581,581,581,581,,,,,,581,581,581,581,581,581,581,581,,581',
'581,581,581,581,581,581,581,581,581,581,581,,581,581,,581,581,581,,',
',,581,,581,581,,581,581,581,,581,581,581,581,581,581,581,582,582,,582',
',582,582,,,,,,,,,,,,,581,566,566,566,566,566,566,566,566,,,,,,,,,,582',
',,,,,,,,582,582,582,582,582,,,,582,582,,,,582,,582,582,582,582,582,582',
'582,,,,,,582,582,582,582,582,582,582,582,,582,582,582,582,582,582,582',
'582,582,582,582,582,,582,582,,582,582,582,,,,,582,,582,582,,582,582',
'582,,582,582,582,582,582,582,582,,,,,36,,36,36,,36,,,,,,36,36,,,582',
'36,36,36,36,36,36,36,36,36,36,,,,,,,,,,,36,36,36,,,,,,,36,36,36,36,36',
'36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,,,,36,36,36',
'36,36,36,36,36,,,36,36,36,36,,36,36,36,,36,,,,,,,,,,36,36,,,583,,583',
'583,,583,36,,,36,,583,583,,,,583,583,583,583,583,583,583,583,583,583',
'36,36,36,36,36,36,36,36,36,36,583,583,583,,,,,,,583,583,583,583,583',
'583,583,583,583,583,583,583,583,583,583,583,583,583,583,583,583,583',
'583,583,,,,583,583,583,583,583,583,583,583,,,583,583,583,583,,583,583',
',,583,,,,,,,,,,583,583,,474,474,,474,,474,474,583,,,583,,,,,,,,,,,,',
',,,,583,583,583,583,583,583,583,583,583,583,474,,,,,,,,,474,474,474',
'474,474,,,,474,474,,,,474,,474,474,474,474,474,474,474,,,,,,474,474',
'474,474,474,474,474,474,,474,474,474,474,474,474,474,474,474,474,474',
'474,,474,474,,474,474,474,,,,,474,,474,474,,474,474,474,,474,474,474',
'474,474,474,474,759,759,,759,,759,759,,,,,,,,,,,,,474,,,,,,,,,,,,,,',
',,,759,,,,,,,,,759,759,759,759,759,,,,759,759,,,,759,,759,759,759,759',
'759,759,759,,,,,,759,759,759,759,759,759,759,759,,759,759,759,759,759',
'759,759,759,759,759,759,759,,759,759,,759,759,759,,,,,759,,759,759,',
'759,759,759,,759,759,759,759,759,759,759,,,,,379,,379,379,,379,,,,,',
'379,379,,,759,379,379,379,379,379,379,379,379,379,379,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,378,,378,378,,378,,,,,,378,378,,,,378,378,378,378,378',
'378,378,378,378,378,,,,,,,,379,379,,,379,,,,,,,,,,379,379,,,,,,,,,379',
',,,,,,,,,,,,,,,,,,,379,379,379,379,379,379,379,379,379,379,378,378,',
',378,,,,,,,,,,378,378,,917,917,,917,,917,917,378,,,,,,,,,,,,,,,,,,,',
'378,378,378,378,378,378,378,378,378,378,917,,,,,,,,,917,917,917,917',
'917,,,,917,917,,,,917,,917,917,917,917,917,917,917,,,,,,917,917,917',
'917,917,917,917,917,,917,917,917,917,917,917,917,917,917,917,917,917',
',917,917,,917,917,917,,,,,917,,917,917,,917,917,917,,917,917,917,917',
'917,917,917,749,749,,749,,749,749,,,,,,,,,,,,,917,,,,,,,,,,,,,,,,,,749',
',,,,,,,,749,749,749,749,749,,,,749,749,,,,749,,749,749,749,749,749,749',
'749,,,,,,749,749,749,749,749,749,749,749,,749,749,749,749,749,749,749',
'749,749,749,749,749,,749,749,,749,749,749,,,,,749,,749,749,,749,749',
'749,,749,749,749,749,749,749,749,365,365,,365,,365,365,,,,,,,,,,,,,749',
',,,,,,,,,,,,,,,,,365,,,,,,,,,365,365,365,365,365,,,,365,365,,,,365,',
'365,365,365,365,365,365,365,,,,,,365,365,365,365,365,365,365,365,,365',
'365,365,365,365,365,365,365,365,365,365,365,,365,365,,365,365,365,,',
',,365,,365,365,,365,365,365,,365,365,365,365,365,365,365,835,835,,835',
',835,835,,,,,,,,,,,,,365,,,,,,,,,,,,,,,,,,835,,,,,,,,,835,835,835,835',
'835,,,,835,835,,,,835,,835,835,835,835,835,835,835,,,,,,835,835,835',
'835,835,835,835,835,,835,835,835,835,835,835,835,835,835,835,835,835',
',835,835,,835,835,835,,,,,835,,835,835,,835,835,835,,835,835,835,835',
'835,835,835,840,840,,840,,840,840,,,,,,,,,,,,,835,,,,,,,,,,,,,,,,,,840',
',,,,,,,,840,840,840,840,840,,,,840,840,,,,840,,840,840,840,840,840,840',
'840,,,,,,840,840,840,840,840,840,840,840,,840,840,840,840,840,840,840',
'840,840,840,840,840,,840,840,,840,840,840,,,,,840,,840,840,,840,840',
'840,,840,840,840,840,840,840,840,,,,,18,,18,18,,18,,,,,,18,18,,,840',
'18,18,18,18,18,18,18,18,18,18,,,,,,,,,,,18,18,18,,,,,,,18,18,18,18,18',
'18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,,,,18,18,18',
'18,18,18,18,18,,,18,18,18,18,,18,18,18,18,18,18,,,,,,,,,18,18,,303,303',
',303,,303,303,18,,,,,,,,,,,,,,,,,,,,18,18,18,18,18,18,18,18,18,18,303',
',,,,,,,,303,303,303,303,303,,,,303,303,,,,303,,303,303,303,303,303,303',
'303,,,,,,303,303,303,303,303,303,303,303,,303,303,303,303,303,303,303',
'303,303,303,303,303,,303,303,,303,303,303,,,,,303,,303,303,,303,303',
'303,,303,303,303,303,303,303,303,852,852,,852,,852,852,,,,,,,,,,,,,303',
',,,,,,,,,,,,,,,,,852,,,,,,,,,852,852,852,852,852,,,,852,852,,,,852,',
'852,852,852,852,852,852,852,,,,,,852,852,852,852,852,852,852,852,,852',
'852,852,852,852,852,852,852,852,852,852,852,,852,852,,852,852,852,,',
',,852,,852,852,,852,852,852,,852,852,852,852,852,852,852,856,856,,856',
',856,856,,,,,,,,,,,,,852,,,,,,,,,,,,,,,,,,856,,,,,,,,,856,856,856,856',
'856,,,,856,856,,,,856,,856,856,856,856,856,856,856,,,,,,856,856,856',
'856,856,856,856,856,,856,856,856,856,856,856,856,856,856,856,856,856',
',856,856,,856,856,856,,,,,856,,856,856,,856,856,856,,856,856,856,856',
'856,856,856,283,283,,283,,283,283,,,,,,,,,,,,,856,,,,,,,,,,,,,,,,,,283',
',,,,,,,,283,283,283,283,283,,,,283,283,,,,283,,283,283,283,283,283,283',
'283,,,,,,283,283,283,283,283,283,283,283,,283,283,283,283,283,283,283',
'283,283,283,283,283,,283,283,,283,283,283,,,,,283,,283,283,,283,283',
'283,,283,283,283,283,283,283,283,598,598,,598,,598,598,,,,,,,,,,,,,283',
',,,,,,,,,,,,,,,,,598,,,,,,,,,598,598,598,598,598,,,,598,598,,,,598,',
'598,598,598,598,598,598,598,,,,,,598,598,598,598,598,598,598,598,,598',
'598,598,598,598,598,598,598,598,598,598,598,,598,598,,598,598,598,,',
',,598,,598,598,,598,598,598,,598,598,598,598,598,598,598,,,,,625,,625',
'625,,625,,,,,,625,625,,,598,625,625,625,625,625,625,625,625,625,625',
',,,,,,,,,,625,625,625,,,,,,,625,625,625,625,625,625,625,625,625,625',
'625,625,625,625,625,625,625,625,625,625,625,625,625,625,,,,625,625,625',
'625,625,625,625,625,,,625,625,625,625,,625,625,,,625,,,,,,,,,,625,625',
',630,630,,630,,630,630,625,,,,,,,,,,,,,,,,,,,,625,625,625,625,625,625',
'625,625,625,625,630,,,,,,,,,630,630,630,630,630,,,,630,630,,,,630,,630',
'630,630,630,630,630,630,,,,,,630,630,630,630,630,630,630,630,,630,630',
'630,630,630,630,630,630,630,630,630,630,,630,630,,630,630,630,,,,,630',
',630,630,,630,630,630,,630,630,630,630,630,630,630,685,685,,685,,685',
'685,,,,,,,,,,,,,630,,,,,,,,,,,,,,,,,,685,,,,,,,,,685,685,685,685,685',
',,,685,685,,,,685,,685,685,685,685,685,685,685,,,,,,685,685,685,685',
'685,685,685,685,,685,685,685,685,685,685,685,685,685,685,685,685,,685',
'685,,685,685,685,,,,,685,,685,685,,685,685,685,,685,685,685,685,685',
'685,685,133,133,,133,,133,133,,,,,,,,,,,,,685,,,,,,,,,,,,,,,,,,133,',
',,,,,,,133,133,133,133,133,,,,133,133,,,,133,,133,133,133,133,133,133',
'133,,,,,,133,133,133,133,133,133,133,133,,133,133,133,133,133,133,133',
'133,133,133,133,133,,133,133,,133,133,133,,,,,133,,133,133,,133,133',
'133,,133,133,133,133,133,133,133,891,891,,891,,891,891,,,,,,,,,,,,,133',
',,,,,,,,,,,,,,,,,891,,,,,,,,,891,891,891,891,891,,,,891,891,,,,891,',
'891,891,891,891,891,891,891,,,,,,891,891,891,891,891,891,891,891,,891',
'891,891,891,891,891,891,891,891,891,891,891,,891,891,,891,891,891,,',
',,891,,891,891,,891,891,891,,891,891,891,891,891,891,891,3,3,,3,,3,3',
',,,,,,,,,,,,891,,,,,,,,,,,,,,,,,,3,,,,,,,,,3,3,3,3,3,,,,3,3,,,,3,,3',
'3,3,3,3,3,3,,,,,,3,3,3,3,3,3,3,3,,3,3,3,3,3,3,3,3,3,3,3,3,,3,3,,3,3',
'3,,,,,3,,3,3,,3,3,3,,3,3,3,3,3,3,3,827,,827,,827,827,,,,,,,,,,,,,,3',
',,,,,,,,,,,,,,,,827,,,,,,,,,827,827,827,,827,,,,827,827,,,,827,,827',
'827,827,827,827,827,827,,,,,,827,827,827,827,827,827,827,,,,827,827',
'827,827,827,827,827,827,827,827,827,,827,827,,827,827,827,,,,,827,,827',
'827,,827,827,,,827,827,827,827,827,827,827,139,,139,,139,139,,,,,,,',
',,,,,,827,,,,,,,,,,,,,,,,,139,,,,,,,,,139,139,139,,139,,,,139,139,,',
',139,,139,139,139,139,139,139,139,,,,,,139,139,139,139,139,139,139,',
',,139,139,139,139,139,139,139,139,139,139,139,,139,139,,139,139,139',
',,,,139,,139,139,,139,139,,,139,139,139,139,139,139,139,143,,143,,143',
'143,,,,,,,,,,,,,,139,,,,,,,,,,,,,,,,,143,,,,,,,,,143,143,143,,143,,',
',143,143,,,,143,,143,143,143,143,143,143,143,,,,,,143,143,143,143,143',
'143,143,,,,143,143,143,143,143,143,143,143,143,143,143,,143,143,,143',
'143,143,,,,,143,,143,143,,143,143,,,143,143,143,143,143,143,143,119',
',119,,119,119,,,,,,,,,,,,,,143,,,,,,,,,,,,,,,,,119,,,,,,,,,119,119,119',
',119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119',
'119,119,119,119,,,,119,119,119,119,119,119,119,119,119,119,119,,119',
'119,,119,119,119,,,,,119,,119,119,,119,119,,,119,119,119,119,119,119',
'119,695,,695,,695,695,,,,,,,,,,,,,,119,,,,,,,,,,,,,,,,,695,,,,,,,,,695',
'695,695,,695,,,,695,695,,,,695,,695,695,695,695,695,695,695,,,,,,695',
'695,695,695,695,695,695,,,,695,695,695,695,695,695,695,695,695,695,695',
',695,695,,695,695,695,,,,,695,,695,695,,695,695,,,695,695,695,695,695',
'695,695,147,,147,,147,147,,,,,,,,,,,,,,695,,,,,,,,,,,,,,,,,147,,,,,',
',,,147,147,147,,147,,,,147,147,,,,147,,147,147,147,147,147,147,147,',
',,,,147,147,147,147,147,147,147,,,,147,147,147,147,147,147,147,147,147',
'147,147,,147,147,,147,147,147,,,,,147,,147,147,,147,147,,,147,147,147',
'147,147,147,147,702,,702,,702,702,,,,,,,,,,,,,,147,,,,,,,,,,,,,,,,,702',
',,,,,,,,702,702,702,,702,,,,702,702,,,,702,,702,702,702,702,702,702',
'702,,,,,,702,702,702,702,702,702,702,,,,702,702,702,702,702,702,702',
'702,702,702,702,,702,702,,702,702,702,,,,,702,,702,702,,702,702,,,702',
'702,702,702,702,702,702,703,,703,,703,703,,,,,,,,,,,,,,702,,,,,,,,,',
',,,,,,,703,,,,,,,,,703,703,703,,703,,,,703,703,,,,703,,703,703,703,703',
'703,703,703,,,,,,703,703,703,703,703,703,703,,,,703,703,703,703,703',
'703,703,703,703,703,703,,703,703,,703,703,703,,,,,703,,703,703,,703',
'703,,,703,703,703,703,703,703,703,665,,665,,665,665,,,,,,,,,,,,,,703',
',,,,,,,,,,,,,,,,665,,,,,,,,,665,665,665,,665,,,,665,665,,,,665,,665',
'665,665,665,665,665,665,,,,,,665,665,665,665,665,665,665,,,,665,665',
'665,665,665,665,665,665,665,665,665,,665,665,,665,665,665,,,,,665,,665',
'665,,665,665,,,665,665,665,665,665,665,665,649,,649,,649,649,,,,,,,',
',,,,,,665,,,,,,,,,,,,,,,,,649,,,,,,,,,649,649,649,,649,,,,649,649,,',
',649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649,649,',
',,649,649,649,649,649,649,649,649,649,649,649,,649,649,,649,649,649',
',,,,649,,649,649,,649,649,649,,649,649,649,649,649,649,649,639,,639',
',639,639,,,,,,,,,,,,,,649,,,,,,,,,,,,,,,,,639,,,,,,,,,639,639,639,,639',
',,,639,639,,,,639,,639,639,639,639,639,639,639,,,,,,639,639,639,639',
'639,639,639,,,,639,639,639,639,639,639,639,639,639,639,639,,639,639',
',639,639,639,,,,,639,,639,639,,639,639,,,639,639,639,639,639,639,639',
'615,,615,,615,615,,,,,,,,,,,,,,639,,,,,,,,,,,,,,,,,615,,,,,,,,,615,615',
'615,,615,,,,615,615,,,,615,,615,615,615,615,615,615,615,,,,,,615,615',
'615,615,615,615,615,,,,615,615,615,615,615,615,615,615,615,615,615,615',
'615,615,,615,615,615,,,,,615,,615,615,,615,615,,,615,615,615,615,615',
'615,615,612,,612,,612,612,,,,,,,,,,,,,,615,,,,,,,,,,,,,,,,,612,,,,,',
',,,612,612,612,,612,,,,612,612,,,,612,,612,612,612,612,612,612,612,',
',,,,612,612,612,612,612,612,612,,,,612,612,612,612,612,612,612,612,612',
'612,612,612,612,612,,612,612,612,,,,,612,,612,612,,612,612,612,,612',
'612,612,612,612,612,612,609,,609,,609,609,,,,,,,,,,,,,,612,,,,,,,,,',
',,,,,,,609,,,,,,,,,609,609,609,,609,,,,609,609,,,,609,,609,609,609,609',
'609,609,609,,,,,,609,609,609,609,609,609,609,,,,609,609,609,609,609',
'609,609,609,609,609,609,,609,609,,609,609,609,,,,,609,,609,609,,609',
'609,609,,609,609,609,609,609,609,609,600,,600,,600,600,,,,,,,,,,,,,',
'609,,,,,,,,,,,,,,,,,600,,,,,,,,,600,600,600,,600,,,,600,600,,,,600,',
'600,600,600,600,600,600,600,,,,,,600,600,600,600,600,600,600,,,,600',
'600,600,600,600,600,600,600,600,600,600,,600,600,,600,600,600,,,,,600',
',600,600,,600,600,,,600,600,600,600,600,600,600,15,,15,,15,15,,,,,,',
',,,,,,,600,,,,,,,,,,,,,,,,,15,,,,,,,,,15,15,15,15,15,,,,15,15,,,,15',
',15,15,15,15,15,15,15,,,,,,15,15,15,15,15,15,15,15,,15,15,15,15,15,15',
'15,15,15,15,15,15,,15,15,,15,15,15,,,,,15,,15,15,,15,15,15,,15,15,15',
'15,15,15,15,592,,592,,592,592,,,,,,,,,,,,,,15,,,,,,,,,,,,,,,,,592,,',
',,,,,,592,592,592,,592,,,,592,592,,,,592,,592,592,592,592,592,592,592',
',,,,,592,592,592,592,592,592,592,,,,592,592,592,592,592,592,592,592',
'592,592,592,592,592,592,,592,592,592,,,,,592,,592,592,,592,592,592,592',
'592,592,592,592,592,592,592,21,,21,,21,21,,,,,,,,592,,,,,,592,,,,,,',
',,,,,,,,,,21,,,,,,,,,21,21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21',
'21,,,,,,21,21,21,21,21,21,21,,,,21,21,21,21,21,21,21,21,21,21,21,,21',
'21,,21,21,21,,,,,21,,21,21,,21,21,,,21,21,21,21,21,21,21,26,,26,,26',
'26,,,,,,,,,,,,,,21,,,,,,,,,,,,,,,,,26,,,,,,,,,26,26,26,,26,,,,26,26',
',,,26,,26,26,26,26,26,26,26,,,,,,26,26,26,26,26,26,26,,,,26,26,26,26',
'26,26,26,26,26,26,26,,26,26,,26,26,26,,,,,26,,26,26,,26,26,,,26,26,26',
'26,26,26,26,257,,257,,257,257,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,257,,',
',,,,,,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257,257',
',,,,,257,257,257,257,257,257,257,,,,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,,257,257,257,,,,,257,,257,257,,257,257,257,257',
'257,257,257,257,257,257,257,129,,129,,129,129,,,,,,,,257,,,,,,257,,',
',,,,,,,,,,,,,,129,,,,,,,,,129,129,129,,129,,,,129,129,,,,129,,129,129',
'129,129,129,129,129,,,,,,129,129,129,129,129,129,129,,,,129,129,129',
'129,129,129,129,129,129,129,129,129,129,129,,129,129,129,,,,,129,,129',
'129,,129,129,129,129,129,129,129,129,129,129,129,30,,30,,30,30,,,,,',
',,129,,,,,,129,,,,,,,,,,,,,,,,,30,,,,,,,,,30,30,30,,30,,,,30,30,,,,30',
',30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,,30,30,30,30,30,30',
'30,30,30,30,30,,30,30,,30,30,30,,,,,30,,30,30,,30,30,,,30,30,30,30,30',
'30,30,580,,580,,580,580,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,580,,,,,,,,',
'580,580,580,,580,,,,580,580,,,,580,,580,580,580,580,580,580,580,,,,',
',580,580,580,580,580,580,580,,,,580,580,580,580,580,580,580,580,580',
'580,580,,580,580,,580,580,580,,,,,580,,580,580,,580,580,,,580,580,580',
'580,580,580,580,577,,577,,577,577,,,,,,,,,,,,,,580,,,,,,,,,,,,,,,,,577',
',,,,,,,,577,577,577,,577,,,,577,577,,,,577,,577,577,577,577,577,577',
'577,,,,,,577,577,577,577,577,577,577,,,,577,577,577,577,577,577,577',
'577,577,577,577,577,577,577,,577,577,577,,,,,577,,577,577,,577,577,577',
'577,577,577,577,577,577,577,577,45,,45,,45,45,,,,,,,,577,,,,,,577,,',
',,,,,,,,,,,,,,45,,,,,,,,,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45',
'45,45,,,,,,45,45,45,45,45,45,45,,,,45,45,45,45,45,45,45,45,45,45,45',
',45,45,,45,45,45,,,,,45,,45,45,,45,45,,,45,45,45,45,45,45,45,359,,359',
',359,359,,,,,,,,,,,,,,45,,,,,,,,,,,,,,,,,359,,,,,,,,,359,359,359,359',
'359,,,,359,359,,,,359,,359,359,359,359,359,359,359,,,,,,359,359,359',
'359,359,359,359,359,,359,359,359,359,359,359,359,359,359,359,359,359',
',359,359,,359,359,359,,,,,359,,359,359,,359,359,359,,359,359,359,359',
'359,359,359,549,,549,,549,549,,,,,,,,,,,,,,359,,,,,,,,,,,,,,,,,549,',
',,,,,,,549,549,549,,549,,,,549,549,,,,549,,549,549,549,549,549,549,549',
',,,,,549,549,549,549,549,549,549,,,,549,549,549,549,549,549,549,549',
'549,549,549,,549,549,,549,549,549,,,,,549,,549,549,,549,549,,,549,549',
'549,549,549,549,549,547,,547,,547,547,,,,,,,,,,,,,,549,,,,,,,,,,,,,',
',,,547,,,,,,,,,547,547,547,,547,,,,547,547,,,,547,,547,547,547,547,547',
'547,547,,,,,,547,547,547,547,547,547,547,,,,547,547,547,547,547,547',
'547,547,547,547,547,,547,547,,547,547,547,,,,,547,,547,547,,547,547',
',,547,547,547,547,547,547,547,762,,762,,762,762,,,,,,,,,,,,,,547,,,',
',,,,,,,,,,,,,762,,,,,,,,,762,762,762,,762,,,,762,762,,,,762,,762,762',
'762,762,762,762,762,,,,,,762,762,762,762,762,762,762,,,,762,762,762',
'762,762,762,762,762,762,762,762,,762,762,,762,762,762,,,,,762,,762,762',
',762,762,,,762,762,762,762,762,762,762,544,,544,,544,544,,,,,,,,,,,',
',,762,,,,,,,,,,,,,,,,,544,,,,,,,,,544,544,544,,544,,,,544,544,,,,544',
',544,544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,,,,544',
'544,544,544,544,544,544,544,544,544,544,,544,544,,544,544,544,,,,,544',
',544,544,,544,544,544,,544,544,544,544,544,544,544,50,,50,,50,50,,,',
',,,,,,,,,,544,,,,,,,,,,,,,,,,,50,,,,,,,,,50,50,50,,50,,,,50,50,,,,50',
',50,50,50,50,50,50,50,,,,,,50,50,50,50,50,50,50,,,,50,50,50,50,50,50',
'50,50,50,50,50,,50,50,,50,50,50,,,,,50,,50,50,,50,50,,,50,50,50,50,50',
'50,50,526,,526,,526,526,,,,,,,,,,,,,,50,,,,,,,,,,,,,,,,,526,,,,,,,,',
'526,526,526,,526,,,,526,526,,,,526,,526,526,526,526,526,526,526,,,,',
',526,526,526,526,526,526,526,,,,526,526,526,526,526,526,526,526,526',
'526,526,,526,526,,526,526,526,,,,,526,,526,526,,526,526,,,526,526,526',
'526,526,526,526,525,,525,,525,525,,,,,,,,,,,,,,526,,,,,,,,,,,,,,,,,525',
',,,,,,,,525,525,525,,525,,,,525,525,,,,525,,525,525,525,525,525,525',
'525,,,,,,525,525,525,525,525,525,525,,,,525,525,525,525,525,525,525',
'525,525,525,525,,525,525,,525,525,525,,,,,525,,525,525,,525,525,,,525',
'525,525,525,525,525,525,774,,774,,774,774,,,,,,,,,,,,,,525,,,,,,,,,',
',,,,,,,774,,,,,,,,,774,774,774,,774,,,,774,774,,,,774,,774,774,774,774',
'774,774,774,,,,,,774,774,774,774,774,774,774,,,,774,774,774,774,774',
'774,774,774,774,774,774,,774,774,,774,774,774,,,,,774,,774,774,,774',
'774,,,774,774,774,774,774,774,774,776,,776,,776,776,,,,,,,,,,,,,,774',
',,,,,,,,,,,,,,,,776,,,,,,,,,776,776,776,,776,,,,776,776,,,,776,,776',
'776,776,776,776,776,776,,,,,,776,776,776,776,776,776,776,,,,776,776',
'776,776,776,776,776,776,776,776,776,,776,776,,776,776,776,,,,,776,,776',
'776,,776,776,,,776,776,776,776,776,776,776,505,,505,,505,505,,,,,,,',
',,,,,,776,,,,,,,,,,,,,,,,,505,,,,,,,,,505,505,505,,505,,,,505,505,,',
',505,,505,505,505,505,505,505,505,,,,,,505,505,505,505,505,505,505,',
',,505,505,505,505,505,505,505,505,505,505,505,505,505,505,,505,505,505',
',,,,505,,505,505,,505,505,505,505,505,505,505,505,505,505,505,53,,53',
',53,53,,,,,,,,505,,,,,,505,,,,,,,,,,,,,,,,,53,,,,,,,,,53,53,53,,53,',
',,53,53,,,,53,,53,53,53,53,53,53,53,,,,,,53,53,53,53,53,53,53,,,,53',
'53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53,,,,,53,,53,53,,53,53',
',,53,53,53,53,53,53,53,56,,56,,56,56,,,,,,,,,,,,,,53,,,,,,,,,,,,,,,',
',56,,,,,,,,,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,,,,,56',
'56,56,56,56,56,56,,,,56,56,56,56,56,56,56,56,56,56,56,56,56,56,,56,56',
'56,,,,,56,,56,56,,56,56,56,56,56,56,56,56,56,56,56,57,,57,,57,57,,,',
',,,,56,,,,,,56,,,,,,,,,,,,,,,,,57,,,,,,,,,57,57,57,,57,,,,57,57,,,,57',
',57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,,57,57,57,57,57,57',
'57,57,57,57,57,,57,57,,57,57,57,,,,,57,,57,57,,57,57,,,57,57,57,57,57',
'57,57,777,,777,,777,777,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,777,,,,,,,,',
'777,777,777,,777,,,,777,777,,,,777,,777,777,777,777,777,777,777,,,,',
',777,777,777,777,777,777,777,,,,777,777,777,777,777,777,777,777,777',
'777,777,,777,777,,777,777,777,,,,,777,,777,777,,777,777,,,777,777,777',
'777,777,777,777,63,,63,,63,63,,,,,,,,,,,,,,777,,,,,,,,,,,,,,,,,63,,',
',,,,,,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63',
'63,63,63,63,,,,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,',
',63,,63,63,,63,63,,,63,63,63,63,63,63,63,779,,779,,779,779,,,,,,,,,',
',,,,63,,,,,,,,,,,,,,,,,779,,,,,,,,,779,779,779,,779,,,,779,779,,,,779',
',779,779,779,779,779,779,779,,,,,,779,779,779,779,779,779,779,,,,779',
'779,779,779,779,779,779,779,779,779,779,,779,779,,779,779,779,,,,,779',
',779,779,,779,779,,,779,779,779,779,779,779,779,65,,65,,65,65,,,,,,',
',,,,,,,779,,,,,,,,,,,,,,,,,65,,,,,,,,,65,65,65,,65,,,,65,65,,,,65,,65',
'65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,,65,65,65,65,65,65,65',
'65,65,65,65,65,65,65,,65,65,65,,,,,65,,65,65,,65,65,65,65,65,65,65,65',
'65,65,65,292,,292,,292,292,,,,,,,,65,,,,,,65,,,,,,,,,,,,,,,,,292,,,',
',,,,,292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292,292,292',
',,,,,292,292,292,292,292,292,292,,,,292,292,292,292,292,292,292,292',
'292,292,292,,292,292,,292,292,292,,,,,292,,292,292,,292,292,,,292,292',
'292,292,292,292,292,924,,924,,924,924,,,,,,,,,,,,,,292,,,,,,,,,,,,,',
',,,924,,,,,,,,,924,924,924,,924,,,,924,924,,,,924,,924,924,924,924,924',
'924,924,,,,,,924,924,924,924,924,924,924,,,,924,924,924,924,924,924',
'924,924,924,924,924,924,924,924,,924,924,924,,,,,924,,924,924,,924,924',
'924,924,924,924,924,924,924,924,924,860,,860,,860,860,,,,,,,,924,,,',
',,924,,,,,,,,,,,,,,,,,860,,,,,,,,,860,860,860,,860,,,,860,860,,,,860',
',860,860,860,860,860,860,860,,,,,,860,860,860,860,860,860,860,,,,860',
'860,860,860,860,860,860,860,860,860,860,,860,860,,860,860,860,,,,,860',
',860,860,,860,860,,,860,860,860,860,860,860,860,87,,87,,87,87,,,,,,',
',,,,,,,860,,,,,,,,,,,,,,,,,87,,,,,,,,,87,87,87,,87,,,,87,87,,,,87,,87',
'87,87,87,87,87,87,,,,,,87,87,87,87,87,87,87,,,,87,87,87,87,87,87,87',
'87,87,87,87,,87,87,,87,87,87,,,,,87,,87,87,,87,87,,,87,87,87,87,87,87',
'87,449,,449,,449,449,,,,,,,,,,,,,,87,,,,,,,,,,,,,,,,,449,,,,,,,,,449',
'449,449,,449,,,,449,449,,,,449,,449,449,449,449,449,449,449,,,,,,449',
'449,449,449,449,449,449,,,,449,449,449,449,449,449,449,449,449,449,449',
',449,449,,449,449,449,,,,,449,,449,449,,449,449,,,449,449,449,449,449',
'449,449,96,,96,,96,96,,,,,,,,,,,,,,449,,,,,,,,,,,,,,,,,96,,,,,,,,,96',
'96,96,,96,,,,96,96,,,,96,,96,96,96,96,96,96,96,,,,,,96,96,96,96,96,96',
'96,,,,96,96,96,96,96,96,96,96,96,96,96,96,96,96,,96,96,96,,,,,96,,96',
'96,,96,96,96,,96,96,96,96,96,96,96,434,,434,,434,434,,,,,,,,,,,,,,96',
',,,,,,,,,,,,,,,,434,,,,,,,,,434,434,434,,434,,,,434,434,,,,434,,434',
'434,434,434,434,434,434,,,,,,434,434,434,434,434,434,434,,,,434,434',
'434,434,434,434,434,434,434,434,434,,434,434,,434,434,434,,,,,434,,434',
'434,,434,434,,,434,434,434,434,434,434,434,428,,428,,428,428,,,,,,,',
',,,,,,434,,,,,,,,,,,,,,,,,428,,,,,,,,,428,428,428,,428,,,,428,428,,',
',428,,428,428,428,428,428,428,428,,,,,,428,428,428,428,428,428,428,',
',,428,428,428,428,428,428,428,428,428,428,428,,428,428,,428,428,428',
',,,,428,,428,428,,428,428,,,428,428,428,428,428,428,428,423,,423,,423',
'423,,,,,,,,,,,,,,428,,,,,,,,,,,,,,,,,423,,,,,,,,,423,423,423,,423,,',
',423,423,,,,423,,423,423,423,423,423,423,423,,,,,,423,423,423,423,423',
'423,423,,,,423,423,423,423,423,423,423,423,423,423,423,,423,423,,423',
'423,423,,,,,423,,423,423,,423,423,,,423,423,423,423,423,423,423,422',
',422,,422,422,,,,,,,,,,,,,,423,,,,,,,,,,,,,,,,,422,,,,,,,,,422,422,422',
',422,,,,422,422,,,,422,,422,422,422,422,422,422,422,,,,,,422,422,422',
'422,422,422,422,,,,422,422,422,422,422,422,422,422,422,422,422,,422',
'422,,422,422,422,,,,,422,,422,422,,422,422,,,422,422,422,422,422,422',
'422,304,,304,,304,304,,,,,,,,,,,,,,422,,,,,,,,,,,,,,,,,304,,,,,,,,,304',
'304,304,,304,,,,304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304',
'304,304,304,304,304,304,,,,304,304,304,304,304,304,304,304,304,304,304',
',304,304,,304,304,304,,,,,304,,304,304,,304,304,,,304,304,304,304,304',
'304,304,305,,305,,305,305,,,,,,,,,,,,,,304,,,,,,,,,,,,,,,,,305,,,,,',
',,,305,305,305,305,305,,,,305,305,,,,305,,305,305,305,305,305,305,305',
',,,,,305,305,305,305,305,305,305,305,,305,305,305,305,305,305,305,305',
'305,305,305,305,,305,305,,305,305,305,,,,,305,,305,305,,305,305,305',
',305,305,305,305,305,305,305,306,,306,,306,306,,,,,,,,,,,,,,305,,,,',
',,,,,,,,,,,,306,,,,,,,,,306,306,306,,306,,,,306,306,,,,306,,306,306',
'306,306,306,306,306,,,,,,306,306,306,306,306,306,306,,,,306,306,306',
'306,306,306,306,306,306,306,306,,306,306,,306,306,306,,,,,306,,306,306',
',306,306,,,306,306,306,306,306,306,306,307,,307,,307,307,,,,,,,,,,,',
',,306,,,,,,,,,,,,,,,,,307,,,,,,,,,307,307,307,,307,,,,307,307,,,,307',
',307,307,307,307,307,307,307,,,,,,307,307,307,307,307,307,307,,,,307',
'307,307,307,307,307,307,307,307,307,307,,307,307,,307,307,307,,,,,307',
',307,307,,307,307,,,307,307,307,307,307,307,307,308,,308,,308,308,,',
',,,,,,,,,,,307,,,,,,,,,,,,,,,,,308,,,,,,,,,308,308,308,,308,,,,308,308',
',,,308,,308,308,308,308,308,308,308,,,,,,308,308,308,308,308,308,308',
',,,308,308,308,308,308,308,308,308,308,308,308,,308,308,,308,308,308',
',,,,308,,308,308,,308,308,,,308,308,308,308,308,308,308,420,,420,,420',
'420,,,,,,,,,,,,,,308,,,,,,,,,,,,,,,,,420,,,,,,,,,420,420,420,,420,,',
',420,420,,,,420,,420,420,420,420,420,420,420,,,,,,420,420,420,420,420',
'420,420,,,,420,420,420,420,420,420,420,420,420,420,420,420,420,420,',
'420,420,420,,,,,420,,420,420,,420,420,,420,420,420,420,420,420,420,420',
'100,,100,,100,100,,,,,,,,420,,,,,,420,,,,,,,,,,,,,,,,,100,,,,,,,,,100',
'100,100,,100,,,,100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100',
'100,100,100,100,100,100,,,,100,100,100,100,100,100,100,100,100,100,100',
'100,100,100,,100,100,100,,,,,100,,100,100,,100,100,100,100,100,100,100',
'100,100,100,100,312,,312,,312,312,,,,,,,,100,,,,,,100,,,,,,,,,,,,,,',
',,312,,,,,,,,,312,312,312,,312,,,,312,312,,,,312,,312,312,312,312,312',
'312,312,,,,,,312,312,312,312,312,312,312,,,,312,312,312,312,312,312',
'312,312,312,312,312,,312,312,,312,312,312,,,,,312,,312,312,,312,312',
',,312,312,312,312,312,312,312,313,,313,,313,313,,,,,,,,,,,,,,312,,,',
',,,,,,,,,,,,,313,,,,,,,,,313,313,313,,313,,,,313,313,,,,313,,313,313',
'313,313,313,313,313,,,,,,313,313,313,313,313,313,313,,,,313,313,313',
'313,313,313,313,313,313,313,313,,313,313,,313,313,313,,,,,313,,313,313',
',313,313,,,313,313,313,313,313,313,313,417,,417,,417,417,,,,,,,,,,,',
',,313,,,,,,,,,,,,,,,,,417,,,,,,,,,417,417,417,,417,,,,417,417,,,,417',
',417,417,417,417,417,417,417,,,,,,417,417,417,417,417,417,417,,,,417',
'417,417,417,417,417,417,417,417,417,417,417,417,417,,417,417,417,,,',
',417,,417,417,,417,417,417,417,417,417,417,417,417,417,417,413,,413',
',413,413,,,,,,,,417,,,,,,417,,,,,,,,,,,,,,,,,413,,,,,,,,,413,413,413',
',413,,,,413,413,,,,413,,413,413,413,413,413,413,413,,,,,,413,413,413',
'413,413,413,413,,,,413,413,413,413,413,413,413,413,413,413,413,413,413',
'413,,413,413,413,,,,,413,,413,413,,413,413,413,413,413,413,413,413,413',
'413,413,412,,412,,412,412,,,,,,,,413,,,,,,413,,,,,,,,,,,,,,,,,412,,',
',,,,,,412,412,412,,412,,,,412,412,,,,412,,412,412,412,412,412,412,412',
',,,,,412,412,412,412,412,412,412,,,,412,412,412,412,412,412,412,412',
'412,412,412,,412,412,,412,412,412,,,,,412,,412,412,,412,412,,,412,412',
'412,412,412,412,412,103,,103,,103,103,,,,,,,,,,,,,,412,,,,,,,,,,,,,',
',,,103,,,,,,,,,103,103,103,,103,,,,103,103,,,,103,,103,103,103,103,103',
'103,103,,,,,,103,103,103,103,103,103,103,,,,103,103,103,103,103,103',
'103,103,103,103,103,103,103,103,,103,103,103,,,,,103,,103,103,,103,103',
',,103,103,103,103,103,103,103,118,,118,,118,118,,,,,,,,,,,,,,103,,,',
',,,,,,,,,,,,,118,,,,,,,,,118,118,118,,118,,,,118,118,,,,118,,118,118',
'118,118,118,118,118,,,,,,118,118,118,118,118,118,118,,,,118,118,118',
'118,118,118,118,118,118,118,118,,118,118,,118,118,118,,,,,118,,118,118',
',118,118,,,118,118,118,118,118,118,118,400,,400,,400,400,,,,,,,,,,,',
',,118,,,,,,,,,,,,,,,,,400,,,,,,,,,400,400,400,,400,,,,400,400,,,,400',
',400,400,400,400,400,400,400,,,,,,400,400,400,400,400,400,400,,,,400',
'400,400,400,400,400,400,400,400,400,400,,400,400,,400,400,400,,,,,400',
',400,400,,400,400,,,400,400,400,400,400,400,400,321,,321,,321,321,,',
',,,,,,,,,,,400,,,,,,,,,,,,,,,,,321,,,,,,,,,321,321,321,,321,,,,321,321',
',,,321,,321,321,321,321,321,321,321,,,,,,321,321,321,321,321,321,321',
',,,321,321,321,321,321,321,321,321,321,321,321,,321,321,,321,321,321',
',,,,321,,321,321,,321,321,,,321,321,321,321,321,321,321,322,,322,,322',
'322,,,,,,,,,,,,,,321,,,,,,,,,,,,,,,,,322,,,,,,,,,322,322,322,,322,,',
',322,322,,,,322,,322,322,322,322,322,322,322,,,,,,322,322,322,322,322',
'322,322,,,,322,322,322,322,322,322,322,322,322,322,322,,322,322,,322',
'322,322,,,,,322,,322,322,,322,322,,,322,322,322,322,322,322,322,323',
',323,,323,323,,,,,,,,,,,,,,322,,,,,,,,,,,,,,,,,323,,,,,,,,,323,323,323',
',323,,,,323,323,,,,323,,323,323,323,323,323,323,323,,,,,,323,323,323',
'323,323,323,323,,,,323,323,323,323,323,323,323,323,323,323,323,,323',
'323,,323,323,323,,,,,323,,323,323,,323,323,,,323,323,323,323,323,323',
'323,324,,324,,324,324,,,,,,,,,,,,,,323,,,,,,,,,,,,,,,,,324,,,,,,,,,324',
'324,324,,324,,,,324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324',
'324,324,324,324,324,324,,,,324,324,324,324,324,324,324,324,324,324,324',
',324,324,,324,324,324,,,,,324,,324,324,,324,324,,,324,324,324,324,324',
'324,324,325,,325,,325,325,,,,,,,,,,,,,,324,,,,,,,,,,,,,,,,,325,,,,,',
',,,325,325,325,,325,,,,325,325,,,,325,,325,325,325,325,325,325,325,',
',,,,325,325,325,325,325,325,325,,,,325,325,325,325,325,325,325,325,325',
'325,325,,325,325,,325,325,325,,,,,325,,325,325,,325,325,,,325,325,325',
'325,325,325,325,326,,326,,326,326,,,,,,,,,,,,,,325,,,,,,,,,,,,,,,,,326',
',,,,,,,,326,326,326,,326,,,,326,326,,,,326,,326,326,326,326,326,326',
'326,,,,,,326,326,326,326,326,326,326,,,,326,326,326,326,326,326,326',
'326,326,326,326,,326,326,,326,326,326,,,,,326,,326,326,,326,326,,,326',
'326,326,326,326,326,326,327,,327,,327,327,,,,,,,,,,,,,,326,,,,,,,,,',
',,,,,,,327,,,,,,,,,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327',
'327,327,327,,,,,,327,327,327,327,327,327,327,,,,327,327,327,327,327',
'327,327,327,327,327,327,,327,327,,327,327,327,,,,,327,,327,327,,327',
'327,,,327,327,327,327,327,327,327,328,,328,,328,328,,,,,,,,,,,,,,327',
',,,,,,,,,,,,,,,,328,,,,,,,,,328,328,328,,328,,,,328,328,,,,328,,328',
'328,328,328,328,328,328,,,,,,328,328,328,328,328,328,328,,,,328,328',
'328,328,328,328,328,328,328,328,328,,328,328,,328,328,328,,,,,328,,328',
'328,,328,328,,,328,328,328,328,328,328,328,329,,329,,329,329,,,,,,,',
',,,,,,328,,,,,,,,,,,,,,,,,329,,,,,,,,,329,329,329,,329,,,,329,329,,',
',329,,329,329,329,329,329,329,329,,,,,,329,329,329,329,329,329,329,',
',,329,329,329,329,329,329,329,329,329,329,329,,329,329,,329,329,329',
',,,,329,,329,329,,329,329,,,329,329,329,329,329,329,329,330,,330,,330',
'330,,,,,,,,,,,,,,329,,,,,,,,,,,,,,,,,330,,,,,,,,,330,330,330,,330,,',
',330,330,,,,330,,330,330,330,330,330,330,330,,,,,,330,330,330,330,330',
'330,330,,,,330,330,330,330,330,330,330,330,330,330,330,,330,330,,330',
'330,330,,,,,330,,330,330,,330,330,,,330,330,330,330,330,330,330,331',
',331,,331,331,,,,,,,,,,,,,,330,,,,,,,,,,,,,,,,,331,,,,,,,,,331,331,331',
',331,,,,331,331,,,,331,,331,331,331,331,331,331,331,,,,,,331,331,331',
'331,331,331,331,,,,331,331,331,331,331,331,331,331,331,331,331,,331',
'331,,331,331,331,,,,,331,,331,331,,331,331,,,331,331,331,331,331,331',
'331,332,,332,,332,332,,,,,,,,,,,,,,331,,,,,,,,,,,,,,,,,332,,,,,,,,,332',
'332,332,,332,,,,332,332,,,,332,,332,332,332,332,332,332,332,,,,,,332',
'332,332,332,332,332,332,,,,332,332,332,332,332,332,332,332,332,332,332',
',332,332,,332,332,332,,,,,332,,332,332,,332,332,,,332,332,332,332,332',
'332,332,333,,333,,333,333,,,,,,,,,,,,,,332,,,,,,,,,,,,,,,,,333,,,,,',
',,,333,333,333,,333,,,,333,333,,,,333,,333,333,333,333,333,333,333,',
',,,,333,333,333,333,333,333,333,,,,333,333,333,333,333,333,333,333,333',
'333,333,,333,333,,333,333,333,,,,,333,,333,333,,333,333,,,333,333,333',
'333,333,333,333,334,,334,,334,334,,,,,,,,,,,,,,333,,,,,,,,,,,,,,,,,334',
',,,,,,,,334,334,334,,334,,,,334,334,,,,334,,334,334,334,334,334,334',
'334,,,,,,334,334,334,334,334,334,334,,,,334,334,334,334,334,334,334',
'334,334,334,334,,334,334,,334,334,334,,,,,334,,334,334,,334,334,,,334',
'334,334,334,334,334,334,335,,335,,335,335,,,,,,,,,,,,,,334,,,,,,,,,',
',,,,,,,335,,,,,,,,,335,335,335,,335,,,,335,335,,,,335,,335,335,335,335',
'335,335,335,,,,,,335,335,335,335,335,335,335,,,,335,335,335,335,335',
'335,335,335,335,335,335,,335,335,,335,335,335,,,,,335,,335,335,,335',
'335,,,335,335,335,335,335,335,335,336,,336,,336,336,,,,,,,,,,,,,,335',
',,,,,,,,,,,,,,,,336,,,,,,,,,336,336,336,,336,,,,336,336,,,,336,,336',
'336,336,336,336,336,336,,,,,,336,336,336,336,336,336,336,,,,336,336',
'336,336,336,336,336,336,336,336,336,,336,336,,336,336,336,,,,,336,,336',
'336,,336,336,,,336,336,336,336,336,336,336,337,,337,,337,337,,,,,,,',
',,,,,,336,,,,,,,,,,,,,,,,,337,,,,,,,,,337,337,337,,337,,,,337,337,,',
',337,,337,337,337,337,337,337,337,,,,,,337,337,337,337,337,337,337,',
',,337,337,337,337,337,337,337,337,337,337,337,,337,337,,337,337,337',
',,,,337,,337,337,,337,337,,,337,337,337,337,337,337,337,338,,338,,338',
'338,,,,,,,,,,,,,,337,,,,,,,,,,,,,,,,,338,,,,,,,,,338,338,338,,338,,',
',338,338,,,,338,,338,338,338,338,338,338,338,,,,,,338,338,338,338,338',
'338,338,,,,338,338,338,338,338,338,338,338,338,338,338,,338,338,,338',
'338,338,,,,,338,,338,338,,338,338,,,338,338,338,338,338,338,338,339',
',339,,339,339,,,,,,,,,,,,,,338,,,,,,,,,,,,,,,,,339,,,,,,,,,339,339,339',
',339,,,,339,339,,,,339,,339,339,339,339,339,339,339,,,,,,339,339,339',
'339,339,339,339,,,,339,339,339,339,339,339,339,339,339,339,339,,339',
'339,,339,339,339,,,,,339,,339,339,,339,339,,,339,339,339,339,339,339',
'339,340,,340,,340,340,,,,,,,,,,,,,,339,,,,,,,,,,,,,,,,,340,,,,,,,,,340',
'340,340,,340,,,,340,340,,,,340,,340,340,340,340,340,340,340,,,,,,340',
'340,340,340,340,340,340,,,,340,340,340,340,340,340,340,340,340,340,340',
',340,340,,340,340,340,,,,,340,,340,340,,340,340,,,340,340,340,340,340',
'340,340,341,,341,,341,341,,,,,,,,,,,,,,340,,,,,,,,,,,,,,,,,341,,,,,',
',,,341,341,341,,341,,,,341,341,,,,341,,341,341,341,341,341,341,341,',
',,,,341,341,341,341,341,341,341,,,,341,341,341,341,341,341,341,341,341',
'341,341,,341,341,,341,341,341,,,,,341,,341,341,,341,341,,,341,341,341',
'341,341,341,341,342,,342,,342,342,,,,,,,,,,,,,,341,,,,,,,,,,,,,,,,,342',
',,,,,,,,342,342,342,,342,,,,342,342,,,,342,,342,342,342,342,342,342',
'342,,,,,,342,342,342,342,342,342,342,,,,342,342,342,342,342,342,342',
'342,342,342,342,,342,342,,342,342,342,,,,,342,,342,342,,342,342,,,342',
'342,342,342,342,342,342,343,,343,,343,343,,,,,,,,,,,,,,342,,,,,,,,,',
',,,,,,,343,,,,,,,,,343,343,343,,343,,,,343,343,,,,343,,343,343,343,343',
'343,343,343,,,,,,343,343,343,343,343,343,343,,,,343,343,343,343,343',
'343,343,343,343,343,343,,343,343,,343,343,343,,,,,343,,343,343,,343',
'343,,,343,343,343,343,343,343,343,344,,344,,344,344,,,,,,,,,,,,,,343',
',,,,,,,,,,,,,,,,344,,,,,,,,,344,344,344,,344,,,,344,344,,,,344,,344',
'344,344,344,344,344,344,,,,,,344,344,344,344,344,344,344,,,,344,344',
'344,344,344,344,344,344,344,344,344,,344,344,,344,344,344,,,,,344,,344',
'344,,344,344,,,344,344,344,344,344,344,344,345,,345,,345,345,,,,,,,',
',,,,,,344,,,,,,,,,,,,,,,,,345,,,,,,,,,345,345,345,,345,,,,345,345,,',
',345,,345,345,345,345,345,345,345,,,,,,345,345,345,345,345,345,345,',
',,345,345,345,345,345,345,345,345,345,345,345,,345,345,,345,345,345',
',,,,345,,345,345,,345,345,,,345,345,345,345,345,345,345,346,,346,,346',
'346,,,,,,,,,,,,,,345,,,,,,,,,,,,,,,,,346,,,,,,,,,346,346,346,,346,,',
',346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346,346,346,346,346',
'346,346,,,,346,346,346,346,346,346,346,346,346,346,346,,346,346,,346',
'346,346,,,,,346,,346,346,,346,346,,,346,346,346,346,346,346,346,820',
',820,,820,820,,,,,,,,,,,,,,346,,,,,,,,,,,,,,,,,820,,,,,,,,,820,820,820',
',820,,,,820,820,,,,820,,820,820,820,820,820,820,820,,,,,,820,820,820',
'820,820,820,820,,,,820,820,820,820,820,820,820,820,820,820,820,,820',
'820,,820,820,820,,,,,820,,820,820,,820,820,,,820,820,820,820,820,820',
'820,387,,387,,387,387,,,,,,,,,,,,,,820,,,,,,,,,,,,,,,,,387,,,,,,,,,387',
'387,387,,387,,,,387,387,,,,387,,387,387,387,387,387,387,387,,,,,,387',
'387,387,387,387,387,387,,,,387,387,387,387,387,387,387,387,387,387,387',
',387,387,,387,387,387,,,,,387,,387,387,,387,387,387,,387,387,387,387',
'387,387,387,140,,140,,140,140,,,,,,,,,,,,,,387,,,,,,,,,,,,,,,,,140,',
',,,,,,,140,140,140,,140,,,,140,140,,,,140,,140,140,140,140,140,140,140',
',,,,,140,140,140,140,140,140,140,,,,140,140,140,140,140,140,140,140',
'140,140,140,,140,140,,140,140,140,,,,,140,,140,140,,140,140,140,,140',
'140,140,140,140,140,140,112,,112,,112,112,,,,,,,,,,,,,,140,,,,,,,,,',
',,,,,,,112,,,,,,,,,112,112,112,,112,,,,112,112,,,,112,,112,112,112,112',
'112,112,112,,,,,,112,112,112,112,112,112,112,,,,112,112,112,112,112',
'112,112,112,112,112,112,,112,112,,112,112,112,,,,,112,,112,112,,112',
'112,,,112,112,112,112,112,112,112,375,,375,,375,375,,,,,,,,,,,,,,112',
',,,,,,,,,,,,,,,,375,,,,,,,,,375,375,375,,375,,,,375,375,,,,375,,375',
'375,375,375,375,375,375,,,,,,375,375,375,375,375,375,375,,,,375,375',
'375,375,375,375,375,375,375,375,375,,375,375,,375,375,375,,,,,375,,375',
'375,,375,375,,,375,375,375,375,375,375,375,114,,114,,114,114,,,,,,,',
',,,,,,375,,,,,,,,,,,,,,,,,114,,,,,,,,,114,114,114,,114,,,,114,114,,',
',114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114,',
',,114,114,114,114,114,114,114,114,114,114,114,,114,114,,114,114,114',
',,,,114,,114,114,,114,114,,,114,114,114,114,114,114,114,834,,834,,834',
'834,,,,,,,,,,,,,,114,,,,,,,,,,,,,,,,,834,,,,,,,,,834,834,834,,834,,',
',834,834,,,,834,,834,834,834,834,834,834,834,,,,,,834,834,834,834,834',
'834,834,,,,834,834,834,834,834,834,834,834,834,834,834,,834,834,,834',
'834,834,,,,,834,,834,834,,834,834,834,,834,834,834,834,834,834,834,838',
',838,,838,838,,,,,,,,,,,,,,834,,,,,,,,,,,,,,,,,838,,,,,,,,,838,838,838',
',838,,,,838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838,838',
'838,838,838,838,,,,838,838,838,838,838,838,838,838,838,838,838,,838',
'838,,838,838,838,,,,,838,,838,838,,838,838,,,838,838,838,838,838,838',
'838,694,,694,,694,694,,,,,,,,,,,,,,838,,,,,,,,,,,,,,,,,694,,,,,,,,,694',
'694,694,,694,,,,694,694,,,,694,,694,694,694,694,694,694,694,,,,,,694',
'694,694,694,694,694,694,,,,694,694,694,694,694,694,694,694,694,694,694',
',694,694,,694,694,694,,,,,694,,694,694,,694,694,,,694,694,694,694,694',
'694,694,,,,,,,,548,,,,,,,,548,548,,,694,548,548,548,548,548,548,548',
'548,548,548,548,548,548,548,548,881,,,,,,,,881,881,,,,881,881,881,881',
'881,881,881,881,881,881,881,881,881,881,881,555,,,,,,,,555,555,,,,555',
'555,555,555,555,555,555,555,555,555,555,555,555,555,555,558,,,,,,,,558',
'558,,,,558,558,558,558,558,558,558,558,558,558,558,558,558,558,558,',
',,,,,,,,,,,,,,,548,548,548,548,548,548,548,548,,,,,,,,,,,,,,,,,,,,,881',
'881,881,881,881,881,881,881,,,,,,,,,,,,,,,,,,,,,555,555,555,555,555',
'555,555,555,,,,,,,,,,,,,,,,,,,,,558,558,558,558,558,558,558,558,560',
',,,,,,,560,560,,,,560,560,560,560,560,560,560,560,560,560,560,560,560',
'560,560,519,,,,,,,,519,519,,,,519,519,519,519,519,519,519,519,519,519',
'519,519,519,519,519,824,,,,,,,,824,824,,,,824,824,824,824,824,824,824',
'824,824,824,824,824,824,824,824,822,,,,,,,,822,822,,,,822,822,822,822',
'822,822,822,822,822,822,822,822,822,822,822,,,,,,,,,,,,,,,,,560,560',
'560,560,560,560,560,560,,,,,,,,,,,,,,,,,,,,,519,519,519,519,519,519',
'519,519,,,,,,,,,,,,,,,,,,,,,824,824,824,824,824,824,824,824,,,,,,,,',
',,,,,,,,,,,,822,822,822,822,822,822,822,822,563,,,,,,,,563,563,,,,563',
'563,563,563,563,563,563,563,563,563,563,563,563,563,563,565,,,,,,,,565',
'565,,,,565,565,565,565,565,565,565,565,565,565,565,565,565,565,565,818',
',,,,,,,818,818,,,,818,818,818,818,818,818,818,818,818,818,818,818,818',
'818,818,729,,,,,,,,729,729,,,,729,729,729,729,729,729,729,729,729,729',
'729,729,729,729,729,,,,,,,,,,,,,,,,,563,563,563,563,563,563,563,563',
',,,,,,,,,,,,,,,,,,,,565,565,565,565,565,565,565,565,,,,,,,,,,,,,,,,',
',,,,818,818,818,818,818,818,818,818,,,,,,,,,,,,,,,,,,,,,729,729,729',
'729,729,729,729,729,570,,,,,,,,570,570,,,,570,570,570,570,570,570,570',
'570,570,570,570,570,570,570,570,311,,,,,,,,311,311,,,,311,311,311,311',
'311,311,311,311,311,311,311,311,311,311,311,573,,,,,,,,573,573,,,,573',
'573,573,573,573,573,573,573,573,573,573,573,573,573,648,,,,,,,,648,648',
',,,648,648,648,648,648,648,648,648,648,648,648,648,648,648,648,,648',
',,,,,,,,,,,,,,,570,570,570,570,570,570,570,570,,,,,,,,,,,,,,,,,,,,,311',
'311,311,311,311,311,311,311,,,,,,,,,,,,,,,,,,,,,573,573,573,573,573',
'573,573,573,,,,,,,,,,,,,,,,,,,,648,648,648,648,648,648,648,648,75,,',
',,,,,75,75,,,,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,131,,,,,',
',,131,131,,,,131,131,131,131,131,131,131,131,131,131,131,131,131,131',
'131,795,,,,,,,,795,795,,,,795,795,795,795,795,795,795,795,795,795,795',
'795,795,795,795,816,,,,,,,,816,816,,,,816,816,816,816,816,816,816,816',
'816,816,816,816,816,816,816,,,,,,,,,,,,,,,,,75,75,75,75,75,75,75,75',
',,,,,,,,,,,,,,,,,,,,131,131,131,131,131,131,131,131,,,,,,,,,,,,,,,,',
',,,,795,795,795,795,795,795,795,795,,,,,,,,,,,,,,,,,,,,,816,816,816',
'816,816,816,816,816,855,,,,,,,,855,855,,,,855,855,855,855,855,855,855',
'855,855,855,855,855,855,855,855,445,,,,,,,,445,445,,,,445,445,445,445',
'445,445,445,445,445,445,445,445,445,445,445,888,445,,,,,,,888,888,,',
',888,888,888,888,888,888,888,888,888,888,888,888,888,888,888,619,,,',
',,,,619,619,,,,619,619,619,619,619,619,619,619,619,619,619,619,619,619',
'619,,619,,,,,,,,,,,,,,,855,855,855,855,855,855,855,855,,,,,,,,,,,,,',
',,,,,,,445,445,445,445,445,445,445,445,,,,,,,,,,,,,,,,,,,,,888,888,888',
'888,888,888,888,888,,,,,,,,,,,,,,,,,,,,619,619,619,619,619,619,619,619',
'619,571,110,,,,,,,571,571,,,,571,571,571,571,571,571,571,571,571,571',
'571,571,571,571,,,,,,,110,,,,,,,,,110,110,110,,110,,,,110,110,,,,110',
',110,110,110,110,110,110,110,,,,,,110,110,110,110,110,110,110,,,,110',
'110,110,110,110,110,110,110,110,110,110,,110,110,,110,110,110,,,,,110',
',110,110,285,110,110,,,110,110,110,110,110,110,110,,,,,,,,,,,110,571',
'571,571,571,571,571,571,571,,285,,,,,,,,,285,285,285,,285,,,,285,285',
',,,285,,285,285,285,285,285,285,285,,,,,,285,285,285,285,285,285,285',
',,,285,285,285,285,285,285,285,285,285,285,285,89,285,285,,285,285,285',
'89,,,,285,,285,285,,285,285,,,285,285,285,285,285,285,285,,,,,,89,,',
',,285,,,,89,89,89,,89,,,,89,89,,,,89,,89,89,89,89,89,89,89,,,,,,89,89',
'89,89,89,89,89,633,,,89,89,89,89,89,89,89,89,89,89,89,,89,89,,89,89',
'89,,,,,89,,89,89,,89,89,633,,89,89,89,89,89,89,89,633,633,633,,633,',
',,633,633,,,,633,,633,633,633,633,633,633,633,,,,,,633,633,633,633,633',
'633,633,35,,,633,633,633,633,633,633,633,633,633,633,633,,633,633,,633',
'633,633,,,,,633,,633,633,,633,633,35,,633,633,633,633,633,633,633,35',
'35,35,,35,,,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35',
'35,,780,,35,35,35,35,35,35,35,35,35,35,35,,35,35,,35,35,35,,,,,35,,35',
'35,,35,35,35,780,35,35,35,35,35,35,35,,780,780,780,,780,,,,780,780,',
',,780,,780,780,780,780,780,780,780,,,,,,780,780,780,780,780,780,780',
'78,,,780,780,780,780,780,780,780,780,780,780,780,,780,780,,780,780,780',
',,,,780,,780,780,,780,780,78,,780,780,780,780,780,780,780,78,78,78,',
'78,,,,78,78,,,,78,,78,78,78,78,78,78,78,,,,,,78,78,78,78,78,78,78,,409',
',78,78,78,78,78,78,78,78,78,78,78,,78,78,,78,78,78,,,,,78,,78,78,,78',
'78,78,409,78,78,78,78,78,78,78,,409,409,409,,409,,,,409,409,,,,409,',
'409,409,409,409,409,409,409,,,,,,409,409,409,409,409,409,409,102,,,409',
'409,409,409,409,409,409,409,409,409,409,,409,409,,409,409,409,,,,,409',
',409,409,,409,409,102,,409,409,409,409,409,409,409,102,102,102,,102',
',,,102,102,,,,102,,102,102,102,102,102,102,102,,,,,,102,102,102,102',
'102,102,102,714,,,102,102,102,102,102,102,102,102,102,102,102,,102,102',
',102,102,102,,,,,102,,102,102,,102,102,714,,102,102,102,102,102,102',
'102,714,714,714,,714,,,,714,714,,,,714,,714,714,714,714,714,714,714',
',,,,,714,714,714,714,714,714,714,771,,,714,714,714,714,714,714,714,714',
'714,714,714,,714,714,,714,714,714,,,,,714,,714,714,,714,714,771,,714',
'714,714,714,714,714,714,771,771,771,,771,,,,771,771,,,,771,,771,771',
'771,771,771,771,771,,,,,,771,771,771,771,771,771,771,514,,,771,771,771',
'771,771,771,771,771,771,771,771,,771,771,,771,771,771,,,,,771,,771,771',
',771,771,514,,771,771,771,771,771,771,771,514,514,514,,514,,,,514,514',
',,,514,,514,514,514,514,514,514,514,,,,,,514,514,514,514,514,514,514',
'849,,,514,514,514,514,514,514,514,514,514,514,514,,514,514,,514,514',
'514,,,,,514,,514,514,,514,514,849,,514,514,514,514,514,514,514,849,849',
'849,,849,,,,849,849,,,,849,,849,849,849,849,849,849,849,,,,,,849,849',
'849,849,849,849,849,,,,849,849,849,849,849,849,849,849,849,849,849,',
'849,849,,849,849,849,,,,,849,,849,849,,849,849,,,849,849,849,849,849',
'849,849' ]
        racc_action_check = arr = Array.new(23301, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    46,   nil,  8431,  1317,  3524,   nil,  1273,  -130,   nil,
   nil,    -2,  1256,  2037,  2183, 10351,   nil,   nil,  7129,   909,
   nil, 10591,    87,   nil,   nil,   nil, 10711,   nil,   nil,   nil,
 11071,   nil,   nil,   nil,   nil, 22577,  5907,   nil,    67,   nil,
  1136,   nil,   nil,  1149,   456, 11431,  1133,  1162,   nil,   nil,
 12151,  1121,  1271, 12871,   nil,   nil, 12991, 13111,   nil,   804,
   nil,   nil,   nil, 13351,    29, 13591,   nil,   nil,   nil,   nil,
   970,   nil,   nil,  1091,  1145, 21794,   nil,   nil, 22728,   460,
  4239,   nil,  4344,   nil,     0,   nil,  2663, 14071,   292, 22427,
   nil,   706,   nil,   nil,   nil,  5178, 14311,  2423,   nil,   nil,
 15631,  1202, 22879, 16351,   nil,   nil,  1628,   979,  1502,   nil,
 22234,   nil, 20191,  1091, 20431,  1197,  1097,   995, 16471,  8911,
  1088,   nil,   nil,   797,   nil,  1108,   nil,   747,   nil, 10951,
  1120, 21822,   nil,  8189,   nil,   nil,   nil,  1162,   nil,  8671,
 20071,   730,   nil,  8791,    10,    21,   nil,  9151,   nil,  1878,
  1106,    52,    16,  1105,  1060,   nil,   nil,   nil,   nil,   nil,
   nil,  1053,   nil,   nil,   nil,   nil,   405,  1031,   nil,  1345,
   nil,   nil,   nil,   nil,   nil,  1115,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   888,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  3886, 10831,  3361,  1377,
   nil,   nil,   nil,   nil,  1090,   nil,   453,   403,   181,   -29,
  1016,   -65,  1031,  1199,  1006,  1130,   892,   772,   274,   998,
   506,   947,   984,  7597,   nil, 22338,   nil,   nil,   nil,   247,
   nil,   nil, 13711,   618,   950,   nil,  1067,  1063,   194,   941,
   678,   nil,   585,  7234, 14911, 15031, 15151, 15271, 15391,   -63,
   nil, 21603, 15751, 15871,   287,   nil,   990,   897,   128,  1736,
   170, 16711, 16831, 16951, 17071, 17191, 17311, 17431, 17551, 17671,
 17791, 17911, 18031, 18151, 18271, 18391, 18511, 18631, 18751, 18871,
 18991, 19111, 19231, 19351, 19471, 19591, 19711,   nil,   848,   168,
   -60,   948,   962,   nil,   nil,   -25,   -26,   nil,   897, 11551,
   989,   872,   nil,   438,   852,  6763,   402,   nil,   -23,  1017,
   nil,   nil,   nil,    73,    50, 20311,   885,   238,  6416,  6362,
   941,   941,   847,   -74,   319,   nil,   nil, 19951,  4115,   104,
   nil,   882,   859,   668,   430,   340,   428,   -39,   735,   223,
 16591,   570,  1973,   622,   nil,   630,   850,   nil,   855, 22804,
   nil,   nil, 16231, 16111,   nil,   nil,  1862, 15991,  2315,   nil,
 15511,   nil, 14791, 14671,   835,   nil,   nil,   752, 14551,   nil,
   843,   nil,   828,   nil, 14431,   nil,     9,   810,   nil,  1355,
   nil,  5299,   nil,   nil,  5057, 22042,   nil,   806,   nil, 14191,
   859,  4936,   nil,  4694,   nil,  2810,   nil,   nil,  3596,   nil,
   nil,   844,  2751,   nil,   800,   824,  1132,   831,   nil,  1282,
   nil,   763,     9,   nil,  6117,  1278,   nil,   nil,   nil,  3994,
     1,   150,   nil,   nil,   484,   434,   756,  3235,    65,   nil,
   nil,   nil,   116,   nil,   nil,   nil,   nil,  4465,   nil,   836,
   nil,  3007,  2952,   nil,  2849, 12751,  2794,   nil,   nil,   nil,
   748,   791,   742,   757, 23104,  4589,   nil,   nil,   nil, 21163,
   nil,   583,   nil,   nil,   nil, 12391, 12271,  4815,   nil,   nil,
   732,   744,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  5420,   nil,   nil,  5541, 12031,   816,   807, 11791, 20915, 11671,
  2419,   725,   574,    79,  4344, 20971,   251,  4694, 20999,  4945,
 21135,  5187,   272, 21355,  5429, 21383,  5671,   867,   240,   968,
 21575, 22234,  1107, 21631,    91,  1249,  2075, 11311,  2020,   172,
 11191,  5662,  5783,  6012,   359,   723,   nil,   680,   nil,  1210,
   nil,  1917, 10471,  1394,   nil,   nil,   922,    86,  7718,   nil,
 10231,    40,  2543,   nil,   nil,  3115,   nil,   nil,   nil, 10111,
   766,   nil,  9991,   nil,   nil,  9871,   nil,   nil,   nil, 22098,
   nil,   737,   nil,   nil,   nil,  7842,   nil,    37,  2582,   213,
  7947,   nil,   641, 22502,   nil,   652,   648,   nil,   619,  9751,
   626,  3760,   569,   693,   637,   nil,   nil,   nil, 21658,  9631,
   572,   nil,   nil,   nil,    17,   536,   nil,   542,   793,   509,
   503,   nil,   492,   477,   391,  9511,   337,   nil,   nil,   321,
   341,   220,   nil,   198,   nil,   111,   nil,   108,    35,   nil,
  1430,  1686,   -37,   -81,   nil,  8068,   -68,   nil,   nil,   nil,
   nil,   nil,   nil,  1177, 20791,  9031,   -63,    55,   nil,   nil,
   nil,    82,  9271,  9391,   432,   nil,   103,   130,   764,   670,
   212,    12,   414,   nil, 22954,   368,   nil,   nil,   280,   555,
   485,   nil,   nil,   493,   565,   250,   nil,   573,    17, 21439,
   610,   240,   224,   538,   -35,     4,   -60,   713,   715,   nil,
   -33,  1306,   572,   nil,   391,   655,   nil,   758,   435,  6642,
   nil,   nil,   nil,   nil,   728,   nil,   nil,   721,   nil,  6238,
   814,   143, 11911,   nil,  1815,   nil,   726,   nil,   821,   nil,
   744, 23029,   nil,   nil, 12511,   165, 12631, 13231,   768, 13471,
 22653,   786,  2744,   nil,   nil,   nil,   791,   nil,  2254,   nil,
  3589,   nil,   nil,   nil,   nil, 21850,   nil,   nil,   nil,  2968,
   nil,  2905,   nil,  3311,   nil,   nil,  2287,   nil,  1040,   nil,
   848,  1453,   nil,   855,   nil,   nil, 21878,   nil, 21411,   nil,
 19831,   nil, 21219,   nil, 21191,   nil,   940,  8551,   nil,   479,
   867,   955,   nil,   nil, 20551,  6884,   nil,   nil, 20671,   -57,
  7005,   nil,   nil,   nil,   nil,   nil,   988,   nil,   193, 23179,
   nil,   nil,  7355,   nil,   nil, 22014,  7476,   nil,   nil,   nil,
 13951,   943,   503,   987,   nil,   951,   961,  1311,   nil,   981,
   982,   983,   987,   991,   992,   995,  1868,  1012,  1664,  1019,
   nil, 20943,   nil,   nil,   246,   nil,   nil,   440, 22070,  1134,
   nil,  8310,   778,  1012,  1088,  1107,   nil,   nil,  1150,  3416,
   nil,  2261,   nil,  3154,   nil,   nil,   nil,  3377,   nil,   nil,
   nil,   nil,  2479,   nil,   nil,  1098,  1803,  6521,   nil,   nil,
   nil,   nil,  1183,  1339, 13831,  3650,   968,   nil,  1107,  1108,
  1123,  1124,  1135,  1136,  1137,  1139,   527,   nil,   298,   533,
  1134,   101,   153,   nil,  3318,   nil,   nil,   nil,   nil,   nil,
    96,  1188,   nil ]

racc_action_default = [
    -2,  -540,    -1,  -539,  -540,  -384,    -3,  -540,  -528,  -447,
  -437,  -285,  -540,  -477,  -540,  -540,  -446,  -438,  -422,  -540,
   -65,  -540,  -526,  -448,  -420,  -310,  -540,  -449,  -422,  -404,
  -540,    -5,  -456,  -422,  -308,   -69,  -540,    -6,  -268,  -457,
  -412,  -400,  -309,  -540,  -540,  -540,  -418,  -403,  -311,   -79,
  -540,  -540,    -9,  -540,  -451,  -405,  -300,  -540,  -260,   -40,
  -450,  -312,  -261,  -540,  -454,  -301,  -452,  -313,  -302,  -262,
  -526,  -314,  -303,  -528,  -540,   -46,  -263,  -453,  -540,   -48,
  -540,  -264,  -539,   -49,  -305,  -265,  -441,  -540,  -516,  -540,
  -443,   -53,  -267,  -442,  -401,  -539,  -539,  -444,  -402,  -306,
  -277,  -540,  -540,  -539,  -445,  -307,  -540,  -231,  -280,   -41,
   -77,   953,  -540,  -540,  -540,  -540,  -539,  -540,  -540,  -540,
  -539,  -510,  -383,  -268,  -246,  -253,  -300,  -454,  -301,  -539,
  -540,  -232,  -242,  -539,  -305,  -247,  -277,  -540,   -63,  -540,
  -540,  -528,  -529,  -540,  -539,  -539,  -286,  -540,  -482,  -477,
  -499,  -483,  -540,  -540,  -539,  -500,  -497,  -480,  -369,  -501,
  -479,  -539,  -478,  -496,  -481,  -476,  -540,  -539,  -488,  -540,
  -486,  -494,  -287,  -284,  -377,   -57,    -8,  -177,  -126,  -170,
  -178,  -117,  -127,  -171,  -161,  -118,  -176,  -128,  -152,  -160,
  -119,  -139,  -169,  -155,  -132,  -179,  -120,  -181,  -133,  -141,
  -164,  -121,  -185,  -134,  -138,  -151,  -122,  -186,  -136,  -129,
  -165,  -137,  -142,  -123,  -154,  -140,  -146,  -124,  -143,  -145,
  -147,  -144,  -156,  -168,  -540,  -148,  -167,  -172,  -158,  -157,
  -174,  -432,  -180,  -166,  -149,  -109,  -159,  -130,  -106,  -173,
  -110,  -131,  -108,  -434,  -163,  -433,  -431,  -150,  -183,  -175,
  -107,  -435,  -184,  -182,  -125,  -135,  -540,  -539,  -540,  -223,
   -45,    -4,  -537,  -535,  -527,  -536,  -540,   -47,  -540,  -540,
  -384,  -540,  -540,  -208,  -280,  -540,  -540,   -92,  -540,   -70,
   -85,  -528,  -540,  -539,  -304,   -73,  -111,   -17,  -113,  -540,
  -112,  -114,  -540,  -540,  -540,   -81,  -439,  -440,  -540,  -540,
  -540,  -406,  -209,  -539,  -540,  -540,  -540,  -540,  -540,  -540,
   -51,  -224,  -540,  -540,  -540,   -52,  -540,  -527,  -526,  -540,
  -274,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,
  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,
  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -327,  -540,  -268,
  -454,  -540,  -540,  -326,  -374,  -539,  -539,  -115,   -22,  -540,
   -67,  -528,   -13,   -14,  -540,  -539,  -526,  -266,  -528,  -540,
  -268,  -454,  -104,  -540,  -540,  -540,  -101,  -102,  -540,  -540,
  -540,  -539,  -540,  -532,  -532,  -233,   -50,  -540,  -539,  -532,
  -508,  -540,  -540,  -540,  -176,  -169,  -179,  -164,  -146,  -147,
  -540,  -148,  -477,  -106,  -506,  -107,  -528,   -64,   -75,  -540,
  -513,  -248,  -540,  -251,  -252,  -243,  -540,  -539,  -540,  -249,
  -251,  -244,  -540,  -540,  -528,  -240,  -241,  -274,  -540,  -254,
  -540,   -39,   -38,   -30,  -540,  -283,  -528,  -540,   -44,  -539,
  -356,  -539,  -359,  -357,  -539,  -189,   -31,  -539,  -498,  -540,
  -540,  -539,  -367,  -539,  -502,  -540,  -505,  -469,  -540,  -474,
  -485,  -540,  -540,  -472,  -332,  -483,  -339,  -540,  -330,  -540,
  -328,  -528,  -539,   -58,  -539,  -540,  -436,  -423,  -424,  -540,
  -517,  -519,  -382,  -380,  -520,  -518,  -528,  -539,  -517,  -519,
  -381,  -520,  -518,    -7,  -538,  -407,  -421,  -539,  -317,  -316,
  -408,  -540,  -540,  -409,  -540,  -539,  -540,  -439,  -440,   -82,
  -540,   -91,  -528,   -71,  -540,  -540,   -21,   -20,   -19,  -197,
   -36,  -413,  -411,  -414,  -410,  -540,  -540,  -539,  -416,  -417,
  -540,  -540,   -26,   -27,   -23,   -24,   -25,  -319,  -321,  -320,
  -539,   -43,   -42,  -539,  -540,  -540,  -540,  -540,  -229,  -540,
  -213,  -218,  -210,  -225,  -219,  -211,  -226,  -220,  -212,  -221,
  -200,  -222,  -205,  -201,  -227,  -202,  -228,  -214,  -203,  -215,
  -204,  -198,  -216,  -199,  -528,  -217,  -540,  -539,  -540,  -274,
  -540,  -539,  -539,  -540,   -16,   -66,  -272,  -528,   -12,  -527,
  -271,  -540,  -539,  -540,  -101,  -103,  -102,  -540,  -539,  -458,
  -540,  -540,  -539,  -517,  -518,  -539,  -270,  -315,  -392,  -539,
  -539,  -275,  -534,  -234,  -533,  -534,  -236,   -37,  -253,  -187,
   -29,  -540,  -509,  -276,  -525,  -540,  -524,  -528,  -477,  -540,
  -539,  -279,  -528,  -540,   -83,   -78,  -539,  -250,  -255,  -540,
  -517,  -273,  -528,  -517,  -518,  -511,  -512,  -237,  -187,  -540,
  -259,  -282,  -530,  -492,  -483,  -539,  -361,  -539,  -540,  -539,
  -539,  -355,  -540,  -540,  -540,  -540,  -528,  -490,  -484,  -540,
  -540,  -539,  -504,  -539,  -489,  -539,  -503,  -539,  -539,  -495,
  -540,  -540,  -337,  -528,  -487,  -539,  -540,  -430,  -427,  -428,
  -429,  -425,  -379,   -61,  -540,  -540,  -540,  -385,  -239,  -238,
  -378,   -59,  -540,  -540,  -539,  -318,  -540,  -539,   -88,   -90,
  -528,  -517,  -518,   -80,  -540,   -74,   -18,  -415,  -206,  -207,
  -539,  -419,   -28,  -540,  -540,  -540,  -293,  -540,  -528,  -196,
  -540,  -521,  -273,  -528,  -517,  -518,  -540,  -540,  -540,  -116,
   -68,   -15,  -101,  -105,  -102,  -528,  -460,  -540,  -540,  -539,
  -376,   -55,  -375,   -54,  -539,  -395,  -394,  -393,  -324,  -539,
  -539,  -532,  -540,  -297,  -477,  -507,  -528,  -462,  -540,  -278,
   -76,  -540,  -245,  -256,  -540,  -385,  -540,  -540,  -257,  -540,
  -540,  -540,  -346,  -348,  -366,  -365,  -362,  -363,  -540,  -351,
  -540,  -353,  -358,  -387,  -386,  -190,  -368,  -370,  -371,  -540,
  -467,  -540,  -465,  -540,  -475,  -473,  -540,  -470,  -335,  -331,
  -340,  -540,  -329,  -540,  -426,   -62,  -194,   -35,  -195,  -531,
  -540,   -60,  -192,   -33,  -193,   -34,  -540,  -540,  -322,   -86,
   -72,  -540,  -290,  -291,  -540,  -539,  -292,  -281,  -540,  -385,
  -539,  -373,  -372,  -385,  -295,  -459,  -540,  -397,  -540,  -540,
  -325,  -399,  -539,   -11,  -235,  -188,  -539,  -461,  -298,   -84,
  -540,  -258,  -491,  -540,  -360,  -539,  -539,  -540,  -493,  -539,
  -539,  -539,  -539,  -539,  -539,  -539,  -540,  -333,  -540,  -338,
   -56,  -191,   -32,  -288,  -540,  -289,  -255,  -539,  -230,  -540,
  -296,  -539,  -540,  -100,   -93,  -540,  -396,  -398,  -540,  -540,
  -274,  -540,  -343,  -540,  -345,  -364,  -352,  -540,  -349,  -354,
  -468,  -466,  -540,  -463,  -471,  -336,  -540,  -539,  -388,  -390,
  -389,  -294,  -539,  -540,  -539,  -540,   -99,  -299,  -521,  -273,
  -539,  -539,  -539,  -539,  -539,  -334,  -539,  -391,  -521,   -98,
  -528,  -517,  -518,  -344,  -540,  -341,  -347,  -350,  -464,  -323,
  -385,  -539,  -342 ]

clist = [
'31,158,545,143,497,310,231,235,424,268,610,415,122,284,315,421,384,290',
'52,659,279,174,470,389,165,235,138,260,298,674,52,473,380,540,527,175',
'309,630,543,471,679,383,264,291,261,132,314,431,810,386,37,613,616,318',
'132,361,284,622,287,660,635,290,176,479,760,487,360,284,319,235,826',
'262,784,787,496,671,809,595,426,868,284,152,678,662,697,430,408,291',
'284,441,444,666,316,385,402,235,132,645,374,224,390,523,357,637,750',
'132,404,752,354,269,637,388,352,414,275,655,625,414,382,262,393,146',
'515,347,786,358,425,853,392,407,452,22,918,754,848,301,486,447,266,172',
'132,440,440,293,521,3,433,300,132,691,246,456,673,446,6,2,598,461,456',
'1,165,,,,456,715,,,,132,,,,,831,,,,879,,,,,,,602,605,,,,,,868,,,,,,',
',,,,,,,426,,,,,,,,,,,,,,,,,479,,487,,,,,,,727,,,,,,,,775,,,915,,484',
',,,,,,,,425,,512,,,,,513,,284,,490,267,360,,,,,,,809,,510,122,174,52',
',784,905,935,770,267,,532,,534,535,536,645,267,617,743,642,132,520,781',
'581,582,949,267,,,,,829,707,267,493,,707,,,,,,682,533,,470,,,621,,368',
',717,,839,430,636,,,,,587,683,546,920,,843,,,,,,360,,,440,440,,632,674',
',537,,,,865,537,,830,426,262,,,,,,,584,,,674,608,679,19,436,117,438',
'710,707,589,284,588,,,117,19,620,634,,,,117,856,707,,866,117,,484,,',
'870,,,,276,165,425,262,,685,,,,874,117,599,,490,,,,854,117,,,117,,,656',
',,,117,,117,,656,,132,117,,,661,,,,426,348,733,132,,19,840,835,,,117',
',369,,,440,,745,19,,,,,117,,369,,696,,,699,117,692,276,657,725,484,',
'284,484,698,,290,,,634,693,,425,,235,,117,675,701,490,19,677,,490,,',
'756,117,117,132,117,931,291,,117,,426,132,,,,772,761,470,470,747,,716',
'950,,,426,,,267,132,267,267,267,815,,937,541,542,430,606,,821,,,,,,736',
'290,484,,768,,730,,,235,919,425,,,,,,484,,,748,891,490,,,,425,291,,',
',,,,,,699,490,,699,,741,739,755,758,,698,,284,698,764,235,601,766,132',
'634,,917,,,751,,,753,,,,,,132,414,117,,,696,,165,627,19,132,,,132,746',
',,,749,,656,,456,,456,456,,,19,877,276,,470,,457,,456,117,456,,456,459',
'456,456,,,767,463,19,117,19,117,117,117,846,,,117,117,,284,,,,,,,634',
'817,758,,,699,696,,,823,825,131,,,692,698,,,758,,131,726,,,,,,259,,696',
'470,,470,707,,,273,19,,,,696,,19,,,,,,,284,,847,117,,,302,859,851,284',
',,131,311,,117,19,,,,470,131,,,,,165,,117,,,,,,117,,537,276,728,,,,',
',898,117,,763,845,,,,131,,940,,131,,,131,,884,,,131,,,,131,19,131,267',
'19,,131,259,,882,284,19,,19,,,,131,,,869,,871,267,,,,131,131,,,872,435',
'873,19,445,,,875,117,,,,,,456,456,117,,456,456,456,456,456,456,456,426',
'19,,,,,,,,117,,758,,,,484,,,276,,,,,,,832,833,,,836,,19,,,,,,,,484,',
',,,19,,608,19,425,844,,117,,,456,456,456,456,456,490,758,,696,,,,,,',
',858,,,,,456,,930,,932,,117,,933,117,19,19,,934,131,,132,,19,,,117,',
',,,,19,12,117,,117,,,117,,,,,,12,,,64,,951,,,,519,,,,883,,64,,,885,19',
',,276,,,,,,,,,,,890,,280,548,,550,551,552,553,554,555,556,557,558,559',
'560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,,,,12',
',,,,,,19,,921,,350,267,12,585,64,117,,927,,,590,371,,117,117,,,64,,',
',,,,371,276,619,,371,,,,280,,,,,,,,12,,,,,131,,,631,,,445,131,,,64,131',
',,131,19,519,131,,,,647,648,,,19,,,131,,,,,651,,,,276,,,,,,131,,,862',
',,,,,,,,,,,783,,789,791,,,,,,,684,,,,800,131,802,,804,,805,807,,131',
',,,,117,,,,,,,117,,,,,,131,,19,,,,,19,,,713,,,,,,892,,,19,718,719,,19',
',,,12,,364,,,,,,,,,,131,,,64,,729,,12,,,,,,,,,,,,19,,,64,,280,,,12,',
'12,,101,,131,,,,,,,,364,64,101,64,19,740,,131,,,,117,,,,,,131,,,131',
',,,131,,,131,,,131,,,,,,,,,,,,12,,,765,,,12,,769,,,,131,,,64,,,,,,64',
'131,353,,,,101,,12,,,,,,,,,795,,101,,796,,64,902,904,,,906,908,909,910',
'911,913,914,,,,812,,,391,,,280,,816,818,,,410,,411,,822,824,419,101',
',,,12,,,12,,,,,,,12,,12,,,64,429,432,64,,,,837,,,64,364,64,943,945,946',
'947,948,12,,,,,,,38,,,,,,531,,64,952,,,38,855,,,12,,,,857,,,,,816,,822',
'824,,131,64,277,,,,,,,,,,,,,,12,,280,,,,,,,,,,,12,,64,12,,,,,,364,,',
'881,,,64,349,,64,,38,,,,,,131,370,101,,888,,,38,,,,,,,370,12,12,,,,',
'101,277,12,,,881,,,,64,64,12,,,,,,64,,,101,,101,,38,,64,,,,,,,,,,,,663',
',,664,,12,,,,,669,,670,,,,,,,,64,,,280,,,,,,,,131,,686,,,,,101,,,,,',
'101,,,,,,,,,,,,704,,,,12,,,,,,,101,,,,,,,,64,,,,,618,,,,,,720,,,,,,',
',,,,,,723,,,724,,280,,638,,,,,,,391,,,646,38,,,101,,,101,12,,,650,,',
'101,,101,,12,,38,,277,64,737,738,667,,,,,,,64,,,,101,,,38,,38,,,280',
',,,,,,,,371,,,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,,,,12,,38,,,12',
',,38,101,,,101,,,64,,12,,,64,12,,,,,,618,,894,,38,64,,813,,64,,,,,,',
',,,,,,,101,101,277,,,,12,,101,,,,,,,,,101,,,,64,,,,,,,,,,,12,,38,,,38',
',,,,757,,38,638,38,64,391,101,,,,,,,,,850,,,,,,,,,38,687,,,,773,,,,',
',,,,,778,271,,,,,271,,38,,,,,,,,,,,,,271,101,,,277,,,271,,,,,,,,,,38',
',,,,,,,,,,271,,38,887,,38,,,889,,,271,,,,,,,271,,897,,,,271,271,,,,',
',,271,,271,,271,101,,,271,271,,38,38,,,101,,,,38,,,,,,,,922,38,271,',
',,,,,,,,,,,,,,,,,,861,,,,936,,,,,,,38,,,277,,,,,,,,,,,,,,,,,,,,,,,,',
',,,101,,,,,101,,,,,,,,886,896,,,101,,,,101,,,38,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,277,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,101,,271,,,,38,,,,,,,,,,38',
',,,,,,,,,,,277,,,,,,,,271,370,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,38,,,,,38,,,,,,,,,893,,,38,,,,38,,,,,,,,,,,',
',271,,,271,271,,,,,,,271,,271,271,,,,,271,,,38,,,271,,,,,,,,,,,,,,,271',
',,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271',
',,,,,,,,,,271,271,,,,,,,,,,,,,,,,,,271,,,,,271,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,,,,,,,,,,,,,,',
',,,271,,,,,,271,,,,,,,,,,271,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,271,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,271,,,,,,,,,271,,,271,,271,271,,271,271,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,271,,,,,,,,,,,271,,,,',
',,,,,,271' ]
        racc_goto_table = arr = Array.new(2772, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'7,118,90,32,83,36,53,54,25,19,13,66,64,59,36,66,63,57,10,107,47,64,102',
'63,110,54,39,21,19,135,10,40,11,87,83,39,19,98,87,103,136,61,9,58,6',
'34,19,28,104,36,8,62,62,19,34,44,59,62,17,108,49,57,8,38,14,38,43,59',
'32,54,84,95,115,114,130,108,101,51,36,137,59,116,108,112,26,61,48,58',
'59,41,41,112,6,7,53,54,34,140,52,127,7,130,17,67,65,34,75,65,74,127',
'67,52,92,7,127,105,100,7,60,95,99,79,31,22,113,18,7,15,78,39,117,5,120',
'121,122,125,25,118,126,81,34,7,7,128,129,4,21,131,34,132,133,7,134,21',
'3,2,94,139,7,1,110,,,,7,49,,,,34,,,,,14,,,,104,,,,,,,38,38,,,,,,137',
',,,,,,,,,,,,,36,,,,,,,,,,,,,,,,,38,,38,,,,,,,90,,,,,,,,26,,,104,,54',
',,,,,,,,7,,44,,,,,48,,59,,64,30,43,,,,,,,101,,32,64,64,10,,115,114,104',
'49,30,,19,,19,19,19,140,30,28,51,25,34,21,112,41,41,84,30,,,,,26,38',
'30,8,,38,,,,,,102,10,,102,,,11,,30,,130,,26,61,63,,,,,44,103,6,14,,26',
',,,,,43,,,7,7,,36,135,,95,,,,107,95,,49,36,95,,,,,,,10,,,135,7,136,24',
'30,24,30,25,38,9,59,6,,,24,24,21,47,,,,24,98,38,,108,24,,54,,,108,,',
',24,110,7,95,,41,,,,108,24,95,,64,,,,62,24,,,24,,,7,,,,24,,24,,7,,34',
'24,,,110,,,,36,24,25,34,,24,87,83,,,24,,24,,,7,,25,24,,,,,24,,24,,32',
',,7,24,64,24,106,61,54,,59,54,64,,57,,,47,39,,7,,54,,24,106,39,64,24',
'106,,64,,,28,24,24,34,24,108,58,,24,,36,34,,,,66,63,102,102,11,,17,26',
',,36,,,30,34,30,30,30,40,,13,30,30,61,77,,40,,,,,,19,57,54,,11,,32,',
',54,90,7,,,,,,54,,,19,83,64,,,,7,58,,,,,,,,,7,64,,7,,10,17,7,7,,64,',
'59,64,53,54,30,118,34,47,,83,,,39,,,39,,,,,,34,7,24,,,32,,110,30,24',
'34,,,34,95,,,,95,,7,,7,,7,7,,,24,102,24,,102,,109,,7,24,7,,7,109,7,7',
',,95,109,24,24,24,24,24,24,11,,,24,24,,59,,,,,,,47,21,7,,,7,32,,,21',
'21,33,,,64,64,,,7,,33,77,,,,,,33,,32,102,,102,38,,,33,24,,,,32,,24,',
',,,,,59,,7,24,,,33,47,7,59,,,33,33,,24,24,,,,102,33,,,,,110,,24,,,,',
',24,,95,24,30,,,,,,11,24,,77,95,,,,33,,25,,33,,,33,,19,,,33,,,,33,24',
'33,30,24,,33,33,,21,59,24,,24,,,,33,,,106,,106,30,,,,33,33,,,106,45',
'106,24,33,,,106,24,,,,,,7,7,24,,7,7,7,7,7,7,7,36,24,,,,,,,,24,,7,,,',
'54,,,24,,,,,,,77,77,,,77,,24,,,,,,,,54,,,,,24,,7,24,7,77,,24,,,7,7,7',
'7,7,64,7,,32,,,,,,,,77,,,,,7,,106,,106,,24,,106,24,24,24,,106,33,,34',
',24,,,24,,,,,,24,23,24,,24,,,24,,,,,,23,,,50,,106,,,,33,,,,77,,50,,',
'77,24,,,24,,,,,,,,,,,77,,50,33,,33,33,33,33,33,33,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,33,33,33,,,,23,,,,,,,24,,77,,50,30',
'23,45,50,24,,77,,,45,50,,24,24,,,50,,,,,,,50,24,33,,50,,,,50,,,,,,,',
'23,,,,,33,,,45,,,33,33,,,50,33,,,33,24,33,33,,,,45,33,,,24,,,33,,,,',
'45,,,,24,,,,,,33,,,24,,,,,,,,,,,,109,,109,109,,,,,,,45,,,,109,33,109',
',109,,109,109,,33,,,,,24,,,,,,,24,,,,,,33,,24,,,,,24,,,45,,,,,,24,,',
'24,33,33,,24,,,,23,,12,,,,,,,,,,33,,,50,,33,,23,,,,,,,,,,,,24,,,50,',
'50,,,23,,23,,20,,33,,,,,,,,12,50,20,50,24,45,,33,,,,24,,,,,,33,,,33',
',,,33,,,33,,,33,,,,,,,,,,,,23,,,45,,,23,,45,,,,33,,,50,,,,,,50,33,20',
',,,20,,23,,,,,,,,,33,,20,,45,,50,109,109,,,109,109,109,109,109,109,109',
',,,45,,,29,,,50,,33,33,,,29,,29,,33,33,29,20,,,,23,,,23,,,,,,,23,,23',
',,50,29,29,50,,,,45,,,50,12,50,109,109,109,109,109,23,,,,,,,27,,,,,',
'12,,50,109,,,27,33,,,23,,,,45,,,,,33,,33,33,,33,50,27,,,,,,,,,,,,,,23',
',50,,,,,,,,,,,23,,50,23,,,,,,12,,,33,,,50,27,,50,,27,,,,,,33,27,20,',
'33,,,27,,,,,,,27,23,23,,,,,20,27,23,,,33,,,,50,50,23,,,,,,50,,,20,,20',
',27,,50,,,,,,,,,,,,12,,,12,,23,,,,,12,,12,,,,,,,,50,,,50,,,,,,,,33,',
'12,,,,,20,,,,,,20,,,,,,,,,,,,12,,,,23,,,,,,,20,,,,,,,,50,,,,,29,,,,',
',12,,,,,,,,,,,,,12,,,12,,50,,29,,,,,,,29,,,29,27,,,20,,,20,23,,,29,',
',20,,20,,23,,27,,27,50,12,12,29,,,,,,,50,,,,20,,,27,,27,,,50,,,,,,,',
',50,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,23,,27,,,23,,,27,20,',
',20,,,50,,23,,,50,23,,,,,,29,,50,,27,50,,12,,50,,,,,,,,,,,,,,20,20,27',
',,,23,,20,,,,,,,,,20,,,,50,,,,,,,,,,,23,,27,,,27,,,,,29,,27,29,27,50',
'29,20,,,,,,,,,12,,,,,,,,,27,27,,,,29,,,,,,,,,,29,42,,,,,42,,27,,,,,',
',,,,,,,42,20,,,27,,,42,,,,,,,,,,27,,,,,,,,,,,42,,27,12,,27,,,12,,,42',
',,,,,,42,,12,,,,42,42,,,,,,,42,,42,,42,20,,,42,42,,27,27,,,20,,,,27',
',,,,,,,12,27,42,,,,,,,,,,,,,,,,,,,,29,,,,12,,,,,,,27,,,27,,,,,,,,,,',
',,,,,,,,,,,,,,,,,20,,,,,20,,,,,,,,29,20,,,20,,,,20,,,27,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,27,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,20,,42,,,,27,,,,,,',
',,,27,,,,,,,,,,,,27,,,,,,,,42,27,42,42,42,42,42,42,42,42,42,42,42,42',
'42,42,42,42,42,42,42,42,42,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,27,,,,,27,,,,,,,,,27,,,27,,,,27,,,,,,,,,,,,,42,,,42,42,,,,,,,42,,42',
'42,,,,,42,,,27,,,42,,,,,,,,,,,,,,,42,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,42,42,,,,,,,,,,,,,,',
',,,42,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,42,,,42,,,42,,,,,,,,,,,,,,,,,,42,,,,,,42,,,,,,,,,,42,,,,,,,,,,,',
',,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,42,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,42,,,42,,42,42,,42',
'42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,42,,,',
',,,,,,,42,,,,,,,,,,,42' ]
        racc_goto_check = arr = Array.new(2772, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   159,   155,   151,   145,   128,    22,    -3,    47,    20,
    15,   -63,  1157,  -371,  -546,  -633,   nil,    22,    45,   -17,
  1277,     6,    45,   973,   377,  -121,  -402,  1451,   -93,  1291,
   240,  -165,    -5,   705,    40,   nil,   -51,   nil,  -193,    21,
  -144,   -55,  1911,   -16,   -27,   708,   nil,   -15,   -24,  -349,
   988,  -296,     9,   -12,   -11,   nil,   nil,   -19,     7,   -22,
    22,   -55,  -332,   -80,     7,  -498,  -105,  -310,   nil,   nil,
   nil,   nil,   nil,   nil,    29,     0,   nil,   175,    25,   110,
   nil,   126,   nil,  -264,  -634,   nil,   nil,  -276,   nil,   nil,
  -314,   nil,    34,   nil,  -218,    49,   nil,   nil,  -365,    14,
  -277,  -604,  -147,  -130,  -633,  -324,    49,  -420,  -380,   512,
    11,   nil,  -356,  -534,  -585,  -586,    68,   -22,   -12,   nil,
  -755,  -476,  -620,   nil,   nil,    88,   114,    81,   103,  -149,
  -192,   101,  -326,   132,  -303,  -426,  -422,  -709,   nil,    -9,
  -323 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   362,   nil,   317,
   363,   nil,   381,   nil,   828,   nil,   366,   nil,   nil,   nil,
   137,   109,     7,   115,   272,   nil,   nil,   123,   nil,   125,
    59,   nil,   437,    75,    79,    83,   135,    91,   706,   nil,
   nil,   nil,    14,    20,   nil,   nil,    35,    43,    49,   nil,
   127,   372,   nil,   286,   491,   240,   288,    94,    98,   107,
   nil,   116,   nil,   120,   482,   700,   nil,   124,    58,    62,
    69,    76,    81,    85,   367,    92,    95,   nil,   nil,   173,
    11,   nil,    26,   nil,   nil,    45,    53,   nil,    63,    70,
   nil,    78,   nil,    89,   nil,   499,   102,   106,   nil,   nil,
   nil,   468,   170,   nil,   464,   nil,   154,   nil,   161,   nil,
   672,   443,   nil,   nil,   nil,   148,   nil,   nil,   629,   483,
   nil,   nil,   nil,    41,    47,    55,   nil,   nil,   nil,   nil,
   477,   nil,   nil,   nil,   167,   168,   171,   653,   150,   153,
   121 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_1,
  0, 153, :_reduce_2,
  2, 151, :_reduce_3,
  2, 152, :_reduce_4,
  1, 154, :_reduce_5,
  1, 154, :_reduce_6,
  3, 154, :_reduce_7,
  2, 154, :_reduce_8,
  1, 157, :_reduce_9,
  1, 157, :_reduce_none,
  4, 160, :_reduce_11,
  2, 161, :_reduce_12,
  1, 165, :_reduce_13,
  1, 165, :_reduce_14,
  3, 165, :_reduce_15,
  2, 165, :_reduce_none,
  0, 180, :_reduce_17,
  4, 159, :_reduce_18,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 159, :_reduce_23,
  3, 159, :_reduce_24,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  4, 159, :_reduce_none,
  3, 159, :_reduce_29,
  3, 159, :_reduce_none,
  3, 159, :_reduce_31,
  6, 159, :_reduce_32,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 179, :_reduce_none,
  3, 179, :_reduce_42,
  3, 179, :_reduce_43,
  3, 179, :_reduce_44,
  2, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 168, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_50,
  2, 170, :_reduce_51,
  2, 170, :_reduce_52,
  1, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 189, :_reduce_none,
  2, 183, :_reduce_57,
  3, 183, :_reduce_none,
  4, 183, :_reduce_59,
  5, 183, :_reduce_none,
  4, 183, :_reduce_none,
  5, 183, :_reduce_none,
  2, 183, :_reduce_63,
  2, 183, :_reduce_64,
  1, 171, :_reduce_none,
  3, 171, :_reduce_none,
  1, 193, :_reduce_none,
  3, 193, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  3, 192, :_reduce_none,
  5, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 196, :_reduce_none,
  3, 196, :_reduce_none,
  2, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 198, :_reduce_none,
  3, 198, :_reduce_none,
  1, 197, :_reduce_none,
  4, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  2, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_94,
  3, 169, :_reduce_95,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  2, 169, :_reduce_99,
  1, 169, :_reduce_none,
  1, 200, :_reduce_101,
  1, 200, :_reduce_102,
  2, 201, :_reduce_103,
  1, 201, :_reduce_104,
  3, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_109,
  1, 202, :_reduce_110,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 182, :_reduce_187,
  5, 182, :_reduce_none,
  3, 182, :_reduce_189,
  5, 182, :_reduce_none,
  6, 182, :_reduce_191,
  5, 182, :_reduce_192,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  4, 182, :_reduce_none,
  3, 182, :_reduce_none,
  3, 182, :_reduce_198,
  3, 182, :_reduce_199,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  3, 182, :_reduce_202,
  3, 182, :_reduce_203,
  3, 182, :_reduce_204,
  3, 182, :_reduce_205,
  4, 182, :_reduce_none,
  4, 182, :_reduce_none,
  2, 182, :_reduce_none,
  2, 182, :_reduce_209,
  3, 182, :_reduce_210,
  3, 182, :_reduce_211,
  3, 182, :_reduce_212,
  3, 182, :_reduce_213,
  3, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  2, 182, :_reduce_223,
  2, 182, :_reduce_224,
  3, 182, :_reduce_225,
  3, 182, :_reduce_226,
  3, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_none,
  6, 182, :_reduce_230,
  1, 182, :_reduce_none,
  1, 178, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  4, 209, :_reduce_none,
  2, 209, :_reduce_none,
  3, 213, :_reduce_237,
  1, 214, :_reduce_238,
  1, 214, :_reduce_none,
  1, 174, :_reduce_240,
  1, 174, :_reduce_none,
  1, 185, :_reduce_242,
  2, 185, :_reduce_243,
  2, 185, :_reduce_244,
  4, 185, :_reduce_245,
  1, 185, :_reduce_246,
  1, 188, :_reduce_none,
  2, 216, :_reduce_248,
  2, 216, :_reduce_249,
  2, 215, :_reduce_250,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 210, :_reduce_253,
  2, 210, :_reduce_254,
  3, 210, :_reduce_255,
  4, 210, :_reduce_256,
  3, 177, :_reduce_none,
  4, 177, :_reduce_none,
  2, 177, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  2, 208, :_reduce_266,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 208, :_reduce_270,
  3, 208, :_reduce_none,
  3, 208, :_reduce_272,
  3, 208, :_reduce_273,
  2, 208, :_reduce_274,
  3, 208, :_reduce_275,
  3, 208, :_reduce_276,
  1, 208, :_reduce_277,
  4, 208, :_reduce_278,
  3, 208, :_reduce_279,
  1, 208, :_reduce_280,
  5, 208, :_reduce_none,
  4, 208, :_reduce_none,
  3, 208, :_reduce_none,
  2, 208, :_reduce_284,
  1, 208, :_reduce_285,
  2, 208, :_reduce_286,
  2, 208, :_reduce_287,
  6, 208, :_reduce_288,
  6, 208, :_reduce_289,
  5, 208, :_reduce_290,
  5, 208, :_reduce_291,
  5, 208, :_reduce_292,
  4, 208, :_reduce_293,
  7, 208, :_reduce_none,
  5, 208, :_reduce_295,
  6, 208, :_reduce_296,
  4, 208, :_reduce_297,
  5, 208, :_reduce_298,
  7, 208, :_reduce_299,
  1, 208, :_reduce_300,
  1, 208, :_reduce_301,
  1, 208, :_reduce_302,
  1, 208, :_reduce_none,
  1, 173, :_reduce_none,
  1, 225, :_reduce_none,
  1, 231, :_reduce_none,
  1, 234, :_reduce_none,
  1, 235, :_reduce_none,
  1, 237, :_reduce_none,
  1, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 242, :_reduce_none,
  1, 245, :_reduce_none,
  1, 246, :_reduce_none,
  1, 226, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 233, :_reduce_322,
  5, 233, :_reduce_323,
  1, 163, :_reduce_324,
  2, 163, :_reduce_325,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 250, :_reduce_none,
  3, 250, :_reduce_none,
  1, 253, :_reduce_none,
  3, 253, :_reduce_none,
  1, 252, :_reduce_none,
  4, 252, :_reduce_none,
  6, 252, :_reduce_none,
  3, 252, :_reduce_none,
  5, 252, :_reduce_none,
  2, 252, :_reduce_none,
  4, 252, :_reduce_none,
  1, 252, :_reduce_none,
  3, 252, :_reduce_none,
  6, 254, :_reduce_none,
  8, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 190, :_reduce_356,
  1, 190, :_reduce_none,
  3, 260, :_reduce_none,
  1, 260, :_reduce_none,
  4, 260, :_reduce_360,
  1, 261, :_reduce_none,
  2, 261, :_reduce_none,
  1, 262, :_reduce_none,
  3, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  2, 230, :_reduce_367,
  4, 265, :_reduce_none,
  1, 265, :_reduce_none,
  3, 266, :_reduce_370,
  3, 266, :_reduce_371,
  4, 223, :_reduce_none,
  4, 223, :_reduce_373,
  2, 186, :_reduce_374,
  4, 186, :_reduce_none,
  4, 186, :_reduce_none,
  2, 229, :_reduce_377,
  4, 229, :_reduce_378,
  4, 229, :_reduce_379,
  3, 229, :_reduce_380,
  3, 229, :_reduce_none,
  3, 229, :_reduce_none,
  2, 229, :_reduce_383,
  1, 229, :_reduce_384,
  4, 229, :_reduce_385,
  4, 228, :_reduce_386,
  4, 228, :_reduce_387,
  5, 239, :_reduce_388,
  1, 269, :_reduce_389,
  1, 269, :_reduce_none,
  6, 162, :_reduce_391,
  1, 162, :_reduce_none,
  1, 270, :_reduce_393,
  1, 270, :_reduce_394,
  1, 270, :_reduce_395,
  2, 271, :_reduce_396,
  1, 271, :_reduce_397,
  2, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 218, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 273, :_reduce_none,
  3, 274, :_reduce_407,
  3, 219, :_reduce_408,
  3, 220, :_reduce_409,
  3, 221, :_reduce_none,
  3, 221, :_reduce_411,
  0, 277, :_reduce_412,
  2, 277, :_reduce_413,
  1, 278, :_reduce_414,
  2, 278, :_reduce_415,
  3, 222, :_reduce_none,
  3, 222, :_reduce_none,
  0, 280, :_reduce_418,
  3, 280, :_reduce_none,
  0, 275, :_reduce_420,
  2, 275, :_reduce_421,
  0, 276, :_reduce_422,
  2, 276, :_reduce_423,
  1, 279, :_reduce_424,
  2, 279, :_reduce_425,
  3, 279, :_reduce_426,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  2, 206, :_reduce_431,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  3, 207, :_reduce_436,
  1, 272, :_reduce_437,
  1, 272, :_reduce_438,
  2, 272, :_reduce_none,
  2, 272, :_reduce_none,
  1, 199, :_reduce_441,
  1, 199, :_reduce_442,
  1, 199, :_reduce_443,
  1, 199, :_reduce_444,
  1, 199, :_reduce_445,
  1, 199, :_reduce_446,
  1, 199, :_reduce_447,
  1, 199, :_reduce_448,
  1, 199, :_reduce_449,
  1, 199, :_reduce_450,
  1, 199, :_reduce_451,
  1, 199, :_reduce_452,
  1, 199, :_reduce_453,
  1, 224, :_reduce_none,
  1, 172, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 243, :_reduce_458,
  3, 243, :_reduce_459,
  2, 243, :_reduce_460,
  3, 247, :_reduce_461,
  2, 247, :_reduce_462,
  6, 267, :_reduce_463,
  8, 267, :_reduce_464,
  4, 267, :_reduce_465,
  6, 267, :_reduce_466,
  4, 267, :_reduce_467,
  6, 267, :_reduce_468,
  2, 267, :_reduce_469,
  4, 267, :_reduce_470,
  6, 267, :_reduce_471,
  2, 267, :_reduce_472,
  4, 267, :_reduce_473,
  2, 267, :_reduce_474,
  4, 267, :_reduce_475,
  1, 267, :_reduce_476,
  0, 267, :_reduce_477,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_483,
  3, 251, :_reduce_484,
  2, 251, :_reduce_485,
  1, 284, :_reduce_486,
  3, 284, :_reduce_none,
  1, 255, :_reduce_488,
  3, 255, :_reduce_489,
  3, 285, :_reduce_none,
  3, 286, :_reduce_none,
  1, 256, :_reduce_none,
  3, 256, :_reduce_none,
  1, 283, :_reduce_494,
  3, 283, :_reduce_495,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 257, :_reduce_498,
  1, 257, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 259, :_reduce_502,
  3, 259, :_reduce_503,
  2, 258, :_reduce_504,
  1, 258, :_reduce_none,
  1, 248, :_reduce_none,
  3, 248, :_reduce_none,
  1, 227, :_reduce_508,
  2, 227, :_reduce_509,
  1, 212, :_reduce_510,
  3, 212, :_reduce_511,
  3, 289, :_reduce_512,
  2, 289, :_reduce_513,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 187, :_reduce_517,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 268, :_reduce_521,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  0, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 194, :_reduce_none,
  2, 175, :_reduce_none,
  0, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  0, 156, :_reduce_none ]

racc_reduce_n = 540

racc_shift_n = 953

racc_token_table = {
  false => 0,
  :error => 1,
  "!" => 2,
  :tTILDE => 3,
  :tUPLUS => 4,
  :tPOW => 5,
  :tUMINUS_NUM => 6,
  :tUMINUS => 7,
  :tSTAR2 => 8,
  :tDIVIDE => 9,
  :tPERCENT => 10,
  :tPLUS => 11,
  :tMINUS => 12,
  :tLSHFT => 13,
  :tRSHFT => 14,
  :tAMPER2 => 15,
  :tPIPE => 16,
  :tCARET => 17,
  ">" => 18,
  :tGEQ => 19,
  "<" => 20,
  :tLEQ => 21,
  :tCMP => 22,
  :tEQ => 23,
  :tEQQ => 24,
  :tNEQ => 25,
  :tMATCH => 26,
  :tNMATCH => 27,
  :tANDOP => 28,
  :tOROP => 29,
  :tDOT2 => 30,
  :tDOT3 => 31,
  "?" => 32,
  ":" => 33,
  :kRESCUE_MOD => 34,
  "=" => 35,
  :tOP_ASGN => 36,
  :kDEFINED => 37,
  :kNOT => 38,
  :kOR => 39,
  :kAND => 40,
  :kIF_MOD => 41,
  :kUNLESS_MOD => 42,
  :kWHILE_MOD => 43,
  :kUNTIL_MOD => 44,
  :tLBRACE_ARG => 45,
  :tLOWEST => 46,
  :kCLASS => 47,
  :kMODULE => 48,
  :kDEF => 49,
  :kUNDEF => 50,
  :kBEGIN => 51,
  :kRESCUE => 52,
  :kENSURE => 53,
  :kEND => 54,
  :kIF => 55,
  :kUNLESS => 56,
  :kTHEN => 57,
  :kELSIF => 58,
  :kELSE => 59,
  :kCASE => 60,
  :kWHEN => 61,
  :kWHILE => 62,
  :kUNTIL => 63,
  :kFOR => 64,
  :kBREAK => 65,
  :kNEXT => 66,
  :kREDO => 67,
  :kRETRY => 68,
  :kIN => 69,
  :kDO => 70,
  :kDO_COND => 71,
  :kDO_BLOCK => 72,
  :kDO_LAMBDA => 73,
  :kRETURN => 74,
  :kYIELD => 75,
  :kSUPER => 76,
  :kSELF => 77,
  :kNIL => 78,
  :kTRUE => 79,
  :kFALSE => 80,
  :kALIAS => 81,
  :klBEGIN => 82,
  :klEND => 83,
  :k__LINE__ => 84,
  :k__FILE__ => 85,
  :k__ENCODING__ => 86,
  :kDEFined => 87,
  :kBLOCK_GIVEN => 88,
  :tIDENTIFIER => 89,
  :tFID => 90,
  :tGVAR => 91,
  :tIVAR => 92,
  :tCONSTANT => 93,
  :tCVAR => 94,
  :tLABEL => 95,
  :tINTEGER => 96,
  :tFLOAT => 97,
  :tSTRING_CONTENT => 98,
  :tCHAR => 99,
  :tNTH_REF => 100,
  :tBACK_REF => 101,
  :tREGEXP_END => 102,
  :tAREF => 103,
  :tASET => 104,
  :tCOLON2 => 105,
  :tCOLON3 => 106,
  :tASSOC => 107,
  :tLPAREN => 108,
  :tLPAREN_ARG => 109,
  :tRPAREN => 110,
  :tLBRACK => 111,
  :tLBRACE => 112,
  :tSTAR => 113,
  :tAMPER => 114,
  :tLAMBDA => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSTRING_DBEG => 122,
  :tSTRING_DVAR => 123,
  :tSTRING_END => 124,
  :tLAMBEG => 125,
  :tSTRING => 126,
  :tXSTRING_END => 127,
  "{" => 128,
  "}" => 129,
  "[" => 130,
  "." => 131,
  "," => 132,
  "|" => 133,
  "^" => 134,
  "&" => 135,
  "+" => 136,
  "-" => 137,
  "*" => 138,
  "/" => 139,
  "%" => 140,
  "~" => 141,
  "`" => 142,
  "(" => 143,
  ")" => 144,
  "]" => 145,
  ";" => 146,
  " " => 147,
  "\\n" => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"!\"",
  "tTILDE",
  "tUPLUS",
  "tPOW",
  "tUMINUS_NUM",
  "tUMINUS",
  "tSTAR2",
  "tDIVIDE",
  "tPERCENT",
  "tPLUS",
  "tMINUS",
  "tLSHFT",
  "tRSHFT",
  "tAMPER2",
  "tPIPE",
  "tCARET",
  "\">\"",
  "tGEQ",
  "\"<\"",
  "tLEQ",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tMATCH",
  "tNMATCH",
  "tANDOP",
  "tOROP",
  "tDOT2",
  "tDOT3",
  "\"?\"",
  "\":\"",
  "kRESCUE_MOD",
  "\"=\"",
  "tOP_ASGN",
  "kDEFINED",
  "kNOT",
  "kOR",
  "kAND",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "tLBRACE_ARG",
  "tLOWEST",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kALIAS",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "kDEFined",
  "kBLOCK_GIVEN",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tLABEL",
  "tINTEGER",
  "tFLOAT",
  "tSTRING_CONTENT",
  "tCHAR",
  "tNTH_REF",
  "tBACK_REF",
  "tREGEXP_END",
  "tAREF",
  "tASET",
  "tCOLON2",
  "tCOLON3",
  "tASSOC",
  "tLPAREN",
  "tLPAREN_ARG",
  "tRPAREN",
  "tLBRACK",
  "tLBRACE",
  "tSTAR",
  "tAMPER",
  "tLAMBDA",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tLAMBEG",
  "tSTRING",
  "tXSTRING_END",
  "\"{\"",
  "\"}\"",
  "\"[\"",
  "\".\"",
  "\",\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "\"`\"",
  "\"(\"",
  "\")\"",
  "\"]\"",
  "\";\"",
  "\" \"",
  "\"\\\\n\"",
  "$start",
  "target",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "do_block",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "k_while",
  "do",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "f_args",
  "operation3",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "sym",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 103)
  def _reduce_1(val, _values, result)
                        # puts 'well, we got here..'
                    # puts val[0]
                    @parser_result = val[0]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 111)
  def _reduce_2(val, _values, result)
                        self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 115)
  def _reduce_3(val, _values, result)
                        # puts 'program'
                    # puts val[1]
                    result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 122)
  def _reduce_4(val, _values, result)
                        # puts 'top_compstmt'
                    # puts val[0]
                    # puts val[1]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 130)
  def _reduce_5(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 134)
  def _reduce_6(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 138)
  def _reduce_7(val, _values, result)
                        result = val[0] + [val[2]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 142)
  def _reduce_8(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 147)
  def _reduce_9(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 153)
  def _reduce_11(val, _values, result)
                        # puts "erm wtf?!"
                    # puts val[1]
                    result = self.node_bodystmt(val[0], val[1], val[2], val[3])
                    # if val[1]
                      # pp result
                    # end
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 163)
  def _reduce_12(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 168)
  def _reduce_13(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 172)
  def _reduce_14(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 176)
  def _reduce_15(val, _values, result)
                        result = val[0] + [val[2]]
		              
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 182)
  def _reduce_17(val, _values, result)
                        self.lex_state = :EXPR_FNAME
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 186)
  def _reduce_18(val, _values, result)
                        result = node :alias, :lhs => val[1], :rhs => val[3] 
                  
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 194)
  def _reduce_23(val, _values, result)
                		    result = node :if_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 198)
  def _reduce_24(val, _values, result)
                		    result = node :unless_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 206)
  def _reduce_29(val, _values, result)
                		    result = node :assign, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 211)
  def _reduce_31(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 215)
  def _reduce_32(val, _values, result)
                		    puts "in here for #{val[0]}"
            		  
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 229)
  def _reduce_42(val, _values, result)
                  	    result = node :andop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 233)
  def _reduce_43(val, _values, result)
                  	    result = node :orop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 237)
  def _reduce_44(val, _values, result)
                  	    result = node :not, :expr => val[2]
              	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 248)
  def _reduce_50(val, _values, result)
                  	    result = node :return, :call_args => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 252)
  def _reduce_51(val, _values, result)
                	      result = node :break, :call_args => val[1]
            	    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 256)
  def _reduce_52(val, _values, result)
                	      result = node :next, :call_args => val[1]
            	    
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 267)
  def _reduce_57(val, _values, result)
                        # command call - no brackets/recv
          		      result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 273)
  def _reduce_59(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 280)
  def _reduce_63(val, _values, result)
          		          result = node :super, :call_args => val[1]
      		        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 284)
  def _reduce_64(val, _values, result)
            	          result = node :yield, :call_args => val[1]
        	        
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 325)
  def _reduce_94(val, _values, result)
    		                result = node :call, :recv => val[0], :meth => '[]', :args => val[2]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 329)
  def _reduce_95(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2]
                  
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 336)
  def _reduce_99(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 342)
  def _reduce_101(val, _values, result)
                        puts 'ERROR: cant use identifier for class/mod name'
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 346)
  def _reduce_102(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 352)
  def _reduce_103(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 355)
  def _reduce_104(val, _values, result)
      	                result = node :path, :cname => val[0]
  	              
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 364)
  def _reduce_109(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 369)
  def _reduce_110(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 405)
  def _reduce_187(val, _values, result)
                        result = node :assign, :lhs => val[0], :rhs => val[2]
                  
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 410)
  def _reduce_189(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 415)
  def _reduce_191(val, _values, result)
                		    result = node :aset_op_asgn, :recv => val[0], :call_args => val[2], :op => val[4], :arg => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 419)
  def _reduce_192(val, _values, result)
                		    result = node :op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
                    # result = node :dot_identifier_op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
            		  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 429)
  def _reduce_198(val, _values, result)
                		    result = node :dot2, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 433)
  def _reduce_199(val, _values, result)
                		    result = node :dot3, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 437)
  def _reduce_200(val, _values, result)
                		    result = node :opt_plus, :recv => val[0], :meth => '+', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 441)
  def _reduce_201(val, _values, result)
                		    result = node :opt_minus, :recv => val[0], :meth => '-', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 445)
  def _reduce_202(val, _values, result)
                		    result = node :opt_mult, :recv => val[0], :meth => '*', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 449)
  def _reduce_203(val, _values, result)
                		    result = node :opt_div, :recv => val[0], :meth => '/', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 453)
  def _reduce_204(val, _values, result)
                		    result = node :opt_mod, :recv => val[0], :meth => '%', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 457)
  def _reduce_205(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '**', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 464)
  def _reduce_209(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '-@', :call_args => { :args => []}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 468)
  def _reduce_210(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '|', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 472)
  def _reduce_211(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '^', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 476)
  def _reduce_212(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '&', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 480)
  def _reduce_213(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 484)
  def _reduce_214(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 488)
  def _reduce_215(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 492)
  def _reduce_216(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 496)
  def _reduce_217(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 500)
  def _reduce_218(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '==', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 504)
  def _reduce_219(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '===', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 508)
  def _reduce_220(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 512)
  def _reduce_221(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '=~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 516)
  def _reduce_222(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 520)
  def _reduce_223(val, _values, result)
                  	    result = node :not, :expr => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 524)
  def _reduce_224(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 528)
  def _reduce_225(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 532)
  def _reduce_226(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 536)
  def _reduce_227(val, _values, result)
                		    result = node :andop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 540)
  def _reduce_228(val, _values, result)
                		    result = node :orop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 545)
  def _reduce_230(val, _values, result)
                		    result = node :tertiary, :expr => val[0], :true => val[2], :false => val[5]
            		  
    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 558)
  def _reduce_237(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 563)
  def _reduce_238(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 569)
  def _reduce_240(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 575)
  def _reduce_242(val, _values, result)
                		    result = node :call_args, :args => [val[0]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 579)
  def _reduce_243(val, _values, result)
                		    result = node :call_args, :args => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 583)
  def _reduce_244(val, _values, result)
                		    result = node :call_args, :assocs => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 587)
  def _reduce_245(val, _values, result)
                		    result = node :call_args, :args => val[0], :assocs => val[2], :block_arg => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 591)
  def _reduce_246(val, _values, result)
                		    result = node :call_args, :block_arg => val[0]
            		  
    result
  end
.,.,

# reduce 247 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 598)
  def _reduce_248(val, _values, result)
                        # puts "here for #{val[1]}"
                    # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 604)
  def _reduce_249(val, _values, result)
                        # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 610)
  def _reduce_250(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 251 omitted

# reduce 252 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 617)
  def _reduce_253(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 621)
  def _reduce_254(val, _values, result)
    		                result = [node :splat, :val => val[1]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 625)
  def _reduce_255(val, _values, result)
    		                result = val[0] + [val[2]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 629)
  def _reduce_256(val, _values, result)
    		                result = val[0] + [node :splat, :val => val[3]]
		              
    result
  end
.,.,

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 644)
  def _reduce_266(val, _values, result)
                        # if val[0].node == :self
                      # result = val[0]
                    # else
                      # HACK: this rule shouldnt even exist. But for now it must for "identifier do .. end"
                      result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
                    # end
                  
    result
  end
.,.,

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 656)
  def _reduce_270(val, _values, result)
                  	    result = node :begin, :stmt => val[1]
              	  
    result
  end
.,.,

# reduce 271 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 661)
  def _reduce_272(val, _values, result)
                		    result = node :lparen, :stmt => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 665)
  def _reduce_273(val, _values, result)
                		    result = node :colon2, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 669)
  def _reduce_274(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 673)
  def _reduce_275(val, _values, result)
                		    result = node :array, :args => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 677)
  def _reduce_276(val, _values, result)
                		    result = node :assoc_list, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 681)
  def _reduce_277(val, _values, result)
                		    result = node :return
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 685)
  def _reduce_278(val, _values, result)
            	          result = node :yield, :call_args => val[2]
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 689)
  def _reduce_279(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 693)
  def _reduce_280(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 700)
  def _reduce_284(val, _values, result)
                		    result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 704)
  def _reduce_285(val, _values, result)
                		    # puts 2
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 708)
  def _reduce_286(val, _values, result)
                		    val[0][:brace_block] = val[1]
            		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 713)
  def _reduce_287(val, _values, result)
                		    result = node :lambda, :args => val[1][:args], :body => val[1][:body]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 717)
  def _reduce_288(val, _values, result)
                		    result = self.node :if, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 721)
  def _reduce_289(val, _values, result)
                		    result = self.node :unless, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 725)
  def _reduce_290(val, _values, result)
                        # puts "in node while"
            		    result = node :while, :expr => val[1], :stmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 730)
  def _reduce_291(val, _values, result)
                		    result = node :until, :expr => val[1], :stmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 734)
  def _reduce_292(val, _values, result)
                		    result = node :case, :expr => val[1], :body => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 738)
  def _reduce_293(val, _values, result)
                		    result = node :case, :expr => nil, :body => val[2]
            		  
    result
  end
.,.,

# reduce 294 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 743)
  def _reduce_295(val, _values, result)
                		    result = self.node_class(:cpath => val[1], :superclass => val[2], :bodystmt => val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 747)
  def _reduce_296(val, _values, result)
                		    result = node :class_shift, :expr => val[2], :bodystmt => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 751)
  def _reduce_297(val, _values, result)
                		    result = self.node_module(:cpath => val[1], :body => val[2])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 755)
  def _reduce_298(val, _values, result)
                		    result = self.node :def, :fname => val[1], :arglist => val[2], :bodystmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 759)
  def _reduce_299(val, _values, result)
                		    result = self.node :def, :singleton => val[1], :fname => val[3], :arglist => val[4], :bodystmt => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 763)
  def _reduce_300(val, _values, result)
                		    result = node :break, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 767)
  def _reduce_301(val, _values, result)
                		    result = node :next, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 771)
  def _reduce_302(val, _values, result)
                		    result = node :redo
            		  
    result
  end
.,.,

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

# reduce 312 omitted

# reduce 313 omitted

# reduce 314 omitted

# reduce 315 omitted

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 809)
  def _reduce_322(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 813)
  def _reduce_323(val, _values, result)
                  	    result = [self.node(:elsif, :expr => val[1], :stmt => val[3])] + val[4]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 818)
  def _reduce_324(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 822)
  def _reduce_325(val, _values, result)
                  	    result = [self.node(:else, :stmt => val[1])]
              	  
    result
  end
.,.,

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 862)
  def _reduce_356(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 870)
  def _reduce_360(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 884)
  def _reduce_367(val, _values, result)
                        result = {:args => val[0], :body => val[1]}
                  
    result
  end
.,.,

# reduce 368 omitted

# reduce 369 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 892)
  def _reduce_370(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 896)
  def _reduce_371(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 372 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 902)
  def _reduce_373(val, _values, result)
                        result = node :brace_block, :params => val[1], :stmt => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 907)
  def _reduce_374(val, _values, result)
                        val[0][:brace_block] = val[1]
                    result = val[0]
                  
    result
  end
.,.,

# reduce 375 omitted

# reduce 376 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 915)
  def _reduce_377(val, _values, result)
                        result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 919)
  def _reduce_378(val, _values, result)
                        result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 923)
  def _reduce_379(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2], :args => val[3]
              	    puts "tCOLON2call"
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 928)
  def _reduce_380(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2]
              	    puts "tCOLON2call.noargs."
              	  
    result
  end
.,.,

# reduce 381 omitted

# reduce 382 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 935)
  def _reduce_383(val, _values, result)
                		    result = node :super, :call_args => val[1], :paren => true
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 939)
  def _reduce_384(val, _values, result)
                		    result = node :super, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 943)
  def _reduce_385(val, _values, result)
                        result = node :call, :recv => val[0], :meth => '[]', :call_args => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 949)
  def _reduce_386(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 953)
  def _reduce_387(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 958)
  def _reduce_388(val, _values, result)
                        result = [node(:when, :args => val[1], :stmt => val[3])] + val[4]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 963)
  def _reduce_389(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 390 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 969)
  def _reduce_391(val, _values, result)
                        result = node :rescue, :list => val[1], :var => val[2], :stmt => val[4], :opt_rescue => val[5]
                    # puts result
                  
    result
  end
.,.,

# reduce 392 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 976)
  def _reduce_393(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 980)
  def _reduce_394(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 984)
  def _reduce_395(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 989)
  def _reduce_396(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 993)
  def _reduce_397(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

# reduce 398 omitted

# reduce 399 omitted

# reduce 400 omitted

# reduce 401 omitted

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

# reduce 405 omitted

# reduce 406 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1011)
  def _reduce_407(val, _values, result)
                        result = node :string, :value => val[1], :beg => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1016)
  def _reduce_408(val, _values, result)
                        result = node :xstring, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1021)
  def _reduce_409(val, _values, result)
                        result = node :regexp, :value => val[1]
                  
    result
  end
.,.,

# reduce 410 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1027)
  def _reduce_411(val, _values, result)
                		    result = node :words, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1032)
  def _reduce_412(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1036)
  def _reduce_413(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1041)
  def _reduce_414(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1045)
  def _reduce_415(val, _values, result)
                        result = val[0] + [val[1]]
                  
    result
  end
.,.,

# reduce 416 omitted

# reduce 417 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1053)
  def _reduce_418(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

# reduce 419 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1060)
  def _reduce_420(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1065)
  def _reduce_421(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1070)
  def _reduce_422(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1075)
  def _reduce_423(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1080)
  def _reduce_424(val, _values, result)
                        result = node :string_content, :value => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1084)
  def _reduce_425(val, _values, result)
                        result = node :string_dvar, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1088)
  def _reduce_426(val, _values, result)
                        result = node :string_dbeg, :value => val[1]
                  
    result
  end
.,.,

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1098)
  def _reduce_431(val, _values, result)
                        result = node :symbol, :name => val[1]
                  
    result
  end
.,.,

# reduce 432 omitted

# reduce 433 omitted

# reduce 434 omitted

# reduce 435 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1108)
  def _reduce_436(val, _values, result)
                        result = node :dsym, :contents => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1113)
  def _reduce_437(val, _values, result)
                        result = node :numeric, :value => val[0], :float => false
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1117)
  def _reduce_438(val, _values, result)
                        result = node :numeric, :value => val[0], :float => true
                  
    result
  end
.,.,

# reduce 439 omitted

# reduce 440 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1125)
  def _reduce_441(val, _values, result)
                        result = node :identifier, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1129)
  def _reduce_442(val, _values, result)
                        result = node :ivar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1133)
  def _reduce_443(val, _values, result)
                        result = node :gvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1137)
  def _reduce_444(val, _values, result)
                        result = node :constant, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1141)
  def _reduce_445(val, _values, result)
                        result = node :cvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1145)
  def _reduce_446(val, _values, result)
                        result = node :nil, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1149)
  def _reduce_447(val, _values, result)
                        result = node :self, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1153)
  def _reduce_448(val, _values, result)
                        result = node :true, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1157)
  def _reduce_449(val, _values, result)
                        result = node :false, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1161)
  def _reduce_450(val, _values, result)
                        result = node :__FILE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1165)
  def _reduce_451(val, _values, result)
                        result = node :__LINE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1169)
  def _reduce_452(val, _values, result)
                        result = node :__ENCODING__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1173)
  def _reduce_453(val, _values, result)
                        # added for block_given? support.. :D
                    result = node :block_given
                  
    result
  end
.,.,

# reduce 454 omitted

# reduce 455 omitted

# reduce 456 omitted

# reduce 457 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1186)
  def _reduce_458(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1190)
  def _reduce_459(val, _values, result)
                		    result = node :superclass, :expr => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1192)
  def _reduce_460(val, _values, result)
     puts 'OMFG' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1196)
  def _reduce_461(val, _values, result)
                        result = val[1]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1201)
  def _reduce_462(val, _values, result)
                        result = val[0]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1207)
  def _reduce_463(val, _values, result)
                        result = node_args(val[0], val[2], val[4], nil, val[5])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1211)
  def _reduce_464(val, _values, result)
                 		    result = node_args(val[0], val[2], val[4], val[6], val[7])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1215)
  def _reduce_465(val, _values, result)
                  	    result = node_args(val[0], val[2], nil, nil, val[3])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1219)
  def _reduce_466(val, _values, result)
                		    result = node_args(val[0], val[2], nil, val[4], val[5])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1223)
  def _reduce_467(val, _values, result)
                		    result = node_args(val[0], nil, val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1227)
  def _reduce_468(val, _values, result)
                		    result = node_args(val[0], nil, val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1231)
  def _reduce_469(val, _values, result)
                 		    result = node_args(val[0], nil, nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1235)
  def _reduce_470(val, _values, result)
                		    result = node_args(nil, val[0], val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1239)
  def _reduce_471(val, _values, result)
                		    result = node_args(nil, val[0], val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1243)
  def _reduce_472(val, _values, result)
                 		    result = node_args(nil, val[0], nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1247)
  def _reduce_473(val, _values, result)
                 		    result = node_args(nil, val[0], nil, val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1251)
  def _reduce_474(val, _values, result)
                 		    result = node_args(nil, nil, val[0], nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1255)
  def _reduce_475(val, _values, result)
                 		    result = node_args(nil, nil, val[0], val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1259)
  def _reduce_476(val, _values, result)
                 		    result = node_args(nil, nil, nil, nil, val[0])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1263)
  def _reduce_477(val, _values, result)
                  	    result = node_args(nil, nil, nil, nil, nil)
              	  
    result
  end
.,.,

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1274)
  def _reduce_483(val, _values, result)
                        # result = val[0]
              	    result = node :norm_arg, :value => val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1280)
  def _reduce_484(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1283)
  def _reduce_485(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1288)
  def _reduce_486(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 487 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1294)
  def _reduce_488(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1298)
  def _reduce_489(val, _values, result)
                        # val[0] + val[2]
                    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1311)
  def _reduce_494(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1315)
  def _reduce_495(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 496 omitted

# reduce 497 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1323)
  def _reduce_498(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1332)
  def _reduce_502(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1336)
  def _reduce_503(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1341)
  def _reduce_504(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1350)
  def _reduce_508(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1354)
  def _reduce_509(val, _values, result)
                  	    result = val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1359)
  def _reduce_510(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1363)
  def _reduce_511(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1368)
  def _reduce_512(val, _values, result)
                        result = node :assoc, :key => val[0], :value => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1372)
  def _reduce_513(val, _values, result)
                        result = node :label_assoc, :key => val[0], :value => val[1]
                  
    result
  end
.,.,

# reduce 514 omitted

# reduce 515 omitted

# reduce 516 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1382)
  def _reduce_517(val, _values, result)
                      
    result
  end
.,.,

# reduce 518 omitted

# reduce 519 omitted

# reduce 520 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1389)
  def _reduce_521(val, _values, result)
                        puts 4
                  
    result
  end
.,.,

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyParser
  end   # module Vienna


