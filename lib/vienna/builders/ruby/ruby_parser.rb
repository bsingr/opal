#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
  #
# $Id$
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6'
    Racc_Runtime_Revision = '$Id$'

    Racc_Runtime_Core_Version_R = '1.4.6'
    Racc_Runtime_Core_Revision_R = '$Id$'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end


# require 'ctokenizer'
require 'strscan'

module Vienna
  class RubyParser < Racc::Parser

module_eval(<<'...end ruby_parser.rb.y/module_eval...', 'ruby_parser.rb.y', 1336)


...end ruby_parser.rb.y/module_eval...
##### State transition tables begin ###

clist = [
'-272,-10,440,-87,-89,-272,311,312,591,311,312,447,593,-272,-272,311',
'312,440,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272',
'-272,-272,-272,4,-272,-98,692,-87,-89,-272,-272,-272,-272,-272,-272',
'812,594,778,-66,440,-519,-96,-272,-272,-272,-519,-100,420,-272,-272',
'-95,-272,-267,-519,-519,597,311,312,-519,-519,-519,-519,-519,-519,-519',
'-519,-519,-519,-519,-519,-519,-519,-519,448,-519,-96,691,-267,-267,-519',
'-519,-519,-519,-519,-519,311,312,440,440,536,-87,-89,-519,-519,-519',
'-272,437,141,-519,-519,817,-519,-87,-89,-88,141,-87,-89,141,448,-519',
'437,262,-87,264,-515,332,809,-449,-272,-272,-272,-90,-272,-272,-272',
'-272,-272,-272,-272,-272,-97,700,332,-272,-80,-272,-10,-272,-10,-95',
'323,326,437,-449,-519,337,339,342,345,320,321,324,327,329,331,334,336',
'341,343,344,470,-93,-453,262,141,264,-94,-519,-519,-519,-519,-88,-519',
'-519,-519,-519,-519,-519,-519,-519,262,-272,264,-519,140,-519,-272,-519',
'804,141,437,437,-99,141,-272,-272,-97,801,143,-272,-272,-272,-272,-272',
'-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-98,692',
'-96,801,-272,-272,-272,-272,-272,-272,-272,-89,-95,-86,-95,451,128,-272',
'-272,-272,-100,291,-272,-272,-272,496,-272,322,325,328,330,333,335,338',
'340,-272,-272,-272,-272,-91,144,332,-85,-89,322,325,328,330,333,335',
'338,340,128,-94,-93,128,-95,699,799,141,332,-94,818,-445,143,-99,546',
'450,323,326,-272,797,-272,337,339,342,345,320,321,324,327,329,331,334',
'336,341,343,344,-515,-445,-272,-96,-93,-96,-272,-272,-272,-272,-272',
'-272,-272,-272,-272,-272,-272,-272,141,-520,496,-272,-272,-272,-520',
'-272,262,496,264,-92,-100,796,-520,-520,144,536,795,-520,-520,-520,-520',
'-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-94',
'-93,-94,-93,-520,-520,-520,-520,-520,-520,-520,-87,141,-85,536,458,-86',
'-520,-520,-520,-91,769,-520,-520,-520,496,-520,322,325,328,330,333,335',
'338,340,-520,-520,-520,-520,-92,158,332,262,-98,264,-448,322,325,328',
'330,333,335,338,340,-97,262,262,264,264,792,332,154,262,757,264,541',
'-450,496,323,326,-520,-448,-520,337,339,342,345,320,321,324,327,329',
'331,334,336,341,343,344,791,262,-520,264,-450,-520,-520,-520,-520,-520',
'-520,-520,-520,-520,-520,-520,-520,-520,-90,-268,612,-520,-520,-520',
'-268,-520,262,757,264,-516,-439,604,-268,-268,-99,546,611,-268,-268',
'-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,-268',
'-268,832,-97,-439,-97,-268,-268,-268,-268,-268,-268,-268,516,825,757',
'262,476,264,-268,-268,-268,514,515,-268,-268,-268,604,-268,322,325,328',
'330,333,335,338,340,-268,-268,-268,-268,472,473,332,476,612,790,609',
'322,325,328,330,333,335,338,340,-452,262,-452,264,-383,611,332,611,623',
'604,715,-444,472,473,323,326,-268,498,-268,337,339,342,345,320,321,324',
'327,329,331,334,336,341,343,344,625,-452,-268,-444,612,-383,-268,-268',
'-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,788,-521,611,-268',
'-268,-268,-521,-268,-452,-452,-383,-272,-383,-383,-521,-521,354,786',
'355,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-272,-272,825,757,-521,-521,-521,-521,-521,-521',
'-521,-95,774,-516,415,836,-442,-521,-521,-521,505,506,-521,-521,-521',
'780,-521,322,325,328,330,333,335,338,340,-521,-521,-521,-521,416,417',
'332,-442,354,655,355,322,325,328,330,333,335,338,340,141,685,686,262',
'687,264,332,311,312,921,32,39,-273,-253,323,326,-521,332,-521,337,339',
'342,345,320,321,324,327,329,331,334,336,341,343,344,922,923,-521,-273',
'-273,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'141,-519,304,-521,-521,-521,-519,-521,421,305,306,307,303,-272,-519',
'-519,262,-519,264,-519,-519,-519,-519,-519,-519,-519,-519,-519,-519',
'-519,-519,-519,-519,-519,-519,-519,-96,772,-272,-272,-519,-519,-519',
'-519,-519,-519,-519,262,262,264,264,-516,-519,-519,-519,-519,-93,-453',
'-519,-519,-519,839,-519,322,325,328,330,333,335,338,340,-519,-519,-519',
'-519,-519,502,-519,-519,295,296,840,322,325,328,330,333,335,338,340',
'-515,-94,858,322,325,328,330,333,335,338,340,503,504,311,312,332,-519',
'21,-519,30,418,44,50,323,326,463,-446,156,159,161,163,465,377,-97,775',
'-272,-519,769,141,-519,-519,-519,-519,-519,-519,-519,-519,-519,-519',
'-519,-519,-519,-446,8,604,-519,-519,-519,378,-519,-272,-272,61,67,71',
'141,133,604,678,757,99,105,476,-516,141,25,847,34,42,48,56,65,68,72',
'528,-252,-80,-447,850,100,107,5,9,16,23,27,472,473,493,54,60,66,73,77',
'82,89,91,93,97,104,527,10,17,-447,29,32,39,541,604,720,-442,129,-442',
'132,87,141,96,103,-273,604,13,18,24,28,33,40,46,118,769,30,719,44,50',
'322,325,328,330,333,335,338,340,573,711,-273,-273,-442,57,332,141,544',
'304,702,-273,141,-254,323,326,305,306,307,303,141,141,113,862,458,574',
'575,-513,588,-442,-442,61,67,71,865,133,-273,-273,448,99,105,476,-513',
'677,25,673,34,42,48,125,127,68,72,589,590,665,655,649,135,107,5,9,16',
'23,27,472,473,520,54,60,66,73,77,82,89,91,93,97,104,112,10,17,-252,29',
'32,39,646,897,-519,876,129,141,132,87,476,96,103,138,114,13,18,24,28',
'33,40,46,21,332,30,878,44,50,589,590,630,323,326,620,472,473,474,421',
'608,-519,463,57,156,159,161,163,465,-303,141,606,322,325,328,330,333',
'335,338,340,8,467,604,604,-519,583,-519,-519,-267,61,67,71,769,133,-303',
'-303,604,99,105,-515,141,-65,25,580,34,42,48,56,65,68,72,577,576,-267',
'-267,604,100,107,5,9,16,23,27,492,541,526,54,60,66,73,77,82,89,91,93',
'97,104,524,10,17,523,29,32,39,522,499,-255,-439,129,-439,132,87,509',
'96,103,898,899,13,18,24,28,33,40,46,21,901,30,141,44,50,416,500,255',
'322,325,328,330,333,335,338,340,801,-439,57,332,905,801,801,262,801',
'264,476,323,326,304,501,910,256,257,801,8,305,306,307,303,-512,507,-439',
'-439,61,67,71,80,85,914,472,473,99,105,392,-512,876,25,128,34,42,48',
'56,65,68,72,470,460,456,604,453,100,107,5,9,16,23,27,36,452,51,54,60',
'66,73,77,82,89,91,93,97,104,304,10,17,446,29,32,39,305,306,307,303,74',
'426,83,87,924,96,103,110,604,13,18,24,28,33,40,46,21,425,30,421,44,50',
'418,463,470,156,159,161,163,465,412,876,411,140,783,57,156,159,161,163',
'492,606,386,319,322,325,328,330,333,335,338,340,8,463,141,156,159,161',
'163,465,302,61,67,71,80,133,874,-515,-516,99,105,801,467,942,25,801',
'34,42,48,56,65,68,72,801,801,876,24,298,100,107,5,9,16,23,27,36,294',
'51,54,60,66,73,77,82,89,91,93,97,104,141,10,17,293,29,32,39,146,139',
'111,801,74,,83,87,,96,103,110,,13,18,24,28,33,40,46,322,325,328,330',
'333,335,338,340,,190,,198,203,783,211,156,159,161,163,57,236,240,,,492',
'253,177,181,186,195,200,205,208,212,216,651,,156,159,161,163,165,463',
',156,159,161,163,465,332,,,,,168,,,323,326,155,158,467,337,339,342,345',
'320,321,324,327,329,331,334,336,341,343,344,,,,,154,,463,162,156,159',
'161,163,465,,,655,,,,637,479,,,638,,467,,,,,464,,,217,220,,,,,332,,',
',254,,,,323,326,,,,337,339,342,345,-538,-538,-538,-538,-538,-538,,180',
'184,189,193,197,202,207,210,214,218,128,190,,198,203,,211,,,,,,236,240',
',,,253,177,181,186,195,200,205,208,212,216,322,325,328,330,333,335,338',
'340,,,178,182,187,,,,,,,221,225,228,231,233,238,243,246,247,251,179',
'183,188,192,196,201,206,209,213,222,226,229,232,235,,,,248,252,176,395',
'396,397,398,204,,,399,400,402,227,77,404,241,91,93,406,104,322,325,328',
'330,333,335,338,340,217,220,,,,,,118,,30,254,44,50,322,325,328,330,333',
'335,338,340,,463,,156,159,161,163,465,,180,184,189,193,197,202,207,210',
'214,218,401,467,,113,,463,464,156,159,161,163,465,61,67,71,,133,,,,99',
'105,,,467,25,,34,42,48,125,127,68,72,,,,,,135,107,5,9,16,23,27,,,,54',
'60,66,73,77,82,89,91,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,',
'96,103,138,114,13,18,24,28,33,40,46,,,,,,,190,,198,203,,211,,,,,,236',
'240,57,,392,253,177,181,186,195,200,205,208,212,216,,,463,,156,159,161',
'163,465,,,,,,150,,156,159,161,163,165,467,,,,,806,,,190,,198,203,168',
'211,,,,155,158,236,240,,,,253,177,181,186,195,200,205,208,212,216,,',
',,,154,600,487,162,,601,,463,148,156,159,161,163,465,,217,220,150,,156',
'159,161,163,165,,254,467,,,,,,,,,,168,,,,,155,158,,,180,184,189,193',
'197,202,207,210,214,218,128,936,479,,,937,,,154,,,162,,,,217,220,190',
',198,203,,211,,,254,,,236,240,,,,253,177,181,186,195,200,205,208,212',
'216,,,180,184,189,193,197,202,207,210,214,218,128,,150,,156,159,161',
'163,165,,,,,,,,,190,,198,203,168,211,,,,155,158,236,240,,,,253,177,181',
'186,195,200,205,208,212,216,,,,,,154,740,479,162,,742,,,627,,,,,332',
',217,220,,,,,323,326,,,254,337,339,342,345,320,321,324,327,329,331,334',
'336,341,343,344,,662,,,180,184,189,193,197,202,207,210,214,218,128,732',
'487,,,733,,,,,,,,,,217,220,190,,198,203,,211,,,254,,,236,240,,,,253',
'177,181,186,195,200,205,208,212,216,,,180,184,189,193,197,202,207,210',
'214,218,128,,150,,156,159,161,163,165,,,,,,,,,,,,,168,,,,,155,158,,',
',322,325,328,330,333,335,338,340,,,,,,,,,,154,729,479,162,,730,,,627',
',,,,,,217,220,,,,332,,118,,30,254,44,50,323,326,,,,337,339,342,345,-538',
'-538,-538,-538,-538,-538,,,180,184,189,193,197,202,207,210,214,218,128',
',,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72',
',,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,-513,,-513',
',-513,-513,322,325,328,330,333,335,338,340,,,,,,57,,544,,463,,156,159',
'161,163,165,,,,,,,-513,,,,,,168,,,-513,-513,-513,158,-513,,,,-513,-513',
',,,-513,,-513,-513,-513,-513,-513,-513,-513,,,154,,,-513,-513,-513,-513',
'-513,-513,-513,,,,-513,-513,-513,-513,-513,-513,-513,-513,-513,-513',
'-513,-513,-513,-513,,-513,-513,-513,,,,,-513,,-513,-513,,-513,-513,-513',
'-513,-513,-513,-513,-513,-513,-513,-513,,,,,,,-513,,,,,190,,198,203',
',211,,,-513,,-513,236,240,,,,253,177,181,186,195,200,205,208,212,216',
'150,,156,159,161,163,165,651,,156,159,161,163,165,,,,,,168,,,,,155,158',
'168,,,,,155,158,463,,156,159,161,163,165,,,,,,,154,,,162,,,168,154,',
',162,,158,,,640,487,,,641,,,,,,,,,,217,220,,,154,,332,118,,30,254,44',
'50,,323,326,,,,337,339,342,345,-538,-538,-538,-538,-538,-538,,180,184',
'189,193,197,202,207,210,214,218,128,,,113,,,,,,,,,61,67,71,,133,,,,99',
'105,,,,25,,34,42,48,125,127,68,72,,143,,,,135,107,5,9,16,23,27,,,,54',
'60,66,73,77,82,89,91,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,',
'96,103,138,114,13,18,24,28,33,40,46,118,,30,,44,50,144,322,325,328,330',
'333,335,338,340,,,,,57,,128,,463,,156,159,161,163,165,,,,,,,113,,,,',
',168,,,61,67,71,158,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,154',
',,135,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,112,10,17',
',29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,,,,,',
',190,,198,203,,211,,,,,,236,240,57,,128,253,177,181,186,195,200,205',
'208,212,216,,,,,,,,,,,,150,,156,159,161,163,165,651,,156,159,161,163',
'165,,,,,190,168,198,203,,211,155,158,168,,,236,240,155,158,,253,177',
'181,186,195,200,205,208,212,216,,,154,,,162,708,487,,154,709,,162,,',
',,,,,217,220,150,,156,159,161,163,165,,254,,,,,,,,,,,168,,,,,155,158',
',,180,184,189,193,197,202,207,210,214,218,128,705,479,,,706,,,154,,',
'162,,,,217,220,190,,198,203,,211,,,254,,,236,240,,,,253,177,181,186',
'195,200,205,208,212,216,,,180,184,189,193,197,202,207,210,214,218,128',
',651,,156,159,161,163,165,,,,,,,,,190,,198,203,168,211,,,,155,158,236',
'240,,,,253,177,181,186,195,200,205,208,212,216,,,,,,154,640,487,162',
',641,,,,,,,,,,217,220,150,,156,159,161,163,165,,254,,,,,,,,,,,168,,',
',,155,158,,,180,184,189,193,197,202,207,210,214,218,128,637,479,,,638',
',,154,,,162,,,,217,220,,,,,332,-512,,-512,254,-512,-512,,323,326,,,',
'337,339,342,345,320,321,324,327,329,331,334,180,184,189,193,197,202',
'207,210,214,218,128,,,-512,,,,,,,,,-512,-512,-512,,-512,,,,-512,-512',
',,,-512,,-512,-512,-512,-512,-512,-512,-512,,,,,,-512,-512,-512,-512',
'-512,-512,-512,,,,-512,-512,-512,-512,-512,-512,-512,-512,-512,-512',
'-512,-512,-512,-512,,-512,-512,-512,,,,,-512,,-512,-512,,-512,-512,-512',
'-512,-512,-512,-512,-512,-512,-512,-512,118,,30,,44,50,-512,322,325',
'328,330,333,335,338,340,,,,,-512,,-512,,463,,156,159,161,163,165,,,',
',,,113,,,,,,168,,,61,67,71,158,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,154,,,135,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97',
'104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28',
'33,40,46,118,,30,,44,50,463,,156,159,161,163,165,,,,,,,57,,128,,,,168',
',,,,,158,,,,,113,,,,,,,,,61,67,71,,133,,,154,99,105,,,,25,,34,42,48',
'125,127,68,72,,,,,,135,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93',
'97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24',
'28,33,40,46,,,,,,,190,,198,203,,211,,,,,,236,240,57,,128,253,177,181',
'186,195,200,205,208,212,216,,,,,,,,,,,,463,,156,159,161,163,165,463',
',156,159,161,163,165,,,,,190,168,198,203,,211,,158,168,,,236,240,,158',
',253,177,181,186,195,200,205,208,212,216,,,154,,,,486,487,,154,490,',
',,,,,,332,,217,220,,,,,323,326,,,254,337,339,342,345,320,321,324,327',
'329,331,334,336,341,343,344,,,,,180,184,189,193,197,202,207,210,214',
'218,128,926,479,,,927,,,,,,,,,,217,220,190,,198,203,,211,,,254,,,236',
'240,,,,253,177,181,186,195,200,205,208,212,216,,,180,184,189,193,197',
'202,207,210,214,218,128,463,,156,159,161,163,165,,,,,,,,,,,,,168,,,',
',,158,,,,,322,325,328,330,333,335,338,340,,463,,156,159,161,163,165',
'154,,939,487,,,940,,,,,,168,,,,217,220,158,,,,,118,,30,254,44,50,,,',
',,,,,,,154,,,,,,,180,184,189,193,197,202,207,210,214,218,128,,,113,',
',,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135',
'107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,112,10,17,,29',
'32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,,,,,,,190',
',198,203,,211,,,,,,236,240,57,,128,253,177,181,186,195,200,205,208,212',
'216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,478',
'479,,,483,,,,,,,,,,217,220,,,,,,118,,30,254,44,50,,,,,,,,,,,,,,,,,,180',
'184,189,193,197,202,207,210,214,218,128,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,107,5,9,16,23,27,,',
',54,60,66,73,77,82,89,91,93,97,104,112,10,17,,29,32,39,,,,,129,,132',
'87,,96,103,138,114,13,18,24,28,33,40,46,,,,,,,190,,198,203,,211,,,,',
',236,240,57,,128,253,177,181,186,195,200,205,208,212,216,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,600,487,,,601,,,,',
',,,,,217,220,,,190,,198,203,,211,254,,,,,236,240,,,,253,177,181,186',
'195,200,205,208,212,216,180,184,189,193,197,202,207,210,214,218,178',
'182,187,,,,,,,221,225,228,231,233,238,243,246,247,251,179,183,188,192',
'196,201,206,209,213,222,226,229,232,235,,,,248,252,176,185,191,194,199',
'204,,,215,219,224,227,,237,241,,,249,,,,,,,,,,217,220,,358,21,,30,332',
'44,50,254,,,18,,323,326,,,,337,339,342,345,320,321,324,327,329,331,180',
'184,189,193,197,202,207,210,214,218,8,,,,,,,,,61,67,71,80,133,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54',
'60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103',
'110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,322,325,328,330,333',
'335,338,340,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,364,87,,96,103,110',
',13,18,24,28,33,40,46,,,,,190,,198,203,,211,,,,,,236,240,,,57,253,177',
'181,186,195,200,205,208,212,216,,,,,,,,,,,178,182,187,,,,,,,221,225',
'228,231,233,238,243,246,247,251,179,183,188,192,196,201,206,209,213',
'222,226,229,232,235,,,,248,252,176,185,191,194,199,204,,,215,219,224',
'227,,237,241,,,249,,,,,,,,,,217,220,,358,21,,30,332,44,50,254,,,18,',
'323,326,,,,337,339,342,345,-538,-538,-538,-538,-538,-538,180,184,189',
'193,197,202,207,210,214,218,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77',
'82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18',
'24,28,33,40,46,358,21,,30,,44,50,,,,,322,325,328,330,333,335,338,340',
'57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42',
'48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89',
'91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28',
'33,40,46,358,21,,30,,44,50,,,,,,,332,,,,,,57,,323,326,,,,337,339,342',
'345,-538,-538,-538,-538,-538,-538,,8,,,,,,,,,61,67,71,80,133,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110',
',13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,322,325,328,330',
'333,335,338,340,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,',
'34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77',
'82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18',
'24,28,33,40,46,358,21,,30,,44,50,,,,,,,332,,,,,,57,,323,326,,,,337,339',
'342,345,-538,-538,-538,-538,-538,-538,,8,,,,,,,,,61,67,71,80,133,,,',
'99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51',
'54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96',
'103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,322,325',
'328,330,333,335,338,340,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110',
',13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97,104,',
'10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46,358',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27',
'36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83',
'87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91',
'93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33',
'40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9',
'16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,',
',,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46,,,,,190,,198,203,,211',
',,,,,236,240,,,57,253,177,181,186,195,200,205,208,212,216,,,,,,,,,,',
'178,182,187,,,,,,,221,225,228,231,233,238,243,246,247,251,179,183,188',
'192,196,201,206,209,213,222,226,229,232,235,,,,248,252,176,185,191,194',
'199,204,,,215,219,224,227,,237,241,288,,249,,,,,,,,,,217,220,,358,21',
',30,,44,50,254,,,18,,,,,,,,,,,,,,,,,180,184,189,193,197,202,207,210',
'214,218,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46,358',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27',
'36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,190,,198,203,,211,,,,,,236',
'240,,,57,253,177,181,186,195,200,205,208,212,216,,,,,,,,,,,178,182,187',
',,,,,,221,225,228,231,233,238,243,246,247,251,179,183,188,192,196,201',
'206,209,213,222,226,229,232,235,,,,248,252,176,185,191,194,199,204,',
',215,219,224,227,,237,241,,,249,,,,,,,,,,217,220,,358,21,,30,,44,50',
'254,,,18,,,,,,,,,,,,,,,,,180,184,189,193,197,202,207,210,214,218,8,',
',,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29',
'32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46,,,,,190,,198,203',
',211,,,,,,236,240,,,57,253,177,181,186,195,200,205,208,212,216,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,600,487,,,601',
',,,,,,,,,217,220,,358,21,,30,,44,50,254,,,,,,,,,,,,,,,,,,,,180,184,189',
'193,197,202,207,210,214,218,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77',
'82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18',
'24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,',
',,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29',
'32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44',
'50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,364,87,,96,103,110',
',13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97,104,',
'10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46,358',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27',
'36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,190,,198,203,,211,,,,,,236',
'240,,,57,253,177,181,186,195,200,205,208,212,216,,,,,,,,,,,178,182,187',
',,,,,,221,225,228,231,233,238,243,246,247,251,179,183,188,192,196,201',
'206,209,213,222,226,229,232,235,,,,248,252,176,185,191,194,199,204,',
',215,219,224,227,,237,241,242,244,249,250,,,,,,,,,217,220,,358,21,,30',
',44,50,254,,,,,,,,,,,,,,,,,,,,180,184,189,193,197,202,207,210,214,218',
'8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17',
',29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30',
',44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,',
'99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51',
'54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96',
'103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97',
'104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46',
'358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
'80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23',
'27,36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74',
',364,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82',
'89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24',
'28,33,40,46,,,,,190,,198,203,,211,,,,,,236,240,,,57,253,177,181,186',
'195,200,205,208,212,216,,,,,,,,,,,178,182,187,,,,,,,221,225,228,231',
'233,238,243,246,247,251,179,183,188,192,196,201,206,209,213,222,226',
'229,232,235,,,,248,252,176,185,191,194,199,204,,,215,219,224,227,,237',
'241,,,249,,,,,,,,,,217,220,,358,21,,30,,44,50,254,,,,,,,,,,,,,,,,,,',
',180,184,189,193,197,202,207,210,214,218,8,,,,,,,,,61,67,71,80,133,',
',,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51',
'54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96',
'103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97',
'104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46',
'358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
'80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23',
'27,36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74',
',83,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,',
',,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82',
'89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24',
'28,33,40,46,15,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,80,85,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107',
'5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32',
'39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82',
'89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24',
'28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273',
'269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39',
',,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89',
'91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28',
'33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269',
'9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,',
',129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82',
'89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24',
'28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107',
'5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,',
',,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,',
'34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82',
'89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24',
'28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107',
'5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,',
',,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,',
'34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77',
'82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18',
'24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135',
'273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32',
'39,,,,,129,,132,87,,96,103,777,,13,18,24,28,33,40,46,118,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,112,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,',
'99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,',
'54,60,66,73,77,82,89,91,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87',
',96,103,636,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125',
'127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93',
'97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,432,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23',
'27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132',
'87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,85,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77,82,89,91,93,97',
'104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18,24,28,33,40,46',
'118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71',
',133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,107,5,9,16,23',
'27,,,,54,60,66,73,77,82,89,91,93,97,104,112,10,17,,29,32,39,,,,,129',
',132,87,,96,103,138,114,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,',
',,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89',
'91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28',
'33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16',
'23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129',
',132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48',
'125,127,68,72,,,,,,135,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93',
'97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24',
'28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,107',
'5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,112,10,17,,29,32,39',
',,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,118,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,',
'13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8',
',,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32',
'39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,',
'25,,34,42,48,125,127,68,72,,,,,,135,107,5,9,16,23,27,,,,54,60,66,73',
'77,82,89,91,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138',
'114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,',
',,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,',
'29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73',
'77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13',
'18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135',
'273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32',
'39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,',
'25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73',
'77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,107,5,9,16,23,27,,,,54,60,66',
'73,77,82,89,91,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103',
'138,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,',
',,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,107,5,9,16,23,27,,,,54,60,66',
'73,77,82,89,91,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103',
'138,114,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,',
',,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,',
'99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,',
'54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,',
'96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
'112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40',
'46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23',
'27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132',
'87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125',
'127,68,72,,,,,,135,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97',
'104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28',
'33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269',
'9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,',
',129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,',
',,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42',
'48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91',
'93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33',
'40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61',
'67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269',
'9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,',
',129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82',
'89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24',
'28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273',
'269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39',
',,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25',
',34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77',
'82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18',
'24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135',
'273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32',
'39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,',
'25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73',
'77,82,89,91,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,,114',
'13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8',
',,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32',
'39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54,60,66,73,77',
'82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103,110,,13,18',
'24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107',
'5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,',
',,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,',
',,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89',
'91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28',
'33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16',
'23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129',
',132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48',
'125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91',
'93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,,13,18,24',
'28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,107',
'5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,112,10,17,,29,32,39',
',,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,21,,30,,44,50,',
',,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77',
'82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18',
'24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107',
'5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,',
',,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,',
'34,42,48,125,127,68,72,,,,,,135,107,5,9,16,23,27,,,,54,60,66,73,77,82',
'89,91,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,112,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,636,114,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,',
'99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60',
'66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103',
',,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,',
',,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72',
',,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,112',
'10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,',
'30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54',
'60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96',
'103,432,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,432,,13,18,24,28,33,40,46,21,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,,,,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66',
'73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,273,269,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,636,,13,18,24,28,33,40,46,21,,30,',
'44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,107,5,9,16,23,27,36,,51,54',
'60,66,73,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,74,,83,87,,96,103',
'110,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,',
',,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,107,5,9,16,23,27,,,,54,60,66,73,77,82,89,91,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,,,,,,,,332',
',,,,,,,323,326,,,57,337,339,342,345,320,321,324,327,329,331,334,336',
'341,343,344,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329',
'331,334,336,341,343,344,332,,,,,,,,323,326,,,,337,339,342,345,320,321',
'324,327,329,331,334,336,341,343,344,332,760,,,,,,,323,326,,,,337,339',
'342,345,320,321,324,327,329,331,334,336,341,343,344,,,,,,,,,,,,,,,,',
'322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328,330',
'333,335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340',
',,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,332,,,,,,,,323,326',
',,,337,339,342,345,320,321,324,327,329,331,334,336,341,343,344,332,760',
',,,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334,336,341',
'343,344,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331',
'334,336,341,343,344,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324',
'327,329,331,334,336,341,343,344,,,,,,,,,,,,,,,,-232,322,325,328,330',
'333,335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340',
',,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,',
',,,,322,325,328,330,333,335,338,340,332,,,,,,,,323,326,,,,337,339,342',
'345,320,321,324,327,329,331,334,336,341,343,344,332,,,,,,,,323,326,',
',,337,339,342,345,320,321,324,327,329,331,334,336,341,343,344,332,,',
',,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334,336,-538',
'-538,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334',
'336,341,343,344,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,,,',
',,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,',
',322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,322,325,328,330',
'333,335,338,340,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327',
'329,331,334,336,-538,-538,332,,,,,,,,323,326,,,,337,339,342,345,320',
'321,324,327,329,331,334,336,341,343,344,332,,,,,,,,323,326,,,,337,339',
'342,345,320,321,324,327,329,331,334,336,341,343,344,332,,,,,,,,323,326',
',,,337,339,342,345,320,321,324,327,329,331,334,336,341,343,344,,,,,',
',,,,,,,,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,322,325',
'328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335',
'338,340,,,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,332,,,,',
',,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334,336,341,343',
'344,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334',
'336,341,343,344,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327',
'329,331,334,336,341,343,344,332,,,,,,,,323,326,,,,337,339,342,345,320',
'321,324,327,329,331,334,336,341,343,344,,,,,,,,,,,,,,,,,322,325,328',
'330,333,335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338',
'340,,,,,,,,,,,,,,,,277,,,,,322,325,328,330,333,335,338,340,,,,,,,,,',
',,,,,,,,,,113,322,325,328,330,333,335,338,340,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60',
'66,280,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,281,,132,87,,96,103',
'113,,13,18,24,28,33,40,46,61,67,71,,133,,,,99,105,408,,,25,,34,42,48',
'125,127,68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60,66,280,77,82,89',
'91,93,97,104,,10,17,,29,32,39,,,,,281,,132,87,,96,103,113,,13,18,24',
'28,33,40,46,61,67,71,,133,,,,99,105,512,,,25,,34,42,48,125,127,68,72',
',,,,,135,273,269,9,16,23,27,277,,,54,60,66,280,77,82,89,91,93,97,104',
',10,17,,29,32,39,,,,,893,,132,87,,96,103,113,,13,18,24,28,33,40,46,61',
'67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269',
'9,16,23,27,,277,,54,60,66,280,77,82,89,91,93,97,104,,10,17,,29,32,39',
',,,,281,,282,87,,96,103,284,113,13,18,24,28,33,40,46,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',277,,54,60,66,280,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,350,,83',
'87,,96,103,110,113,13,18,24,28,33,40,46,,61,67,71,,133,,,,99,105,,,',
'25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60,66',
'280,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,281,,282,87,,96,103,113',
',13,18,24,28,33,40,46,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60,66,280,77,375,89,91,93',
'376,104,,10,17,,29,32,39,,,,,372,,132,87,,96,103,113,,13,18,24,28,33',
'40,46,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135',
'273,269,9,16,23,27,277,,,54,60,66,280,77,82,89,91,93,97,104,,10,17,',
'29,32,39,,,,,861,,132,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71',
',133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23',
'27,277,,,54,60,66,280,77,82,89,91,93,97,104,,10,17,,29,32,39,,,,,281',
',282,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,133,,,,99,105,,',
',25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66',
'280,77,82,89,91,93,97,104,277,10,17,,29,32,39,374,,,,281,,282,87,,96',
'103,,,13,18,24,28,33,40,46,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60',
'66,280,77,375,89,91,93,376,104,,10,17,,29,32,39,,,,,372,,132,87,,96',
'103,113,,13,18,24,28,33,40,46,61,67,71,,133,,,,99,105,,,,25,,34,42,48',
'125,127,68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60,66,280,77,82,89',
'91,93,97,104,,10,17,,29,32,39,,,,,281,,282,87,,96,103,113,,13,18,24',
'28,33,40,46,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,273,269,9,16,23,27,,,,54,60,66,280,77,82,89,91,93,97,104,,10',
'17,,29,32,39,,,,,281,,282,87,,96,103,,,13,18,24,28,33,40,46' ]
        racc_action_table = arr = Array.new(23016, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'483,85,354,708,709,483,366,366,372,434,434,150,372,483,483,598,598,144',
'483,483,483,483,483,483,483,483,483,483,483,483,483,483,483,1,483,483',
'483,708,709,483,483,483,483,483,483,683,373,651,738,470,478,729,483',
'483,483,478,122,122,483,483,732,483,891,478,478,373,626,626,478,478',
'478,478,478,478,478,478,478,478,478,478,478,478,478,150,478,478,478',
'891,891,478,478,478,478,478,478,726,726,143,355,734,708,709,478,478',
'478,483,354,680,478,478,693,478,708,709,729,366,708,709,434,651,478',
'144,598,732,598,729,716,679,399,483,483,483,483,483,483,483,483,483',
'483,483,483,490,490,571,483,738,483,85,483,85,939,571,571,470,399,478',
'571,571,571,571,571,571,571,571,571,571,571,571,571,571,571,698,64,64',
'734,626,734,837,478,478,478,478,478,478,478,478,478,478,478,478,478',
'373,638,373,478,8,478,638,478,675,8,143,355,576,726,638,638,733,674',
'270,638,638,638,638,638,638,638,638,638,638,638,638,638,638,638,638',
'638,638,638,936,672,638,638,638,638,638,638,638,490,939,837,939,151',
'703,638,638,638,38,38,638,638,638,882,638,716,716,716,716,716,716,716',
'716,638,638,638,638,576,270,717,64,733,571,571,571,571,571,571,571,571',
'704,948,892,270,486,486,670,571,565,694,694,395,11,319,319,151,565,565',
'638,668,638,565,565,565,565,565,565,565,565,565,565,565,565,565,565',
'565,936,395,638,936,349,936,638,638,638,638,638,638,638,638,638,638',
'638,638,707,479,297,638,638,638,479,638,882,846,882,38,348,667,479,479',
'11,308,666,479,479,479,479,479,479,479,479,479,479,479,479,479,479,479',
'479,479,948,892,948,892,479,479,479,479,479,479,479,486,663,349,313',
'165,694,479,479,479,319,712,479,479,479,267,479,717,717,717,717,717',
'717,717,717,479,479,479,479,348,165,550,628,730,628,400,565,565,565',
'565,565,565,565,565,940,297,308,297,308,661,793,165,846,885,846,885',
'402,723,793,793,479,400,479,793,793,793,793,793,793,793,793,793,793',
'793,793,793,793,793,660,313,479,313,402,479,479,479,479,479,479,479',
'479,479,479,479,479,479,730,89,383,479,479,479,89,479,267,718,267,730',
'404,721,89,89,425,425,383,89,89,89,89,89,89,89,89,89,89,89,89,89,89',
'89,89,89,723,940,404,940,89,89,89,89,89,89,89,288,934,934,723,519,723',
'89,89,89,288,288,89,89,89,722,89,550,550,550,550,550,550,550,550,89',
'89,89,89,519,519,301,268,759,659,382,793,793,793,793,793,793,793,793',
'279,317,279,317,827,759,75,382,394,725,519,396,268,268,75,75,89,268',
'89,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,394,279,89,396,388,827',
'89,89,89,89,89,89,89,89,89,89,89,89,657,482,388,89,89,89,482,89,279',
'279,827,742,827,827,482,482,88,656,88,482,482,482,482,482,482,482,482',
'482,482,482,482,482,482,482,482,482,742,742,701,701,482,482,482,482',
'482,482,482,640,640,742,117,728,406,482,482,482,277,277,482,482,482',
'654,482,301,301,301,301,301,301,301,301,482,482,482,482,117,117,559',
'406,79,652,79,75,75,75,75,75,75,75,75,731,473,473,594,473,594,853,59',
'59,890,473,473,924,647,853,853,482,553,482,853,853,853,853,853,853,853',
'853,853,853,853,853,853,853,853,890,890,482,924,924,482,482,482,482',
'482,482,482,482,482,482,482,482,482,639,637,739,482,482,482,637,482',
'635,739,739,739,739,937,637,637,22,705,22,637,637,637,637,637,637,637',
'637,637,637,637,637,637,637,637,637,637,637,637,937,937,637,637,637',
'637,637,637,637,365,746,365,746,937,705,637,637,637,126,126,637,637',
'637,735,637,559,559,559,559,559,559,559,559,637,637,637,637,705,275',
'705,705,44,44,736,853,853,853,853,853,853,853,853,705,773,773,553,553',
'553,553,553,553,553,553,275,275,266,266,572,637,140,637,140,633,140',
'140,572,572,464,397,464,464,464,464,464,92,641,641,706,637,632,622,637',
'637,637,637,637,637,637,637,637,637,637,637,637,397,140,618,637,637',
'637,92,637,706,706,140,140,140,743,140,745,464,607,140,140,265,706,584',
'140,752,140,140,140,140,140,140,140,299,755,582,398,758,140,140,140',
'140,140,140,140,265,265,265,140,140,140,140,140,140,140,140,140,140',
'140,299,140,140,398,140,140,140,543,542,529,376,140,376,140,140,765',
'140,140,509,767,140,140,140,140,140,140,140,392,768,392,528,392,392',
'572,572,572,572,572,572,572,572,347,511,509,509,376,140,569,510,508',
'52,497,593,140,776,569,569,52,52,52,52,484,469,392,779,465,347,347,376',
'368,376,376,392,392,392,784,392,593,593,463,392,392,292,376,462,392',
'459,392,392,392,392,392,392,392,368,368,448,445,435,392,392,392,392',
'392,392,392,292,292,292,392,392,392,392,392,392,392,392,392,392,392',
'392,392,392,430,392,392,392,428,860,740,808,392,422,392,392,223,392',
'392,392,392,392,392,392,392,392,392,392,70,566,70,811,70,70,860,860',
'407,566,566,391,223,223,223,390,381,740,874,392,874,874,874,874,874',
'106,392,380,569,569,569,569,569,569,569,569,70,874,824,379,740,363,740',
'740,276,70,70,70,828,70,106,106,829,70,70,740,360,359,70,357,70,70,70',
'70,70,70,70,351,350,276,276,844,70,70,70,70,70,70,70,316,315,298,70',
'70,70,70,70,70,70,70,70,70,70,296,70,70,295,70,70,70,293,271,859,375',
'70,375,70,70,281,70,70,861,863,70,70,70,70,70,70,70,263,864,263,280',
'263,263,271,271,19,566,566,566,566,566,566,566,566,867,375,70,564,868',
'869,870,70,871,70,274,564,564,362,274,872,19,19,873,263,362,362,362',
'362,375,278,375,375,263,263,263,263,263,875,274,274,263,263,273,375',
'877,263,269,263,263,263,263,263,263,263,174,166,160,887,153,263,263',
'263,263,263,263,263,263,152,263,263,263,263,263,263,263,263,263,263',
'263,263,581,263,263,149,263,263,263,581,581,581,581,263,136,263,263',
'893,263,263,263,896,263,263,263,263,263,263,263,586,129,586,124,586',
'586,119,806,690,806,806,806,806,806,116,913,115,113,865,263,865,865',
'865,865,263,920,101,74,564,564,564,564,564,564,564,564,586,914,73,914',
'914,914,914,914,51,586,586,586,586,586,806,926,927,586,586,928,914,929',
'586,930,586,586,586,586,586,586,586,931,932,933,47,46,586,586,586,586',
'586,586,586,586,43,586,586,586,586,586,586,586,586,586,586,586,586,938',
'586,586,40,586,586,586,12,7,4,949,586,,586,586,,586,586,586,,586,586',
'586,586,586,586,586,258,258,258,258,258,258,258,258,,415,,415,415,655',
'415,655,655,655,655,586,415,415,,,586,415,415,415,415,415,415,415,415',
'415,415,437,,437,437,437,437,437,678,,678,678,678,678,678,517,,,,,437',
',,517,517,437,437,678,517,517,517,517,517,517,517,517,517,517,517,517',
'517,517,517,,,,,437,,467,437,467,467,467,467,467,,,437,,,,415,415,,',
'415,,467,,,,,467,,,415,415,,,,,547,,,,415,,,,547,547,,,,547,547,547',
'547,547,547,547,547,547,547,,415,415,415,415,415,415,415,415,415,415',
'415,109,,109,109,,109,,,,,,109,109,,,,109,109,109,109,109,109,109,109',
'109,109,517,517,517,517,517,517,517,517,,,109,109,109,,,,,,,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109',
'109,109,109,109,109,,,,109,109,109,109,109,109,109,109,,,109,109,109',
'109,109,109,109,109,109,109,109,547,547,547,547,547,547,547,547,109',
'109,,,,,,107,,107,109,107,107,272,272,272,272,272,272,272,272,,168,',
'168,168,168,168,168,,109,109,109,109,109,109,109,109,109,109,109,168',
',107,,809,168,809,809,809,809,809,107,107,107,,107,,,,107,107,,,809',
'107,,107,107,107,107,107,107,107,,,,,,107,107,107,107,107,107,107,,',
',107,107,107,107,107,107,107,107,107,107,107,107,107,107,,107,107,107',
',,,,107,,107,107,,107,107,107,107,107,107,107,107,107,107,107,,,,,,',
'590,,590,590,,590,,,,,,590,590,107,,107,590,590,590,590,590,590,590',
'590,590,590,,,677,,677,677,677,677,677,,,,,,13,,13,13,13,13,13,677,',
',,,677,,,921,,921,921,13,921,,,,13,13,921,921,,,,921,921,921,921,921',
'921,921,921,921,921,,,,,,13,590,590,13,,590,,876,13,876,876,876,876',
'876,,590,590,148,,148,148,148,148,148,,590,876,,,,,,,,,,148,,,,,148',
'148,,,590,590,590,590,590,590,590,590,590,590,590,921,921,,,921,,,148',
',,148,,,,921,921,588,,588,588,,588,,,921,,,588,588,,,,588,588,588,588',
'588,588,588,588,588,588,,,921,921,921,921,921,921,921,921,921,921,921',
',763,,763,763,763,763,763,,,,,,,,,575,,575,575,763,575,,,,763,763,575',
'575,,,,575,575,575,575,575,575,575,575,575,575,,,,,,763,588,588,763',
',588,,,763,,,,,443,,588,588,,,,,443,443,,,588,443,443,443,443,443,443',
'443,443,443,443,443,443,443,443,443,,443,,,588,588,588,588,588,588,588',
'588,588,588,588,575,575,,,575,,,,,,,,,,575,575,573,,573,573,,573,,,575',
',,573,573,,,,573,573,573,573,573,573,573,573,573,573,,,575,575,575,575',
'575,575,575,575,575,575,575,,403,,403,403,403,403,403,,,,,,,,,,,,,403',
',,,,403,403,,,,443,443,443,443,443,443,443,443,,,,,,,,,,403,573,573',
'403,,573,,,403,,,,,,,573,573,,,,548,,318,,318,573,318,318,548,548,,',
',548,548,548,548,548,548,548,548,548,548,,,573,573,573,573,573,573,573',
'573,573,573,573,,,318,,,,,,,,,318,318,318,,318,,,,318,318,,,,318,,318',
'318,318,318,318,318,318,,,,,,318,318,318,318,318,318,318,,,,318,318',
'318,318,318,318,318,318,318,318,318,,318,318,,318,318,318,,,,,318,,318',
'318,,318,318,,,318,318,318,318,318,318,318,97,,97,,97,97,548,548,548',
'548,548,548,548,548,,,,,,318,,318,,905,,905,905,905,905,905,,,,,,,97',
',,,,,905,,,97,97,97,905,97,,,,97,97,,,,97,,97,97,97,97,97,97,97,,,905',
',,97,97,97,97,97,97,97,,,,97,97,97,97,97,97,97,97,97,97,97,97,97,97',
',97,97,97,,,,,97,,97,97,,97,97,97,97,97,97,97,97,97,97,97,,,,,,,97,',
',,,417,,417,417,,417,,,97,,97,417,417,,,,417,417,417,417,417,417,417',
'417,417,417,460,,460,460,460,460,460,780,,780,780,780,780,780,,,,,,460',
',,,,460,460,780,,,,,780,780,901,,901,901,901,901,901,,,,,,,460,,,460',
',,901,780,,,780,,901,,,417,417,,,417,,,,,,,,,,417,417,,,901,,551,14',
',14,417,14,14,,551,551,,,,551,551,551,551,551,551,551,551,551,551,,417',
'417,417,417,417,417,417,417,417,417,417,,,14,,,,,,,,,14,14,14,,14,,',
',14,14,,,,14,,14,14,14,14,14,14,14,,14,,,,14,14,14,14,14,14,14,,,,14',
'14,14,14,14,14,14,14,14,14,14,14,14,14,,14,14,14,,,,,14,,14,14,,14,14',
'14,14,14,14,14,14,14,14,14,599,,599,,599,599,14,551,551,551,551,551',
'551,551,551,,,,,14,,14,,804,,804,804,804,804,804,,,,,,,599,,,,,,804',
',,599,599,599,804,599,,,,599,599,,,,599,,599,599,599,599,599,599,599',
',,804,,,599,599,599,599,599,599,599,,,,599,599,599,599,599,599,599,599',
'599,599,599,599,599,599,,599,599,599,,,,,599,,599,599,,599,599,599,599',
'599,599,599,599,599,599,599,,,,,,,504,,504,504,,504,,,,,,504,504,599',
',599,504,504,504,504,504,504,504,504,504,504,,,,,,,,,,,,627,,627,627',
'627,627,627,786,,786,786,786,786,786,,,,,502,627,502,502,,502,627,627',
'786,,,502,502,786,786,,502,502,502,502,502,502,502,502,502,502,,,627',
',,627,504,504,,786,504,,786,,,,,,,,504,504,453,,453,453,453,453,453',
',504,,,,,,,,,,,453,,,,,453,453,,,504,504,504,504,504,504,504,504,504',
'504,504,502,502,,,502,,,453,,,453,,,,502,502,500,,500,500,,500,,,502',
',,500,500,,,,500,500,500,500,500,500,500,500,500,500,,,502,502,502,502',
'502,502,502,502,502,502,502,,899,,899,899,899,899,899,,,,,,,,,499,,499',
'499,899,499,,,,899,899,499,499,,,,499,499,499,499,499,499,499,499,499',
'499,,,,,,899,500,500,899,,500,,,,,,,,,,500,500,799,,799,799,799,799',
'799,,500,,,,,,,,,,,799,,,,,799,799,,,500,500,500,500,500,500,500,500',
'500,500,500,499,499,,,499,,,799,,,799,,,,499,499,,,,,563,82,,82,499',
'82,82,,563,563,,,,563,563,563,563,563,563,563,563,563,563,563,499,499',
'499,499,499,499,499,499,499,499,499,,,82,,,,,,,,,82,82,82,,82,,,,82',
'82,,,,82,,82,82,82,82,82,82,82,,,,,,82,82,82,82,82,82,82,,,,82,82,82',
'82,82,82,82,82,82,82,82,82,82,82,,82,82,82,,,,,82,,82,82,,82,82,82,82',
'82,82,82,82,82,82,82,485,,485,,485,485,82,563,563,563,563,563,563,563',
'563,,,,,82,,82,,801,,801,801,801,801,801,,,,,,,485,,,,,,801,,,485,485',
'485,801,485,,,,485,485,,,,485,,485,485,485,485,485,485,485,,,801,,,485',
'485,485,485,485,485,485,,,,485,485,485,485,485,485,485,485,485,485,485',
'485,485,485,,485,485,485,,,,,485,,485,485,,485,485,485,485,485,485,485',
'485,485,485,485,602,,602,,602,602,788,,788,788,788,788,788,,,,,,,485',
',485,,,,788,,,,,,788,,,,,602,,,,,,,,,602,602,602,,602,,,788,602,602',
',,,602,,602,602,602,602,602,602,602,,,,,,602,602,602,602,602,602,602',
',,,602,602,602,602,602,602,602,602,602,602,602,602,602,602,,602,602',
'602,,,,,602,,602,602,,602,602,602,602,602,602,602,602,602,602,602,,',
',,,,257,,257,257,,257,,,,,,257,257,602,,602,257,257,257,257,257,257',
'257,257,257,257,,,,,,,,,,,,797,,797,797,797,797,797,910,,910,910,910',
'910,910,,,,,897,797,897,897,,897,,797,910,,,897,897,,910,,897,897,897',
'897,897,897,897,897,897,897,,,797,,,,257,257,,910,257,,,,,,,,879,,257',
'257,,,,,879,879,,,257,879,879,879,879,879,879,879,879,879,879,879,879',
'879,879,879,,,,,257,257,257,257,257,257,257,257,257,257,257,897,897',
',,897,,,,,,,,,,897,897,923,,923,923,,923,,,897,,,923,923,,,,923,923',
'923,923,923,923,923,923,923,923,,,897,897,897,897,897,897,897,897,897',
'897,897,456,,456,456,456,456,456,,,,,,,,,,,,,456,,,,,,456,,,,,879,879',
'879,879,879,879,879,879,,942,,942,942,942,942,942,456,,923,923,,,923',
',,,,,942,,,,923,923,942,,,,,5,,5,923,5,5,,,,,,,,,,,942,,,,,,,923,923',
'923,923,923,923,923,923,923,923,923,,,5,,,,,,,,,5,5,5,,5,,,,5,5,,,,5',
',5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,,5,5,5,5,5,5,5,5,5,5,5,5,5,5,,5',
'5,5,,,,,5,,5,5,,5,5,5,5,5,5,5,5,5,5,5,,,,,,,255,,255,255,,255,,,,,,255',
'255,5,,5,255,255,255,255,255,255,255,255,255,255,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,255,255,,,255,,,,,,,,,,255',
'255,,,,,,477,,477,255,477,477,,,,,,,,,,,,,,,,,,255,255,255,255,255,255',
'255,255,255,255,255,,,477,,,,,,,,,477,477,477,,477,,,,477,477,,,,477',
',477,477,477,477,477,477,477,,,,,,477,477,477,477,477,477,477,,,,477',
'477,477,477,477,477,477,477,477,477,477,477,477,477,,477,477,477,,,',
',477,,477,477,,477,477,477,477,477,477,477,477,477,477,477,,,,,,,378',
',378,378,,378,,,,,,378,378,477,,477,378,378,378,378,378,378,378,378',
'378,378,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',378,378,,,378,,,,,,,,,,378,378,,,80,,80,80,,80,378,,,,,80,80,,,,80',
'80,80,80,80,80,80,80,80,80,378,378,378,378,378,378,378,378,378,378,80',
'80,80,,,,,,,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80',
'80,80,80,80,80,,,,80,80,80,80,80,80,80,80,,,80,80,80,80,,80,80,,,80',
',,,,,,,,,80,80,,495,495,,495,561,495,495,80,,,80,,561,561,,,,561,561',
'561,561,561,561,561,561,561,561,80,80,80,80,80,80,80,80,80,80,495,,',
',,,,,,495,495,495,495,495,,,,495,495,,,,495,,495,495,495,495,495,495',
'495,,,,,,495,495,495,495,495,495,495,495,,495,495,495,495,495,495,495',
'495,495,495,495,495,,495,495,,495,495,495,,,,,495,,495,495,,495,495',
'495,,495,495,495,495,495,495,495,83,83,,83,,83,83,,,,,561,561,561,561',
'561,561,561,561,495,,,,,,,,,,,,,,,,,,83,,,,,,,,,83,83,83,83,83,,,,83',
'83,,,,83,,83,83,83,83,83,83,83,,,,,,83,83,83,83,83,83,83,83,,83,83,83',
'83,83,83,83,83,83,83,83,83,,83,83,,83,83,83,,,,,83,,83,83,,83,83,83',
',83,83,83,83,83,83,83,,,,,513,,513,513,,513,,,,,,513,513,,,83,513,513',
'513,513,513,513,513,513,513,513,,,,,,,,,,,513,513,513,,,,,,,513,513',
'513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513',
'513,513,513,513,513,,,,513,513,513,513,513,513,513,513,,,513,513,513',
'513,,513,513,,,513,,,,,,,,,,513,513,,451,451,,451,558,451,451,513,,',
'513,,558,558,,,,558,558,558,558,558,558,558,558,558,558,513,513,513',
'513,513,513,513,513,513,513,451,,,,,,,,,451,451,451,451,451,,,,451,451',
',,,451,,451,451,451,451,451,451,451,,,,,,451,451,451,451,451,451,451',
'451,,451,451,451,451,451,451,451,451,451,451,451,451,,451,451,,451,451',
'451,,,,,451,,451,451,,451,451,451,,451,451,451,451,451,451,451,450,450',
',450,,450,450,,,,,558,558,558,558,558,558,558,558,451,,,,,,,,,,,,,,',
',,,450,,,,,,,,,450,450,450,450,450,,,,450,450,,,,450,,450,450,450,450',
'450,450,450,,,,,,450,450,450,450,450,450,450,450,,450,450,450,450,450',
'450,450,450,450,450,450,450,,450,450,,450,450,450,,,,,450,,450,450,',
'450,450,450,,450,450,450,450,450,450,450,525,525,,525,,525,525,,,,,',
',556,,,,,,450,,556,556,,,,556,556,556,556,556,556,556,556,556,556,,525',
',,,,,,,,525,525,525,525,525,,,,525,525,,,,525,,525,525,525,525,525,525',
'525,,,,,,525,525,525,525,525,525,525,525,,525,525,525,525,525,525,525',
'525,525,525,525,525,,525,525,,525,525,525,,,,,525,,525,525,,525,525',
'525,,525,525,525,525,525,525,525,442,442,,442,,442,442,,,,,,,,,,,,,525',
'556,556,556,556,556,556,556,556,,,,,,,,,,442,,,,,,,,,442,442,442,442',
'442,,,,442,442,,,,442,,442,442,442,442,442,442,442,,,,,,442,442,442',
'442,442,442,442,442,,442,442,442,442,442,442,442,442,442,442,442,442',
',442,442,,442,442,442,,,,,442,,442,442,,442,442,442,,442,442,442,442',
'442,442,442,439,439,,439,,439,439,,,,,,,554,,,,,,442,,554,554,,,,554',
'554,554,554,554,554,554,554,554,554,,439,,,,,,,,,439,439,439,439,439',
',,,439,439,,,,439,,439,439,439,439,439,439,439,,,,,,439,439,439,439',
'439,439,439,439,,439,439,439,439,439,439,439,439,439,439,439,439,,439',
'439,,439,439,439,,,,,439,,439,439,,439,439,439,,439,439,439,439,439',
'439,439,95,95,,95,,95,95,,,,,,,,,,,,,439,554,554,554,554,554,554,554',
'554,,,,,,,,,,95,,,,,,,,,95,95,95,95,95,,,,95,95,,,,95,,95,95,95,95,95',
'95,95,,,,,,95,95,95,95,95,95,95,95,,95,95,95,95,95,95,95,95,95,95,95',
'95,,95,95,,95,95,95,,,,,95,,95,95,,95,95,95,,95,95,95,95,95,95,95,537',
'537,,537,,537,537,,,,,,,,,,,,,95,,,,,,,,,,,,,,,,,,537,,,,,,,,,537,537',
'537,537,537,,,,537,537,,,,537,,537,537,537,537,537,537,537,,,,,,537',
'537,537,537,537,537,537,537,,537,537,537,537,537,537,537,537,537,537',
'537,537,,537,537,,537,537,537,,,,,537,,537,537,,537,537,537,,537,537',
'537,537,537,537,537,540,540,,540,,540,540,,,,,,,,,,,,,537,,,,,,,,,,',
',,,,,,,540,,,,,,,,,540,540,540,540,540,,,,540,540,,,,540,,540,540,540',
'540,540,540,540,,,,,,540,540,540,540,540,540,540,540,,540,540,540,540',
'540,540,540,540,540,540,540,540,,540,540,,540,540,540,,,,,540,,540,540',
',540,540,540,,540,540,540,540,540,540,540,578,578,,578,,578,578,,,,',
',,,,,,,,540,,,,,,,,,,,,,,,,,,578,,,,,,,,,578,578,578,578,578,,,,578',
'578,,,,578,,578,578,578,578,578,578,578,,,,,,578,578,578,578,578,578',
'578,578,,578,578,578,578,578,578,578,578,578,578,578,578,,578,578,,578',
'578,578,,,,,578,,578,578,,578,578,578,,578,578,578,578,578,578,578,579',
'579,,579,,579,579,,,,,,,,,,,,,578,,,,,,,,,,,,,,,,,,579,,,,,,,,,579,579',
'579,579,579,,,,579,579,,,,579,,579,579,579,579,579,579,579,,,,,,579',
'579,579,579,579,579,579,579,,579,579,579,579,579,579,579,579,579,579',
'579,579,,579,579,,579,579,579,,,,,579,,579,579,,579,579,579,,579,579',
'579,579,579,579,579,,,,,36,,36,36,,36,,,,,,36,36,,,579,36,36,36,36,36',
'36,36,36,36,36,,,,,,,,,,,36,36,36,,,,,,,36,36,36,36,36,36,36,36,36,36',
'36,36,36,36,36,36,36,36,36,36,36,36,36,36,,,,36,36,36,36,36,36,36,36',
',,36,36,36,36,,36,36,36,,36,,,,,,,,,,36,36,,387,387,,387,,387,387,36',
',,36,,,,,,,,,,,,,,,,,36,36,36,36,36,36,36,36,36,36,387,,,,,,,,,387,387',
'387,387,387,,,,387,387,,,,387,,387,387,387,387,387,387,387,,,,,,387',
'387,387,387,387,387,387,387,,387,387,387,387,387,387,387,387,387,387',
'387,387,,387,387,,387,387,387,,,,,387,,387,387,,387,387,387,,387,387',
'387,387,387,387,387,472,472,,472,,472,472,,,,,,,,,,,,,387,,,,,,,,,,',
',,,,,,,472,,,,,,,,,472,472,472,472,472,,,,472,472,,,,472,,472,472,472',
'472,472,472,472,,,,,,472,472,472,472,472,472,472,472,,472,472,472,472',
'472,472,472,472,472,472,472,472,,472,472,,472,472,472,,,,,472,,472,472',
',472,472,472,,472,472,472,472,472,472,472,,,,,580,,580,580,,580,,,,',
',580,580,,,472,580,580,580,580,580,580,580,580,580,580,,,,,,,,,,,580',
'580,580,,,,,,,580,580,580,580,580,580,580,580,580,580,580,580,580,580',
'580,580,580,580,580,580,580,580,580,580,,,,580,580,580,580,580,580,580',
'580,,,580,580,580,580,,580,580,,,580,,,,,,,,,,580,580,,757,757,,757',
',757,757,580,,,580,,,,,,,,,,,,,,,,,580,580,580,580,580,580,580,580,580',
'580,757,,,,,,,,,757,757,757,757,757,,,,757,757,,,,757,,757,757,757,757',
'757,757,757,,,,,,757,757,757,757,757,757,757,757,,757,757,757,757,757',
'757,757,757,757,757,757,757,,757,757,,757,757,757,,,,,757,,757,757,',
'757,757,757,,757,757,757,757,757,757,757,,,,,377,,377,377,,377,,,,,',
'377,377,,,757,377,377,377,377,377,377,377,377,377,377,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,377,377,,,377,,,,,,,',
',,377,377,,747,747,,747,,747,747,377,,,,,,,,,,,,,,,,,,,,377,377,377',
'377,377,377,377,377,377,377,747,,,,,,,,,747,747,747,747,747,,,,747,747',
',,,747,,747,747,747,747,747,747,747,,,,,,747,747,747,747,747,747,747',
'747,,747,747,747,747,747,747,747,747,747,747,747,747,,747,747,,747,747',
'747,,,,,747,,747,747,,747,747,747,,747,747,747,747,747,747,747,915,915',
',915,,915,915,,,,,,,,,,,,,747,,,,,,,,,,,,,,,,,,915,,,,,,,,,915,915,915',
'915,915,,,,915,915,,,,915,,915,915,915,915,915,915,915,,,,,,915,915',
'915,915,915,915,915,915,,915,915,915,915,915,915,915,915,915,915,915',
'915,,915,915,,915,915,915,,,,,915,,915,915,,915,915,915,,915,915,915',
'915,915,915,915,364,364,,364,,364,364,,,,,,,,,,,,,915,,,,,,,,,,,,,,',
',,,364,,,,,,,,,364,364,364,364,364,,,,364,364,,,,364,,364,364,364,364',
'364,364,364,,,,,,364,364,364,364,364,364,364,364,,364,364,364,364,364',
'364,364,364,364,364,364,364,,364,364,,364,364,364,,,,,364,,364,364,',
'364,364,364,,364,364,364,364,364,364,364,833,833,,833,,833,833,,,,,',
',,,,,,,364,,,,,,,,,,,,,,,,,,833,,,,,,,,,833,833,833,833,833,,,,833,833',
',,,833,,833,833,833,833,833,833,833,,,,,,833,833,833,833,833,833,833',
'833,,833,833,833,833,833,833,833,833,833,833,833,833,,833,833,,833,833',
'833,,,,,833,,833,833,,833,833,833,,833,833,833,833,833,833,833,838,838',
',838,,838,838,,,,,,,,,,,,,833,,,,,,,,,,,,,,,,,,838,,,,,,,,,838,838,838',
'838,838,,,,838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838',
'838,838,838,838,838,838,,838,838,838,838,838,838,838,838,838,838,838',
'838,,838,838,,838,838,838,,,,,838,,838,838,,838,838,838,,838,838,838',
'838,838,838,838,,,,,18,,18,18,,18,,,,,,18,18,,,838,18,18,18,18,18,18',
'18,18,18,18,,,,,,,,,,,18,18,18,,,,,,,18,18,18,18,18,18,18,18,18,18,18',
'18,18,18,18,18,18,18,18,18,18,18,18,18,,,,18,18,18,18,18,18,18,18,,',
'18,18,18,18,,18,18,18,18,18,18,,,,,,,,,18,18,,302,302,,302,,302,302',
'18,,,,,,,,,,,,,,,,,,,,18,18,18,18,18,18,18,18,18,18,302,,,,,,,,,302',
'302,302,302,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,,',
'302,302,302,302,302,302,302,302,,302,302,302,302,302,302,302,302,302',
'302,302,302,,302,302,,302,302,302,,,,,302,,302,302,,302,302,302,,302',
'302,302,302,302,302,302,850,850,,850,,850,850,,,,,,,,,,,,,302,,,,,,',
',,,,,,,,,,,850,,,,,,,,,850,850,850,850,850,,,,850,850,,,,850,,850,850',
'850,850,850,850,850,,,,,,850,850,850,850,850,850,850,850,,850,850,850',
'850,850,850,850,850,850,850,850,850,,850,850,,850,850,850,,,,,850,,850',
'850,,850,850,850,,850,850,850,850,850,850,850,854,854,,854,,854,854',
',,,,,,,,,,,,850,,,,,,,,,,,,,,,,,,854,,,,,,,,,854,854,854,854,854,,,',
'854,854,,,,854,,854,854,854,854,854,854,854,,,,,,854,854,854,854,854',
'854,854,854,,854,854,854,854,854,854,854,854,854,854,854,854,,854,854',
',854,854,854,,,,,854,,854,854,,854,854,854,,854,854,854,854,854,854',
'854,282,282,,282,,282,282,,,,,,,,,,,,,854,,,,,,,,,,,,,,,,,,282,,,,,',
',,,282,282,282,282,282,,,,282,282,,,,282,,282,282,282,282,282,282,282',
',,,,,282,282,282,282,282,282,282,282,,282,282,282,282,282,282,282,282',
'282,282,282,282,,282,282,,282,282,282,,,,,282,,282,282,,282,282,282',
',282,282,282,282,282,282,282,595,595,,595,,595,595,,,,,,,,,,,,,282,',
',,,,,,,,,,,,,,,,595,,,,,,,,,595,595,595,595,595,,,,595,595,,,,595,,595',
'595,595,595,595,595,595,,,,,,595,595,595,595,595,595,595,595,,595,595',
'595,595,595,595,595,595,595,595,595,595,,595,595,,595,595,595,,,,,595',
',595,595,,595,595,595,,595,595,595,595,595,595,595,,,,,624,,624,624',
',624,,,,,,624,624,,,595,624,624,624,624,624,624,624,624,624,624,,,,',
',,,,,,624,624,624,,,,,,,624,624,624,624,624,624,624,624,624,624,624',
'624,624,624,624,624,624,624,624,624,624,624,624,624,,,,624,624,624,624',
'624,624,624,624,,,624,624,624,624,,624,624,,,624,,,,,,,,,,624,624,,629',
'629,,629,,629,629,624,,,,,,,,,,,,,,,,,,,,624,624,624,624,624,624,624',
'624,624,624,629,,,,,,,,,629,629,629,629,629,,,,629,629,,,,629,,629,629',
'629,629,629,629,629,,,,,,629,629,629,629,629,629,629,629,,629,629,629',
'629,629,629,629,629,629,629,629,629,,629,629,,629,629,629,,,,,629,,629',
'629,,629,629,629,,629,629,629,629,629,629,629,682,682,,682,,682,682',
',,,,,,,,,,,,629,,,,,,,,,,,,,,,,,,682,,,,,,,,,682,682,682,682,682,,,',
'682,682,,,,682,,682,682,682,682,682,682,682,,,,,,682,682,682,682,682',
'682,682,682,,682,682,682,682,682,682,682,682,682,682,682,682,,682,682',
',682,682,682,,,,,682,,682,682,,682,682,682,,682,682,682,682,682,682',
'682,132,132,,132,,132,132,,,,,,,,,,,,,682,,,,,,,,,,,,,,,,,,132,,,,,',
',,,132,132,132,132,132,,,,132,132,,,,132,,132,132,132,132,132,132,132',
',,,,,132,132,132,132,132,132,132,132,,132,132,132,132,132,132,132,132',
'132,132,132,132,,132,132,,132,132,132,,,,,132,,132,132,,132,132,132',
',132,132,132,132,132,132,132,889,889,,889,,889,889,,,,,,,,,,,,,132,',
',,,,,,,,,,,,,,,,889,,,,,,,,,889,889,889,889,889,,,,889,889,,,,889,,889',
'889,889,889,889,889,889,,,,,,889,889,889,889,889,889,889,889,,889,889',
'889,889,889,889,889,889,889,889,889,889,,889,889,,889,889,889,,,,,889',
',889,889,,889,889,889,,889,889,889,889,889,889,889,3,3,,3,,3,3,,,,,',
',,,,,,,889,,,,,,,,,,,,,,,,,,3,,,,,,,,,3,3,3,3,3,,,,3,3,,,,3,,3,3,3,3',
'3,3,3,,,,,,3,3,3,3,3,3,3,3,,3,3,3,3,3,3,3,3,3,3,3,3,,3,3,,3,3,3,,,,',
'3,,3,3,,3,3,3,,3,3,3,3,3,3,3,825,,825,,825,825,,,,,,,,,,,,,,3,,,,,,',
',,,,,,,,,,825,,,,,,,,,825,825,825,,825,,,,825,825,,,,825,,825,825,825',
'825,825,825,825,,,,,,825,825,825,825,825,825,825,,,,825,825,825,825',
'825,825,825,825,825,825,825,,825,825,,825,825,825,,,,,825,,825,825,',
'825,825,,,825,825,825,825,825,825,825,138,,138,,138,138,,,,,,,,,,,,',
',825,,,,,,,,,,,,,,,,,138,,,,,,,,,138,138,138,,138,,,,138,138,,,,138',
',138,138,138,138,138,138,138,,,,,,138,138,138,138,138,138,138,,,,138',
'138,138,138,138,138,138,138,138,138,138,,138,138,,138,138,138,,,,,138',
',138,138,,138,138,,,138,138,138,138,138,138,138,142,,142,,142,142,,',
',,,,,,,,,,,138,,,,,,,,,,,,,,,,,142,,,,,,,,,142,142,142,,142,,,,142,142',
',,,142,,142,142,142,142,142,142,142,,,,,,142,142,142,142,142,142,142',
',,,142,142,142,142,142,142,142,142,142,142,142,,142,142,,142,142,142',
',,,,142,,142,142,,142,142,,,142,142,142,142,142,142,142,118,,118,,118',
'118,,,,,,,,,,,,,,142,,,,,,,,,,,,,,,,,118,,,,,,,,,118,118,118,,118,,',
',118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118,118,118,118',
'118,118,,,,118,118,118,118,118,118,118,118,118,118,118,,118,118,,118',
'118,118,,,,,118,,118,118,,118,118,,,118,118,118,118,118,118,118,692',
',692,,692,692,,,,,,,,,,,,,,118,,,,,,,,,,,,,,,,,692,,,,,,,,,692,692,692',
',692,,,,692,692,,,,692,,692,692,692,692,692,692,692,,,,,,692,692,692',
'692,692,692,692,,,,692,692,692,692,692,692,692,692,692,692,692,,692',
'692,,692,692,692,,,,,692,,692,692,,692,692,,,692,692,692,692,692,692',
'692,146,,146,,146,146,,,,,,,,,,,,,,692,,,,,,,,,,,,,,,,,146,,,,,,,,,146',
'146,146,,146,,,,146,146,,,,146,,146,146,146,146,146,146,146,,,,,,146',
'146,146,146,146,146,146,,,,146,146,146,146,146,146,146,146,146,146,146',
',146,146,,146,146,146,,,,,146,,146,146,,146,146,,,146,146,146,146,146',
'146,146,699,,699,,699,699,,,,,,,,,,,,,,146,,,,,,,,,,,,,,,,,699,,,,,',
',,,699,699,699,,699,,,,699,699,,,,699,,699,699,699,699,699,699,699,',
',,,,699,699,699,699,699,699,699,,,,699,699,699,699,699,699,699,699,699',
'699,699,,699,699,,699,699,699,,,,,699,,699,699,,699,699,,,699,699,699',
'699,699,699,699,700,,700,,700,700,,,,,,,,,,,,,,699,,,,,,,,,,,,,,,,,700',
',,,,,,,,700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700,700',
'700,,,,,,700,700,700,700,700,700,700,,,,700,700,700,700,700,700,700',
'700,700,700,700,,700,700,,700,700,700,,,,,700,,700,700,,700,700,,,700',
'700,700,700,700,700,700,662,,662,,662,662,,,,,,,,,,,,,,700,,,,,,,,,',
',,,,,,,662,,,,,,,,,662,662,662,,662,,,,662,662,,,,662,,662,662,662,662',
'662,662,662,,,,,,662,662,662,662,662,662,662,,,,662,662,662,662,662',
'662,662,662,662,662,662,,662,662,,662,662,662,,,,,662,,662,662,,662',
'662,,,662,662,662,662,662,662,662,646,,646,,646,646,,,,,,,,,,,,,,662',
',,,,,,,,,,,,,,,,646,,,,,,,,,646,646,646,,646,,,,646,646,,,,646,,646',
'646,646,646,646,646,646,,,,,,646,646,646,646,646,646,646,,,,646,646',
'646,646,646,646,646,646,646,646,646,,646,646,,646,646,646,,,,,646,,646',
'646,,646,646,646,,646,646,646,646,646,646,646,636,,636,,636,636,,,,',
',,,,,,,,,646,,,,,,,,,,,,,,,,,636,,,,,,,,,636,636,636,,636,,,,636,636',
',,,636,,636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636',
',,,636,636,636,636,636,636,636,636,636,636,636,,636,636,,636,636,636',
',,,,636,,636,636,,636,636,,,636,636,636,636,636,636,636,612,,612,,612',
'612,,,,,,,,,,,,,,636,,,,,,,,,,,,,,,,,612,,,,,,,,,612,612,612,,612,,',
',612,612,,,,612,,612,612,612,612,612,612,612,,,,,,612,612,612,612,612',
'612,612,,,,612,612,612,612,612,612,612,612,612,612,612,612,612,612,',
'612,612,612,,,,,612,,612,612,,612,612,,,612,612,612,612,612,612,612',
'609,,609,,609,609,,,,,,,,,,,,,,612,,,,,,,,,,,,,,,,,609,,,,,,,,,609,609',
'609,,609,,,,609,609,,,,609,,609,609,609,609,609,609,609,,,,,,609,609',
'609,609,609,609,609,,,,609,609,609,609,609,609,609,609,609,609,609,609',
'609,609,,609,609,609,,,,,609,,609,609,,609,609,609,,609,609,609,609',
'609,609,609,606,,606,,606,606,,,,,,,,,,,,,,609,,,,,,,,,,,,,,,,,606,',
',,,,,,,606,606,606,,606,,,,606,606,,,,606,,606,606,606,606,606,606,606',
',,,,,606,606,606,606,606,606,606,,,,606,606,606,606,606,606,606,606',
'606,606,606,,606,606,,606,606,606,,,,,606,,606,606,,606,606,606,,606',
'606,606,606,606,606,606,597,,597,,597,597,,,,,,,,,,,,,,606,,,,,,,,,',
',,,,,,,597,,,,,,,,,597,597,597,,597,,,,597,597,,,,597,,597,597,597,597',
'597,597,597,,,,,,597,597,597,597,597,597,597,,,,597,597,597,597,597',
'597,597,597,597,597,597,,597,597,,597,597,597,,,,,597,,597,597,,597',
'597,,,597,597,597,597,597,597,597,15,,15,,15,15,,,,,,,,,,,,,,597,,,',
',,,,,,,,,,,,,15,,,,,,,,,15,15,15,15,15,,,,15,15,,,,15,,15,15,15,15,15',
'15,15,,,,,,15,15,15,15,15,15,15,15,,15,15,15,15,15,15,15,15,15,15,15',
'15,,15,15,,15,15,15,,,,,15,,15,15,,15,15,15,,15,15,15,15,15,15,15,589',
',589,,589,589,,,,,,,,,,,,,,15,,,,,,,,,,,,,,,,,589,,,,,,,,,589,589,589',
',589,,,,589,589,,,,589,,589,589,589,589,589,589,589,,,,,,589,589,589',
'589,589,589,589,,,,589,589,589,589,589,589,589,589,589,589,589,589,589',
'589,,589,589,589,,,,,589,,589,589,,589,589,589,589,589,589,589,589,589',
'589,589,21,,21,,21,21,,,,,,,,,,,,,,589,,,,,,,,,,,,,,,,,21,,,,,,,,,21',
'21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,,21,21,21,21,21,21',
'21,,,,21,21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,,,,,21,,21,21',
',21,21,,,21,21,21,21,21,21,21,26,,26,,26,26,,,,,,,,,,,,,,21,,,,,,,,',
',,,,,,,,26,,,,,,,,,26,26,26,,26,,,,26,26,,,,26,,26,26,26,26,26,26,26',
',,,,,26,26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26,26,,26,26',
',26,26,26,,,,,26,,26,26,,26,26,,,26,26,26,26,26,26,26,256,,256,,256',
'256,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,256,,,,,,,,,256,256,256,,256,,,',
'256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256',
'256,256,,,,256,256,256,256,256,256,256,256,256,256,256,256,256,256,',
'256,256,256,,,,,256,,256,256,,256,256,256,256,256,256,256,256,256,256',
'256,128,,128,,128,128,,,,,,,,,,,,,,256,,,,,,,,,,,,,,,,,128,,,,,,,,,128',
'128,128,,128,,,,128,128,,,,128,,128,128,128,128,128,128,128,,,,,,128',
'128,128,128,128,128,128,,,,128,128,128,128,128,128,128,128,128,128,128',
'128,128,128,,128,128,128,,,,,128,,128,128,,128,128,128,128,128,128,128',
'128,128,128,128,30,,30,,30,30,,,,,,,,,,,,,,128,,,,,,,,,,,,,,,,,30,,',
',,,,,,30,30,30,,30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30',
'30,30,30,30,,,,30,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30,,,',
',30,,30,30,,30,30,,,30,30,30,30,30,30,30,577,,577,,577,577,,,,,,,,,',
',,,,30,,,,,,,,,,,,,,,,,577,,,,,,,,,577,577,577,,577,,,,577,577,,,,577',
',577,577,577,577,577,577,577,,,,,,577,577,577,577,577,577,577,,,,577',
'577,577,577,577,577,577,577,577,577,577,,577,577,,577,577,577,,,,,577',
',577,577,,577,577,,,577,577,577,577,577,577,577,574,,574,,574,574,,',
',,,,,,,,,,,577,,,,,,,,,,,,,,,,,574,,,,,,,,,574,574,574,,574,,,,574,574',
',,,574,,574,574,574,574,574,574,574,,,,,,574,574,574,574,574,574,574',
',,,574,574,574,574,574,574,574,574,574,574,574,574,574,574,,574,574',
'574,,,,,574,,574,574,,574,574,574,574,574,574,574,574,574,574,574,45',
',45,,45,45,,,,,,,,,,,,,,574,,,,,,,,,,,,,,,,,45,,,,,,,,,45,45,45,,45',
',,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,,45',
'45,45,45,45,45,45,45,45,45,45,,45,45,,45,45,45,,,,,45,,45,45,,45,45',
',,45,45,45,45,45,45,45,836,,836,,836,836,,,,,,,,,,,,,,45,,,,,,,,,,,',
',,,,,836,,,,,,,,,836,836,836,,836,,,,836,836,,,,836,,836,836,836,836',
'836,836,836,,,,,,836,836,836,836,836,836,836,,,,836,836,836,836,836',
'836,836,836,836,836,836,,836,836,,836,836,836,,,,,836,,836,836,,836',
'836,,,836,836,836,836,836,836,836,546,,546,,546,546,,,,,,,,,,,,,,836',
',,,,,,,,,,,,,,,,546,,,,,,,,,546,546,546,,546,,,,546,546,,,,546,,546',
'546,546,546,546,546,546,,,,,,546,546,546,546,546,546,546,,,,546,546',
'546,546,546,546,546,546,546,546,546,,546,546,,546,546,546,,,,,546,,546',
'546,,546,546,,,546,546,546,546,546,546,546,544,,544,,544,544,,,,,,,',
',,,,,,546,,,,,,,,,,,,,,,,,544,,,,,,,,,544,544,544,,544,,,,544,544,,',
',544,,544,544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,',
',,544,544,544,544,544,544,544,544,544,544,544,,544,544,,544,544,544',
',,,,544,,544,544,,544,544,,,544,544,544,544,544,544,544,760,,760,,760',
'760,,,,,,,,,,,,,,544,,,,,,,,,,,,,,,,,760,,,,,,,,,760,760,760,,760,,',
',760,760,,,,760,,760,760,760,760,760,760,760,,,,,,760,760,760,760,760',
'760,760,,,,760,760,760,760,760,760,760,760,760,760,760,,760,760,,760',
'760,760,,,,,760,,760,760,,760,760,,,760,760,760,760,760,760,760,541',
',541,,541,541,,,,,,,,,,,,,,760,,,,,,,,,,,,,,,,,541,,,,,,,,,541,541,541',
',541,,,,541,541,,,,541,,541,541,541,541,541,541,541,,,,,,541,541,541',
'541,541,541,541,,,,541,541,541,541,541,541,541,541,541,541,541,,541',
'541,,541,541,541,,,,,541,,541,541,,541,541,541,,541,541,541,541,541',
'541,541,50,,50,,50,50,,,,,,,,,,,,,,541,,,,,,,,,,,,,,,,,50,,,,,,,,,50',
'50,50,,50,,,,50,50,,,,50,,50,50,50,50,50,50,50,,,,,,50,50,50,50,50,50',
'50,,,,50,50,50,50,50,50,50,50,50,50,50,,50,50,,50,50,50,,,,,50,,50,50',
',50,50,,,50,50,50,50,50,50,50,524,,524,,524,524,,,,,,,,,,,,,,50,,,,',
',,,,,,,,,,,,524,,,,,,,,,524,524,524,,524,,,,524,524,,,,524,,524,524',
'524,524,524,524,524,,,,,,524,524,524,524,524,524,524,,,,524,524,524',
'524,524,524,524,524,524,524,524,,524,524,,524,524,524,,,,,524,,524,524',
',524,524,,,524,524,524,524,524,524,524,523,,523,,523,523,,,,,,,,,,,',
',,524,,,,,,,,,,,,,,,,,523,,,,,,,,,523,523,523,,523,,,,523,523,,,,523',
',523,523,523,523,523,523,523,,,,,,523,523,523,523,523,523,523,,,,523',
'523,523,523,523,523,523,523,523,523,523,,523,523,,523,523,523,,,,,523',
',523,523,,523,523,,,523,523,523,523,523,523,523,772,,772,,772,772,,',
',,,,,,,,,,,523,,,,,,,,,,,,,,,,,772,,,,,,,,,772,772,772,,772,,,,772,772',
',,,772,,772,772,772,772,772,772,772,,,,,,772,772,772,772,772,772,772',
',,,772,772,772,772,772,772,772,772,772,772,772,,772,772,,772,772,772',
',,,,772,,772,772,,772,772,,,772,772,772,772,772,772,772,774,,774,,774',
'774,,,,,,,,,,,,,,772,,,,,,,,,,,,,,,,,774,,,,,,,,,774,774,774,,774,,',
',774,774,,,,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774',
'774,774,,,,774,774,774,774,774,774,774,774,774,774,774,,774,774,,774',
'774,774,,,,,774,,774,774,,774,774,,,774,774,774,774,774,774,774,503',
',503,,503,503,,,,,,,,,,,,,,774,,,,,,,,,,,,,,,,,503,,,,,,,,,503,503,503',
',503,,,,503,503,,,,503,,503,503,503,503,503,503,503,,,,,,503,503,503',
'503,503,503,503,,,,503,503,503,503,503,503,503,503,503,503,503,503,503',
'503,,503,503,503,,,,,503,,503,503,,503,503,503,503,503,503,503,503,503',
'503,503,53,,53,,53,53,,,,,,,,,,,,,,503,,,,,,,,,,,,,,,,,53,,,,,,,,,53',
'53,53,,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,,53,53,53,53,53,53',
'53,,,,53,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53,,,,,53,,53,53',
',53,53,,,53,53,53,53,53,53,53,56,,56,,56,56,,,,,,,,,,,,,,53,,,,,,,,',
',,,,,,,,56,,,,,,,,,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56',
',,,,,56,56,56,56,56,56,56,,,,56,56,56,56,56,56,56,56,56,56,56,56,56',
'56,,56,56,56,,,,,56,,56,56,,56,56,56,56,56,56,56,56,56,56,56,57,,57',
',57,57,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,,,57,,,,,,,,,57,57,57,,57,,,,57',
'57,,,,57,,57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,,57,57,57',
'57,57,57,57,57,57,57,57,,57,57,,57,57,57,,,,,57,,57,57,,57,57,,,57,57',
'57,57,57,57,57,775,,775,,775,775,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,775',
',,,,,,,,775,775,775,,775,,,,775,775,,,,775,,775,775,775,775,775,775',
'775,,,,,,775,775,775,775,775,775,775,,,,775,775,775,775,775,775,775',
'775,775,775,775,,775,775,,775,775,775,,,,,775,,775,775,,775,775,,,775',
'775,775,775,775,775,775,63,,63,,63,63,,,,,,,,,,,,,,775,,,,,,,,,,,,,',
',,,63,,,,,,,,,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,',
',63,63,63,63,63,63,63,,,,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63',
'63,63,,,,,63,,63,63,,63,63,,,63,63,63,63,63,63,63,777,,777,,777,777',
',,,,,,,,,,,,,63,,,,,,,,,,,,,,,,,777,,,,,,,,,777,777,777,,777,,,,777',
'777,,,,777,,777,777,777,777,777,777,777,,,,,,777,777,777,777,777,777',
'777,,,,777,777,777,777,777,777,777,777,777,777,777,,777,777,,777,777',
'777,,,,,777,,777,777,,777,777,,,777,777,777,777,777,777,777,65,,65,',
'65,65,,,,,,,,,,,,,,777,,,,,,,,,,,,,,,,,65,,,,,,,,,65,65,65,,65,,,,65',
'65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,,,65,65,65',
'65,65,65,65,65,65,65,65,65,65,65,,65,65,65,,,,,65,,65,65,,65,65,65,65',
'65,65,65,65,65,65,65,291,,291,,291,291,,,,,,,,,,,,,,65,,,,,,,,,,,,,',
',,,291,,,,,,,,,291,291,291,,291,,,,291,291,,,,291,,291,291,291,291,291',
'291,291,,,,,,291,291,291,291,291,291,291,,,,291,291,291,291,291,291',
'291,291,291,291,291,,291,291,,291,291,291,,,,,291,,291,291,,291,291',
',,291,291,291,291,291,291,291,922,,922,,922,922,,,,,,,,,,,,,,291,,,',
',,,,,,,,,,,,,922,,,,,,,,,922,922,922,,922,,,,922,922,,,,922,,922,922',
'922,922,922,922,922,,,,,,922,922,922,922,922,922,922,,,,922,922,922',
'922,922,922,922,922,922,922,922,922,922,922,,922,922,922,,,,,922,,922',
'922,,922,922,922,922,922,922,922,922,922,922,922,858,,858,,858,858,',
',,,,,,,,,,,,922,,,,,,,,,,,,,,,,,858,,,,,,,,,858,858,858,,858,,,,858',
'858,,,,858,,858,858,858,858,858,858,858,,,,,,858,858,858,858,858,858',
'858,,,,858,858,858,858,858,858,858,858,858,858,858,,858,858,,858,858',
'858,,,,,858,,858,858,,858,858,,,858,858,858,858,858,858,858,87,,87,',
'87,87,,,,,,,,,,,,,,858,,,,,,,,,,,,,,,,,87,,,,,,,,,87,87,87,,87,,,,87',
'87,,,,87,,87,87,87,87,87,87,87,,,,,,87,87,87,87,87,87,87,,,,87,87,87',
'87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,87,,87,87,,87,87,,,87,87',
'87,87,87,87,87,447,,447,,447,447,,,,,,,,,,,,,,87,,,,,,,,,,,,,,,,,447',
',,,,,,,,447,447,447,,447,,,,447,447,,,,447,,447,447,447,447,447,447',
'447,,,,,,447,447,447,447,447,447,447,,,,447,447,447,447,447,447,447',
'447,447,447,447,,447,447,,447,447,447,,,,,447,,447,447,,447,447,,,447',
'447,447,447,447,447,447,432,,432,,432,432,,,,,,,,,,,,,,447,,,,,,,,,',
',,,,,,,432,,,,,,,,,432,432,432,,432,,,,432,432,,,,432,,432,432,432,432',
'432,432,432,,,,,,432,432,432,432,432,432,432,,,,432,432,432,432,432',
'432,432,432,432,432,432,,432,432,,432,432,432,,,,,432,,432,432,,432',
'432,,,432,432,432,432,432,432,432,426,,426,,426,426,,,,,,,,,,,,,,432',
',,,,,,,,,,,,,,,,426,,,,,,,,,426,426,426,,426,,,,426,426,,,,426,,426',
'426,426,426,426,426,426,,,,,,426,426,426,426,426,426,426,,,,426,426',
'426,426,426,426,426,426,426,426,426,,426,426,,426,426,426,,,,,426,,426',
'426,,426,426,,,426,426,426,426,426,426,426,421,,421,,421,421,,,,,,,',
',,,,,,426,,,,,,,,,,,,,,,,,421,,,,,,,,,421,421,421,,421,,,,421,421,,',
',421,,421,421,421,421,421,421,421,,,,,,421,421,421,421,421,421,421,',
',,421,421,421,421,421,421,421,421,421,421,421,,421,421,,421,421,421',
',,,,421,,421,421,,421,421,,,421,421,421,421,421,421,421,420,,420,,420',
'420,,,,,,,,,,,,,,421,,,,,,,,,,,,,,,,,420,,,,,,,,,420,420,420,,420,,',
',420,420,,,,420,,420,420,420,420,420,420,420,,,,,,420,420,420,420,420',
'420,420,,,,420,420,420,420,420,420,420,420,420,420,420,,420,420,,420',
'420,420,,,,,420,,420,420,,420,420,,,420,420,420,420,420,420,420,418',
',418,,418,418,,,,,,,,,,,,,,420,,,,,,,,,,,,,,,,,418,,,,,,,,,418,418,418',
',418,,,,418,418,,,,418,,418,418,418,418,418,418,418,,,,,,418,418,418',
'418,418,418,418,,,,418,418,418,418,418,418,418,418,418,418,418,418,418',
'418,,418,418,418,,,,,418,,418,418,,418,418,,418,418,418,418,418,418',
'418,418,303,,303,,303,303,,,,,,,,,,,,,,418,,,,,,,,,,,,,,,,,303,,,,,',
',,,303,303,303,,303,,,,303,303,,,,303,,303,303,303,303,303,303,303,',
',,,,303,303,303,303,303,303,303,,,,303,303,303,303,303,303,303,303,303',
'303,303,,303,303,,303,303,303,,,,,303,,303,303,,303,303,,,303,303,303',
'303,303,303,303,304,,304,,304,304,,,,,,,,,,,,,,303,,,,,,,,,,,,,,,,,304',
',,,,,,,,304,304,304,304,304,,,,304,304,,,,304,,304,304,304,304,304,304',
'304,,,,,,304,304,304,304,304,304,304,304,,304,304,304,304,304,304,304',
'304,304,304,304,304,,304,304,,304,304,304,,,,,304,,304,304,,304,304',
'304,,304,304,304,304,304,304,304,305,,305,,305,305,,,,,,,,,,,,,,304',
',,,,,,,,,,,,,,,,305,,,,,,,,,305,305,305,,305,,,,305,305,,,,305,,305',
'305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305,,,,305,305',
'305,305,305,305,305,305,305,305,305,,305,305,,305,305,305,,,,,305,,305',
'305,,305,305,,,305,305,305,305,305,305,305,306,,306,,306,306,,,,,,,',
',,,,,,305,,,,,,,,,,,,,,,,,306,,,,,,,,,306,306,306,,306,,,,306,306,,',
',306,,306,306,306,306,306,306,306,,,,,,306,306,306,306,306,306,306,',
',,306,306,306,306,306,306,306,306,306,306,306,,306,306,,306,306,306',
',,,,306,,306,306,,306,306,,,306,306,306,306,306,306,306,307,,307,,307',
'307,,,,,,,,,,,,,,306,,,,,,,,,,,,,,,,,307,,,,,,,,,307,307,307,,307,,',
',307,307,,,,307,,307,307,307,307,307,307,307,,,,,,307,307,307,307,307',
'307,307,,,,307,307,307,307,307,307,307,307,307,307,307,,307,307,,307',
'307,307,,,,,307,,307,307,,307,307,,,307,307,307,307,307,307,307,96,',
'96,,96,96,,,,,,,,,,,,,,307,,,,,,,,,,,,,,,,,96,,,,,,,,,96,96,96,,96,',
',,96,96,,,,96,,96,96,96,96,96,96,96,,,,,,96,96,96,96,96,96,96,,,,96',
'96,96,96,96,96,96,96,96,96,96,96,96,96,,96,96,96,,,,,96,,96,96,,96,96',
'96,,96,96,96,96,96,96,96,416,,416,,416,416,,,,,,,,,,,,,,96,,,,,,,,,',
',,,,,,,416,,,,,,,,,416,416,416,,416,,,,416,416,,,,416,,416,416,416,416',
'416,416,416,,,,,,416,416,416,416,416,416,416,,,,416,416,416,416,416',
'416,416,416,416,416,416,416,416,416,,416,416,416,,,,,416,,416,416,,416',
'416,416,416,416,416,416,416,416,416,416,311,,311,,311,311,,,,,,,,,,',
',,,416,,,,,,,,,,,,,,,,,311,,,,,,,,,311,311,311,,311,,,,311,311,,,,311',
',311,311,311,311,311,311,311,,,,,,311,311,311,311,311,311,311,,,,311',
'311,311,311,311,311,311,311,311,311,311,,311,311,,311,311,311,,,,,311',
',311,311,,311,311,,,311,311,311,311,311,311,311,312,,312,,312,312,,',
',,,,,,,,,,,311,,,,,,,,,,,,,,,,,312,,,,,,,,,312,312,312,,312,,,,312,312',
',,,312,,312,312,312,312,312,312,312,,,,,,312,312,312,312,312,312,312',
',,,312,312,312,312,312,312,312,312,312,312,312,,312,312,,312,312,312',
',,,,312,,312,312,,312,312,,,312,312,312,312,312,312,312,100,,100,,100',
'100,,,,,,,,,,,,,,312,,,,,,,,,,,,,,,,,100,,,,,,,,,100,100,100,,100,,',
',100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100,100,100,100,100',
'100,100,,,,100,100,100,100,100,100,100,100,100,100,100,100,100,100,',
'100,100,100,,,,,100,,100,100,,100,100,100,100,100,100,100,100,100,100',
'100,412,,412,,412,412,,,,,,,,,,,,,,100,,,,,,,,,,,,,,,,,412,,,,,,,,,412',
'412,412,,412,,,,412,412,,,,412,,412,412,412,412,412,412,412,,,,,,412',
'412,412,412,412,412,412,,,,412,412,412,412,412,412,412,412,412,412,412',
'412,412,412,,412,412,412,,,,,412,,412,412,,412,412,412,412,412,412,412',
'412,412,412,412,411,,411,,411,411,,,,,,,,,,,,,,412,,,,,,,,,,,,,,,,,411',
',,,,,,,,411,411,411,,411,,,,411,411,,,,411,,411,411,411,411,411,411',
'411,,,,,,411,411,411,411,411,411,411,,,,411,411,411,411,411,411,411',
'411,411,411,411,,411,411,,411,411,411,,,,,411,,411,411,,411,411,,,411',
'411,411,411,411,411,411,401,,401,,401,401,,,,,,,,,,,,,,411,,,,,,,,,',
',,,,,,,401,,,,,,,,,401,401,401,,401,,,,401,401,,,,401,,401,401,401,401',
'401,401,401,,,,,,401,401,401,401,401,401,401,,,,401,401,401,401,401',
'401,401,401,401,401,401,,401,401,,401,401,401,,,,,401,,401,401,,401',
'401,,,401,401,401,401,401,401,401,818,,818,,818,818,,,,,,,,,,,,,,401',
',,,,,,,,,,,,,,,,818,,,,,,,,,818,818,818,,818,,,,818,818,,,,818,,818',
'818,818,818,818,818,818,,,,,,818,818,818,818,818,818,818,,,,818,818',
'818,818,818,818,818,818,818,818,818,,818,818,,818,818,818,,,,,818,,818',
'818,,818,818,,,818,818,818,818,818,818,818,103,,103,,103,103,,,,,,,',
',,,,,,818,,,,,,,,,,,,,,,,,103,,,,,,,,,103,103,103,,103,,,,103,103,,',
',103,,103,103,103,103,103,103,103,,,,,,103,103,103,103,103,103,103,',
',,103,103,103,103,103,103,103,103,103,103,103,103,103,103,,103,103,103',
',,,,103,,103,103,,103,103,,,103,103,103,103,103,103,103,320,,320,,320',
'320,,,,,,,,,,,,,,103,,,,,,,,,,,,,,,,,320,,,,,,,,,320,320,320,,320,,',
',320,320,,,,320,,320,320,320,320,320,320,320,,,,,,320,320,320,320,320',
'320,320,,,,320,320,320,320,320,320,320,320,320,320,320,,320,320,,320',
'320,320,,,,,320,,320,320,,320,320,,,320,320,320,320,320,320,320,321',
',321,,321,321,,,,,,,,,,,,,,320,,,,,,,,,,,,,,,,,321,,,,,,,,,321,321,321',
',321,,,,321,321,,,,321,,321,321,321,321,321,321,321,,,,,,321,321,321',
'321,321,321,321,,,,321,321,321,321,321,321,321,321,321,321,321,,321',
'321,,321,321,321,,,,,321,,321,321,,321,321,,,321,321,321,321,321,321',
'321,322,,322,,322,322,,,,,,,,,,,,,,321,,,,,,,,,,,,,,,,,322,,,,,,,,,322',
'322,322,,322,,,,322,322,,,,322,,322,322,322,322,322,322,322,,,,,,322',
'322,322,322,322,322,322,,,,322,322,322,322,322,322,322,322,322,322,322',
',322,322,,322,322,322,,,,,322,,322,322,,322,322,,,322,322,322,322,322',
'322,322,323,,323,,323,323,,,,,,,,,,,,,,322,,,,,,,,,,,,,,,,,323,,,,,',
',,,323,323,323,,323,,,,323,323,,,,323,,323,323,323,323,323,323,323,',
',,,,323,323,323,323,323,323,323,,,,323,323,323,323,323,323,323,323,323',
'323,323,,323,323,,323,323,323,,,,,323,,323,323,,323,323,,,323,323,323',
'323,323,323,323,324,,324,,324,324,,,,,,,,,,,,,,323,,,,,,,,,,,,,,,,,324',
',,,,,,,,324,324,324,,324,,,,324,324,,,,324,,324,324,324,324,324,324',
'324,,,,,,324,324,324,324,324,324,324,,,,324,324,324,324,324,324,324',
'324,324,324,324,,324,324,,324,324,324,,,,,324,,324,324,,324,324,,,324',
'324,324,324,324,324,324,325,,325,,325,325,,,,,,,,,,,,,,324,,,,,,,,,',
',,,,,,,325,,,,,,,,,325,325,325,,325,,,,325,325,,,,325,,325,325,325,325',
'325,325,325,,,,,,325,325,325,325,325,325,325,,,,325,325,325,325,325',
'325,325,325,325,325,325,,325,325,,325,325,325,,,,,325,,325,325,,325',
'325,,,325,325,325,325,325,325,325,326,,326,,326,326,,,,,,,,,,,,,,325',
',,,,,,,,,,,,,,,,326,,,,,,,,,326,326,326,,326,,,,326,326,,,,326,,326',
'326,326,326,326,326,326,,,,,,326,326,326,326,326,326,326,,,,326,326',
'326,326,326,326,326,326,326,326,326,,326,326,,326,326,326,,,,,326,,326',
'326,,326,326,,,326,326,326,326,326,326,326,327,,327,,327,327,,,,,,,',
',,,,,,326,,,,,,,,,,,,,,,,,327,,,,,,,,,327,327,327,,327,,,,327,327,,',
',327,,327,327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327,',
',,327,327,327,327,327,327,327,327,327,327,327,,327,327,,327,327,327',
',,,,327,,327,327,,327,327,,,327,327,327,327,327,327,327,328,,328,,328',
'328,,,,,,,,,,,,,,327,,,,,,,,,,,,,,,,,328,,,,,,,,,328,328,328,,328,,',
',328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328,328',
'328,328,,,,328,328,328,328,328,328,328,328,328,328,328,,328,328,,328',
'328,328,,,,,328,,328,328,,328,328,,,328,328,328,328,328,328,328,329',
',329,,329,329,,,,,,,,,,,,,,328,,,,,,,,,,,,,,,,,329,,,,,,,,,329,329,329',
',329,,,,329,329,,,,329,,329,329,329,329,329,329,329,,,,,,329,329,329',
'329,329,329,329,,,,329,329,329,329,329,329,329,329,329,329,329,,329',
'329,,329,329,329,,,,,329,,329,329,,329,329,,,329,329,329,329,329,329',
'329,330,,330,,330,330,,,,,,,,,,,,,,329,,,,,,,,,,,,,,,,,330,,,,,,,,,330',
'330,330,,330,,,,330,330,,,,330,,330,330,330,330,330,330,330,,,,,,330',
'330,330,330,330,330,330,,,,330,330,330,330,330,330,330,330,330,330,330',
',330,330,,330,330,330,,,,,330,,330,330,,330,330,,,330,330,330,330,330',
'330,330,331,,331,,331,331,,,,,,,,,,,,,,330,,,,,,,,,,,,,,,,,331,,,,,',
',,,331,331,331,,331,,,,331,331,,,,331,,331,331,331,331,331,331,331,',
',,,,331,331,331,331,331,331,331,,,,331,331,331,331,331,331,331,331,331',
'331,331,,331,331,,331,331,331,,,,,331,,331,331,,331,331,,,331,331,331',
'331,331,331,331,332,,332,,332,332,,,,,,,,,,,,,,331,,,,,,,,,,,,,,,,,332',
',,,,,,,,332,332,332,,332,,,,332,332,,,,332,,332,332,332,332,332,332',
'332,,,,,,332,332,332,332,332,332,332,,,,332,332,332,332,332,332,332',
'332,332,332,332,,332,332,,332,332,332,,,,,332,,332,332,,332,332,,,332',
'332,332,332,332,332,332,333,,333,,333,333,,,,,,,,,,,,,,332,,,,,,,,,',
',,,,,,,333,,,,,,,,,333,333,333,,333,,,,333,333,,,,333,,333,333,333,333',
'333,333,333,,,,,,333,333,333,333,333,333,333,,,,333,333,333,333,333',
'333,333,333,333,333,333,,333,333,,333,333,333,,,,,333,,333,333,,333',
'333,,,333,333,333,333,333,333,333,334,,334,,334,334,,,,,,,,,,,,,,333',
',,,,,,,,,,,,,,,,334,,,,,,,,,334,334,334,,334,,,,334,334,,,,334,,334',
'334,334,334,334,334,334,,,,,,334,334,334,334,334,334,334,,,,334,334',
'334,334,334,334,334,334,334,334,334,,334,334,,334,334,334,,,,,334,,334',
'334,,334,334,,,334,334,334,334,334,334,334,335,,335,,335,335,,,,,,,',
',,,,,,334,,,,,,,,,,,,,,,,,335,,,,,,,,,335,335,335,,335,,,,335,335,,',
',335,,335,335,335,335,335,335,335,,,,,,335,335,335,335,335,335,335,',
',,335,335,335,335,335,335,335,335,335,335,335,,335,335,,335,335,335',
',,,,335,,335,335,,335,335,,,335,335,335,335,335,335,335,336,,336,,336',
'336,,,,,,,,,,,,,,335,,,,,,,,,,,,,,,,,336,,,,,,,,,336,336,336,,336,,',
',336,336,,,,336,,336,336,336,336,336,336,336,,,,,,336,336,336,336,336',
'336,336,,,,336,336,336,336,336,336,336,336,336,336,336,,336,336,,336',
'336,336,,,,,336,,336,336,,336,336,,,336,336,336,336,336,336,336,337',
',337,,337,337,,,,,,,,,,,,,,336,,,,,,,,,,,,,,,,,337,,,,,,,,,337,337,337',
',337,,,,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337,337,337',
'337,337,337,337,,,,337,337,337,337,337,337,337,337,337,337,337,,337',
'337,,337,337,337,,,,,337,,337,337,,337,337,,,337,337,337,337,337,337',
'337,338,,338,,338,338,,,,,,,,,,,,,,337,,,,,,,,,,,,,,,,,338,,,,,,,,,338',
'338,338,,338,,,,338,338,,,,338,,338,338,338,338,338,338,338,,,,,,338',
'338,338,338,338,338,338,,,,338,338,338,338,338,338,338,338,338,338,338',
',338,338,,338,338,338,,,,,338,,338,338,,338,338,,,338,338,338,338,338',
'338,338,339,,339,,339,339,,,,,,,,,,,,,,338,,,,,,,,,,,,,,,,,339,,,,,',
',,,339,339,339,,339,,,,339,339,,,,339,,339,339,339,339,339,339,339,',
',,,,339,339,339,339,339,339,339,,,,339,339,339,339,339,339,339,339,339',
'339,339,,339,339,,339,339,339,,,,,339,,339,339,,339,339,,,339,339,339',
'339,339,339,339,340,,340,,340,340,,,,,,,,,,,,,,339,,,,,,,,,,,,,,,,,340',
',,,,,,,,340,340,340,,340,,,,340,340,,,,340,,340,340,340,340,340,340',
'340,,,,,,340,340,340,340,340,340,340,,,,340,340,340,340,340,340,340',
'340,340,340,340,,340,340,,340,340,340,,,,,340,,340,340,,340,340,,,340',
'340,340,340,340,340,340,341,,341,,341,341,,,,,,,,,,,,,,340,,,,,,,,,',
',,,,,,,341,,,,,,,,,341,341,341,,341,,,,341,341,,,,341,,341,341,341,341',
'341,341,341,,,,,,341,341,341,341,341,341,341,,,,341,341,341,341,341',
'341,341,341,341,341,341,,341,341,,341,341,341,,,,,341,,341,341,,341',
'341,,,341,341,341,341,341,341,341,342,,342,,342,342,,,,,,,,,,,,,,341',
',,,,,,,,,,,,,,,,342,,,,,,,,,342,342,342,,342,,,,342,342,,,,342,,342',
'342,342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,,,342,342',
'342,342,342,342,342,342,342,342,342,,342,342,,342,342,342,,,,,342,,342',
'342,,342,342,,,342,342,342,342,342,342,342,343,,343,,343,343,,,,,,,',
',,,,,,342,,,,,,,,,,,,,,,,,343,,,,,,,,,343,343,343,,343,,,,343,343,,',
',343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343,',
',,343,343,343,343,343,343,343,343,343,343,343,,343,343,,343,343,343',
',,,,343,,343,343,,343,343,,,343,343,343,343,343,343,343,344,,344,,344',
'344,,,,,,,,,,,,,,343,,,,,,,,,,,,,,,,,344,,,,,,,,,344,344,344,,344,,',
',344,344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344,344',
'344,344,,,,344,344,344,344,344,344,344,344,344,344,344,,344,344,,344',
'344,344,,,,,344,,344,344,,344,344,,,344,344,344,344,344,344,344,345',
',345,,345,345,,,,,,,,,,,,,,344,,,,,,,,,,,,,,,,,345,,,,,,,,,345,345,345',
',345,,,,345,345,,,,345,,345,345,345,345,345,345,345,,,,,,345,345,345',
'345,345,345,345,,,,345,345,345,345,345,345,345,345,345,345,345,,345',
'345,,345,345,345,,,,,345,,345,345,,345,345,,,345,345,345,345,345,345',
'345,386,,386,,386,386,,,,,,,,,,,,,,345,,,,,,,,,,,,,,,,,386,,,,,,,,,386',
'386,386,,386,,,,386,386,,,,386,,386,386,386,386,386,386,386,,,,,,386',
'386,386,386,386,386,386,,,,386,386,386,386,386,386,386,386,386,386,386',
',386,386,,386,386,386,,,,,386,,386,386,,386,386,386,,386,386,386,386',
'386,386,386,139,,139,,139,139,,,,,,,,,,,,,,386,,,,,,,,,,,,,,,,,139,',
',,,,,,,139,139,139,,139,,,,139,139,,,,139,,139,139,139,139,139,139,139',
',,,,,139,139,139,139,139,139,139,,,,139,139,139,139,139,139,139,139',
'139,139,139,,139,139,,139,139,139,,,,,139,,139,139,,139,139,139,,139',
'139,139,139,139,139,139,374,,374,,374,374,,,,,,,,,,,,,,139,,,,,,,,,',
',,,,,,,374,,,,,,,,,374,374,374,,374,,,,374,374,,,,374,,374,374,374,374',
'374,374,374,,,,,,374,374,374,374,374,374,374,,,,374,374,374,374,374',
'374,374,374,374,374,374,,374,374,,374,374,374,,,,,374,,374,374,,374',
'374,,,374,374,374,374,374,374,374,112,,112,,112,112,,,,,,,,,,,,,,374',
',,,,,,,,,,,,,,,,112,,,,,,,,,112,112,112,,112,,,,112,112,,,,112,,112',
'112,112,112,112,112,112,,,,,,112,112,112,112,112,112,112,,,,112,112',
'112,112,112,112,112,112,112,112,112,,112,112,,112,112,112,,,,,112,,112',
'112,,112,112,,,112,112,112,112,112,112,112,114,,114,,114,114,,,,,,,',
',,,,,,112,,,,,,,,,,,,,,,,,114,,,,,,,,,114,114,114,,114,,,,114,114,,',
',114,,114,114,114,114,114,114,114,,,,,,114,114,114,114,114,114,114,',
',,114,114,114,114,114,114,114,114,114,114,114,,114,114,,114,114,114',
',,,,114,,114,114,,114,114,,,114,114,114,114,114,114,114,832,,832,,832',
'832,,,,,,,,,,,,,,114,,,,,,,,,,,,,,,,,832,,,,,,,,,832,832,832,,832,,',
',832,832,,,,832,,832,832,832,832,832,832,832,,,,,,832,832,832,832,832',
'832,832,,,,832,832,832,832,832,832,832,832,832,832,832,,832,832,,832',
'832,832,,,,,832,,832,832,,832,832,832,,832,832,832,832,832,832,832,358',
',358,,358,358,,,,,,,,,,,,,,832,,,,,,,,,,,,,,,,,358,,,,,,,,,358,358,358',
'358,358,,,,358,358,,,,358,,358,358,358,358,358,358,358,,,,,,358,358',
'358,358,358,358,358,358,,358,358,358,358,358,358,358,358,358,358,358',
'358,,358,358,,358,358,358,,,,,358,,358,358,,358,358,358,,358,358,358',
'358,358,358,358,691,,691,,691,691,,,,,,,,,,,,,,358,,,,,,,,,,,,,,,,,691',
',,,,,,,,691,691,691,,691,,,,691,691,,,,691,,691,691,691,691,691,691',
'691,,,,,,691,691,691,691,691,691,691,,,,691,691,691,691,691,691,691',
'691,691,691,691,,691,691,,691,691,691,,,,,691,,691,691,,691,691,,,691',
'691,691,691,691,691,691,,,,,,,,545,,,,,,,,545,545,,,691,545,545,545',
'545,545,545,545,545,545,545,545,545,545,545,545,727,,,,,,,,727,727,',
',,727,727,727,727,727,727,727,727,727,727,727,727,727,727,727,645,,',
',,,,,645,645,,,,645,645,645,645,645,645,645,645,645,645,645,645,645',
'645,645,310,645,,,,,,,310,310,,,,310,310,310,310,310,310,310,310,310',
'310,310,310,310,310,310,,,,,,,,,,,,,,,,,545,545,545,545,545,545,545',
'545,,,,,,,,,,,,,,,,,,,,,727,727,727,727,727,727,727,727,,,,,,,,,,,,',
',,,,,,,,645,645,645,645,645,645,645,645,,,,,,,,,,,,,,,,,,,,,310,310',
'310,310,310,310,310,310,616,,,,,,,,616,616,,,,616,616,616,616,616,616',
'616,616,616,616,616,616,616,616,616,822,616,,,,,,,822,822,,,,822,822',
'822,822,822,822,822,822,822,822,822,822,822,822,822,820,,,,,,,,820,820',
',,,820,820,820,820,820,820,820,820,820,820,820,820,820,820,820,886,',
',,,,,,886,886,,,,886,886,886,886,886,886,886,886,886,886,886,886,886',
'886,886,,,,,,,,,,,,,,,,616,616,616,616,616,616,616,616,616,,,,,,,,,',
',,,,,,,,,,,822,822,822,822,822,822,822,822,,,,,,,,,,,,,,,,,,,,,820,820',
'820,820,820,820,820,820,,,,,,,,,,,,,,,,,,,,,886,886,886,886,886,886',
'886,886,130,,,,,,,,130,130,,,,130,130,130,130,130,130,130,130,130,130',
'130,130,130,130,130,552,,,,,,,,552,552,,,,552,552,552,552,552,552,552',
'552,552,552,552,552,552,552,552,570,,,,,,,,570,570,,,,570,570,570,570',
'570,570,570,570,570,570,570,570,570,570,816,,,,,,,,816,816,,,,816,816',
'816,816,816,816,816,816,816,816,816,816,816,816,816,,,,,,,,,,,,,,,,',
',130,130,130,130,130,130,130,130,,,,,,,,,,,,,,,,,,,,,552,552,552,552',
'552,552,552,552,,,,,,,,,,,,,,,,,,,,,570,570,570,570,570,570,570,570',
',,,,,,,,,,,,,,,,,,,816,816,816,816,816,816,816,816,568,,,,,,,,568,568',
',,,568,568,568,568,568,568,568,568,568,568,568,568,568,568,567,,,,,',
',,567,567,,,,567,567,567,567,567,567,567,567,567,567,567,567,567,567',
'567,562,,,,,,,,562,562,,,,562,562,562,562,562,562,562,562,562,562,562',
'562,562,562,562,560,,,,,,,,560,560,,,,560,560,560,560,560,560,560,560',
'560,560,560,560,560,560,560,,,,,,,,,,,,,,,,,,568,568,568,568,568,568',
'568,568,,,,,,,,,,,,,,,,,,,,567,567,567,567,567,567,567,567,,,,,,,,,',
',,,,,,,,,,,562,562,562,562,562,562,562,562,,,,,,,,,,,,,,,,,,,,,560,560',
'560,560,560,560,560,560,557,,,,,,,,557,557,,,,557,557,557,557,557,557',
'557,557,557,557,557,557,557,557,557,814,,,,,,,,814,814,,,,814,814,814',
'814,814,814,814,814,814,814,814,814,814,814,814,555,,,,,,,,555,555,',
',,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,549,,',
',,,,,549,549,,,,549,549,549,549,549,549,549,549,549,549,549,549,549',
'549,549,,,,,,,,,,,,,,,,,557,557,557,557,557,557,557,557,,,,,,,,,,,,',
',,,,,,,,814,814,814,814,814,814,814,814,,,,,,,,,,,,,,,,110,,,,,555,555',
'555,555,555,555,555,555,,,,,,,,,,,,,,,,,,,,110,549,549,549,549,549,549',
'549,549,110,110,110,,110,,,,110,110,,,,110,,110,110,110,110,110,110',
'110,,,,,,110,110,110,110,110,110,110,284,,,110,110,110,110,110,110,110',
'110,110,110,110,,110,110,,110,110,110,,,,,110,,110,110,,110,110,284',
',110,110,110,110,110,110,110,284,284,284,,284,,,,284,284,110,,,284,',
'284,284,284,284,284,284,284,,,,,,284,284,284,284,284,284,284,847,,,284',
'284,284,284,284,284,284,284,284,284,284,,284,284,,284,284,284,,,,,284',
',284,284,,284,284,847,,284,284,284,284,284,284,284,847,847,847,,847',
',,,847,847,284,,,847,,847,847,847,847,847,847,847,,,,,,847,847,847,847',
'847,847,847,35,,,847,847,847,847,847,847,847,847,847,847,847,,847,847',
',847,847,847,,,,,847,,847,847,,847,847,35,,847,847,847,847,847,847,847',
'35,35,35,,35,,,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35',
'35,35,,78,,35,35,35,35,35,35,35,35,35,35,35,,35,35,,35,35,35,,,,,35',
',35,35,,35,35,35,78,35,35,35,35,35,35,35,,78,78,78,,78,,,,78,78,,,,78',
',78,78,78,78,78,78,78,,,,,,78,78,78,78,78,78,78,,408,,78,78,78,78,78',
'78,78,78,78,78,78,,78,78,,78,78,78,,,,,78,,78,78,,78,78,78,408,78,78',
'78,78,78,78,78,,408,408,408,,408,,,,408,408,,,,408,,408,408,408,408',
'408,408,408,,,,,,408,408,408,408,408,408,408,102,,,408,408,408,408,408',
'408,408,408,408,408,408,,408,408,,408,408,408,,,,,408,,408,408,,408',
'408,102,,408,408,408,408,408,408,408,102,102,102,,102,,,,102,102,,,',
'102,,102,102,102,102,102,102,102,,,,,,102,102,102,102,102,102,102,778',
',,102,102,102,102,102,102,102,102,102,102,102,,102,102,,102,102,102',
',,,,102,,102,102,,102,102,778,,102,102,102,102,102,102,102,778,778,778',
',778,,,,778,778,,,,778,,778,778,778,778,778,778,778,,,,,,778,778,778',
'778,778,778,778,630,,,778,778,778,778,778,778,778,778,778,778,778,,778',
'778,,778,778,778,,,,,778,,778,778,,778,778,630,,778,778,778,778,778',
'778,778,630,630,630,,630,,,,630,630,,,,630,,630,630,630,630,630,630',
'630,,,,,,630,630,630,630,630,630,630,512,,,630,630,630,630,630,630,630',
'630,630,630,630,,630,630,,630,630,630,,,,,630,,630,630,,630,630,512',
',630,630,630,630,630,630,630,512,512,512,,512,,,,512,512,,,,512,,512',
'512,512,512,512,512,512,,,,,,512,512,512,512,512,512,512,,,,512,512',
'512,512,512,512,512,512,512,512,512,90,512,512,,512,512,512,90,,,,512',
',512,512,,512,512,,,512,512,512,512,512,512,512,,,,,,90,,,,,,,,,90,90',
'90,,90,,,,90,90,,,,90,,90,90,90,90,90,90,90,,,,,,90,90,90,90,90,90,90',
'769,,,90,90,90,90,90,90,90,90,90,90,90,,90,90,,90,90,90,,,,,90,,90,90',
',90,90,769,,90,90,90,90,90,90,90,769,769,769,,769,,,,769,769,,,,769',
',769,769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,711,,',
'769,769,769,769,769,769,769,769,769,769,769,,769,769,,769,769,769,,',
',,769,,769,769,,769,769,711,,769,769,769,769,769,769,769,711,711,711',
',711,,,,711,711,,,,711,,711,711,711,711,711,711,711,,,,,,711,711,711',
'711,711,711,711,,,,711,711,711,711,711,711,711,711,711,711,711,,711',
'711,,711,711,711,,,,,711,,711,711,,711,711,,,711,711,711,711,711,711',
'711' ]
        racc_action_check = arr = Array.new(23016, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    33,   nil,  8558,  1448,  3831,   nil,  1412,    52,   nil,
   nil,   221,  1410,  1802,  2632, 10478,   nil,   nil,  7256,  1129,
   nil, 10718,   629,   nil,   nil,   nil, 10838,   nil,   nil,   nil,
 11198,   nil,   nil,   nil,   nil, 22203,  5964,   nil,   212,   nil,
  1295,   nil,   nil,  1294,   742, 11558,  1270,  1299,   nil,   nil,
 12278,  1262,   975, 12998,   nil,   nil, 13118, 13238,   nil,   675,
   nil,   nil,   nil, 13478,   137, 13718,   nil,   nil,   nil,   nil,
  1104,   nil,   nil,  1236,  1280,   566,   nil,   nil, 22279,   626,
  4296,   nil,  3199,  4522,   nil,     1,   nil, 14198,   563,   476,
 22744,   nil,   776,   nil,   nil,  5356, 15638,  2393,   nil,   nil,
 16118,  1337, 22430, 16718,   nil,   nil,  1026,  1723,   nil,  1615,
 21978,   nil, 20318,  1220, 20438,  1326,  1228,   562,  9038,  1220,
   nil,   nil,    21,   nil,  1242,   nil,   780,   nil, 11078,  1254,
 21362,   nil,  8316,   nil,   nil,   nil,  1296,   nil,  8798, 20078,
   864,   nil,  8918,    68,   -12,   nil,  9278,   nil,  1865,  1233,
   -24,   169,  1217,  1165,   nil,   nil,   nil,   nil,   nil,   nil,
  1163,   nil,   nil,   nil,   nil,   295,  1162,   nil,  1651,   nil,
   nil,   nil,   nil,   nil,  1248,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   996,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  3957, 10958,  3565,  1333,   nil,
   nil,   nil,   nil,  1224,   nil,   823,   823,   337,   455,  1142,
   139,  1102,  1598,  1138,  1155,   730,  1045,   577,  1136,   495,
  1081,  1121,  7724,   nil, 22053,   nil,   nil,   nil,   431,   nil,
   nil, 13838,   943,  1082,   nil,  1197,  1194,   278,  1063,   835,
   nil,   547,  7361, 15038, 15158, 15278, 15398, 15518,   279,   nil,
 21006, 15878, 15998,   312,   nil,  1125,  1039,   420,  2273,   257,
 16838, 16958, 17078, 17198, 17318, 17438, 17558, 17678, 17798, 17918,
 18038, 18158, 18278, 18398, 18518, 18638, 18758, 18878, 18998, 19118,
 19238, 19358, 19478, 19598, 19718, 19838,   nil,   895,   276,   250,
  1081,  1104,   nil,   nil,   -27,    69,   nil,  1033, 20678,  1128,
  1014,   nil,  1222,  1003,  6890,   660,   -33,   nil,   923,   nil,
   nil,   nil,   -81,    45, 20198,  1139,   899,  6543,  4191,  1091,
  1081,   977,   424,   345,   nil,   nil, 19958,  6069,   471,   nil,
  1014,   988,   984,   nil,   468,   185,   471,   770,   831,    23,
   309, 16478,   330,  2118,   382,   nil,   564,   982, 22355,   nil,
   nil, 16358, 16238,   nil,   nil,  1473, 15758,  2524, 14918,   nil,
 14798, 14678,   943,   nil,   nil,   456, 14558,   nil,   954,   nil,
   950,   nil, 14438,   nil,   -30,   913,   nil,  1412,   nil,  5235,
   nil,   nil,  5114,  2103,   nil,   910,   nil, 14318,   966,   nil,
  4872,  4751,   nil,  2894,   nil,   nil,  3675,   nil,   nil,   956,
  2463,   nil,   911,   931,   785,   935,   nil,  1460,   nil,   873,
    20,   nil,  6190,   617,   nil,   nil,   nil,  4065,    50,   334,
   nil,   nil,   618,     0,   872,  3319,   248,   nil,   nil,   nil,
   106,   nil,   nil,   nil,   nil,  4401,   nil,   953,   nil,  3091,
  3036,   nil,  2933, 12878,  2878,   nil,   nil,   nil,   865,   872,
   859,   869, 22655,  4646,   nil,   nil,   nil,  1510,   nil,   428,
   nil,   nil,   nil, 12518, 12398,  4993,   nil,   nil,   842,   839,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  5477,   nil,   nil,
  5598, 12158,   913,   905, 11918, 20922, 11798,  1577,  2268, 21884,
   405,  2628, 21390,   719,  5244, 21856,  5002, 21800,  4751,   689,
 21664,  4401, 21636,  3195,  1241,   282,  1102, 21608, 21581,  1001,
 21418,   138,   859,  2165, 11438,  2062,   134, 11318,  5719,  5840,
  6314,  1285,   803,   nil,   775,   nil,  1344,   nil,  2007, 10598,
  1849,   nil,   nil,   906,   564,  7845,   nil, 10358,   -24,  2752,
   nil,   nil,  3439,   nil,   nil,   nil, 10238,   859,   nil, 10118,
   nil,   nil,  9998,   nil,   nil,   nil, 21142,   nil,   849,   nil,
   nil,   nil,   739,   nil,  7969,   nil,    27,  2828,   265,  8074,
 22580,   nil,   754,   737,   nil,   660,  9878,   760,   192,   611,
   629,   847,   nil,   nil,   nil, 20978,  9758,   588,   nil,   nil,
   nil,    12,   551,   nil,   546,  1390,   502,   485,   nil,   422,
   403,   299,  9638,   233,   nil,   nil,   222,   292,   166,   nil,
   153,   nil,    98,   nil,    76,    67,   nil,  1790,  1419,    -5,
   -41,   nil,  8195,   -84,   nil,   nil,   nil,   nil,   nil,   nil,
  1309, 20798,  9158,   -35,   253,   nil,   nil,   nil,   126,  9398,
  9518,   597,   nil,   100,   136,   706,   779,   185,   -32,   -31,
   nil, 22894,   258,   nil,   nil,   nil,   121,   263,   425,   nil,
   nil,   434,   482,   379,   nil,   520,    56, 20950,   635,   -18,
   343,   559,    -9,   138,    28,   766,   786,   nil,    13,   727,
  1018,   nil,   523,   766,   nil,   862,   661,  6648,   nil,   nil,
   nil,   nil,   818,   nil,   nil,   802,   nil,  6419,   884,   422,
 12038,   nil,   nil,  1960,   nil,   826,   nil,   924,   855, 22819,
   nil,   nil, 12638,   815, 12758, 13358,   881, 13598, 22505,   890,
  2470,   nil,   nil,   nil,   902,   nil,  2835,   nil,  3358,   nil,
   nil,   nil,   nil,   424,   nil,   nil,   nil,  3515,   nil,  3052,
   nil,  3255,   nil,   nil,  2688,   nil,  1264,   nil,   957,  1674,
   nil,   980,   nil,   nil, 21828,   nil, 21445,   nil, 16598,   nil,
 21198,   nil, 21170,   nil,  1090,  8678,   nil,   499,  1022,  1104,
   nil,   nil, 20558,  7011,   nil,   nil, 11678,   108,  7132,   nil,
   nil,   nil,   nil,   nil,  1123,   nil,   285, 22128,   nil,   nil,
  7482,   nil,   nil,   708,  7603,   nil,   nil,   nil, 14078,  1076,
   982,  1124,   nil,  1086,  1095,  1275,   nil,  1111,  1115,  1116,
  1117,  1119,  1126,  1129,  1035,  1144,  1855,  1151,   nil,  3661,
   nil,   nil,   195,   nil,   nil,   373, 21226,  1242,   nil,  8437,
   611,   -43,   224,  1241,   nil,   nil,  1284,  3620,   nil,  2989,
   nil,  2496,   nil,   nil,   nil,  2329,   nil,   nil,   nil,   nil,
  3522,   nil,   nil,  1229,  1294,  6769,   nil,   nil,   nil,   nil,
  1319,  1904, 13958,  3723,   614,   nil,  1254,  1255,  1269,  1271,
  1273,  1281,  1282,  1283,   465,   nil,   172,   667,  1291,    93,
   366,   nil,  3714,   nil,   nil,   nil,   nil,   nil,   223,  1317,
   nil ]

racc_action_default = [
    -2,  -538,    -1,  -537,  -538,  -382,    -3,  -538,  -526,  -445,
  -435,  -284,  -538,  -475,  -538,  -538,  -444,  -436,  -420,  -538,
   -65,  -538,  -524,  -446,  -418,  -309,  -538,  -447,  -420,  -402,
  -538,    -5,  -454,  -420,  -307,   -69,  -538,    -6,  -267,  -455,
  -410,  -398,  -308,  -538,  -538,  -538,  -416,  -401,  -310,   -79,
  -538,  -538,    -9,  -538,  -449,  -403,  -299,  -538,  -259,   -40,
  -448,  -311,  -260,  -538,  -452,  -300,  -450,  -312,  -301,  -261,
  -524,  -313,  -302,  -526,  -538,   -46,  -262,  -451,  -538,   -48,
  -538,  -263,  -439,  -537,   -49,  -304,  -264,  -538,  -266,  -514,
  -538,  -441,   -53,  -440,  -399,  -537,  -537,  -442,  -400,  -305,
  -276,  -538,  -538,  -537,  -443,  -306,  -231,  -279,   -41,  -538,
   -77,   951,  -538,  -538,  -538,  -538,  -537,  -538,  -538,  -537,
  -508,  -381,  -267,  -246,  -252,  -299,  -452,  -300,  -537,  -538,
  -232,  -242,  -537,  -304,  -247,  -276,  -538,   -63,  -538,  -538,
  -526,  -527,  -538,  -537,  -537,  -285,  -538,  -480,  -475,  -497,
  -481,  -538,  -538,  -537,  -498,  -495,  -478,  -367,  -499,  -477,
  -537,  -476,  -494,  -479,  -474,  -538,  -537,  -486,  -538,  -484,
  -492,  -286,  -283,  -375,   -57,    -8,  -177,  -126,  -170,  -178,
  -117,  -127,  -171,  -161,  -118,  -176,  -128,  -152,  -160,  -119,
  -139,  -169,  -155,  -132,  -179,  -120,  -181,  -133,  -141,  -164,
  -121,  -185,  -134,  -138,  -151,  -122,  -186,  -136,  -129,  -165,
  -137,  -142,  -123,  -154,  -140,  -146,  -124,  -143,  -145,  -147,
  -144,  -156,  -168,  -538,  -148,  -167,  -172,  -158,  -157,  -174,
  -430,  -180,  -166,  -149,  -109,  -159,  -130,  -106,  -173,  -110,
  -131,  -108,  -432,  -163,  -431,  -429,  -150,  -183,  -175,  -107,
  -433,  -184,  -182,  -125,  -135,  -538,  -537,  -538,  -223,   -45,
    -4,  -535,  -533,  -525,  -534,  -538,   -47,  -538,  -538,  -382,
  -538,  -538,  -208,  -279,  -538,  -538,   -92,  -538,   -70,   -85,
  -526,  -538,  -537,  -303,   -73,  -111,   -17,  -113,  -538,  -112,
  -114,  -538,  -538,  -538,   -81,  -437,  -438,  -538,  -538,  -538,
  -404,  -209,  -537,  -538,  -538,  -538,  -538,  -538,  -538,   -51,
  -224,  -538,  -538,  -538,   -52,  -538,  -525,  -524,  -538,  -273,
  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,
  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,
  -538,  -538,  -538,  -538,  -538,  -538,  -325,  -538,  -267,  -452,
  -538,  -538,  -324,  -372,  -537,  -537,  -115,   -22,  -538,   -67,
  -526,   -13,   -14,  -538,  -537,  -524,  -526,  -265,  -538,  -267,
  -452,  -104,  -538,  -538,  -538,  -101,  -102,  -538,  -538,  -538,
  -537,  -538,  -530,  -530,  -233,   -50,  -538,  -537,  -530,  -506,
  -538,  -538,  -526,   -64,  -538,  -176,  -169,  -179,  -164,  -146,
  -147,  -538,  -148,  -475,  -106,  -504,  -107,   -75,  -538,  -511,
  -248,  -538,  -250,  -251,  -243,  -538,  -537,  -538,  -250,  -244,
  -538,  -538,  -526,  -240,  -241,  -273,  -538,  -253,  -538,   -39,
   -38,   -30,  -538,  -282,  -526,  -538,   -44,  -537,  -354,  -537,
  -357,  -355,  -537,  -189,   -31,  -537,  -496,  -538,  -538,  -365,
  -537,  -537,  -500,  -538,  -503,  -467,  -538,  -472,  -483,  -538,
  -538,  -470,  -330,  -481,  -337,  -538,  -328,  -538,  -326,  -526,
  -537,   -58,  -537,  -538,  -434,  -421,  -422,  -538,  -515,  -517,
  -380,  -378,  -518,  -516,  -526,  -537,  -515,  -517,  -379,  -518,
  -516,    -7,  -536,  -405,  -419,  -537,  -316,  -315,  -406,  -538,
  -538,  -407,  -538,  -537,  -538,  -437,  -438,   -82,  -538,   -91,
  -526,   -71,  -538,  -538,   -21,   -20,   -19,  -197,   -36,  -538,
  -409,  -412,  -408,  -538,  -538,  -537,  -414,  -415,  -538,  -538,
   -26,   -27,   -23,   -24,   -25,  -318,  -319,  -537,   -43,   -42,
  -537,  -538,  -538,  -538,  -538,  -229,  -538,  -213,  -218,  -210,
  -225,  -219,  -211,  -226,  -220,  -212,  -221,  -200,  -222,  -205,
  -201,  -227,  -202,  -228,  -214,  -203,  -215,  -204,  -198,  -216,
  -199,  -526,  -217,  -538,  -537,  -538,  -273,  -538,  -537,  -537,
  -538,   -16,   -66,  -271,  -526,   -12,  -525,  -270,  -538,  -537,
  -538,  -101,  -103,  -102,  -538,  -537,  -456,  -538,  -538,  -537,
  -515,  -516,  -537,  -269,  -314,  -390,  -537,  -537,  -274,  -532,
  -234,  -531,  -532,  -236,   -37,  -252,  -187,   -29,  -538,  -507,
  -275,  -278,  -526,  -523,  -538,  -522,  -526,  -475,  -538,  -537,
  -538,   -83,   -78,  -537,  -249,  -254,  -538,  -515,  -516,  -526,
  -515,  -516,  -509,  -510,  -237,  -187,  -538,  -258,  -281,  -528,
  -490,  -481,  -537,  -359,  -537,  -538,  -537,  -537,  -353,  -538,
  -538,  -538,  -538,  -526,  -488,  -482,  -538,  -538,  -537,  -502,
  -537,  -487,  -537,  -501,  -537,  -537,  -493,  -538,  -538,  -335,
  -526,  -485,  -537,  -538,  -428,  -425,  -426,  -427,  -423,  -377,
   -61,  -538,  -538,  -538,  -383,  -239,  -238,  -376,   -59,  -538,
  -538,  -537,  -317,  -538,  -537,   -88,   -90,  -526,  -515,  -516,
   -80,  -538,   -74,   -18,  -413,  -411,  -206,  -207,  -537,  -417,
   -28,  -538,  -538,  -538,  -292,  -538,  -526,  -196,  -538,  -519,
  -272,  -526,  -515,  -516,  -538,  -538,  -538,  -116,   -68,   -15,
  -101,  -105,  -102,  -526,  -458,  -538,  -538,  -537,  -374,   -55,
  -373,   -54,  -537,  -393,  -392,  -391,  -322,  -537,  -537,  -530,
  -538,  -296,  -277,  -475,  -505,  -526,  -460,  -538,   -76,  -538,
  -245,  -255,  -538,  -383,  -538,  -538,  -256,  -538,  -538,  -538,
  -344,  -346,  -364,  -363,  -360,  -361,  -538,  -349,  -538,  -351,
  -356,  -385,  -384,  -190,  -366,  -368,  -369,  -538,  -465,  -538,
  -463,  -538,  -473,  -471,  -538,  -468,  -333,  -329,  -338,  -538,
  -327,  -538,  -424,   -62,  -194,   -35,  -195,  -529,  -538,   -60,
  -192,   -33,  -193,   -34,  -538,  -538,  -320,   -86,   -72,  -538,
  -289,  -290,  -538,  -537,  -291,  -280,  -538,  -383,  -537,  -371,
  -370,  -383,  -294,  -457,  -538,  -395,  -538,  -538,  -323,  -397,
  -537,   -11,  -235,  -188,  -537,  -459,  -297,   -84,  -538,  -257,
  -489,  -538,  -358,  -537,  -537,  -538,  -491,  -537,  -537,  -537,
  -537,  -537,  -537,  -537,  -538,  -331,  -538,  -336,   -56,  -191,
   -32,  -287,  -538,  -288,  -254,  -537,  -230,  -538,  -295,  -537,
  -538,  -100,  -452,  -538,  -394,  -396,  -538,  -538,  -273,  -538,
  -341,  -538,  -343,  -362,  -350,  -538,  -347,  -352,  -466,  -464,
  -538,  -461,  -469,  -334,  -538,  -537,  -386,  -388,  -387,  -293,
  -537,  -538,  -537,  -538,   -99,  -298,  -519,  -272,  -537,  -537,
  -537,  -537,  -537,  -332,  -537,  -389,  -519,   -98,  -526,  -515,
  -516,  -342,  -538,  -339,  -345,  -348,  -462,  -321,  -383,  -537,
  -340 ]

clist = [
'31,131,468,142,267,607,309,234,379,495,131,422,477,164,485,314,283,278',
'157,230,542,289,429,297,121,234,259,471,260,137,382,308,414,173,629',
'419,290,383,174,525,286,313,537,694,388,52,469,540,317,263,385,632,131',
'824,610,613,656,52,654,283,619,131,676,360,592,289,671,37,318,234,758',
'283,808,428,494,359,315,672,424,175,290,674,659,283,356,782,657,866',
'807,407,663,283,748,384,785,750,131,642,234,266,389,521,668,131,223',
'373,439,442,151,675,403,353,405,413,268,634,413,387,266,274,367,634',
'391,652,131,423,266,624,381,394,145,393,513,346,599,602,266,784,357',
'484,438,438,851,266,431,351,449,22,164,916,454,444,752,445,846,712,300',
'454,265,171,366,292,519,454,261,3,299,688,245,670,6,2,477,595,485,459',
'433,1,,,,829,,,,,,,,,,,,,,,,,773,,866,,,877,,,424,,,,,,261,434,,436',
',,,,,,,,,,,,,,,,,363,,,,,,,,,,,482,,,,725,,,,131,423,,,,704,,,,704,510',
'511,,283,827,,913,614,,,,768,359,508,488,,,,741,530,363,532,533,534',
'947,807,121,173,837,642,,,,782,518,779,679,639,618,468,841,,903,52,',
',933,,,,,,,,,578,579,,428,,,543,,,455,491,714,,,,704,457,,,,,,461,,',
'622,,584,680,531,704,918,,,438,438,633,828,,359,,,,,,,,,,424,,,,,585',
',,,,266,605,266,266,266,,,,538,539,707,,131,283,631,617,586,671,854',
',582,,,863,581,676,587,164,482,,,867,,869,,,131,423,671,,,,870,,871',
',,,,873,,,621,864,,852,363,682,653,868,488,658,,,,,653,,,,,598,872,',
'535,,529,424,,535,,731,644,261,,,,,,833,,438,838,,648,,743,131,626,723',
',,,693,,131,696,,,,,,482,754,,482,,283,631,,689,948,289,131,423,690',
'234,,695,681,,261,745,698,,468,468,290,363,596,,713,,488,928,,930,488',
'424,,931,,,,,932,,,,,,,,424,428,,767,813,,935,710,,929,770,759,819,',
',,734,,,,,,,482,949,,289,728,,,234,131,423,,,,746,,482,,,290,,,,737',
'131,423,,889,660,917,,661,,488,131,696,,131,696,666,667,,753,756,,,',
',488,,283,631,234,,,,726,695,,738,695,683,749,915,763,751,164,739,,413',
',765,,693,,,,,,875,,,468,,701,,,,653,266,454,,454,454,,,,762,,844,,764',
',,454,,454,,454,266,454,454,,,718,,19,,117,704,,,,,,,721,117,19,722',
',283,631,,117,815,,756,794,117,696,693,,821,823,,,468,275,468,,,,,756',
'810,,,117,,,689,695,,,693,117,735,736,117,,,,,,744,117,693,117,747,',
',,117,,,,468,845,283,857,347,,,849,,19,,283,,117,835,164,368,,,896,',
'19,766,,,,117,603,368,,,,,117,,,275,,,,,,,,,,,,,,,,,855,117,882,,938',
'19,,,,,,,117,117,,117,,,,117,,,880,,,,781,283,787,789,,811,,,,,,,,,798',
',800,,802,,803,805,,,,,,,,,,,,454,454,,,454,454,454,454,454,454,454',
',424,,,,535,,,,,,756,,,,482,,843,,,,,,,,,,266,,,,,,,,,848,,,482,,,390',
',,,605,131,423,,,409,,410,454,454,454,454,454,117,756,,693,,,,19,724',
',,,488,,,,454,,427,430,,,,,,,19,,275,,,,,,,117,,,,,,,,,,,19,117,19,117',
'117,117,,885,,117,117,,887,,,,,,,,,,,,895,,,,,,,,,,,,,,761,,,,,,,,,',
',,,,,,,,19,,,,900,902,19,920,904,906,907,908,909,911,912,,117,,,,,,',
',,,,,117,19,,,,934,117,,,,,,,,,117,,,,,,,275,,,,,,,,117,,,,,,,,,,,941',
'943,944,945,946,,,,,,,,19,,,19,830,831,,,834,950,,19,19,,,,,,,,,,,,',
',,,842,,,,,19,,,,,117,,,,,,,,117,,,,856,,,,,,19,,,,,,,,117,,,,,,,,,275',
',,,,,,,,,615,,,19,,,,,,,,,,,,19,,,19,,,,117,,881,,635,,,883,,,390,,',
'643,,,,,,,,,888,,647,,,,,,117,,,117,19,19,,,,664,,,19,,,117,,,,,,19',
',117,,117,,,117,,,,,,,919,130,,,,,,,,925,130,,,,,,,258,,,19,275,,,,',
'272,,,,,,,,,,,,,,,,,,,,301,,,,,,130,310,,,,,,,,130,,,,,,,615,,,,,19',
',,,,,,,,117,,,,,,,,117,117,130,,,,130,,,130,,,275,130,,,,,130,,130,',
',,258,,,,,,,,,,130,,,,,,,,,755,130,130,635,,19,390,,,443,,,,,,19,,,',
',,,,,,,,275,,,771,,,,64,,860,,,,776,,,,,,64,,,,,,,,,,,,,,,,,,,,279,',
',,,,,,,,117,,,,,,,117,,,,,,,,19,,,,,19,,,,,,,,,890,,,19,349,,,19,,64',
',,,,130,,370,,,,,64,,,,,,,370,,,,,,,370,279,,,,,,19,,,,,,,517,,12,,',
',,,,64,,,,,12,,,859,,19,,,,,,,117,545,,547,548,549,550,551,552,553,554',
'555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571',
'572,,,,,,,,,,,,,,,,,,884,,101,,,,,,,,12,,,,101,,,,,,,,12,616,,,,,,130',
',,,,,,,,,,,,,,,,,,443,130,,,,130,,130,,517,130,12,,,,645,,,,,64,130',
',,,,,,,352,,,,,101,,130,,,64,,279,,,,,101,,,,,,,,,,,,,64,,64,,,,,130',
',,,,,,,130,,,,,,,,,101,,,,,,,,,130,,,,,,,,,,,,,,,,,,,,716,717,,64,,',
',,,64,,,,,,,,,130,,,,,727,,,,,,,12,,64,,,,,,,,,,,,,,,,,12,,130,,279',
',,,,,,,,,,,,130,,,12,,12,,,,,130,,,130,,,,130,64,,130,64,,130,,,38,',
',64,64,,,,,,101,,38,,,,,,,,,130,,,,64,,,,101,,130,276,12,,,,,,12,,,',
',,,,793,64,101,,101,,,,,,,,,,,12,,,279,,,,,,,,,,348,814,816,64,,38,',
',,820,822,,369,,,64,,38,64,,,,,,369,,,,,,101,,276,,,,101,,,12,,,12,',
',,,,,,12,12,,,38,,64,64,,101,,,,,64,,,,,,853,,12,64,,,,,,,,,814,,820',
'822,,130,,,,,,,,12,,,,,,,,,,,,64,279,,,101,,,101,,,,,,,,101,101,,12',
',,879,,,,,,,,,12,,,12,,130,,101,,886,,,,,,,,,,,,,,64,,,,,,,101,879,',
',,,,,,,,12,12,,,,,,38,12,,,279,,,,,,12,,101,,,,,,,38,,276,,,101,,,101',
',,,,,,,,,,,38,64,38,,,12,,,130,,,64,,,,,,,,,,,,279,,,101,101,,,,,370',
',101,,,,,,,,,101,,,,,,,,,,,,,38,,12,,,,38,,,,,,,,,,,,,,,101,,,,,,,,38',
',64,,,,,64,,,,,,,,,892,,,64,,276,,64,,,,,,,,,,,,,,,12,270,,,,,270,101',
',,12,,,,38,,,38,,,64,270,,,,38,38,,270,,,,,,,,,,,,,,,,,,64,38,684,270',
',,,,,,,,,,,270,,,,,,270,,,38,,101,270,270,,,,,,,270,101,270,,270,12',
'276,,270,,12,,,,,,,,,38,,,12,,,,12,,270,,,38,,,38,,,,,,,,,,,,,,,,,,',
',,,,,,,,12,,,,,,,,,,,38,38,,,,101,,,38,,101,,,,,12,,38,,894,,,101,,',
',101,,,,,,,,,,,,,,,,,,,,,,,,,38,276,,,,,,,,,101,,,,,,,,,,,,,,,,,,,,',
',,,,,101,,,,,,,,,,,,,,,270,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,270',
',270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,270,270,,,,,,38,,,,,,,,,,38,,,,,,,,,,,,276',
',,,,,,,,369,,,,,,,,,,,,,,,,,,,,,,,,,,270,,,270,270,,,,,,270,,270,270',
',,,,270,,,,,,270,,,,,38,,,,,38,,,,,270,,,,891,,,38,,,,38,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,270,,,,,,,38,,,,270,270',
',,,,,,,,,,,,,,,,270,,,,,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,270,,,270,,,270,,,,,,,,,,,,,,,,,,270,,,,,,270,,,',
',,,,,,270,,,,,,,,,,,,,,,,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,270,,,,,,',
',,,,,,,,,,,,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,270',
',,,,,,,,270,,,270,,270,270,,270,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,270,,,,270,,,,,,,,,,,270,,,,,,,,,,,270' ]
        racc_goto_table = arr = Array.new(3146, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'7,34,102,32,19,13,36,54,11,83,34,25,38,110,38,36,59,47,118,53,90,57',
'28,19,64,54,21,40,6,39,61,19,66,64,98,66,58,63,39,83,17,19,87,26,63',
'10,103,87,19,9,36,49,34,84,62,62,107,10,106,59,62,34,136,44,51,57,135',
'8,32,54,14,59,104,61,130,43,6,106,36,8,58,106,112,59,17,115,108,137',
'101,48,112,59,65,7,114,65,34,140,54,30,7,130,108,34,127,52,41,41,116',
'108,53,75,74,7,127,67,7,52,30,127,75,67,78,105,34,7,30,100,60,99,79',
'39,31,22,38,38,30,113,18,25,7,7,15,30,21,92,117,5,110,120,7,21,121,118',
'122,49,125,7,126,81,30,128,129,7,95,4,131,132,133,134,3,2,38,94,38,139',
'45,1,,,,14,,,,,,,,,,,,,,,,,26,,137,,,104,,,36,,,,,,95,30,,30,,,,,,,',
',,,,,,,,,,12,,,,,,,,,,,54,,,,90,,,,34,7,,,,38,,,,38,44,48,,59,26,,104',
'28,,,,49,43,32,64,,,,51,19,12,19,19,19,84,101,64,64,26,140,,,,115,21',
'112,102,25,11,102,26,,114,10,,,104,,,,,,,,,41,41,,61,,,6,,,109,8,130',
',,,38,109,,,,,,109,,,36,,44,103,10,38,14,,,7,7,63,49,,43,,,,,,,,,,36',
',,,,6,,,,,30,7,30,30,30,,,,30,30,25,,34,59,47,21,9,135,98,,45,,,107',
'10,136,45,110,54,,,106,,106,,,34,7,135,,,,106,,106,,,,,106,,,45,108',
',62,12,41,7,108,64,110,,,,,7,,,,,30,108,,95,,12,36,,95,,25,45,95,,,',
',,83,,7,87,,45,,25,34,30,61,,,,32,,34,7,,,,,,54,28,,54,,59,47,,64,26',
'57,34,7,39,54,,64,45,,95,11,39,,102,102,58,12,95,,17,,64,106,,106,64',
'36,,106,,,,,106,,,,,,,,36,61,,11,40,,13,45,,108,66,63,40,,,,19,,,,,',
',54,106,,57,32,,,54,34,7,,,,19,,54,,,58,,,,17,34,7,,83,12,90,,12,,64',
'34,7,,34,7,12,12,,7,7,,,,,64,,59,47,54,,,,30,64,,45,64,12,39,83,53,39',
'110,10,,7,,118,,32,,,,,,102,,,102,,12,,,,7,30,7,,7,7,,,,45,,11,,45,',
',7,,7,,7,30,7,7,,,12,,24,,24,38,,,,,,,12,24,24,12,,59,47,,24,21,,7,45',
'24,7,32,,21,21,,,102,24,102,,,,,7,45,,,24,,,64,64,,,32,24,12,12,24,',
',,,,95,24,32,24,95,,,,24,,,,102,7,59,47,24,,,7,,24,,59,,24,45,110,24',
',,11,,24,95,,,,24,77,24,,,,,24,,,24,,,,,,,,,,,,,,,,,45,24,19,,25,24',
',,,,,,24,24,,24,,,,24,,,21,,,,109,59,109,109,,12,,,,,,,,,109,,109,,109',
',109,109,,,,,,,,,,,,7,7,,,7,7,7,7,7,7,7,,36,,,,95,,,,,,7,,,,54,,95,',
',,,,,,,,30,,,,,,,,,12,,,54,,,29,,,,7,34,7,,,29,,29,7,7,7,7,7,24,7,,32',
',,,24,77,,,,64,,,,7,,29,29,,,,,,,24,,24,,,,,,,24,,,,,,,,,,,24,24,24',
'24,24,24,,12,,24,24,,12,,,,,,,,,,,,12,,,,,,,,,,,,,,77,,,,,,,,,,,,,,',
',,,24,,,,109,109,24,12,109,109,109,109,109,109,109,,24,,,,,,,,,,,,24',
'24,,,,12,24,,,,,,,,,24,,,,,,,24,,,,,,,,24,,,,,,,,,,,109,109,109,109',
'109,,,,,,,,24,,,24,77,77,,,77,109,,24,24,,,,,,,,,,,,,,,,77,,,,,24,,',
',,24,,,,,,,,24,,,,77,,,,,,24,,,,,,,,24,,,,,,,,,24,,,,,,,,,,29,,,24,',
',,,,,,,,,,24,,,24,,,,24,,77,,29,,,77,,,29,,,29,,,,,,,,,77,,29,,,,,,24',
',,24,24,24,,,,29,,,24,,,24,,,,,,24,,24,,24,,,24,,,,,,,77,33,,,,,,,,77',
'33,,,,,,,33,,,24,24,,,,,33,,,,,,,,,,,,,,,,,,,,33,,,,,,33,33,,,,,,,,33',
',,,,,,29,,,,,24,,,,,,,,,24,,,,,,,,24,24,33,,,,33,,,33,,,24,33,,,,,33',
',33,,,,33,,,,,,,,,,33,,,,,,,,,29,33,33,29,,24,29,,,33,,,,,,24,,,,,,',
',,,,,24,,,29,,,,50,,24,,,,29,,,,,,50,,,,,,,,,,,,,,,,,,,,50,,,,,,,,,',
'24,,,,,,,24,,,,,,,,24,,,,,24,,,,,,,,,24,,,24,50,,,24,,50,,,,,33,,50',
',,,,50,,,,,,,50,,,,,,,50,50,,,,,,24,,,,,,,33,,23,,,,,,,50,,,,,23,,,29',
',24,,,,,,,24,33,,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,33,,,,,,,,,,,,,,,,,,29,,20,,,,,,,,23,,,,20,',
',,,,,,23,33,,,,,,33,,,,,,,,,,,,,,,,,,,33,33,,,,33,,33,,33,33,23,,,,33',
',,,,50,33,,,,,,,,20,,,,,20,,33,,,50,,50,,,,,20,,,,,,,,,,,,,50,,50,,',
',,33,,,,,,,,33,,,,,,,,,20,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,33,33,,50,,',
',,,50,,,,,,,,,33,,,,,33,,,,,,,23,,50,,,,,,,,,,,,,,,,,23,,33,,50,,,,',
',,,,,,,,33,,,23,,23,,,,,33,,,33,,,,33,50,,33,50,,33,,,27,,,50,50,,,',
',,20,,27,,,,,,,,,33,,,,50,,,,20,,33,27,23,,,,,,23,,,,,,,,33,50,20,,20',
',,,,,,,,,,23,,,50,,,,,,,,,,27,33,33,50,,27,,,,33,33,,27,,,50,,27,50',
',,,,,27,,,,,,20,,27,,,,20,,,23,,,23,,,,,,,,23,23,,,27,,50,50,,20,,,',
',50,,,,,,33,,23,50,,,,,,,,,33,,33,33,,33,,,,,,,,23,,,,,,,,,,,,50,50',
',,20,,,20,,,,,,,,20,20,,23,,,33,,,,,,,,,23,,,23,,33,,20,,33,,,,,,,,',
',,,,,50,,,,,,,20,33,,,,,,,,,,23,23,,,,,,27,23,,,50,,,,,,23,,20,,,,,',
',27,,27,,,20,,,20,,,,,,,,,,,,27,50,27,,,23,,,33,,,50,,,,,,,,,,,,50,',
',20,20,,,,,50,,20,,,,,,,,,20,,,,,,,,,,,,,27,,23,,,,27,,,,,,,,,,,,,,',
'20,,,,,,,,27,,50,,,,,50,,,,,,,,,50,,,50,,27,,50,,,,,,,,,,,,,,,23,42',
',,,,42,20,,,23,,,,27,,,27,,,50,42,,,,27,27,,42,,,,,,,,,,,,,,,,,,50,27',
'27,42,,,,,,,,,,,,42,,,,,,42,,,27,,20,42,42,,,,,,,42,20,42,,42,23,27',
',42,,23,,,,,,,,,27,,,23,,,,23,,42,,,27,,,27,,,,,,,,,,,,,,,,,,,,,,,,',
',,23,,,,,,,,,,,27,27,,,,20,,,27,,20,,,,,23,,27,,20,,,20,,,,20,,,,,,',
',,,,,,,,,,,,,,,,,,27,27,,,,,,,,,20,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,',
',,,,,,,,,42,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,42,,42,42,42,42,42',
'42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,,,,,',
'27,,,,,,,,,,27,,,,,,,,,,,,27,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,42',
',,42,42,,,,,,42,,42,42,,,,,42,,,,,,42,,,,,27,,,,,27,,,,,42,,,,27,,,27',
',,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,42,,,,',
',,27,,,,42,42,,,,,,,,,,,,,,,,,42,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,42,,,42,,,,,,,,,,,,,,,,,,42,,,,',
',42,,,,,,,,,,42,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,',
',,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42',
',,,,,,,,42,,,42,,42,42,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,42,,,,42,,,,,,,,,,,42,,,,,,,,,,,42' ]
        racc_goto_check = arr = Array.new(3146, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   177,   171,   167,   165,   144,     6,    -3,    64,    27,
    42,   -87,   150,  -375,  -537,  -616,   nil,     4,    58,   -22,
  1641,     5,    55,  1569,   674,  -117,  -441,  1891,  -117,   810,
    73,  -154,    -5,  1279,    -4,   nil,   -50,   nil,  -243,    24,
  -147,   -37,  2287,    -8,   -20,    36,   nil,   -18,   -21,  -357,
  1447,  -308,    15,     1,   -11,   nil,   nil,   -15,     0,   -19,
    32,   -66,  -328,   -59,    19,  -507,   -84,  -297,   nil,   nil,
   nil,   nil,   nil,   nil,     3,    32,   nil,   396,    19,   119,
   nil,   146,   nil,  -258,  -648,   nil,   nil,  -266,   nil,   nil,
  -295,   nil,    67,   nil,  -200,   142,   nil,   nil,  -369,    20,
  -267,  -589,  -166,  -122,  -606,  -314,  -379,  -381,  -351,   173,
     0,   nil,  -355,  -518,  -561,  -570,    95,    -5,     5,   nil,
  -736,  -454,  -598,   nil,   nil,   109,   134,    86,   121,  -130,
  -191,   120,  -306,   150,  -284,  -387,  -398,  -699,   nil,    10,
  -321 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   361,   nil,   316,
   362,   nil,   380,   nil,   826,   nil,   365,   nil,   nil,   nil,
   136,   108,     7,   115,   271,   nil,   nil,   122,   nil,   124,
    59,   nil,   435,    75,    79,    84,   134,    92,   703,   nil,
   nil,   nil,    14,    20,   nil,   nil,    35,    43,    49,   nil,
   126,   371,   nil,   285,   489,   239,   287,    94,    98,   106,
   nil,   116,   nil,   119,   480,   697,   nil,   123,    58,    62,
    69,    76,    81,    86,    88,   nil,    95,   nil,   nil,   172,
    11,   nil,    26,   nil,   nil,    45,    53,   nil,    63,    70,
   nil,    78,   nil,    90,   nil,   497,   102,   109,   nil,   nil,
   nil,   466,   169,   nil,   462,   nil,   153,   nil,   160,   nil,
   669,   441,   nil,   nil,   nil,   147,   nil,   nil,   628,   481,
   nil,   nil,   nil,    41,    47,    55,   nil,   nil,   nil,   nil,
   475,   nil,   nil,   nil,   166,   167,   170,   650,   149,   152,
   120 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_1,
  0, 153, :_reduce_2,
  2, 151, :_reduce_3,
  2, 152, :_reduce_4,
  1, 154, :_reduce_5,
  1, 154, :_reduce_6,
  3, 154, :_reduce_7,
  2, 154, :_reduce_8,
  1, 157, :_reduce_9,
  1, 157, :_reduce_none,
  4, 160, :_reduce_11,
  2, 161, :_reduce_12,
  1, 165, :_reduce_13,
  1, 165, :_reduce_14,
  3, 165, :_reduce_15,
  2, 165, :_reduce_none,
  0, 180, :_reduce_17,
  4, 159, :_reduce_18,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 159, :_reduce_23,
  3, 159, :_reduce_24,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  4, 159, :_reduce_none,
  3, 159, :_reduce_29,
  3, 159, :_reduce_none,
  3, 159, :_reduce_31,
  6, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 179, :_reduce_none,
  3, 179, :_reduce_42,
  3, 179, :_reduce_43,
  3, 179, :_reduce_44,
  2, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 168, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_50,
  2, 170, :_reduce_51,
  2, 170, :_reduce_52,
  1, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 189, :_reduce_none,
  2, 183, :_reduce_57,
  3, 183, :_reduce_none,
  4, 183, :_reduce_59,
  5, 183, :_reduce_none,
  4, 183, :_reduce_none,
  5, 183, :_reduce_none,
  2, 183, :_reduce_63,
  2, 183, :_reduce_64,
  1, 171, :_reduce_none,
  3, 171, :_reduce_none,
  1, 193, :_reduce_none,
  3, 193, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  3, 192, :_reduce_none,
  5, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 196, :_reduce_none,
  3, 196, :_reduce_none,
  2, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 198, :_reduce_none,
  3, 198, :_reduce_none,
  1, 197, :_reduce_none,
  4, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  2, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_94,
  3, 169, :_reduce_95,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  2, 169, :_reduce_99,
  1, 169, :_reduce_none,
  1, 200, :_reduce_101,
  1, 200, :_reduce_102,
  2, 201, :_reduce_103,
  1, 201, :_reduce_104,
  3, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_109,
  1, 202, :_reduce_110,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 182, :_reduce_187,
  5, 182, :_reduce_none,
  3, 182, :_reduce_189,
  5, 182, :_reduce_none,
  6, 182, :_reduce_none,
  5, 182, :_reduce_192,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  4, 182, :_reduce_none,
  3, 182, :_reduce_none,
  3, 182, :_reduce_198,
  3, 182, :_reduce_199,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  3, 182, :_reduce_202,
  3, 182, :_reduce_203,
  3, 182, :_reduce_204,
  3, 182, :_reduce_205,
  4, 182, :_reduce_none,
  4, 182, :_reduce_none,
  2, 182, :_reduce_none,
  2, 182, :_reduce_209,
  3, 182, :_reduce_210,
  3, 182, :_reduce_211,
  3, 182, :_reduce_212,
  3, 182, :_reduce_213,
  3, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  2, 182, :_reduce_223,
  2, 182, :_reduce_224,
  3, 182, :_reduce_225,
  3, 182, :_reduce_226,
  3, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_none,
  6, 182, :_reduce_230,
  1, 182, :_reduce_none,
  1, 178, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  4, 209, :_reduce_none,
  2, 209, :_reduce_none,
  3, 213, :_reduce_237,
  1, 214, :_reduce_238,
  1, 214, :_reduce_none,
  1, 174, :_reduce_240,
  1, 174, :_reduce_none,
  1, 185, :_reduce_242,
  2, 185, :_reduce_243,
  2, 185, :_reduce_244,
  4, 185, :_reduce_245,
  1, 185, :_reduce_246,
  1, 188, :_reduce_none,
  2, 216, :_reduce_248,
  2, 215, :_reduce_249,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 210, :_reduce_252,
  2, 210, :_reduce_253,
  3, 210, :_reduce_254,
  4, 210, :_reduce_255,
  3, 177, :_reduce_none,
  4, 177, :_reduce_none,
  2, 177, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  2, 208, :_reduce_265,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 208, :_reduce_none,
  3, 208, :_reduce_none,
  3, 208, :_reduce_271,
  3, 208, :_reduce_272,
  2, 208, :_reduce_273,
  3, 208, :_reduce_274,
  3, 208, :_reduce_275,
  1, 208, :_reduce_276,
  4, 208, :_reduce_277,
  3, 208, :_reduce_278,
  1, 208, :_reduce_279,
  5, 208, :_reduce_none,
  4, 208, :_reduce_none,
  3, 208, :_reduce_none,
  2, 208, :_reduce_none,
  1, 208, :_reduce_284,
  2, 208, :_reduce_285,
  2, 208, :_reduce_none,
  6, 208, :_reduce_287,
  6, 208, :_reduce_288,
  5, 208, :_reduce_none,
  5, 208, :_reduce_none,
  5, 208, :_reduce_291,
  4, 208, :_reduce_292,
  7, 208, :_reduce_none,
  5, 208, :_reduce_294,
  6, 208, :_reduce_295,
  4, 208, :_reduce_296,
  5, 208, :_reduce_297,
  7, 208, :_reduce_298,
  1, 208, :_reduce_299,
  1, 208, :_reduce_300,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 173, :_reduce_none,
  1, 225, :_reduce_none,
  1, 231, :_reduce_none,
  1, 234, :_reduce_none,
  1, 235, :_reduce_none,
  1, 237, :_reduce_none,
  1, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 242, :_reduce_none,
  1, 245, :_reduce_none,
  1, 246, :_reduce_none,
  1, 226, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 233, :_reduce_320,
  5, 233, :_reduce_321,
  1, 163, :_reduce_322,
  2, 163, :_reduce_323,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 250, :_reduce_none,
  3, 250, :_reduce_none,
  1, 253, :_reduce_none,
  3, 253, :_reduce_none,
  1, 252, :_reduce_none,
  4, 252, :_reduce_none,
  6, 252, :_reduce_none,
  3, 252, :_reduce_none,
  5, 252, :_reduce_none,
  2, 252, :_reduce_none,
  4, 252, :_reduce_none,
  1, 252, :_reduce_none,
  3, 252, :_reduce_none,
  6, 254, :_reduce_none,
  8, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 190, :_reduce_354,
  1, 190, :_reduce_none,
  3, 260, :_reduce_none,
  1, 260, :_reduce_none,
  4, 260, :_reduce_358,
  1, 261, :_reduce_none,
  2, 261, :_reduce_none,
  1, 262, :_reduce_none,
  3, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  2, 230, :_reduce_none,
  4, 265, :_reduce_none,
  1, 265, :_reduce_none,
  3, 266, :_reduce_none,
  3, 266, :_reduce_none,
  4, 224, :_reduce_none,
  4, 224, :_reduce_371,
  2, 186, :_reduce_372,
  4, 186, :_reduce_none,
  4, 186, :_reduce_none,
  2, 229, :_reduce_375,
  4, 229, :_reduce_376,
  4, 229, :_reduce_377,
  3, 229, :_reduce_378,
  3, 229, :_reduce_none,
  3, 229, :_reduce_none,
  2, 229, :_reduce_381,
  1, 229, :_reduce_382,
  4, 229, :_reduce_383,
  4, 228, :_reduce_384,
  4, 228, :_reduce_385,
  5, 239, :_reduce_386,
  1, 269, :_reduce_387,
  1, 269, :_reduce_none,
  6, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  2, 271, :_reduce_none,
  1, 271, :_reduce_none,
  2, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 218, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 273, :_reduce_none,
  3, 274, :_reduce_405,
  3, 219, :_reduce_406,
  3, 220, :_reduce_none,
  3, 221, :_reduce_none,
  3, 221, :_reduce_none,
  0, 277, :_reduce_none,
  3, 277, :_reduce_none,
  1, 278, :_reduce_none,
  2, 278, :_reduce_none,
  3, 222, :_reduce_none,
  3, 222, :_reduce_none,
  0, 280, :_reduce_416,
  3, 280, :_reduce_none,
  0, 275, :_reduce_418,
  2, 275, :_reduce_419,
  0, 276, :_reduce_420,
  2, 276, :_reduce_421,
  1, 279, :_reduce_422,
  2, 279, :_reduce_423,
  3, 279, :_reduce_424,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  2, 206, :_reduce_429,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  3, 207, :_reduce_434,
  1, 272, :_reduce_435,
  1, 272, :_reduce_436,
  2, 272, :_reduce_none,
  2, 272, :_reduce_none,
  1, 199, :_reduce_439,
  1, 199, :_reduce_440,
  1, 199, :_reduce_441,
  1, 199, :_reduce_442,
  1, 199, :_reduce_443,
  1, 199, :_reduce_444,
  1, 199, :_reduce_445,
  1, 199, :_reduce_446,
  1, 199, :_reduce_447,
  1, 199, :_reduce_448,
  1, 199, :_reduce_449,
  1, 199, :_reduce_450,
  1, 199, :_reduce_451,
  1, 223, :_reduce_none,
  1, 172, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 243, :_reduce_456,
  3, 243, :_reduce_457,
  2, 243, :_reduce_458,
  3, 247, :_reduce_459,
  2, 247, :_reduce_460,
  6, 267, :_reduce_461,
  8, 267, :_reduce_462,
  4, 267, :_reduce_463,
  6, 267, :_reduce_464,
  4, 267, :_reduce_465,
  6, 267, :_reduce_466,
  2, 267, :_reduce_467,
  4, 267, :_reduce_468,
  6, 267, :_reduce_469,
  2, 267, :_reduce_470,
  4, 267, :_reduce_471,
  2, 267, :_reduce_472,
  4, 267, :_reduce_473,
  1, 267, :_reduce_474,
  0, 267, :_reduce_475,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_481,
  3, 251, :_reduce_482,
  2, 251, :_reduce_483,
  1, 284, :_reduce_484,
  3, 284, :_reduce_none,
  1, 255, :_reduce_486,
  3, 255, :_reduce_487,
  3, 285, :_reduce_none,
  3, 286, :_reduce_none,
  1, 256, :_reduce_none,
  3, 256, :_reduce_none,
  1, 283, :_reduce_none,
  3, 283, :_reduce_none,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 257, :_reduce_none,
  1, 257, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 259, :_reduce_500,
  3, 259, :_reduce_501,
  2, 258, :_reduce_502,
  1, 258, :_reduce_none,
  1, 248, :_reduce_none,
  3, 248, :_reduce_none,
  1, 227, :_reduce_506,
  2, 227, :_reduce_507,
  1, 212, :_reduce_508,
  3, 212, :_reduce_509,
  3, 289, :_reduce_510,
  2, 289, :_reduce_511,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 187, :_reduce_515,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 268, :_reduce_519,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  0, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 194, :_reduce_none,
  2, 175, :_reduce_none,
  0, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  0, 156, :_reduce_none ]

racc_reduce_n = 538

racc_shift_n = 951

racc_token_table = {
  false => 0,
  :error => 1,
  "!" => 2,
  :tTILDE => 3,
  :tUPLUS => 4,
  :tPOW => 5,
  :tUMINUS_NUM => 6,
  :tUMINUS => 7,
  :tSTAR2 => 8,
  :tDIVIDE => 9,
  :tPERCENT => 10,
  :tPLUS => 11,
  :tMINUS => 12,
  :tLSHFT => 13,
  :tRSHFT => 14,
  :tAMPER2 => 15,
  :tPIPE => 16,
  :tCARET => 17,
  ">" => 18,
  :tGEQ => 19,
  "<" => 20,
  :tLEQ => 21,
  :tCMP => 22,
  :tEQ => 23,
  :tEQQ => 24,
  :tNEQ => 25,
  :tMATCH => 26,
  :tNMATCH => 27,
  :tANDOP => 28,
  :tOROP => 29,
  :tDOT2 => 30,
  :tDOT3 => 31,
  "?" => 32,
  ":" => 33,
  :kRESCUE_MOD => 34,
  "=" => 35,
  :tOP_ASGN => 36,
  :kDEFINED => 37,
  :kNOT => 38,
  :kOR => 39,
  :kAND => 40,
  :kIF_MOD => 41,
  :kUNLESS_MOD => 42,
  :kWHILE_MOD => 43,
  :kUNTIL_MOD => 44,
  :tLBRACE_ARG => 45,
  :tLOWEST => 46,
  :kCLASS => 47,
  :kMODULE => 48,
  :kDEF => 49,
  :kUNDEF => 50,
  :kBEGIN => 51,
  :kRESCUE => 52,
  :kENSURE => 53,
  :kEND => 54,
  :kIF => 55,
  :kUNLESS => 56,
  :kTHEN => 57,
  :kELSIF => 58,
  :kELSE => 59,
  :kCASE => 60,
  :kWHEN => 61,
  :kWHILE => 62,
  :kUNTIL => 63,
  :kFOR => 64,
  :kBREAK => 65,
  :kNEXT => 66,
  :kREDO => 67,
  :kRETRY => 68,
  :kIN => 69,
  :kDO => 70,
  :kDO_COND => 71,
  :kDO_BLOCK => 72,
  :kDO_LAMBDA => 73,
  :kRETURN => 74,
  :kYIELD => 75,
  :kSUPER => 76,
  :kSELF => 77,
  :kNIL => 78,
  :kTRUE => 79,
  :kFALSE => 80,
  :kALIAS => 81,
  :klBEGIN => 82,
  :klEND => 83,
  :k__LINE__ => 84,
  :k__FILE__ => 85,
  :k__ENCODING__ => 86,
  :kDEFined => 87,
  :kBLOCK_GIVEN => 88,
  :tIDENTIFIER => 89,
  :tFID => 90,
  :tGVAR => 91,
  :tIVAR => 92,
  :tCONSTANT => 93,
  :tCVAR => 94,
  :tLABEL => 95,
  :tINTEGER => 96,
  :tFLOAT => 97,
  :tSTRING_CONTENT => 98,
  :tCHAR => 99,
  :tNTH_REF => 100,
  :tBACK_REF => 101,
  :tREGEXP_END => 102,
  :tAREF => 103,
  :tASET => 104,
  :tCOLON2 => 105,
  :tCOLON3 => 106,
  :tASSOC => 107,
  :tLPAREN => 108,
  :tLPAREN_ARG => 109,
  :tRPAREN => 110,
  :tLBRACK => 111,
  :tLBRACE => 112,
  :tSTAR => 113,
  :tAMPER => 114,
  :tLAMBDA => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSTRING_DBEG => 122,
  :tSTRING_DVAR => 123,
  :tSTRING_END => 124,
  :tLAMBEG => 125,
  :tSTRING => 126,
  :tXSTRING_END => 127,
  "{" => 128,
  "}" => 129,
  "[" => 130,
  "." => 131,
  "," => 132,
  "|" => 133,
  "^" => 134,
  "&" => 135,
  "+" => 136,
  "-" => 137,
  "*" => 138,
  "/" => 139,
  "%" => 140,
  "~" => 141,
  "`" => 142,
  "(" => 143,
  ")" => 144,
  "]" => 145,
  ";" => 146,
  " " => 147,
  "\\n" => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"!\"",
  "tTILDE",
  "tUPLUS",
  "tPOW",
  "tUMINUS_NUM",
  "tUMINUS",
  "tSTAR2",
  "tDIVIDE",
  "tPERCENT",
  "tPLUS",
  "tMINUS",
  "tLSHFT",
  "tRSHFT",
  "tAMPER2",
  "tPIPE",
  "tCARET",
  "\">\"",
  "tGEQ",
  "\"<\"",
  "tLEQ",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tMATCH",
  "tNMATCH",
  "tANDOP",
  "tOROP",
  "tDOT2",
  "tDOT3",
  "\"?\"",
  "\":\"",
  "kRESCUE_MOD",
  "\"=\"",
  "tOP_ASGN",
  "kDEFINED",
  "kNOT",
  "kOR",
  "kAND",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "tLBRACE_ARG",
  "tLOWEST",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kALIAS",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "kDEFined",
  "kBLOCK_GIVEN",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tLABEL",
  "tINTEGER",
  "tFLOAT",
  "tSTRING_CONTENT",
  "tCHAR",
  "tNTH_REF",
  "tBACK_REF",
  "tREGEXP_END",
  "tAREF",
  "tASET",
  "tCOLON2",
  "tCOLON3",
  "tASSOC",
  "tLPAREN",
  "tLPAREN_ARG",
  "tRPAREN",
  "tLBRACK",
  "tLBRACE",
  "tSTAR",
  "tAMPER",
  "tLAMBDA",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tLAMBEG",
  "tSTRING",
  "tXSTRING_END",
  "\"{\"",
  "\"}\"",
  "\"[\"",
  "\".\"",
  "\",\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "\"`\"",
  "\"(\"",
  "\")\"",
  "\"]\"",
  "\";\"",
  "\" \"",
  "\"\\\\n\"",
  "$start",
  "target",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "do_block",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "k_while",
  "do",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "f_args",
  "operation3",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "sym",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 103)
  def _reduce_1(val, _values, result)
                        # puts 'well, we got here..'
                    # puts val[0]
                    @parser_result = val[0]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 111)
  def _reduce_2(val, _values, result)
                        self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 115)
  def _reduce_3(val, _values, result)
                        # puts 'program'
                    # puts val[1]
                    result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 122)
  def _reduce_4(val, _values, result)
                        # puts 'top_compstmt'
                    # puts val[0]
                    # puts val[1]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 130)
  def _reduce_5(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 134)
  def _reduce_6(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 138)
  def _reduce_7(val, _values, result)
                        result = val[0] + [val[2]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 142)
  def _reduce_8(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 147)
  def _reduce_9(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 153)
  def _reduce_11(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 158)
  def _reduce_12(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 163)
  def _reduce_13(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 167)
  def _reduce_14(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 171)
  def _reduce_15(val, _values, result)
                        result = val[0] + [val[2]]
		              
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 177)
  def _reduce_17(val, _values, result)
                        self.lex_state = :EXPR_FNAME
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 182)
  def _reduce_18(val, _values, result)
                      
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 189)
  def _reduce_23(val, _values, result)
                		    result = node :if_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 193)
  def _reduce_24(val, _values, result)
                		    result = node :unless_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 201)
  def _reduce_29(val, _values, result)
                		    result = node :assign, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 206)
  def _reduce_31(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 221)
  def _reduce_42(val, _values, result)
                  	    result = node :andop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 225)
  def _reduce_43(val, _values, result)
                  	    result = node :orop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 229)
  def _reduce_44(val, _values, result)
                  	    result = node :not, :expr => val[2]
              	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 240)
  def _reduce_50(val, _values, result)
                  	    result = node :return, :call_args => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 244)
  def _reduce_51(val, _values, result)
                	      result = node :break, :call_args => val[1]
            	    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 248)
  def _reduce_52(val, _values, result)
                	      result = node :next, :call_args => val[1]
            	    
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 259)
  def _reduce_57(val, _values, result)
                        # command call - no brackets/recv
          		      result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 265)
  def _reduce_59(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 272)
  def _reduce_63(val, _values, result)
          		          result = node :super, :call_args => val[1]
      		        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 276)
  def _reduce_64(val, _values, result)
            	          result = node :yield, :call_args => val[1]
        	        
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 317)
  def _reduce_94(val, _values, result)
    		                result = node :call, :recv => val[0], :meth => '[]', :args => val[2]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 321)
  def _reduce_95(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2]
                  
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 328)
  def _reduce_99(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 334)
  def _reduce_101(val, _values, result)
                        puts 'ERROR: cant use identifier for class/mod name'
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 338)
  def _reduce_102(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 344)
  def _reduce_103(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 347)
  def _reduce_104(val, _values, result)
      	                result = node :path, :cname => val[0]
  	              
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 356)
  def _reduce_109(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 361)
  def _reduce_110(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 397)
  def _reduce_187(val, _values, result)
                        result = node :assign, :lhs => val[0], :rhs => val[2]
                  
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 402)
  def _reduce_189(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 190 omitted

# reduce 191 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 408)
  def _reduce_192(val, _values, result)
                		    result = node :op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
                    # result = node :dot_identifier_op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
            		  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 418)
  def _reduce_198(val, _values, result)
                		    result = node :dot2, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 422)
  def _reduce_199(val, _values, result)
                		    result = node :dot3, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 426)
  def _reduce_200(val, _values, result)
                		    result = node :opt_plus, :recv => val[0], :meth => '+', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 430)
  def _reduce_201(val, _values, result)
                		    result = node :opt_minus, :recv => val[0], :meth => '-', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 434)
  def _reduce_202(val, _values, result)
                		    result = node :opt_mult, :recv => val[0], :meth => '*', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 438)
  def _reduce_203(val, _values, result)
                		    result = node :opt_div, :recv => val[0], :meth => '/', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 442)
  def _reduce_204(val, _values, result)
                		    result = node :opt_mod, :recv => val[0], :meth => '%', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 446)
  def _reduce_205(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '**', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 453)
  def _reduce_209(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '-@', :call_args => { :args => []}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 457)
  def _reduce_210(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '|', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 461)
  def _reduce_211(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '^', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 465)
  def _reduce_212(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '&', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 469)
  def _reduce_213(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 473)
  def _reduce_214(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 477)
  def _reduce_215(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 481)
  def _reduce_216(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 485)
  def _reduce_217(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 489)
  def _reduce_218(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '==', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 493)
  def _reduce_219(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '===', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 497)
  def _reduce_220(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 501)
  def _reduce_221(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '=~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 505)
  def _reduce_222(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 509)
  def _reduce_223(val, _values, result)
                  	    result = node :not, :expr => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 513)
  def _reduce_224(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 517)
  def _reduce_225(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 521)
  def _reduce_226(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 525)
  def _reduce_227(val, _values, result)
                		    result = node :andop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 529)
  def _reduce_228(val, _values, result)
                		    result = node :orop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 534)
  def _reduce_230(val, _values, result)
                		    result = node :tertiary, :expr => val[0], :true => val[2], :false => val[5]
            		  
    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 547)
  def _reduce_237(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 552)
  def _reduce_238(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 558)
  def _reduce_240(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 564)
  def _reduce_242(val, _values, result)
                		    result = node :call_args, :args => [val[0]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 568)
  def _reduce_243(val, _values, result)
                		    result = node :call_args, :args => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 572)
  def _reduce_244(val, _values, result)
                		    result = node :call_args, :assocs => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 576)
  def _reduce_245(val, _values, result)
                		    result = node :call_args, :args => val[0], :assocs => val[2], :block_arg => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 580)
  def _reduce_246(val, _values, result)
                		    result = node :call_args, :block_arg => val[0]
            		  
    result
  end
.,.,

# reduce 247 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 587)
  def _reduce_248(val, _values, result)
                        # puts "here for #{val[1]}"
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 593)
  def _reduce_249(val, _values, result)
                        resul = val[1]
                  
    result
  end
.,.,

# reduce 250 omitted

# reduce 251 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 600)
  def _reduce_252(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 604)
  def _reduce_253(val, _values, result)
    		                result = [val[1]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 608)
  def _reduce_254(val, _values, result)
    		                result = val[0] + [val[2]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 612)
  def _reduce_255(val, _values, result)
    		                result = val[0] + [val[3]]
		              
    result
  end
.,.,

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 627)
  def _reduce_265(val, _values, result)
                        # if val[0].node == :self
                      # result = val[0]
                    # else
                      # HACK: this rule shouldnt even exist. But for now it must for "identifier do .. end"
  	                  result = node :call, :recv => nil, :meth => val[0][:name], :brace_block => val[1]
                    # end
  	              
    result
  end
.,.,

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 641)
  def _reduce_271(val, _values, result)
                		    result = node :lparen, :stmt => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 645)
  def _reduce_272(val, _values, result)
                		    result = node :colon2, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 649)
  def _reduce_273(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 653)
  def _reduce_274(val, _values, result)
                		    result = node :array, :args => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 657)
  def _reduce_275(val, _values, result)
                		    result = node :assoc_list, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 661)
  def _reduce_276(val, _values, result)
                		    result = node :return
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 665)
  def _reduce_277(val, _values, result)
            	          result = node :yield, :call_args => val[2]
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 669)
  def _reduce_278(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 673)
  def _reduce_279(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 681)
  def _reduce_284(val, _values, result)
                		    # puts 2
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 685)
  def _reduce_285(val, _values, result)
                		    val[0][:brace_block] = val[1]
            		    result = val[0]
            		  
    result
  end
.,.,

# reduce 286 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 691)
  def _reduce_287(val, _values, result)
                		    result = self.node :if, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 695)
  def _reduce_288(val, _values, result)
                		    result = self.node :unless, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

# reduce 289 omitted

# reduce 290 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 701)
  def _reduce_291(val, _values, result)
                		    result = node :case, :expr => val[1], :body => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 705)
  def _reduce_292(val, _values, result)
                		    result = node :case, :expr => nil, :body => val[2]
            		  
    result
  end
.,.,

# reduce 293 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 710)
  def _reduce_294(val, _values, result)
                		    result = self.node_class(:cpath => val[1], :superclass => val[2], :bodystmt => val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 714)
  def _reduce_295(val, _values, result)
                		    result = node :class_shift, :expr => val[2], :bodystmt => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 718)
  def _reduce_296(val, _values, result)
                		    result = self.node_module(:cpath => val[1], :body => val[2])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 722)
  def _reduce_297(val, _values, result)
                		    result = self.node :def, :fname => val[1], :arglist => val[2], :bodystmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 726)
  def _reduce_298(val, _values, result)
                		    result = self.node :def, :singleton => val[1], :fname => val[3], :arglist => val[4], :bodystmt => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 730)
  def _reduce_299(val, _values, result)
                		    result = node :break, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 734)
  def _reduce_300(val, _values, result)
                		    result = node :next, :call_args => nil
            		  
    result
  end
.,.,

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

# reduce 312 omitted

# reduce 313 omitted

# reduce 314 omitted

# reduce 315 omitted

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 772)
  def _reduce_320(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 776)
  def _reduce_321(val, _values, result)
                  	    result = [self.node(:elsif, :expr => val[1], :stmt => val[3])] + val[4]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 781)
  def _reduce_322(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 785)
  def _reduce_323(val, _values, result)
                  	    result = [self.node(:else, :stmt => val[1])]
              	  
    result
  end
.,.,

# reduce 324 omitted

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 825)
  def _reduce_354(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 833)
  def _reduce_358(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 856)
  def _reduce_371(val, _values, result)
                        result = node :brace_block, :params => val[1], :stmt => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 861)
  def _reduce_372(val, _values, result)
                        val[0][:brace_block] = val[1]
                    result = val[0]
                  
    result
  end
.,.,

# reduce 373 omitted

# reduce 374 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 869)
  def _reduce_375(val, _values, result)
                        result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 873)
  def _reduce_376(val, _values, result)
                        result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 877)
  def _reduce_377(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2], :args => val[3]
              	    puts "tCOLON2call"
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 882)
  def _reduce_378(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2]
              	    puts "tCOLON2call.noargs."
              	  
    result
  end
.,.,

# reduce 379 omitted

# reduce 380 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 889)
  def _reduce_381(val, _values, result)
                		    result = node :super, :call_args => val[1], :paren => true
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 893)
  def _reduce_382(val, _values, result)
                		    result = node :super, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 897)
  def _reduce_383(val, _values, result)
                        result = node :call, :recv => val[0], :meth => '[]', :call_args => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 903)
  def _reduce_384(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 907)
  def _reduce_385(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 912)
  def _reduce_386(val, _values, result)
                        result = [node(:when, :args => val[1], :stmt => val[3])] + val[4]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 917)
  def _reduce_387(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 388 omitted

# reduce 389 omitted

# reduce 390 omitted

# reduce 391 omitted

# reduce 392 omitted

# reduce 393 omitted

# reduce 394 omitted

# reduce 395 omitted

# reduce 396 omitted

# reduce 397 omitted

# reduce 398 omitted

# reduce 399 omitted

# reduce 400 omitted

# reduce 401 omitted

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 946)
  def _reduce_405(val, _values, result)
                        result = node :string, :value => val[1], :beg => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 951)
  def _reduce_406(val, _values, result)
                        result = node :xstring, :value => val[1]
                  
    result
  end
.,.,

# reduce 407 omitted

# reduce 408 omitted

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 970)
  def _reduce_416(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

# reduce 417 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 977)
  def _reduce_418(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 982)
  def _reduce_419(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 987)
  def _reduce_420(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 992)
  def _reduce_421(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 997)
  def _reduce_422(val, _values, result)
                        result = node :string_content, :value => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1001)
  def _reduce_423(val, _values, result)
                        result = node :string_dvar, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1005)
  def _reduce_424(val, _values, result)
                        result = node :string_dbeg, :value => val[1]
                  
    result
  end
.,.,

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1015)
  def _reduce_429(val, _values, result)
                        result = node :symbol, :name => val[1]
                  
    result
  end
.,.,

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1025)
  def _reduce_434(val, _values, result)
                        result = node :dsym, :contents => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1030)
  def _reduce_435(val, _values, result)
                        result = node :numeric, :value => val[0], :float => false
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1034)
  def _reduce_436(val, _values, result)
                        result = node :numeric, :value => val[0], :float => true
                  
    result
  end
.,.,

# reduce 437 omitted

# reduce 438 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1042)
  def _reduce_439(val, _values, result)
                        result = node :identifier, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1046)
  def _reduce_440(val, _values, result)
                        result = node :ivar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1050)
  def _reduce_441(val, _values, result)
                        result = node :gvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1054)
  def _reduce_442(val, _values, result)
                        result = node :constant, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1058)
  def _reduce_443(val, _values, result)
                        result = node :cvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1062)
  def _reduce_444(val, _values, result)
                        result = node :nil, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1066)
  def _reduce_445(val, _values, result)
                        result = node :self, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1070)
  def _reduce_446(val, _values, result)
                        result = node :true, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1074)
  def _reduce_447(val, _values, result)
                        result = node :false, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1078)
  def _reduce_448(val, _values, result)
                        result = node :__FILE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1082)
  def _reduce_449(val, _values, result)
                        result = node :__LINE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1086)
  def _reduce_450(val, _values, result)
                        result = node :__ENCODING__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1090)
  def _reduce_451(val, _values, result)
                        # added for block_given? support.. :D
                    result = node :block_given
                  
    result
  end
.,.,

# reduce 452 omitted

# reduce 453 omitted

# reduce 454 omitted

# reduce 455 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1103)
  def _reduce_456(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1107)
  def _reduce_457(val, _values, result)
                		    result = node :superclass, :expr => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1109)
  def _reduce_458(val, _values, result)
     puts 'OMFG' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1113)
  def _reduce_459(val, _values, result)
                        result = val[1]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1118)
  def _reduce_460(val, _values, result)
                        result = val[0]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1124)
  def _reduce_461(val, _values, result)
                        result = node_args(val[0], val[2], val[4], nil, val[5])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1128)
  def _reduce_462(val, _values, result)
                 		    result = node_args(val[0], val[2], val[4], val[6], val[7])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1132)
  def _reduce_463(val, _values, result)
                  	    result = node_args(val[0], val[2], nil, nil, val[3])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1136)
  def _reduce_464(val, _values, result)
                		    result = node_args(val[0], val[2], nil, val[4], val[5])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1140)
  def _reduce_465(val, _values, result)
                		    result = node_args(val[0], nil, val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1144)
  def _reduce_466(val, _values, result)
                		    result = node_args(val[0], nil, val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1148)
  def _reduce_467(val, _values, result)
                 		    result = node_args(val[0], nil, nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1152)
  def _reduce_468(val, _values, result)
                		    result = node_args(nil, val[0], val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1156)
  def _reduce_469(val, _values, result)
                		    result = node_args(nil, val[0], val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1160)
  def _reduce_470(val, _values, result)
                 		    result = node_args(nil, val[0], nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1164)
  def _reduce_471(val, _values, result)
                 		    result = node_args(nil, val[0], nil, val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1168)
  def _reduce_472(val, _values, result)
                 		    result = node_args(nil, nil, val[0], nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1172)
  def _reduce_473(val, _values, result)
                 		    result = node_args(nil, nil, val[0], val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1176)
  def _reduce_474(val, _values, result)
                 		    result = node_args(nil, nil, nil, nil, val[0])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1180)
  def _reduce_475(val, _values, result)
                  	    result = node_args(nil, nil, nil, nil, nil)
              	  
    result
  end
.,.,

# reduce 476 omitted

# reduce 477 omitted

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1191)
  def _reduce_481(val, _values, result)
                        # result = val[0]
              	    result = node :norm_arg, :value => val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1197)
  def _reduce_482(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1200)
  def _reduce_483(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1205)
  def _reduce_484(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 485 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1211)
  def _reduce_486(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1215)
  def _reduce_487(val, _values, result)
                        # val[0] + val[2]
                    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1240)
  def _reduce_500(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1244)
  def _reduce_501(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1249)
  def _reduce_502(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1258)
  def _reduce_506(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1262)
  def _reduce_507(val, _values, result)
                  	    result = val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1267)
  def _reduce_508(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1271)
  def _reduce_509(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1276)
  def _reduce_510(val, _values, result)
                        result = node :assoc, :key => val[0], :value => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1280)
  def _reduce_511(val, _values, result)
                        result = node :label_assoc, :key => val[0], :value => val[1]
                  
    result
  end
.,.,

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1290)
  def _reduce_515(val, _values, result)
                      
    result
  end
.,.,

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1297)
  def _reduce_519(val, _values, result)
                        puts 4
                  
    result
  end
.,.,

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyParser
  end   # module Vienna


