#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
  #
# $Id$
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6'
    Racc_Runtime_Revision = '$Id$'

    Racc_Runtime_Core_Version_R = '1.4.6'
    Racc_Runtime_Core_Revision_R = '$Id$'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end


# require 'ctokenizer'
require 'strscan'

module Vienna
  class RubyParser < Racc::Parser

module_eval(<<'...end ruby_parser.rb.y/module_eval...', 'ruby_parser.rb.y', 1348)


...end ruby_parser.rb.y/module_eval...
##### State transition tables begin ###

clist = [
'-439,311,312,-10,440,-439,311,312,143,311,312,311,312,-439,-439,-89',
'-66,440,-439,-439,-439,-439,-439,-439,-439,-439,-439,-439,-439,-439',
'-439,-439,-439,-439,-439,-439,-439,440,621,-439,-439,-439,-439,-439',
'-439,-439,594,778,440,-89,311,312,-439,-439,-439,311,312,-439,-439,-439',
'-93,-439,451,458,623,597,144,-94,858,-439,354,-439,355,-439,440,591',
'332,516,447,593,-95,699,-99,546,323,326,514,515,158,337,339,342,345',
'320,321,324,327,329,331,334,336,341,343,344,604,-439,140,-439,437,154',
'141,141,-89,-80,450,141,262,-97,264,448,141,437,332,-85,-89,-439,-100',
'291,-89,-439,-439,-439,-439,-439,-439,-439,-439,-439,-439,-439,-439',
'437,-520,812,-439,-439,-439,-520,-439,-10,448,-10,437,-100,-96,-520',
'-520,-95,-94,141,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520',
'-520,-520,-520,-520,-520,-520,-87,437,-91,-89,-520,-520,-520,-520,-520',
'-520,-520,-97,700,143,262,141,264,-520,-520,-520,-94,818,-520,-520,-520',
'-97,-520,322,325,328,330,333,335,338,340,-520,-520,-520,-520,-92,-88',
'332,141,-87,-86,817,-92,-93,-453,323,326,-515,809,332,337,339,342,345',
'320,321,324,327,329,331,334,336,341,343,344,332,-520,144,-520,322,325',
'328,330,333,335,338,340,536,-99,262,470,264,128,332,804,262,-520,264',
'801,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520',
'801,-272,-89,-520,-520,-520,-272,-520,-97,536,-97,-86,496,-94,-272,-272',
'496,825,757,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272',
'-272,-272,-272,-272,-272,-98,692,-85,-91,-272,-272,-272,-272,-272,-272',
'-272,536,128,262,262,264,264,-272,-272,-272,128,-444,-272,-272,-272',
'496,-272,322,325,328,330,333,335,338,340,-272,-272,-272,-272,322,325',
'328,330,333,335,338,340,-444,262,783,264,156,159,161,163,322,325,328',
'330,333,335,338,340,496,-95,262,-94,264,-94,262,-272,264,-272,322,325',
'328,330,333,335,338,340,799,-98,-96,797,262,262,264,264,-446,-272,332',
'609,476,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272',
'141,-272,611,-272,-272,-272,-272,-272,262,-446,264,472,473,796,-272',
'-272,498,795,612,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272,-272',
'-272,-272,-272,-272,611,-272,-98,692,141,-90,-272,-272,-272,-272,-272',
'-272,262,-95,264,-95,-516,-519,769,-272,-272,-272,-519,825,757,-272',
'-272,792,-272,-515,-519,-519,-96,791,-96,-519,-519,-519,-519,-519,-519',
'-519,-519,-519,-519,-519,-519,-519,-519,-519,-519,-519,-96,772,295,296',
'-519,-519,-519,-519,-519,-519,-519,757,262,541,264,476,-447,-519,-519',
'-519,-272,757,-519,-519,-519,604,-519,322,325,328,330,333,335,338,340',
'-519,-519,-519,-519,472,473,332,-447,604,-272,-272,-272,-90,-272,-272',
'-272,-272,-272,-272,-272,-272,-383,790,573,-272,332,-272,604,-272,715',
'496,-449,788,323,326,-519,612,-519,337,339,342,345,-538,-538,-538,-538',
'-538,-538,574,575,-97,775,611,-87,-450,-519,-383,-449,-519,-519,-519',
'-519,-519,-519,-519,-519,-519,-519,-519,-519,-519,786,-519,612,-519',
'-519,-519,-519,-519,-383,-450,-383,-383,836,-272,-519,-519,-87,-519',
'611,-519,-519,-519,-519,-519,-519,-519,-519,-519,-519,-519,-519,-519',
'-519,-519,832,-519,-96,691,-272,-272,-519,-519,-519,-519,-519,-519,780',
'-267,262,655,264,-516,-519,-519,-519,-519,262,141,264,-519,-519,-253',
'-519,322,325,328,330,333,335,338,340,-519,-267,-267,476,-519,141,-519',
'-519,-87,-95,774,322,325,328,330,333,335,338,340,-515,-87,-99,546,332',
'-87,421,-273,472,473,493,502,323,326,311,312,-519,337,339,342,345,320',
'321,324,327,329,331,334,336,341,343,344,-273,-273,839,499,503,504,-439',
'-519,-519,-519,-519,-88,-519,-519,-519,-519,-519,-519,-519,-519,354',
'-521,355,-519,840,-519,-521,-519,416,500,418,-272,-439,-272,-521,-521',
'769,-513,141,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-272,-272,-272,-272,-521,-521,-521,-521',
'-521,-521,-521,685,686,-516,687,-516,-442,-521,-521,-521,32,39,-521',
'-521,-521,604,-521,-267,463,-442,156,159,161,163,465,-521,-521,-521',
'-521,-513,-273,-442,-442,141,322,325,328,330,333,335,338,340,-267,-267',
'-513,-442,604,528,757,377,332,141,921,-100,420,-273,-273,847,323,326',
'-521,874,-521,337,339,342,345,-538,-538,-538,-538,-538,-538,527,354',
'378,355,922,923,-452,-521,-252,476,-521,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-80,-268,850,-521,-521,-521,-268,-521',
'-452,-452,472,473,474,-439,-268,-268,541,-519,604,-268,-268,-268,-268',
'-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,-512',
'720,-439,-439,-268,-268,-268,-268,-268,-268,-268,-93,-453,141,-448,-512',
'-519,-268,-268,-268,505,506,-268,-268,-268,463,-268,156,159,161,163',
'465,-452,-445,604,-268,-268,-268,-268,-519,-448,-519,-519,769,719,711',
'322,325,328,330,333,335,338,340,-515,255,141,-452,-452,-445,463,-273',
'156,159,161,163,165,-303,678,332,-268,21,-268,30,544,44,50,323,326,168',
'256,257,702,-254,141,158,-273,-273,141,415,-268,862,-303,-303,-268,-268',
'-268,-268,-268,-268,-268,-268,-268,-268,-268,-268,154,8,458,-268,-268',
'-268,865,-268,416,417,61,67,71,448,133,677,673,665,99,105,897,655,649',
'25,-252,34,42,48,56,65,68,72,646,876,141,878,630,100,108,5,9,16,23,27',
'620,589,590,54,60,66,73,77,86,88,90,93,97,104,304,10,17,421,29,32,39',
'305,306,307,303,129,608,132,87,606,96,103,588,604,13,18,24,28,33,40',
'46,21,604,30,583,44,50,322,325,328,330,333,335,338,340,476,769,589,590',
'476,57,332,470,501,304,141,-65,141,580,323,326,305,306,307,303,577,576',
'8,604,472,473,520,492,472,473,541,61,67,71,526,133,524,523,522,99,105',
'-255,509,898,25,899,34,42,48,56,65,68,72,901,141,801,905,801,100,108',
'5,9,16,23,27,801,801,910,54,60,66,73,77,86,88,90,93,97,104,304,10,17',
'801,29,32,39,305,306,307,303,129,507,132,87,914,96,103,405,876,13,18',
'24,28,33,40,46,118,332,30,128,44,50,304,470,460,323,326,456,604,305',
'306,307,303,453,783,57,156,159,161,163,262,452,264,446,322,325,328,330',
'333,335,338,340,113,463,426,156,159,161,163,465,924,61,67,71,604,133',
'425,421,418,99,105,412,467,411,25,876,34,42,48,125,127,68,72,140,386',
'606,319,141,135,108,5,9,16,23,27,302,24,-515,54,60,66,73,77,86,88,90',
'93,97,104,112,10,17,-516,29,32,39,801,942,801,801,129,801,132,87,876',
'96,103,138,114,13,18,24,28,33,40,46,21,298,30,294,44,50,293,141,146',
'322,325,328,330,333,335,338,340,139,111,57,332,4,801,,,,141,,323,326',
',,,,,,8,463,,156,159,161,163,465,,61,67,71,80,133,,,,99,105,,467,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18',
'24,28,33,40,46,21,,30,,44,50,463,,156,159,161,163,465,,,,,,,57,,,,,492',
'467,,,322,325,328,330,333,335,338,340,8,463,,156,159,161,163,465,,61',
'67,71,80,84,,,,99,105,,467,,25,,34,42,48,56,65,68,72,,,,,,100,108,5',
'9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,322,325,328,330,333',
'335,338,340,,190,,198,203,,211,,,,,57,236,240,,,492,253,177,181,186',
'195,200,205,208,212,216,463,,156,159,161,163,465,,,,,651,,156,159,161',
'163,165,150,467,156,159,161,163,165,,,,,190,168,198,203,,211,155,158',
'168,,,236,240,155,158,,253,177,181,186,195,200,205,208,212,216,,,154',
',,162,939,487,,154,940,,162,655,,,,625,332,,217,220,,,,,323,326,,,254',
'337,339,342,345,320,321,324,327,329,331,334,336,341,343,344,,,,,180',
'184,189,193,197,202,207,210,214,218,128,926,479,,,927,,463,,156,159',
'161,163,465,,217,220,190,,198,203,,211,,,254,467,,236,240,,464,,253',
'177,181,186,195,200,205,208,212,216,,,180,184,189,193,197,202,207,210',
'214,218,128,,150,,156,159,161,163,165,322,325,328,330,333,335,338,340',
',,,,168,,,,,155,158,,,,322,325,328,330,333,335,338,340,,,463,,156,159',
'161,163,465,154,478,479,162,,483,,,625,,,,467,,,217,220,806,,,332,,118',
',30,254,44,50,323,326,,,,337,339,342,345,-538,-538,-538,-538,-538,-538',
',,180,184,189,193,197,202,207,210,214,218,128,,,113,,,,,,,,,61,67,71',
',133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132',
'87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,322,325,328,330,333',
'335,338,340,,,,,,57,,544,,463,,156,159,161,163,165,,,,,,,113,,,,,,168',
',,61,67,71,158,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,154,,,135',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,,,,,,,190',
',198,203,,211,,,,,,236,240,57,,405,253,177,181,186,195,200,205,208,212',
'216,,,463,,156,159,161,163,465,,,,,,150,,156,159,161,163,165,467,,,',
',464,,,190,,198,203,168,211,,,,155,158,236,240,,,,253,177,181,186,195',
'200,205,208,212,216,,,,,,154,732,487,162,,733,,,148,,,,,332,,217,220',
',,,,323,326,,,254,337,339,342,345,320,321,324,327,329,331,334,336,341',
'343,344,,,,,180,184,189,193,197,202,207,210,214,218,128,729,479,,,730',
',,,,,,,,,217,220,190,,198,203,,211,,,254,,,236,240,,,,253,177,181,186',
'195,200,205,208,212,216,,,180,184,189,193,197,202,207,210,214,218,128',
',651,,156,159,161,163,165,,,,,,,,,,,,,168,,,,,155,158,,,,322,325,328',
'330,333,335,338,340,,,150,,156,159,161,163,165,154,740,479,162,,742',
',,,,,,168,,,217,220,155,158,,,,118,,30,254,44,50,,,,,,,,,,,,154,,,162',
',,180,184,189,193,197,202,207,210,214,218,128,,,113,,,,,,,,,61,67,71',
',133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,129',
',132,87,,96,103,138,114,13,18,24,28,33,40,46,,,,,,,190,,198,203,,211',
',,,,,236,240,57,,128,253,177,181,186,195,200,205,208,212,216,,,,,,,',
',,,178,182,187,,,,,,,221,225,228,231,233,238,243,246,247,251,179,183',
'188,192,196,201,206,209,213,222,226,229,232,235,,,,248,252,176,393,394',
'395,396,204,,,397,398,400,227,77,402,241,90,93,404,104,,,,,,,,,217,220',
'190,,198,203,,211,,,254,,,236,240,,,,253,177,181,186,195,200,205,208',
'212,216,,,180,184,189,193,197,202,207,210,214,218,399,,651,,156,159',
'161,163,165,,,,,,,,,190,,198,203,168,211,,,,155,158,236,240,,,,253,177',
'181,186,195,200,205,208,212,216,,,,,,154,637,479,162,,638,,,,,,,,,,217',
'220,150,,156,159,161,163,165,,254,,,,,,,,,,,168,,,,,155,158,,,180,184',
'189,193,197,202,207,210,214,218,128,486,487,,,490,,,154,,,162,,,,217',
'220,190,,198,203,,211,,,254,,,236,240,,,,253,177,181,186,195,200,205',
'208,212,216,,,180,184,189,193,197,202,207,210,214,218,128,,150,,156',
'159,161,163,165,,,,,,,,,190,,198,203,168,211,,,,155,158,236,240,,,,253',
'177,181,186,195,200,205,208,212,216,,,,,,154,640,487,162,,641,,,,,,',
',,,217,220,150,,156,159,161,163,165,,254,,,,,,,,,,,168,,,,,155,158,',
',180,184,189,193,197,202,207,210,214,218,128,708,487,,,709,,,154,,,162',
',,,217,220,190,,198,203,,211,,,254,,,236,240,,,,253,177,181,186,195',
'200,205,208,212,216,,,180,184,189,193,197,202,207,210,214,218,128,,651',
',156,159,161,163,165,,,,,,,,,190,,198,203,168,211,,,,155,158,236,240',
',,,253,177,181,186,195,200,205,208,212,216,,,,,,154,705,479,162,,706',
',,,,,,,332,,217,220,,,,,323,326,,,254,337,339,342,345,-538,-538,-538',
'-538,-538,-538,,,,,,,,,,180,184,189,193,197,202,207,210,214,218,128',
'640,487,,,641,,,,,,,,,,217,220,190,,198,203,,211,,,254,,,236,240,,,',
'253,177,181,186,195,200,205,208,212,216,,,180,184,189,193,197,202,207',
'210,214,218,128,,150,,156,159,161,163,165,,,,,,,,,,,,,168,,,,,155,158',
',,,322,325,328,330,333,335,338,340,,,,,,,,,,154,637,479,162,,638,,,',
',,,,,,217,220,,,,,332,-513,,-513,254,-513,-513,,323,326,,,,337,339,342',
'345,-538,-538,-538,-538,-538,-538,,180,184,189,193,197,202,207,210,214',
'218,128,,,-513,,,,,,,,,-513,-513,-513,,-513,,,,-513,-513,,,,-513,,-513',
'-513,-513,-513,-513,-513,-513,,,,,,-513,-513,-513,-513,-513,-513,-513',
',,,-513,-513,-513,-513,-513,-513,-513,-513,-513,-513,-513,-513,-513',
'-513,,-513,-513,-513,,,,,-513,,-513,-513,,-513,-513,-513,-513,-513,-513',
'-513,-513,-513,-513,-513,118,,30,,44,50,-513,322,325,328,330,333,335',
'338,340,,,,,-513,,-513,,463,,156,159,161,163,165,,,,,,,113,,,,,,168',
',,61,67,71,158,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,154,,,135',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,,,,,,,190',
',198,203,,211,,,,,,236,240,57,,128,253,177,181,186,195,200,205,208,212',
'216,463,,156,159,161,163,165,463,,156,159,161,163,165,,,,,463,168,156',
'159,161,163,165,158,168,,,,,,158,,,,,168,,,,,,158,,,154,,,,,,,154,,',
',,,,,600,487,,154,601,,,,,,,,,,217,220,,,,332,,118,,30,254,44,50,323',
'326,,,,337,339,342,345,-538,-538,-538,-538,-538,-538,,,180,184,189,193',
'197,202,207,210,214,218,128,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,',
',25,,34,42,48,125,127,68,72,,,,,,135,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138',
'114,13,18,24,28,33,40,46,118,,30,,44,50,322,325,328,330,333,335,338',
'340,,,,,,57,,128,,463,,156,159,161,163,165,,,,,,,113,,,,,,168,,,61,67',
'71,158,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,154,,,135,108,5',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,,,,,,,190,,198',
'203,,211,,,,,,236,240,57,,128,253,177,181,186,195,200,205,208,212,216',
'463,,156,159,161,163,165,463,,156,159,161,163,165,,,,,,168,,,,,,158',
'168,,,,,,158,,,,,,,,,,,,,,154,,,,,,,154,,,,,,,,936,479,,,937,,,,,,,',
',,217,220,,,,,332,118,,30,254,44,50,,323,326,,,,337,339,342,345,320',
'321,324,327,329,331,334,180,184,189,193,197,202,207,210,214,218,128',
',,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72',
',143,,,,135,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112',
'10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46',
'118,,30,,44,50,144,322,325,328,330,333,335,338,340,,,,,57,,128,,,,,',
',,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
'112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40',
'46,,,,,,,190,,198,203,,211,,,,,,236,240,57,,128,253,177,181,186,195',
'200,205,208,212,216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,600,487,,,601,,,,,,,,,,217,220,,,190,,198,203,,211,254',
',,,,236,240,,,,253,177,181,186,195,200,205,208,212,216,180,184,189,193',
'197,202,207,210,214,218,178,182,187,,,,,,,221,225,228,231,233,238,243',
'246,247,251,179,183,188,192,196,201,206,209,213,222,226,229,232,235',
',,,248,252,176,185,191,194,199,204,,,215,219,224,227,,237,241,,,249',
',,,,,,,,,217,220,,358,21,,30,,44,50,254,,,18,,,,,,,,,,,,,,,,,180,184',
'189,193,197,202,207,210,214,218,8,,,,,,,,,61,67,71,80,133,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,364,87,,96,103,110',
',13,18,24,28,33,40,46,,,,,190,,198,203,,211,,,,,,236,240,,,57,253,177',
'181,186,195,200,205,208,212,216,,,,,,,,,,,178,182,187,,,,,,,221,225',
'228,231,233,238,243,246,247,251,179,183,188,192,196,201,206,209,213',
'222,226,229,232,235,,,,248,252,176,185,191,194,199,204,,,215,219,224',
'227,,237,241,242,244,249,250,,,,,,,,,217,220,,,190,,198,203,,211,254',
',,,,236,240,,,,253,177,181,186,195,200,205,208,212,216,180,184,189,193',
'197,202,207,210,214,218,178,182,187,,,,,,,221,225,228,231,233,238,243',
'246,247,251,179,183,188,192,196,201,206,209,213,222,226,229,232,235',
',,,248,252,176,185,191,194,199,204,,,215,219,224,227,,237,241,,,249',
',,,,,,,,,217,220,,358,21,332,30,,44,50,254,,,323,326,,,,337,339,342',
'345,320,321,324,327,329,331,,,180,184,189,193,197,202,207,210,214,218',
'8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30',
',44,50,,,322,325,328,330,333,335,338,340,,,57,,,,,,,,,,,,,,,,,,8,,,',
',,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44',
'50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110',
',13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13',
'18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,',
'8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,,,,,190,,198',
'203,,211,,,,,,236,240,,,57,253,177,181,186,195,200,205,208,212,216,',
',,,,,,,,,178,182,187,,,,,,,221,225,228,231,233,238,243,246,247,251,179',
'183,188,192,196,201,206,209,213,222,226,229,232,235,,,,248,252,176,185',
'191,194,199,204,,,215,219,224,227,,237,241,,,249,,,,,,,,,,217,220,,358',
'21,,30,,44,50,254,,,18,,,,,,,,,,,,,,,,,180,184,189,193,197,202,207,210',
'214,218,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13',
'18,24,28,33,40,46,,,,,190,,198,203,,211,,,,,,236,240,,,57,253,177,181',
'186,195,200,205,208,212,216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,600,487,,,601,,,,,,,,,,217,220,,358,21,,30,,44',
'50,254,,,,,,,,,,,,,,,,,,,,180,184,189,193,197,202,207,210,214,218,8',
',,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44',
'50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110',
',13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,364,87,,96,103,110,,13,18,24,28,33,40,46,358',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13',
'18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,',
'8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30',
',44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,',
'99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,364,87,,96,103,110,,13,18,24,28,33,40,46',
',,,,190,,198,203,,211,,,,,,236,240,,,57,253,177,181,186,195,200,205',
'208,212,216,,,,,,,,,,,178,182,187,,,,,,,221,225,228,231,233,238,243',
'246,247,251,179,183,188,192,196,201,206,209,213,222,226,229,232,235',
',,,248,252,176,185,191,194,199,204,,,215,219,224,227,,237,241,288,,249',
',,,,,,,,,217,220,,,190,,198,203,,211,254,,,18,,236,240,,,,253,177,181',
'186,195,200,205,208,212,216,180,184,189,193,197,202,207,210,214,218',
'178,182,187,,,,,,,221,225,228,231,233,238,243,246,247,251,179,183,188',
'192,196,201,206,209,213,222,226,229,232,235,,,,248,252,176,185,191,194',
'199,204,,,215,219,224,227,,237,241,,,249,,,,,,,,,,217,220,,358,21,,30',
',44,50,254,,,18,,,,,,,,,,,,,,,,,180,184,189,193,197,202,207,210,214',
'218,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,358',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,358,21,,30,,44,50,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,358,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,15,21,,30,,44,50,,,,',
',,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,84,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18',
'24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,',
',,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28',
'33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28',
'33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129',
',132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40',
'46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129',
',132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48',
'125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,777,,13,18,24,28',
'33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18',
'24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135',
'273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,',
'25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,636',
',13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,',
',113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,',
',,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,432,,13,18,24,28,33,40,46,21,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,',
'13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8',
',,,,,,,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,118,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103',
'138,114,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,',
',,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,',
'44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,',
'99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,',
'96,103,138,114,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,',
',,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125',
'127,68,72,,,,,,135,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28',
'33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129',
',132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48',
'125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132',
'87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125',
'127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40',
'46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129',
',132,87,,96,103,138,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,',
',,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42',
'48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28',
'33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24',
'28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273',
'269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25',
',34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18',
'24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,',
'34,42,48,125,127,68,72,,,,,,135,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,',
'30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,',
',99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96',
'103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,',
',,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68',
'72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,108,5,9,16,23,27,,',
',54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132',
'87,,96,103,138,114,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,',
'57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42',
'48,125,127,68,72,,,,,,135,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18',
'24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,',
',,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28',
'33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34',
'42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24',
'28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273',
'269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32',
'39,,,,,129,,132,87,,96,103,138,,13,18,24,28,33,40,46,118,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103',
'138,114,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,',
',,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,',
'44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103',
'110,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,',
',,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13',
'18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,',
',,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,',
'34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103,,114',
'13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,',
',,,135,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,129,,132,87,,96,103,138,114,13,18,24,28,33,40,46,21',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,',
',,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96',
'103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,',
',,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,',
',,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105',
',,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,129,,132,87,,96,103',
',,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,',
',,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72',
',,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112',
'10,17,,29,32,39,,,,,129,,132,87,,96,103,636,114,13,18,24,28,33,40,46',
'118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71',
',133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132',
'87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96',
'103,432,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,',
',,,,,,,,8,,,,,,,,,61,67,71,80,133,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96',
'103,432,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,21,',
'30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,133,,',
',99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87,,96',
'103,,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,',
',,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68',
'72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40,46,118',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133',
',,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132,87',
',96,103,636,,13,18,24,28,33,40,46,118,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125',
'127,68,72,,,,,,135,273,269,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,129,,132,87,,96,103,,,13,18,24,28,33,40',
'46,118,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,133,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,129,,132',
'87,,96,103,,,13,18,24,28,33,40,46,,,,,,,,332,,,,,,,,323,326,,,57,337',
'339,342,345,320,321,324,327,329,331,334,336,341,343,344,332,,,,,,,,323',
'326,,,,337,339,342,345,320,321,324,327,329,331,334,336,341,343,344,332',
',,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334,336,341',
'343,344,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331',
'334,336,341,343,344,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340',
',,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,',
',,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328',
'330,333,335,338,340,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324',
'327,329,331,334,336,341,343,344,332,,,,,,,,323,326,,,,337,339,342,345',
'320,321,324,327,329,331,334,336,341,343,344,332,,,,,,,,323,326,,,,337',
'339,342,345,320,321,324,327,329,331,334,336,341,343,344,332,,,,,,,,323',
'326,,,,337,339,342,345,320,321,324,327,329,331,334,336,341,343,344,',
',,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,,322',
'325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328,330,333',
'335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,332',
',,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334,336,-538',
'-538,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334',
'336,341,343,344,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327',
'329,331,334,336,341,343,344,332,,,,,,,,323,326,,,,337,339,342,345,320',
'321,324,327,329,331,334,336,-538,-538,,,,,,,,,,,,,,,,,,,322,325,328',
'330,333,335,338,340,,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340',
',,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,',
',,,,322,325,328,330,333,335,338,340,332,,,,,,,,323,326,,,,337,339,342',
'345,320,321,324,327,329,331,334,336,341,343,344,332,,,,,,,,323,326,',
',,337,339,342,345,320,321,324,327,329,331,334,336,341,343,344,332,,',
',,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334,336,341',
'343,344,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331',
'334,336,341,343,344,,760,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340',
',,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,',
',,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328',
'330,333,335,338,340,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324',
'327,329,331,334,336,341,343,344,332,760,,,,,,,323,326,,,,337,339,342',
'345,320,321,324,327,329,331,334,336,341,343,344,332,,,,,,,,323,326,',
',,337,339,342,345,320,321,324,327,329,331,334,336,341,343,344,332,,',
',,,,,323,326,,,,337,339,342,345,320,321,324,327,329,331,334,336,341',
'343,344,,662,,,,,,,,,,,,,,-232,322,325,328,330,333,335,338,340,,,,,',
',,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,,322',
'325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,,322,325,328,330,333',
'335,338,340,332,,,,,,,,323,326,,,,337,339,342,345,320,321,324,327,329',
'331,334,336,341,343,344,332,,,,,,,,323,326,,,,337,339,342,345,320,321',
'324,327,329,331,334,336,341,343,344,332,,,,,,,,323,326,,,,337,339,342',
'345,320,321,324,327,329,331,334,336,341,343,344,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,',
',,,277,,,,,322,325,328,330,333,335,338,340,,,,,,,,,,,,,,,,,,,,113,322',
'325,328,330,333,335,338,340,61,67,71,,133,,,,99,105,,,,25,,34,42,48',
'125,127,68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60,66,280,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,281,,132,87,,96,103,113,,13,18,24',
'28,33,40,46,61,67,71,,133,,,,99,105,512,,,25,,34,42,48,125,127,68,72',
',,,,,135,273,269,9,16,23,27,277,,,54,60,66,280,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,281,,132,87,,96,103,113,,13,18,24,28,33,40,46,61',
'67,71,,133,,,,99,105,408,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269',
'9,16,23,27,277,,,54,60,66,280,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,281,,282,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,133,,,,99',
'105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,277,',
'54,60,66,280,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,350,,82,87,',
'96,103,110,113,13,18,24,28,33,40,46,,61,67,71,,133,,,,99,105,,,,25,',
'34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,,277,,54,60,66,280',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,281,,282,87,,96,103,284,113',
'13,18,24,28,33,40,46,,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127',
'68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60,66,280,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,861,,132,87,,96,103,113,,13,18,24,28,33',
'40,46,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135',
'273,269,9,16,23,27,277,,,54,60,66,280,77,375,88,90,93,376,104,,10,17',
',29,32,39,,,,,372,,132,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71',
',133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23',
'27,,,,54,60,66,280,77,86,88,90,93,97,104,277,10,17,,29,32,39,374,,,',
'281,,282,87,,96,103,,,13,18,24,28,33,40,46,,,,,,113,,,,,,,,,61,67,71',
',133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23',
'27,277,,,54,60,66,280,77,375,88,90,93,376,104,,10,17,,29,32,39,,,,,372',
',132,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,133,,,,99,105,,',
',25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60',
'66,280,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,893,,132,87,,96,103',
'113,,13,18,24,28,33,40,46,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125',
'127,68,72,,,,,,135,273,269,9,16,23,27,277,,,54,60,66,280,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,281,,282,87,,96,103,113,,13,18,24,28',
'33,40,46,61,67,71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,',
'135,273,269,9,16,23,27,277,,,54,60,66,280,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,281,,282,87,,96,103,113,,13,18,24,28,33,40,46,61,67',
'71,,133,,,,99,105,,,,25,,34,42,48,125,127,68,72,,,,,,135,273,269,9,16',
'23,27,,,,54,60,66,280,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,281',
',282,87,,96,103,,,13,18,24,28,33,40,46' ]
        racc_action_table = arr = Array.new(23170, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'86,367,367,84,355,86,726,726,11,598,598,434,434,86,86,709,738,354,86',
'86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,143,392,86,86',
'86,86,86,86,86,373,651,144,709,624,624,86,86,86,266,266,86,86,86,349',
'86,151,165,392,373,11,773,773,86,86,86,86,86,470,372,571,288,150,372',
'486,486,319,319,571,571,288,288,165,571,571,571,571,571,571,571,571',
'571,571,571,571,571,571,571,829,86,8,86,355,165,367,8,709,738,151,726',
'598,733,598,651,434,354,559,349,709,86,38,38,709,86,86,86,86,86,86,86',
'86,86,86,86,86,143,479,683,86,86,86,479,86,84,150,84,144,348,729,479',
'479,732,837,624,479,479,479,479,479,479,479,479,479,479,479,479,479',
'479,479,479,479,486,470,319,733,479,479,479,479,479,479,479,490,490',
'270,373,680,373,479,479,479,694,694,479,479,479,940,479,571,571,571',
'571,571,571,571,571,479,479,479,479,348,729,822,571,732,837,693,38,64',
'64,822,822,729,679,553,822,822,822,822,822,822,822,822,822,822,822,822',
'822,822,822,550,479,270,479,559,559,559,559,559,559,559,559,308,576',
'594,698,594,270,716,675,22,479,22,674,479,479,479,479,479,479,479,479',
'479,479,479,479,479,672,638,490,479,479,479,638,479,940,734,940,694',
'882,948,638,638,846,934,934,638,638,638,638,638,638,638,638,638,638',
'638,638,638,638,638,638,638,638,638,64,576,638,638,638,638,638,638,638',
'313,703,317,308,317,308,638,638,638,704,394,638,638,638,297,638,822',
'822,822,822,822,822,822,822,638,638,638,638,553,553,553,553,553,553',
'553,553,394,734,865,734,865,865,865,865,550,550,550,550,550,550,550',
'550,267,939,882,948,882,948,846,638,846,638,716,716,716,716,716,716',
'716,716,670,730,936,668,746,313,746,313,395,638,717,382,268,638,638',
'638,638,638,638,638,638,638,638,638,638,707,483,382,638,638,638,483',
'638,297,395,297,268,268,667,483,483,268,666,383,483,483,483,483,483',
'483,483,483,483,483,483,483,483,483,483,383,483,483,483,663,730,483',
'483,483,483,483,483,267,939,267,939,730,637,712,483,483,483,637,701',
'701,483,483,661,483,936,637,637,936,660,936,637,637,637,637,637,637',
'637,637,637,637,637,637,637,637,637,637,637,637,637,44,44,637,637,637',
'637,637,637,637,885,365,885,365,519,396,637,637,637,483,718,637,637',
'637,721,637,717,717,717,717,717,717,717,717,637,637,637,637,519,519',
'301,396,722,483,483,483,483,483,483,483,483,483,483,483,483,827,659',
'347,483,558,483,725,483,519,723,397,657,558,558,637,388,637,558,558',
'558,558,558,558,558,558,558,558,347,347,641,641,388,708,400,637,827',
'397,637,637,637,637,637,637,637,637,637,637,637,637,637,656,478,759',
'637,637,637,478,637,827,400,827,827,728,742,478,478,708,740,759,478',
'478,478,478,478,478,478,478,478,478,478,478,478,478,478,723,478,478',
'478,742,742,478,478,478,478,478,478,654,891,723,652,723,742,740,478',
'478,478,626,731,626,478,478,647,478,301,301,301,301,301,301,301,301',
'478,891,891,265,740,639,740,740,708,640,640,558,558,558,558,558,558',
'558,558,740,708,425,425,557,708,635,509,265,265,265,275,557,557,59,59',
'478,557,557,557,557,557,557,557,557,557,557,557,557,557,557,557,509',
'509,735,271,275,275,402,478,478,478,478,478,478,478,478,478,478,478',
'478,478,79,482,79,478,736,478,482,478,271,271,633,706,402,937,482,482',
'632,376,629,482,482,482,482,482,482,482,482,482,482,482,482,482,482',
'482,482,482,706,706,937,937,482,482,482,482,482,482,482,473,473,706',
'473,937,376,482,482,482,473,473,482,482,482,618,482,276,806,404,806',
'806,806,806,806,482,482,482,482,376,924,376,376,743,557,557,557,557',
'557,557,557,557,276,276,376,404,745,299,607,91,556,584,890,122,122,924',
'924,752,556,556,482,806,482,556,556,556,556,556,556,556,556,556,556',
'299,375,91,375,890,890,892,482,755,223,482,482,482,482,482,482,482,482',
'482,482,482,482,482,582,88,758,482,482,482,88,482,892,892,223,223,223',
'375,88,88,543,705,542,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,375,529,375,375,88,88,88,88,88,88,88,126,126,764,398,375,705,88,88',
'88,277,277,88,88,88,464,88,464,464,464,464,464,279,393,766,88,88,88',
'88,705,398,705,705,768,528,511,556,556,556,556,556,556,556,556,705,19',
'510,279,279,393,797,593,797,797,797,797,797,107,464,564,88,140,88,140',
'508,140,140,564,564,797,19,19,497,776,484,797,593,593,469,117,88,779',
'107,107,88,88,88,88,88,88,88,88,88,88,88,88,797,140,465,88,88,88,784',
'88,117,117,140,140,140,463,140,462,459,448,140,140,860,445,435,140,430',
'140,140,140,140,140,140,140,428,808,422,811,407,140,140,140,140,140',
'140,140,391,860,860,140,140,140,140,140,140,140,140,140,140,140,52,140',
'140,390,140,140,140,52,52,52,52,140,381,140,140,380,140,140,368,824',
'140,140,140,140,140,140,140,70,379,70,363,70,70,564,564,564,564,564',
'564,564,564,292,828,368,368,274,140,566,690,274,739,360,359,140,357',
'566,566,739,739,739,739,351,350,70,844,292,292,292,316,274,274,315,70',
'70,70,298,70,296,295,293,70,70,859,281,861,70,863,70,70,70,70,70,70',
'70,864,280,867,868,869,70,70,70,70,70,70,70,870,871,872,70,70,70,70',
'70,70,70,70,70,70,70,362,70,70,873,70,70,70,362,362,362,362,70,278,70',
'70,875,70,70,273,877,70,70,70,70,70,70,70,405,569,405,269,405,405,581',
'174,166,569,569,160,887,581,581,581,581,153,655,70,655,655,655,655,70',
'152,70,149,566,566,566,566,566,566,566,566,405,874,136,874,874,874,874',
'874,893,405,405,405,896,405,129,124,119,405,405,116,874,115,405,913',
'405,405,405,405,405,405,405,113,101,920,74,73,405,405,405,405,405,405',
'405,51,47,926,405,405,405,405,405,405,405,405,405,405,405,405,405,405',
'927,405,405,405,928,929,930,931,405,932,405,405,933,405,405,405,405',
'405,405,405,405,405,405,405,586,46,586,43,586,586,40,938,12,569,569',
'569,569,569,569,569,569,7,4,405,572,1,949,,,,405,,572,572,,,,,,,586',
'876,,876,876,876,876,876,,586,586,586,586,586,,,,586,586,,876,,586,',
'586,586,586,586,586,586,586,,,,,,586,586,586,586,586,586,586,586,,586',
'586,586,586,586,586,586,586,586,586,586,586,,586,586,,586,586,586,,',
',,586,,586,586,,586,586,586,,586,586,586,586,586,586,586,263,,263,,263',
'263,678,,678,678,678,678,678,,,,,,,586,,,,,586,678,,,572,572,572,572',
'572,572,572,572,263,809,,809,809,809,809,809,,263,263,263,263,263,,',
',263,263,,809,,263,,263,263,263,263,263,263,263,,,,,,263,263,263,263',
'263,263,263,263,,263,263,263,263,263,263,263,263,263,263,263,263,,263',
'263,,263,263,263,,,,,263,,263,263,,263,263,263,,263,263,263,263,263',
'263,263,272,272,272,272,272,272,272,272,,923,,923,923,,923,,,,,263,923',
'923,,,263,923,923,923,923,923,923,923,923,923,923,914,,914,914,914,914',
'914,,,,,437,,437,437,437,437,437,762,914,762,762,762,762,762,,,,,897',
'437,897,897,,897,437,437,762,,,897,897,762,762,,897,897,897,897,897',
'897,897,897,897,897,,,437,,,437,923,923,,762,923,,762,437,,,,762,555',
',923,923,,,,,555,555,,,923,555,555,555,555,555,555,555,555,555,555,555',
'555,555,555,555,,,,,923,923,923,923,923,923,923,923,923,923,923,897',
'897,,,897,,168,,168,168,168,168,168,,897,897,255,,255,255,,255,,,897',
'168,,255,255,,168,,255,255,255,255,255,255,255,255,255,255,,,897,897',
'897,897,897,897,897,897,897,897,897,,401,,401,401,401,401,401,258,258',
'258,258,258,258,258,258,,,,,401,,,,,401,401,,,,555,555,555,555,555,555',
'555,555,,,677,,677,677,677,677,677,401,255,255,401,,255,,,401,,,,677',
',,255,255,677,,,554,,318,,318,255,318,318,554,554,,,,554,554,554,554',
'554,554,554,554,554,554,,,255,255,255,255,255,255,255,255,255,255,255',
',,318,,,,,,,,,318,318,318,,318,,,,318,318,,,,318,,318,318,318,318,318',
'318,318,,,,,,318,318,318,318,318,318,318,,,,318,318,318,318,318,318',
'318,318,318,318,318,,318,318,,318,318,318,,,,,318,,318,318,,318,318',
',,318,318,318,318,318,318,318,108,,108,,108,108,554,554,554,554,554',
'554,554,554,,,,,,318,,318,,804,,804,804,804,804,804,,,,,,,108,,,,,,804',
',,108,108,108,804,108,,,,108,108,,,,108,,108,108,108,108,108,108,108',
',,804,,,108,108,108,108,108,108,108,,,,108,108,108,108,108,108,108,108',
'108,108,108,108,108,108,,108,108,108,,,,,108,,108,108,,108,108,108,108',
'108,108,108,108,108,108,108,,,,,,,575,,575,575,,575,,,,,,575,575,108',
',108,575,575,575,575,575,575,575,575,575,575,,,467,,467,467,467,467',
'467,,,,,,13,,13,13,13,13,13,467,,,,,467,,,573,,573,573,13,573,,,,13',
'13,573,573,,,,573,573,573,573,573,573,573,573,573,573,,,,,,13,575,575',
'13,,575,,,13,,,,,552,,575,575,,,,,552,552,,,575,552,552,552,552,552',
'552,552,552,552,552,552,552,552,552,552,,,,,575,575,575,575,575,575',
'575,575,575,575,575,573,573,,,573,,,,,,,,,,573,573,588,,588,588,,588',
',,573,,,588,588,,,,588,588,588,588,588,588,588,588,588,588,,,573,573',
'573,573,573,573,573,573,573,573,573,,786,,786,786,786,786,786,,,,,,',
',,,,,,786,,,,,786,786,,,,552,552,552,552,552,552,552,552,,,799,,799',
'799,799,799,799,786,588,588,786,,588,,,,,,,799,,,588,588,799,799,,,',
'5,,5,588,5,5,,,,,,,,,,,,799,,,799,,,588,588,588,588,588,588,588,588',
'588,588,588,,,5,,,,,,,,,5,5,5,,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5',
'5,5,5,5,5,,,,5,5,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,,,,5,,5,5,,5,5,5,5',
'5,5,5,5,5,5,5,,,,,,,106,,106,106,,106,,,,,,106,106,5,,5,106,106,106',
'106,106,106,106,106,106,106,,,,,,,,,,,106,106,106,,,,,,,106,106,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,106,106,106,,,,106,106,106,106,106,106,106,106,,,106,106,106,106',
'106,106,106,106,106,106,106,,,,,,,,,106,106,415,,415,415,,415,,,106',
',,415,415,,,,415,415,415,415,415,415,415,415,415,415,,,106,106,106,106',
'106,106,106,106,106,106,106,,780,,780,780,780,780,780,,,,,,,,,257,,257',
'257,780,257,,,,780,780,257,257,,,,257,257,257,257,257,257,257,257,257',
'257,,,,,,780,415,415,780,,415,,,,,,,,,,415,415,148,,148,148,148,148',
'148,,415,,,,,,,,,,,148,,,,,148,148,,,415,415,415,415,415,415,415,415',
'415,415,415,257,257,,,257,,,148,,,148,,,,257,257,417,,417,417,,417,',
',257,,,417,417,,,,417,417,417,417,417,417,417,417,417,417,,,257,257',
'257,257,257,257,257,257,257,257,257,,625,,625,625,625,625,625,,,,,,',
',,504,,504,504,625,504,,,,625,625,504,504,,,,504,504,504,504,504,504',
'504,504,504,504,,,,,,625,417,417,625,,417,,,,,,,,,,417,417,453,,453',
'453,453,453,453,,417,,,,,,,,,,,453,,,,,453,453,,,417,417,417,417,417',
'417,417,417,417,417,417,504,504,,,504,,,453,,,453,,,,504,504,502,,502',
'502,,502,,,504,,,502,502,,,,502,502,502,502,502,502,502,502,502,502',
',,504,504,504,504,504,504,504,504,504,504,504,,899,,899,899,899,899',
'899,,,,,,,,,500,,500,500,899,500,,,,899,899,500,500,,,,500,500,500,500',
'500,500,500,500,500,500,,,,,,899,502,502,899,,502,,,,,,,,551,,502,502',
',,,,551,551,,,502,551,551,551,551,551,551,551,551,551,551,,,,,,,,,,502',
'502,502,502,502,502,502,502,502,502,502,500,500,,,500,,,,,,,,,,500,500',
'499,,499,499,,499,,,500,,,499,499,,,,499,499,499,499,499,499,499,499',
'499,499,,,500,500,500,500,500,500,500,500,500,500,500,,460,,460,460',
'460,460,460,,,,,,,,,,,,,460,,,,,460,460,,,,551,551,551,551,551,551,551',
'551,,,,,,,,,,460,499,499,460,,499,,,,,,,,,,499,499,,,,,548,97,,97,499',
'97,97,,548,548,,,,548,548,548,548,548,548,548,548,548,548,,499,499,499',
'499,499,499,499,499,499,499,499,,,97,,,,,,,,,97,97,97,,97,,,,97,97,',
',,97,,97,97,97,97,97,97,97,,,,,,97,97,97,97,97,97,97,,,,97,97,97,97',
'97,97,97,97,97,97,97,97,97,97,,97,97,97,,,,,97,,97,97,,97,97,97,97,97',
'97,97,97,97,97,97,485,,485,,485,485,97,548,548,548,548,548,548,548,548',
',,,,97,,97,,801,,801,801,801,801,801,,,,,,,485,,,,,,801,,,485,485,485',
'801,485,,,,485,485,,,,485,,485,485,485,485,485,485,485,,,801,,,485,485',
'485,485,485,485,485,,,,485,485,485,485,485,485,485,485,485,485,485,485',
'485,485,,485,485,485,,,,,485,,485,485,,485,485,485,485,485,485,485,485',
'485,485,485,,,,,,,590,,590,590,,590,,,,,,590,590,485,,485,590,590,590',
'590,590,590,590,590,590,590,456,,456,456,456,456,456,910,,910,910,910',
'910,910,,,,,788,456,788,788,788,788,788,456,910,,,,,,910,,,,,788,,,',
',,788,,,456,,,,,,,910,,,,,,,,590,590,,788,590,,,,,,,,,,590,590,,,,547',
',602,,602,590,602,602,547,547,,,,547,547,547,547,547,547,547,547,547',
'547,,,590,590,590,590,590,590,590,590,590,590,590,,,602,,,,,,,,,602',
'602,602,,602,,,,602,602,,,,602,,602,602,602,602,602,602,602,,,,,,602',
'602,602,602,602,602,602,,,,602,602,602,602,602,602,602,602,602,602,602',
'602,602,602,,602,602,602,,,,,602,,602,602,,602,602,602,602,602,602,602',
'602,602,602,602,477,,477,,477,477,547,547,547,547,547,547,547,547,,',
',,,602,,602,,942,,942,942,942,942,942,,,,,,,477,,,,,,942,,,477,477,477',
'942,477,,,,477,477,,,,477,,477,477,477,477,477,477,477,,,942,,,477,477',
'477,477,477,477,477,,,,477,477,477,477,477,477,477,477,477,477,477,477',
'477,477,,477,477,477,,,,,477,,477,477,,477,477,477,477,477,477,477,477',
'477,477,477,,,,,,,921,,921,921,,921,,,,,,921,921,477,,477,921,921,921',
'921,921,921,921,921,921,921,901,,901,901,901,901,901,905,,905,905,905',
'905,905,,,,,,901,,,,,,901,905,,,,,,905,,,,,,,,,,,,,,901,,,,,,,905,,',
',,,,,921,921,,,921,,,,,,,,,,921,921,,,,,563,14,,14,921,14,14,,563,563',
',,,563,563,563,563,563,563,563,563,563,563,563,921,921,921,921,921,921',
'921,921,921,921,921,,,14,,,,,,,,,14,14,14,,14,,,,14,14,,,,14,,14,14',
'14,14,14,14,14,,14,,,,14,14,14,14,14,14,14,,,,14,14,14,14,14,14,14,14',
'14,14,14,14,14,14,,14,14,14,,,,,14,,14,14,,14,14,14,14,14,14,14,14,14',
'14,14,599,,599,,599,599,14,563,563,563,563,563,563,563,563,,,,,14,,14',
',,,,,,,,,,,,,,599,,,,,,,,,599,599,599,,599,,,,599,599,,,,599,,599,599',
'599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,,,599,599,599',
'599,599,599,599,599,599,599,599,599,599,599,,599,599,599,,,,,599,,599',
'599,,599,599,599,599,599,599,599,599,599,599,599,,,,,,,377,,377,377',
',377,,,,,,377,377,599,,599,377,377,377,377,377,377,377,377,377,377,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,377,377',
',,377,,,,,,,,,,377,377,,,80,,80,80,,80,377,,,,,80,80,,,,80,80,80,80',
'80,80,80,80,80,80,377,377,377,377,377,377,377,377,377,377,80,80,80,',
',,,,,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80',
'80,80,80,,,,80,80,80,80,80,80,80,80,,,80,80,80,80,,80,80,,,80,,,,,,',
',,,80,80,,82,82,,82,,82,82,80,,,80,,,,,,,,,,,,,,,,,80,80,80,80,80,80',
'80,80,80,80,82,,,,,,,,,82,82,82,82,82,,,,82,82,,,,82,,82,82,82,82,82',
'82,82,,,,,,82,82,82,82,82,82,82,82,,82,82,82,82,82,82,82,82,82,82,82',
'82,,82,82,,82,82,82,,,,,82,,82,82,,82,82,82,,82,82,82,82,82,82,82,,',
',,18,,18,18,,18,,,,,,18,18,,,82,18,18,18,18,18,18,18,18,18,18,,,,,,',
',,,,18,18,18,,,,,,,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18',
'18,18,18,18,18,18,18,,,,18,18,18,18,18,18,18,18,,,18,18,18,18,,18,18',
'18,18,18,18,,,,,,,,,18,18,,,622,,622,622,,622,18,,,,,622,622,,,,622',
'622,622,622,622,622,622,622,622,622,18,18,18,18,18,18,18,18,18,18,622',
'622,622,,,,,,,622,622,622,622,622,622,622,622,622,622,622,622,622,622',
'622,622,622,622,622,622,622,622,622,622,,,,622,622,622,622,622,622,622',
'622,,,622,622,622,622,,622,622,,,622,,,,,,,,,,622,622,,472,472,561,472',
',472,472,622,,,561,561,,,,561,561,561,561,561,561,561,561,561,561,,',
'622,622,622,622,622,622,622,622,622,622,472,,,,,,,,,472,472,472,472',
'472,,,,472,472,,,,472,,472,472,472,472,472,472,472,,,,,,472,472,472',
'472,472,472,472,472,,472,472,472,472,472,472,472,472,472,472,472,472',
',472,472,,472,472,472,,,,,472,,472,472,,472,472,472,,472,472,472,472',
'472,472,472,627,627,,627,,627,627,,,561,561,561,561,561,561,561,561',
',,472,,,,,,,,,,,,,,,,,,627,,,,,,,,,627,627,627,627,627,,,,627,627,,',
',627,,627,627,627,627,627,627,627,,,,,,627,627,627,627,627,627,627,627',
',627,627,627,627,627,627,627,627,627,627,627,627,,627,627,,627,627,627',
',,,,627,,627,627,,627,627,627,,627,627,627,627,627,627,627,451,451,',
'451,,451,451,,,,,,,,,,,,,627,,,,,,,,,,,,,,,,,,451,,,,,,,,,451,451,451',
'451,451,,,,451,451,,,,451,,451,451,451,451,451,451,451,,,,,,451,451',
'451,451,451,451,451,451,,451,451,451,451,451,451,451,451,451,451,451',
'451,,451,451,,451,451,451,,,,,451,,451,451,,451,451,451,,451,451,451',
'451,451,451,451,450,450,,450,,450,450,,,,,,,,,,,,,451,,,,,,,,,,,,,,',
',,,450,,,,,,,,,450,450,450,450,450,,,,450,450,,,,450,,450,450,450,450',
'450,450,450,,,,,,450,450,450,450,450,450,450,450,,450,450,450,450,450',
'450,450,450,450,450,450,450,,450,450,,450,450,450,,,,,450,,450,450,',
'450,450,450,,450,450,450,450,450,450,450,95,95,,95,,95,95,,,,,,,,,,',
',,450,,,,,,,,,,,,,,,,,,95,,,,,,,,,95,95,95,95,95,,,,95,95,,,,95,,95',
'95,95,95,95,95,95,,,,,,95,95,95,95,95,95,95,95,,95,95,95,95,95,95,95',
'95,95,95,95,95,,95,95,,95,95,95,,,,,95,,95,95,,95,95,95,,95,95,95,95',
'95,95,95,442,442,,442,,442,442,,,,,,,,,,,,,95,,,,,,,,,,,,,,,,,,442,',
',,,,,,,442,442,442,442,442,,,,442,442,,,,442,,442,442,442,442,442,442',
'442,,,,,,442,442,442,442,442,442,442,442,,442,442,442,442,442,442,442',
'442,442,442,442,442,,442,442,,442,442,442,,,,,442,,442,442,,442,442',
'442,,442,442,442,442,442,442,442,495,495,,495,,495,495,,,,,,,,,,,,,442',
',,,,,,,,,,,,,,,,,495,,,,,,,,,495,495,495,495,495,,,,495,495,,,,495,',
'495,495,495,495,495,495,495,,,,,,495,495,495,495,495,495,495,495,,495',
'495,495,495,495,495,495,495,495,495,495,495,,495,495,,495,495,495,,',
',,495,,495,495,,495,495,495,,495,495,495,495,495,495,495,439,439,,439',
',439,439,,,,,,,,,,,,,495,,,,,,,,,,,,,,,,,,439,,,,,,,,,439,439,439,439',
'439,,,,439,439,,,,439,,439,439,439,439,439,439,439,,,,,,439,439,439',
'439,439,439,439,439,,439,439,439,439,439,439,439,439,439,439,439,439',
',439,439,,439,439,439,,,,,439,,439,439,,439,439,439,,439,439,439,439',
'439,439,439,915,915,,915,,915,915,,,,,,,,,,,,,439,,,,,,,,,,,,,,,,,,915',
',,,,,,,,915,915,915,915,915,,,,915,915,,,,915,,915,915,915,915,915,915',
'915,,,,,,915,915,915,915,915,915,915,915,,915,915,915,915,915,915,915',
'915,915,915,915,915,,915,915,,915,915,915,,,,,915,,915,915,,915,915',
'915,,915,915,915,915,915,915,915,,,,,513,,513,513,,513,,,,,,513,513',
',,915,513,513,513,513,513,513,513,513,513,513,,,,,,,,,,,513,513,513',
',,,,,,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513,513',
'513,513,513,513,513,513,513,513,,,,513,513,513,513,513,513,513,513,',
',513,513,513,513,,513,513,,,513,,,,,,,,,,513,513,,525,525,,525,,525',
'525,513,,,513,,,,,,,,,,,,,,,,,513,513,513,513,513,513,513,513,513,513',
'525,,,,,,,,,525,525,525,525,525,,,,525,525,,,,525,,525,525,525,525,525',
'525,525,,,,,,525,525,525,525,525,525,525,525,,525,525,525,525,525,525',
'525,525,525,525,525,525,,525,525,,525,525,525,,,,,525,,525,525,,525',
'525,525,,525,525,525,525,525,525,525,537,537,,537,,537,537,,,,,,,,,',
',,,525,,,,,,,,,,,,,,,,,,537,,,,,,,,,537,537,537,537,537,,,,537,537,',
',,537,,537,537,537,537,537,537,537,,,,,,537,537,537,537,537,537,537',
'537,,537,537,537,537,537,537,537,537,537,537,537,537,,537,537,,537,537',
'537,,,,,537,,537,537,,537,537,537,,537,537,537,537,537,537,537,540,540',
',540,,540,540,,,,,,,,,,,,,537,,,,,,,,,,,,,,,,,,540,,,,,,,,,540,540,540',
'540,540,,,,540,540,,,,540,,540,540,540,540,540,540,540,,,,,,540,540',
'540,540,540,540,540,540,,540,540,540,540,540,540,540,540,540,540,540',
'540,,540,540,,540,540,540,,,,,540,,540,540,,540,540,540,,540,540,540',
'540,540,540,540,578,578,,578,,578,578,,,,,,,,,,,,,540,,,,,,,,,,,,,,',
',,,578,,,,,,,,,578,578,578,578,578,,,,578,578,,,,578,,578,578,578,578',
'578,578,578,,,,,,578,578,578,578,578,578,578,578,,578,578,578,578,578',
'578,578,578,578,578,578,578,,578,578,,578,578,578,,,,,578,,578,578,',
'578,578,578,,578,578,578,578,578,578,578,387,387,,387,,387,387,,,,,',
',,,,,,,578,,,,,,,,,,,,,,,,,,387,,,,,,,,,387,387,387,387,387,,,,387,387',
',,,387,,387,387,387,387,387,387,387,,,,,,387,387,387,387,387,387,387',
'387,,387,387,387,387,387,387,387,387,387,387,387,387,,387,387,,387,387',
'387,,,,,387,,387,387,,387,387,387,,387,387,387,387,387,387,387,,,,,378',
',378,378,,378,,,,,,378,378,,,387,378,378,378,378,378,378,378,378,378',
'378,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,378',
'378,,,378,,,,,,,,,,378,378,,595,595,,595,,595,595,378,,,,,,,,,,,,,,',
',,,,,378,378,378,378,378,378,378,378,378,378,595,,,,,,,,,595,595,595',
'595,595,,,,595,595,,,,595,,595,595,595,595,595,595,595,,,,,,595,595',
'595,595,595,595,595,595,,595,595,595,595,595,595,595,595,595,595,595',
'595,,595,595,,595,595,595,,,,,595,,595,595,,595,595,595,,595,595,595',
'595,595,595,595,682,682,,682,,682,682,,,,,,,,,,,,,595,,,,,,,,,,,,,,',
',,,682,,,,,,,,,682,682,682,682,682,,,,682,682,,,,682,,682,682,682,682',
'682,682,682,,,,,,682,682,682,682,682,682,682,682,,682,682,682,682,682',
'682,682,682,682,682,682,682,,682,682,,682,682,682,,,,,682,,682,682,',
'682,682,682,,682,682,682,682,682,682,682,364,364,,364,,364,364,,,,,',
',,,,,,,682,,,,,,,,,,,,,,,,,,364,,,,,,,,,364,364,364,364,364,,,,364,364',
',,,364,,364,364,364,364,364,364,364,,,,,,364,364,364,364,364,364,364',
'364,,364,364,364,364,364,364,364,364,364,364,364,364,,364,364,,364,364',
'364,,,,,364,,364,364,,364,364,364,,364,364,364,364,364,364,364,833,833',
',833,,833,833,,,,,,,,,,,,,364,,,,,,,,,,,,,,,,,,833,,,,,,,,,833,833,833',
'833,833,,,,833,833,,,,833,,833,833,833,833,833,833,833,,,,,,833,833',
'833,833,833,833,833,833,,833,833,833,833,833,833,833,833,833,833,833',
'833,,833,833,,833,833,833,,,,,833,,833,833,,833,833,833,,833,833,833',
'833,833,833,833,838,838,,838,,838,838,,,,,,,,,,,,,833,,,,,,,,,,,,,,',
',,,838,,,,,,,,,838,838,838,838,838,,,,838,838,,,,838,,838,838,838,838',
'838,838,838,,,,,,838,838,838,838,838,838,838,838,,838,838,838,838,838',
'838,838,838,838,838,838,838,,838,838,,838,838,838,,,,,838,,838,838,',
'838,838,838,,838,838,838,838,838,838,838,579,579,,579,,579,579,,,,,',
',,,,,,,838,,,,,,,,,,,,,,,,,,579,,,,,,,,,579,579,579,579,579,,,,579,579',
',,,579,,579,579,579,579,579,579,579,,,,,,579,579,579,579,579,579,579',
'579,,579,579,579,579,579,579,579,579,579,579,579,579,,579,579,,579,579',
'579,,,,,579,,579,579,,579,579,579,,579,579,579,579,579,579,579,302,302',
',302,,302,302,,,,,,,,,,,,,579,,,,,,,,,,,,,,,,,,302,,,,,,,,,302,302,302',
'302,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,,,302,302',
'302,302,302,302,302,302,,302,302,302,302,302,302,302,302,302,302,302',
'302,,302,302,,302,302,302,,,,,302,,302,302,,302,302,302,,302,302,302',
'302,302,302,302,850,850,,850,,850,850,,,,,,,,,,,,,302,,,,,,,,,,,,,,',
',,,850,,,,,,,,,850,850,850,850,850,,,,850,850,,,,850,,850,850,850,850',
'850,850,850,,,,,,850,850,850,850,850,850,850,850,,850,850,850,850,850',
'850,850,850,850,850,850,850,,850,850,,850,850,850,,,,,850,,850,850,',
'850,850,850,,850,850,850,850,850,850,850,854,854,,854,,854,854,,,,,',
',,,,,,,850,,,,,,,,,,,,,,,,,,854,,,,,,,,,854,854,854,854,854,,,,854,854',
',,,854,,854,854,854,854,854,854,854,,,,,,854,854,854,854,854,854,854',
'854,,854,854,854,854,854,854,854,854,854,854,854,854,,854,854,,854,854',
'854,,,,,854,,854,854,,854,854,854,,854,854,854,854,854,854,854,282,282',
',282,,282,282,,,,,,,,,,,,,854,,,,,,,,,,,,,,,,,,282,,,,,,,,,282,282,282',
'282,282,,,,282,282,,,,282,,282,282,282,282,282,282,282,,,,,,282,282',
'282,282,282,282,282,282,,282,282,282,282,282,282,282,282,282,282,282',
'282,,282,282,,282,282,282,,,,,282,,282,282,,282,282,282,,282,282,282',
'282,282,282,282,,,,,36,,36,36,,36,,,,,,36,36,,,282,36,36,36,36,36,36',
'36,36,36,36,,,,,,,,,,,36,36,36,,,,,,,36,36,36,36,36,36,36,36,36,36,36',
'36,36,36,36,36,36,36,36,36,36,36,36,36,,,,36,36,36,36,36,36,36,36,,',
'36,36,36,36,,36,36,36,,36,,,,,,,,,,36,36,,,580,,580,580,,580,36,,,36',
',580,580,,,,580,580,580,580,580,580,580,580,580,580,36,36,36,36,36,36',
'36,36,36,36,580,580,580,,,,,,,580,580,580,580,580,580,580,580,580,580',
'580,580,580,580,580,580,580,580,580,580,580,580,580,580,,,,580,580,580',
'580,580,580,580,580,,,580,580,580,580,,580,580,,,580,,,,,,,,,,580,580',
',757,757,,757,,757,757,580,,,580,,,,,,,,,,,,,,,,,580,580,580,580,580',
'580,580,580,580,580,757,,,,,,,,,757,757,757,757,757,,,,757,757,,,,757',
',757,757,757,757,757,757,757,,,,,,757,757,757,757,757,757,757,757,,757',
'757,757,757,757,757,757,757,757,757,757,757,,757,757,,757,757,757,,',
',,757,,757,757,,757,757,757,,757,757,757,757,757,757,757,132,132,,132',
',132,132,,,,,,,,,,,,,757,,,,,,,,,,,,,,,,,,132,,,,,,,,,132,132,132,132',
'132,,,,132,132,,,,132,,132,132,132,132,132,132,132,,,,,,132,132,132',
'132,132,132,132,132,,132,132,132,132,132,132,132,132,132,132,132,132',
',132,132,,132,132,132,,,,,132,,132,132,,132,132,132,,132,132,132,132',
'132,132,132,747,747,,747,,747,747,,,,,,,,,,,,,132,,,,,,,,,,,,,,,,,,747',
',,,,,,,,747,747,747,747,747,,,,747,747,,,,747,,747,747,747,747,747,747',
'747,,,,,,747,747,747,747,747,747,747,747,,747,747,747,747,747,747,747',
'747,747,747,747,747,,747,747,,747,747,747,,,,,747,,747,747,,747,747',
'747,,747,747,747,747,747,747,747,889,889,,889,,889,889,,,,,,,,,,,,,747',
',,,,,,,,,,,,,,,,,889,,,,,,,,,889,889,889,889,889,,,,889,889,,,,889,',
'889,889,889,889,889,889,889,,,,,,889,889,889,889,889,889,889,889,,889',
'889,889,889,889,889,889,889,889,889,889,889,,889,889,,889,889,889,,',
',,889,,889,889,,889,889,889,,889,889,889,889,889,889,889,3,3,,3,,3,3',
',,,,,,,,,,,,889,,,,,,,,,,,,,,,,,,3,,,,,,,,,3,3,3,3,3,,,,3,3,,,,3,,3',
'3,3,3,3,3,3,,,,,,3,3,3,3,3,3,3,3,,3,3,3,3,3,3,3,3,3,3,3,3,,3,3,,3,3',
'3,,,,,3,,3,3,,3,3,3,,3,3,3,3,3,3,3,825,,825,,825,825,,,,,,,,,,,,,,3',
',,,,,,,,,,,,,,,,825,,,,,,,,,825,825,825,,825,,,,825,825,,,,825,,825',
'825,825,825,825,825,825,,,,,,825,825,825,825,825,825,825,,,,825,825',
'825,825,825,825,825,825,825,825,825,,825,825,,825,825,825,,,,,825,,825',
'825,,825,825,,,825,825,825,825,825,825,825,142,,142,,142,142,,,,,,,',
',,,,,,825,,,,,,,,,,,,,,,,,142,,,,,,,,,142,142,142,,142,,,,142,142,,',
',142,,142,142,142,142,142,142,142,,,,,,142,142,142,142,142,142,142,',
',,142,142,142,142,142,142,142,142,142,142,142,,142,142,,142,142,142',
',,,,142,,142,142,,142,142,,,142,142,142,142,142,142,142,692,,692,,692',
'692,,,,,,,,,,,,,,142,,,,,,,,,,,,,,,,,692,,,,,,,,,692,692,692,,692,,',
',692,692,,,,692,,692,692,692,692,692,692,692,,,,,,692,692,692,692,692',
'692,692,,,,692,692,692,692,692,692,692,692,692,692,692,,692,692,,692',
'692,692,,,,,692,,692,692,,692,692,,,692,692,692,692,692,692,692,699',
',699,,699,699,,,,,,,,,,,,,,692,,,,,,,,,,,,,,,,,699,,,,,,,,,699,699,699',
',699,,,,699,699,,,,699,,699,699,699,699,699,699,699,,,,,,699,699,699',
'699,699,699,699,,,,699,699,699,699,699,699,699,699,699,699,699,,699',
'699,,699,699,699,,,,,699,,699,699,,699,699,,,699,699,699,699,699,699',
'699,146,,146,,146,146,,,,,,,,,,,,,,699,,,,,,,,,,,,,,,,,146,,,,,,,,,146',
'146,146,,146,,,,146,146,,,,146,,146,146,146,146,146,146,146,,,,,,146',
'146,146,146,146,146,146,,,,146,146,146,146,146,146,146,146,146,146,146',
',146,146,,146,146,146,,,,,146,,146,146,,146,146,,,146,146,146,146,146',
'146,146,700,,700,,700,700,,,,,,,,,,,,,,146,,,,,,,,,,,,,,,,,700,,,,,',
',,,700,700,700,,700,,,,700,700,,,,700,,700,700,700,700,700,700,700,',
',,,,700,700,700,700,700,700,700,,,,700,700,700,700,700,700,700,700,700',
'700,700,,700,700,,700,700,700,,,,,700,,700,700,,700,700,,,700,700,700',
'700,700,700,700,662,,662,,662,662,,,,,,,,,,,,,,700,,,,,,,,,,,,,,,,,662',
',,,,,,,,662,662,662,,662,,,,662,662,,,,662,,662,662,662,662,662,662',
'662,,,,,,662,662,662,662,662,662,662,,,,662,662,662,662,662,662,662',
'662,662,662,662,,662,662,,662,662,662,,,,,662,,662,662,,662,662,,,662',
'662,662,662,662,662,662,646,,646,,646,646,,,,,,,,,,,,,,662,,,,,,,,,',
',,,,,,,646,,,,,,,,,646,646,646,,646,,,,646,646,,,,646,,646,646,646,646',
'646,646,646,,,,,,646,646,646,646,646,646,646,,,,646,646,646,646,646',
'646,646,646,646,646,646,,646,646,,646,646,646,,,,,646,,646,646,,646',
'646,646,,646,646,646,646,646,646,646,636,,636,,636,636,,,,,,,,,,,,,',
'646,,,,,,,,,,,,,,,,,636,,,,,,,,,636,636,636,,636,,,,636,636,,,,636,',
'636,636,636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,,636',
'636,636,636,636,636,636,636,636,636,636,,636,636,,636,636,636,,,,,636',
',636,636,,636,636,,,636,636,636,636,636,636,636,612,,612,,612,612,,',
',,,,,,,,,,,636,,,,,,,,,,,,,,,,,612,,,,,,,,,612,612,612,,612,,,,612,612',
',,,612,,612,612,612,612,612,612,612,,,,,,612,612,612,612,612,612,612',
',,,612,612,612,612,612,612,612,612,612,612,612,612,612,612,,612,612',
'612,,,,,612,,612,612,,612,612,,,612,612,612,612,612,612,612,138,,138',
',138,138,,,,,,,,,,,,,,612,,,,,,,,,,,,,,,,,138,,,,,,,,,138,138,138,,138',
',,,138,138,,,,138,,138,138,138,138,138,138,138,,,,,,138,138,138,138',
'138,138,138,,,,138,138,138,138,138,138,138,138,138,138,138,,138,138',
',138,138,138,,,,,138,,138,138,,138,138,,,138,138,138,138,138,138,138',
'609,,609,,609,609,,,,,,,,,,,,,,138,,,,,,,,,,,,,,,,,609,,,,,,,,,609,609',
'609,,609,,,,609,609,,,,609,,609,609,609,609,609,609,609,,,,,,609,609',
'609,609,609,609,609,,,,609,609,609,609,609,609,609,609,609,609,609,609',
'609,609,,609,609,609,,,,,609,,609,609,,609,609,609,,609,609,609,609',
'609,609,609,606,,606,,606,606,,,,,,,,,,,,,,609,,,,,,,,,,,,,,,,,606,',
',,,,,,,606,606,606,,606,,,,606,606,,,,606,,606,606,606,606,606,606,606',
',,,,,606,606,606,606,606,606,606,,,,606,606,606,606,606,606,606,606',
'606,606,606,,606,606,,606,606,606,,,,,606,,606,606,,606,606,606,,606',
'606,606,606,606,606,606,597,,597,,597,597,,,,,,,,,,,,,,606,,,,,,,,,',
',,,,,,,597,,,,,,,,,597,597,597,,597,,,,597,597,,,,597,,597,597,597,597',
'597,597,597,,,,,,597,597,597,597,597,597,597,,,,597,597,597,597,597',
'597,597,597,597,597,597,,597,597,,597,597,597,,,,,597,,597,597,,597',
'597,,,597,597,597,597,597,597,597,15,,15,,15,15,,,,,,,,,,,,,,597,,,',
',,,,,,,,,,,,,15,,,,,,,,,15,15,15,15,15,,,,15,15,,,,15,,15,15,15,15,15',
'15,15,,,,,,15,15,15,15,15,15,15,15,,15,15,15,15,15,15,15,15,15,15,15',
'15,,15,15,,15,15,15,,,,,15,,15,15,,15,15,15,,15,15,15,15,15,15,15,589',
',589,,589,589,,,,,,,,,,,,,,15,,,,,,,,,,,,,,,,,589,,,,,,,,,589,589,589',
',589,,,,589,589,,,,589,,589,589,589,589,589,589,589,,,,,,589,589,589',
'589,589,589,589,,,,589,589,589,589,589,589,589,589,589,589,589,589,589',
'589,,589,589,589,,,,,589,,589,589,,589,589,589,589,589,589,589,589,589',
'589,589,21,,21,,21,21,,,,,,,,,,,,,,589,,,,,,,,,,,,,,,,,21,,,,,,,,,21',
'21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,,21,21,21,21,21,21',
'21,,,,21,21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,,,,,21,,21,21',
',21,21,,,21,21,21,21,21,21,21,26,,26,,26,26,,,,,,,,,,,,,,21,,,,,,,,',
',,,,,,,,26,,,,,,,,,26,26,26,,26,,,,26,26,,,,26,,26,26,26,26,26,26,26',
',,,,,26,26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26,26,,26,26',
',26,26,26,,,,,26,,26,26,,26,26,,,26,26,26,26,26,26,26,256,,256,,256',
'256,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,256,,,,,,,,,256,256,256,,256,,,',
'256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256',
'256,256,,,,256,256,256,256,256,256,256,256,256,256,256,256,256,256,',
'256,256,256,,,,,256,,256,256,,256,256,256,256,256,256,256,256,256,256',
'256,30,,30,,30,30,,,,,,,,,,,,,,256,,,,,,,,,,,,,,,,,30,,,,,,,,,30,30',
'30,,30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30',
',,,30,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30,,,,,30,,30,30,',
'30,30,,,30,30,30,30,30,30,30,577,,577,,577,577,,,,,,,,,,,,,,30,,,,,',
',,,,,,,,,,,577,,,,,,,,,577,577,577,,577,,,,577,577,,,,577,,577,577,577',
'577,577,577,577,,,,,,577,577,577,577,577,577,577,,,,577,577,577,577',
'577,577,577,577,577,577,577,,577,577,,577,577,577,,,,,577,,577,577,',
'577,577,,,577,577,577,577,577,577,577,128,,128,,128,128,,,,,,,,,,,,',
',577,,,,,,,,,,,,,,,,,128,,,,,,,,,128,128,128,,128,,,,128,128,,,,128',
',128,128,128,128,128,128,128,,,,,,128,128,128,128,128,128,128,,,,128',
'128,128,128,128,128,128,128,128,128,128,128,128,128,,128,128,128,,,',
',128,,128,128,,128,128,128,128,128,128,128,128,128,128,128,574,,574',
',574,574,,,,,,,,,,,,,,128,,,,,,,,,,,,,,,,,574,,,,,,,,,574,574,574,,574',
',,,574,574,,,,574,,574,574,574,574,574,574,574,,,,,,574,574,574,574',
'574,574,574,,,,574,574,574,574,574,574,574,574,574,574,574,574,574,574',
',574,574,574,,,,,574,,574,574,,574,574,574,574,574,574,574,574,574,574',
'574,45,,45,,45,45,,,,,,,,,,,,,,574,,,,,,,,,,,,,,,,,45,,,,,,,,,45,45',
'45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45,45',
',,,45,45,45,45,45,45,45,45,45,45,45,,45,45,,45,45,45,,,,,45,,45,45,',
'45,45,,,45,45,45,45,45,45,45,546,,546,,546,546,,,,,,,,,,,,,,45,,,,,',
',,,,,,,,,,,546,,,,,,,,,546,546,546,,546,,,,546,546,,,,546,,546,546,546',
'546,546,546,546,,,,,,546,546,546,546,546,546,546,,,,546,546,546,546',
'546,546,546,546,546,546,546,,546,546,,546,546,546,,,,,546,,546,546,',
'546,546,,,546,546,546,546,546,546,546,544,,544,,544,544,,,,,,,,,,,,',
',546,,,,,,,,,,,,,,,,,544,,,,,,,,,544,544,544,,544,,,,544,544,,,,544',
',544,544,544,544,544,544,544,,,,,,544,544,544,544,544,544,544,,,,544',
'544,544,544,544,544,544,544,544,544,544,,544,544,,544,544,544,,,,,544',
',544,544,,544,544,,,544,544,544,544,544,544,544,760,,760,,760,760,,',
',,,,,,,,,,,544,,,,,,,,,,,,,,,,,760,,,,,,,,,760,760,760,,760,,,,760,760',
',,,760,,760,760,760,760,760,760,760,,,,,,760,760,760,760,760,760,760',
',,,760,760,760,760,760,760,760,760,760,760,760,,760,760,,760,760,760',
',,,,760,,760,760,,760,760,,,760,760,760,760,760,760,760,541,,541,,541',
'541,,,,,,,,,,,,,,760,,,,,,,,,,,,,,,,,541,,,,,,,,,541,541,541,,541,,',
',541,541,,,,541,,541,541,541,541,541,541,541,,,,,,541,541,541,541,541',
'541,541,,,,541,541,541,541,541,541,541,541,541,541,541,,541,541,,541',
'541,541,,,,,541,,541,541,,541,541,541,,541,541,541,541,541,541,541,50',
',50,,50,50,,,,,,,,,,,,,,541,,,,,,,,,,,,,,,,,50,,,,,,,,,50,50,50,,50',
',,,50,50,,,,50,,50,50,50,50,50,50,50,,,,,,50,50,50,50,50,50,50,,,,50',
'50,50,50,50,50,50,50,50,50,50,,50,50,,50,50,50,,,,,50,,50,50,,50,50',
',,50,50,50,50,50,50,50,524,,524,,524,524,,,,,,,,,,,,,,50,,,,,,,,,,,',
',,,,,524,,,,,,,,,524,524,524,,524,,,,524,524,,,,524,,524,524,524,524',
'524,524,524,,,,,,524,524,524,524,524,524,524,,,,524,524,524,524,524',
'524,524,524,524,524,524,,524,524,,524,524,524,,,,,524,,524,524,,524',
'524,,,524,524,524,524,524,524,524,523,,523,,523,523,,,,,,,,,,,,,,524',
',,,,,,,,,,,,,,,,523,,,,,,,,,523,523,523,,523,,,,523,523,,,,523,,523',
'523,523,523,523,523,523,,,,,,523,523,523,523,523,523,523,,,,523,523',
'523,523,523,523,523,523,523,523,523,,523,523,,523,523,523,,,,,523,,523',
'523,,523,523,,,523,523,523,523,523,523,523,772,,772,,772,772,,,,,,,',
',,,,,,523,,,,,,,,,,,,,,,,,772,,,,,,,,,772,772,772,,772,,,,772,772,,',
',772,,772,772,772,772,772,772,772,,,,,,772,772,772,772,772,772,772,',
',,772,772,772,772,772,772,772,772,772,772,772,,772,772,,772,772,772',
',,,,772,,772,772,,772,772,,,772,772,772,772,772,772,772,774,,774,,774',
'774,,,,,,,,,,,,,,772,,,,,,,,,,,,,,,,,774,,,,,,,,,774,774,774,,774,,',
',774,774,,,,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774',
'774,774,,,,774,774,774,774,774,774,774,774,774,774,774,,774,774,,774',
'774,774,,,,,774,,774,774,,774,774,,,774,774,774,774,774,774,774,53,',
'53,,53,53,,,,,,,,,,,,,,774,,,,,,,,,,,,,,,,,53,,,,,,,,,53,53,53,,53,',
',,53,53,,,,53,,53,53,53,53,53,53,53,,,,,,53,53,53,53,53,53,53,,,,53',
'53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53,,,,,53,,53,53,,53,53',
',,53,53,53,53,53,53,53,503,,503,,503,503,,,,,,,,,,,,,,53,,,,,,,,,,,',
',,,,,503,,,,,,,,,503,503,503,,503,,,,503,503,,,,503,,503,503,503,503',
'503,503,503,,,,,,503,503,503,503,503,503,503,,,,503,503,503,503,503',
'503,503,503,503,503,503,503,503,503,,503,503,503,,,,,503,,503,503,,503',
'503,503,503,503,503,503,503,503,503,503,56,,56,,56,56,,,,,,,,,,,,,,503',
',,,,,,,,,,,,,,,,56,,,,,,,,,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56',
'56,56,56,,,,,,56,56,56,56,56,56,56,,,,56,56,56,56,56,56,56,56,56,56',
'56,56,56,56,,56,56,56,,,,,56,,56,56,,56,56,56,56,56,56,56,56,56,56,56',
'57,,57,,57,57,,,,,,,,,,,,,,56,,,,,,,,,,,,,,,,,57,,,,,,,,,57,57,57,,57',
',,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57,57,,,,57',
'57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57,,,,,57,,57,57,,57,57',
',,57,57,57,57,57,57,57,775,,775,,775,775,,,,,,,,,,,,,,57,,,,,,,,,,,',
',,,,,775,,,,,,,,,775,775,775,,775,,,,775,775,,,,775,,775,775,775,775',
'775,775,775,,,,,,775,775,775,775,775,775,775,,,,775,775,775,775,775',
'775,775,775,775,775,775,,775,775,,775,775,775,,,,,775,,775,775,,775',
'775,,,775,775,775,775,775,775,775,63,,63,,63,63,,,,,,,,,,,,,,775,,,',
',,,,,,,,,,,,,63,,,,,,,,,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63',
'63,63,,,,,,63,63,63,63,63,63,63,,,,63,63,63,63,63,63,63,63,63,63,63',
',63,63,,63,63,63,,,,,63,,63,63,,63,63,,,63,63,63,63,63,63,63,777,,777',
',777,777,,,,,,,,,,,,,,63,,,,,,,,,,,,,,,,,777,,,,,,,,,777,777,777,,777',
',,,777,777,,,,777,,777,777,777,777,777,777,777,,,,,,777,777,777,777',
'777,777,777,,,,777,777,777,777,777,777,777,777,777,777,777,,777,777',
',777,777,777,,,,,777,,777,777,,777,777,,,777,777,777,777,777,777,777',
'65,,65,,65,65,,,,,,,,,,,,,,777,,,,,,,,,,,,,,,,,65,,,,,,,,,65,65,65,',
'65,,,,65,65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65,,',
',65,65,65,65,65,65,65,65,65,65,65,65,65,65,,65,65,65,,,,,65,,65,65,',
'65,65,65,65,65,65,65,65,65,65,65,922,,922,,922,922,,,,,,,,,,,,,,65,',
',,,,,,,,,,,,,,,922,,,,,,,,,922,922,922,,922,,,,922,922,,,,922,,922,922',
'922,922,922,922,922,,,,,,922,922,922,922,922,922,922,,,,922,922,922',
'922,922,922,922,922,922,922,922,922,922,922,,922,922,922,,,,,922,,922',
'922,,922,922,922,922,922,922,922,922,922,922,922,291,,291,,291,291,',
',,,,,,,,,,,,922,,,,,,,,,,,,,,,,,291,,,,,,,,,291,291,291,,291,,,,291',
'291,,,,291,,291,291,291,291,291,291,291,,,,,,291,291,291,291,291,291',
'291,,,,291,291,291,291,291,291,291,291,291,291,291,,291,291,,291,291',
'291,,,,,291,,291,291,,291,291,,,291,291,291,291,291,291,291,87,,87,',
'87,87,,,,,,,,,,,,,,291,,,,,,,,,,,,,,,,,87,,,,,,,,,87,87,87,,87,,,,87',
'87,,,,87,,87,87,87,87,87,87,87,,,,,,87,87,87,87,87,87,87,,,,87,87,87',
'87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,87,,87,87,,87,87,,,87,87',
'87,87,87,87,87,858,,858,,858,858,,,,,,,,,,,,,,87,,,,,,,,,,,,,,,,,858',
',,,,,,,,858,858,858,,858,,,,858,858,,,,858,,858,858,858,858,858,858',
'858,,,,,,858,858,858,858,858,858,858,,,,858,858,858,858,858,858,858',
'858,858,858,858,,858,858,,858,858,858,,,,,858,,858,858,,858,858,,,858',
'858,858,858,858,858,858,447,,447,,447,447,,,,,,,,,,,,,,858,,,,,,,,,',
',,,,,,,447,,,,,,,,,447,447,447,,447,,,,447,447,,,,447,,447,447,447,447',
'447,447,447,,,,,,447,447,447,447,447,447,447,,,,447,447,447,447,447',
'447,447,447,447,447,447,,447,447,,447,447,447,,,,,447,,447,447,,447',
'447,,,447,447,447,447,447,447,447,96,,96,,96,96,,,,,,,,,,,,,,447,,,',
',,,,,,,,,,,,,96,,,,,,,,,96,96,96,,96,,,,96,96,,,,96,,96,96,96,96,96',
'96,96,,,,,,96,96,96,96,96,96,96,,,,96,96,96,96,96,96,96,96,96,96,96',
'96,96,96,,96,96,96,,,,,96,,96,96,,96,96,96,,96,96,96,96,96,96,96,100',
',100,,100,100,,,,,,,,,,,,,,96,,,,,,,,,,,,,,,,,100,,,,,,,,,100,100,100',
',100,,,,100,100,,,,100,,100,100,100,100,100,100,100,,,,,,100,100,100',
'100,100,100,100,,,,100,100,100,100,100,100,100,100,100,100,100,100,100',
'100,,100,100,100,,,,,100,,100,100,,100,100,100,100,100,100,100,100,100',
'100,100,432,,432,,432,432,,,,,,,,,,,,,,100,,,,,,,,,,,,,,,,,432,,,,,',
',,,432,432,432,,432,,,,432,432,,,,432,,432,432,432,432,432,432,432,',
',,,,432,432,432,432,432,432,432,,,,432,432,432,432,432,432,432,432,432',
'432,432,,432,432,,432,432,432,,,,,432,,432,432,,432,432,,,432,432,432',
'432,432,432,432,426,,426,,426,426,,,,,,,,,,,,,,432,,,,,,,,,,,,,,,,,426',
',,,,,,,,426,426,426,,426,,,,426,426,,,,426,,426,426,426,426,426,426',
'426,,,,,,426,426,426,426,426,426,426,,,,426,426,426,426,426,426,426',
'426,426,426,426,,426,426,,426,426,426,,,,,426,,426,426,,426,426,,,426',
'426,426,426,426,426,426,421,,421,,421,421,,,,,,,,,,,,,,426,,,,,,,,,',
',,,,,,,421,,,,,,,,,421,421,421,,421,,,,421,421,,,,421,,421,421,421,421',
'421,421,421,,,,,,421,421,421,421,421,421,421,,,,421,421,421,421,421',
'421,421,421,421,421,421,,421,421,,421,421,421,,,,,421,,421,421,,421',
'421,,,421,421,421,421,421,421,421,420,,420,,420,420,,,,,,,,,,,,,,421',
',,,,,,,,,,,,,,,,420,,,,,,,,,420,420,420,,420,,,,420,420,,,,420,,420',
'420,420,420,420,420,420,,,,,,420,420,420,420,420,420,420,,,,420,420',
'420,420,420,420,420,420,420,420,420,,420,420,,420,420,420,,,,,420,,420',
'420,,420,420,,,420,420,420,420,420,420,420,303,,303,,303,303,,,,,,,',
',,,,,,420,,,,,,,,,,,,,,,,,303,,,,,,,,,303,303,303,,303,,,,303,303,,',
',303,,303,303,303,303,303,303,303,,,,,,303,303,303,303,303,303,303,',
',,303,303,303,303,303,303,303,303,303,303,303,,303,303,,303,303,303',
',,,,303,,303,303,,303,303,,,303,303,303,303,303,303,303,304,,304,,304',
'304,,,,,,,,,,,,,,303,,,,,,,,,,,,,,,,,304,,,,,,,,,304,304,304,304,304',
',,,304,304,,,,304,,304,304,304,304,304,304,304,,,,,,304,304,304,304',
'304,304,304,304,,304,304,304,304,304,304,304,304,304,304,304,304,,304',
'304,,304,304,304,,,,,304,,304,304,,304,304,304,,304,304,304,304,304',
'304,304,305,,305,,305,305,,,,,,,,,,,,,,304,,,,,,,,,,,,,,,,,305,,,,,',
',,,305,305,305,,305,,,,305,305,,,,305,,305,305,305,305,305,305,305,',
',,,,305,305,305,305,305,305,305,,,,305,305,305,305,305,305,305,305,305',
'305,305,,305,305,,305,305,305,,,,,305,,305,305,,305,305,,,305,305,305',
'305,305,305,305,306,,306,,306,306,,,,,,,,,,,,,,305,,,,,,,,,,,,,,,,,306',
',,,,,,,,306,306,306,,306,,,,306,306,,,,306,,306,306,306,306,306,306',
'306,,,,,,306,306,306,306,306,306,306,,,,306,306,306,306,306,306,306',
'306,306,306,306,,306,306,,306,306,306,,,,,306,,306,306,,306,306,,,306',
'306,306,306,306,306,306,307,,307,,307,307,,,,,,,,,,,,,,306,,,,,,,,,',
',,,,,,,307,,,,,,,,,307,307,307,,307,,,,307,307,,,,307,,307,307,307,307',
'307,307,307,,,,,,307,307,307,307,307,307,307,,,,307,307,307,307,307',
'307,307,307,307,307,307,,307,307,,307,307,307,,,,,307,,307,307,,307',
'307,,,307,307,307,307,307,307,307,418,,418,,418,418,,,,,,,,,,,,,,307',
',,,,,,,,,,,,,,,,418,,,,,,,,,418,418,418,,418,,,,418,418,,,,418,,418',
'418,418,418,418,418,418,,,,,,418,418,418,418,418,418,418,,,,418,418',
'418,418,418,418,418,418,418,418,418,418,418,418,,418,418,418,,,,,418',
',418,418,,418,418,,418,418,418,418,418,418,418,418,416,,416,,416,416',
',,,,,,,,,,,,,418,,,,,,,,,,,,,,,,,416,,,,,,,,,416,416,416,,416,,,,416',
'416,,,,416,,416,416,416,416,416,416,416,,,,,,416,416,416,416,416,416',
'416,,,,416,416,416,416,416,416,416,416,416,416,416,416,416,416,,416',
'416,416,,,,,416,,416,416,,416,416,416,416,416,416,416,416,416,416,416',
'311,,311,,311,311,,,,,,,,,,,,,,416,,,,,,,,,,,,,,,,,311,,,,,,,,,311,311',
'311,,311,,,,311,311,,,,311,,311,311,311,311,311,311,311,,,,,,311,311',
'311,311,311,311,311,,,,311,311,311,311,311,311,311,311,311,311,311,',
'311,311,,311,311,311,,,,,311,,311,311,,311,311,,,311,311,311,311,311',
'311,311,312,,312,,312,312,,,,,,,,,,,,,,311,,,,,,,,,,,,,,,,,312,,,,,',
',,,312,312,312,,312,,,,312,312,,,,312,,312,312,312,312,312,312,312,',
',,,,312,312,312,312,312,312,312,,,,312,312,312,312,312,312,312,312,312',
'312,312,,312,312,,312,312,312,,,,,312,,312,312,,312,312,,,312,312,312',
'312,312,312,312,103,,103,,103,103,,,,,,,,,,,,,,312,,,,,,,,,,,,,,,,,103',
',,,,,,,,103,103,103,,103,,,,103,103,,,,103,,103,103,103,103,103,103',
'103,,,,,,103,103,103,103,103,103,103,,,,103,103,103,103,103,103,103',
'103,103,103,103,103,103,103,,103,103,103,,,,,103,,103,103,,103,103,',
',103,103,103,103,103,103,103,412,,412,,412,412,,,,,,,,,,,,,,103,,,,',
',,,,,,,,,,,,412,,,,,,,,,412,412,412,,412,,,,412,412,,,,412,,412,412',
'412,412,412,412,412,,,,,,412,412,412,412,412,412,412,,,,412,412,412',
'412,412,412,412,412,412,412,412,412,412,412,,412,412,412,,,,,412,,412',
'412,,412,412,412,412,412,412,412,412,412,412,412,411,,411,,411,411,',
',,,,,,,,,,,,412,,,,,,,,,,,,,,,,,411,,,,,,,,,411,411,411,,411,,,,411',
'411,,,,411,,411,411,411,411,411,411,411,,,,,,411,411,411,411,411,411',
'411,,,,411,411,411,411,411,411,411,411,411,411,411,,411,411,,411,411',
'411,,,,,411,,411,411,,411,411,,,411,411,411,411,411,411,411,399,,399',
',399,399,,,,,,,,,,,,,,411,,,,,,,,,,,,,,,,,399,,,,,,,,,399,399,399,,399',
',,,399,399,,,,399,,399,399,399,399,399,399,399,,,,,,399,399,399,399',
'399,399,399,,,,399,399,399,399,399,399,399,399,399,399,399,,399,399',
',399,399,399,,,,,399,,399,399,,399,399,,,399,399,399,399,399,399,399',
'118,,118,,118,118,,,,,,,,,,,,,,399,,,,,,,,,,,,,,,,,118,,,,,,,,,118,118',
'118,,118,,,,118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118',
'118,118,118,118,118,,,,118,118,118,118,118,118,118,118,118,118,118,',
'118,118,,118,118,118,,,,,118,,118,118,,118,118,,,118,118,118,118,118',
'118,118,818,,818,,818,818,,,,,,,,,,,,,,118,,,,,,,,,,,,,,,,,818,,,,,',
',,,818,818,818,,818,,,,818,818,,,,818,,818,818,818,818,818,818,818,',
',,,,818,818,818,818,818,818,818,,,,818,818,818,818,818,818,818,818,818',
'818,818,,818,818,,818,818,818,,,,,818,,818,818,,818,818,,,818,818,818',
'818,818,818,818,320,,320,,320,320,,,,,,,,,,,,,,818,,,,,,,,,,,,,,,,,320',
',,,,,,,,320,320,320,,320,,,,320,320,,,,320,,320,320,320,320,320,320',
'320,,,,,,320,320,320,320,320,320,320,,,,320,320,320,320,320,320,320',
'320,320,320,320,,320,320,,320,320,320,,,,,320,,320,320,,320,320,,,320',
'320,320,320,320,320,320,321,,321,,321,321,,,,,,,,,,,,,,320,,,,,,,,,',
',,,,,,,321,,,,,,,,,321,321,321,,321,,,,321,321,,,,321,,321,321,321,321',
'321,321,321,,,,,,321,321,321,321,321,321,321,,,,321,321,321,321,321',
'321,321,321,321,321,321,,321,321,,321,321,321,,,,,321,,321,321,,321',
'321,,,321,321,321,321,321,321,321,322,,322,,322,322,,,,,,,,,,,,,,321',
',,,,,,,,,,,,,,,,322,,,,,,,,,322,322,322,,322,,,,322,322,,,,322,,322',
'322,322,322,322,322,322,,,,,,322,322,322,322,322,322,322,,,,322,322',
'322,322,322,322,322,322,322,322,322,,322,322,,322,322,322,,,,,322,,322',
'322,,322,322,,,322,322,322,322,322,322,322,323,,323,,323,323,,,,,,,',
',,,,,,322,,,,,,,,,,,,,,,,,323,,,,,,,,,323,323,323,,323,,,,323,323,,',
',323,,323,323,323,323,323,323,323,,,,,,323,323,323,323,323,323,323,',
',,323,323,323,323,323,323,323,323,323,323,323,,323,323,,323,323,323',
',,,,323,,323,323,,323,323,,,323,323,323,323,323,323,323,324,,324,,324',
'324,,,,,,,,,,,,,,323,,,,,,,,,,,,,,,,,324,,,,,,,,,324,324,324,,324,,',
',324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324',
'324,324,,,,324,324,324,324,324,324,324,324,324,324,324,,324,324,,324',
'324,324,,,,,324,,324,324,,324,324,,,324,324,324,324,324,324,324,325',
',325,,325,325,,,,,,,,,,,,,,324,,,,,,,,,,,,,,,,,325,,,,,,,,,325,325,325',
',325,,,,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325',
'325,325,325,325,,,,325,325,325,325,325,325,325,325,325,325,325,,325',
'325,,325,325,325,,,,,325,,325,325,,325,325,,,325,325,325,325,325,325',
'325,326,,326,,326,326,,,,,,,,,,,,,,325,,,,,,,,,,,,,,,,,326,,,,,,,,,326',
'326,326,,326,,,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326',
'326,326,326,326,326,326,,,,326,326,326,326,326,326,326,326,326,326,326',
',326,326,,326,326,326,,,,,326,,326,326,,326,326,,,326,326,326,326,326',
'326,326,327,,327,,327,327,,,,,,,,,,,,,,326,,,,,,,,,,,,,,,,,327,,,,,',
',,,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327,327,327,327,',
',,,,327,327,327,327,327,327,327,,,,327,327,327,327,327,327,327,327,327',
'327,327,,327,327,,327,327,327,,,,,327,,327,327,,327,327,,,327,327,327',
'327,327,327,327,328,,328,,328,328,,,,,,,,,,,,,,327,,,,,,,,,,,,,,,,,328',
',,,,,,,,328,328,328,,328,,,,328,328,,,,328,,328,328,328,328,328,328',
'328,,,,,,328,328,328,328,328,328,328,,,,328,328,328,328,328,328,328',
'328,328,328,328,,328,328,,328,328,328,,,,,328,,328,328,,328,328,,,328',
'328,328,328,328,328,328,329,,329,,329,329,,,,,,,,,,,,,,328,,,,,,,,,',
',,,,,,,329,,,,,,,,,329,329,329,,329,,,,329,329,,,,329,,329,329,329,329',
'329,329,329,,,,,,329,329,329,329,329,329,329,,,,329,329,329,329,329',
'329,329,329,329,329,329,,329,329,,329,329,329,,,,,329,,329,329,,329',
'329,,,329,329,329,329,329,329,329,330,,330,,330,330,,,,,,,,,,,,,,329',
',,,,,,,,,,,,,,,,330,,,,,,,,,330,330,330,,330,,,,330,330,,,,330,,330',
'330,330,330,330,330,330,,,,,,330,330,330,330,330,330,330,,,,330,330',
'330,330,330,330,330,330,330,330,330,,330,330,,330,330,330,,,,,330,,330',
'330,,330,330,,,330,330,330,330,330,330,330,331,,331,,331,331,,,,,,,',
',,,,,,330,,,,,,,,,,,,,,,,,331,,,,,,,,,331,331,331,,331,,,,331,331,,',
',331,,331,331,331,331,331,331,331,,,,,,331,331,331,331,331,331,331,',
',,331,331,331,331,331,331,331,331,331,331,331,,331,331,,331,331,331',
',,,,331,,331,331,,331,331,,,331,331,331,331,331,331,331,332,,332,,332',
'332,,,,,,,,,,,,,,331,,,,,,,,,,,,,,,,,332,,,,,,,,,332,332,332,,332,,',
',332,332,,,,332,,332,332,332,332,332,332,332,,,,,,332,332,332,332,332',
'332,332,,,,332,332,332,332,332,332,332,332,332,332,332,,332,332,,332',
'332,332,,,,,332,,332,332,,332,332,,,332,332,332,332,332,332,332,333',
',333,,333,333,,,,,,,,,,,,,,332,,,,,,,,,,,,,,,,,333,,,,,,,,,333,333,333',
',333,,,,333,333,,,,333,,333,333,333,333,333,333,333,,,,,,333,333,333',
'333,333,333,333,,,,333,333,333,333,333,333,333,333,333,333,333,,333',
'333,,333,333,333,,,,,333,,333,333,,333,333,,,333,333,333,333,333,333',
'333,334,,334,,334,334,,,,,,,,,,,,,,333,,,,,,,,,,,,,,,,,334,,,,,,,,,334',
'334,334,,334,,,,334,334,,,,334,,334,334,334,334,334,334,334,,,,,,334',
'334,334,334,334,334,334,,,,334,334,334,334,334,334,334,334,334,334,334',
',334,334,,334,334,334,,,,,334,,334,334,,334,334,,,334,334,334,334,334',
'334,334,335,,335,,335,335,,,,,,,,,,,,,,334,,,,,,,,,,,,,,,,,335,,,,,',
',,,335,335,335,,335,,,,335,335,,,,335,,335,335,335,335,335,335,335,',
',,,,335,335,335,335,335,335,335,,,,335,335,335,335,335,335,335,335,335',
'335,335,,335,335,,335,335,335,,,,,335,,335,335,,335,335,,,335,335,335',
'335,335,335,335,336,,336,,336,336,,,,,,,,,,,,,,335,,,,,,,,,,,,,,,,,336',
',,,,,,,,336,336,336,,336,,,,336,336,,,,336,,336,336,336,336,336,336',
'336,,,,,,336,336,336,336,336,336,336,,,,336,336,336,336,336,336,336',
'336,336,336,336,,336,336,,336,336,336,,,,,336,,336,336,,336,336,,,336',
'336,336,336,336,336,336,337,,337,,337,337,,,,,,,,,,,,,,336,,,,,,,,,',
',,,,,,,337,,,,,,,,,337,337,337,,337,,,,337,337,,,,337,,337,337,337,337',
'337,337,337,,,,,,337,337,337,337,337,337,337,,,,337,337,337,337,337',
'337,337,337,337,337,337,,337,337,,337,337,337,,,,,337,,337,337,,337',
'337,,,337,337,337,337,337,337,337,338,,338,,338,338,,,,,,,,,,,,,,337',
',,,,,,,,,,,,,,,,338,,,,,,,,,338,338,338,,338,,,,338,338,,,,338,,338',
'338,338,338,338,338,338,,,,,,338,338,338,338,338,338,338,,,,338,338',
'338,338,338,338,338,338,338,338,338,,338,338,,338,338,338,,,,,338,,338',
'338,,338,338,,,338,338,338,338,338,338,338,339,,339,,339,339,,,,,,,',
',,,,,,338,,,,,,,,,,,,,,,,,339,,,,,,,,,339,339,339,,339,,,,339,339,,',
',339,,339,339,339,339,339,339,339,,,,,,339,339,339,339,339,339,339,',
',,339,339,339,339,339,339,339,339,339,339,339,,339,339,,339,339,339',
',,,,339,,339,339,,339,339,,,339,339,339,339,339,339,339,340,,340,,340',
'340,,,,,,,,,,,,,,339,,,,,,,,,,,,,,,,,340,,,,,,,,,340,340,340,,340,,',
',340,340,,,,340,,340,340,340,340,340,340,340,,,,,,340,340,340,340,340',
'340,340,,,,340,340,340,340,340,340,340,340,340,340,340,,340,340,,340',
'340,340,,,,,340,,340,340,,340,340,,,340,340,340,340,340,340,340,341',
',341,,341,341,,,,,,,,,,,,,,340,,,,,,,,,,,,,,,,,341,,,,,,,,,341,341,341',
',341,,,,341,341,,,,341,,341,341,341,341,341,341,341,,,,,,341,341,341',
'341,341,341,341,,,,341,341,341,341,341,341,341,341,341,341,341,,341',
'341,,341,341,341,,,,,341,,341,341,,341,341,,,341,341,341,341,341,341',
'341,342,,342,,342,342,,,,,,,,,,,,,,341,,,,,,,,,,,,,,,,,342,,,,,,,,,342',
'342,342,,342,,,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342',
'342,342,342,342,342,342,,,,342,342,342,342,342,342,342,342,342,342,342',
',342,342,,342,342,342,,,,,342,,342,342,,342,342,,,342,342,342,342,342',
'342,342,343,,343,,343,343,,,,,,,,,,,,,,342,,,,,,,,,,,,,,,,,343,,,,,',
',,,343,343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343,343,',
',,,,343,343,343,343,343,343,343,,,,343,343,343,343,343,343,343,343,343',
'343,343,,343,343,,343,343,343,,,,,343,,343,343,,343,343,,,343,343,343',
'343,343,343,343,344,,344,,344,344,,,,,,,,,,,,,,343,,,,,,,,,,,,,,,,,344',
',,,,,,,,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344,344',
'344,,,,,,344,344,344,344,344,344,344,,,,344,344,344,344,344,344,344',
'344,344,344,344,,344,344,,344,344,344,,,,,344,,344,344,,344,344,,,344',
'344,344,344,344,344,344,345,,345,,345,345,,,,,,,,,,,,,,344,,,,,,,,,',
',,,,,,,345,,,,,,,,,345,345,345,,345,,,,345,345,,,,345,,345,345,345,345',
'345,345,345,,,,,,345,345,345,345,345,345,345,,,,345,345,345,345,345',
'345,345,345,345,345,345,,345,345,,345,345,345,,,,,345,,345,345,,345',
'345,,,345,345,345,345,345,345,345,386,,386,,386,386,,,,,,,,,,,,,,345',
',,,,,,,,,,,,,,,,386,,,,,,,,,386,386,386,,386,,,,386,386,,,,386,,386',
'386,386,386,386,386,386,,,,,,386,386,386,386,386,386,386,,,,386,386',
'386,386,386,386,386,386,386,386,386,,386,386,,386,386,386,,,,,386,,386',
'386,,386,386,386,,386,386,386,386,386,386,386,358,,358,,358,358,,,,',
',,,,,,,,,386,,,,,,,,,,,,,,,,,358,,,,,,,,,358,358,358,358,358,,,,358',
'358,,,,358,,358,358,358,358,358,358,358,,,,,,358,358,358,358,358,358',
'358,358,,358,358,358,358,358,358,358,358,358,358,358,358,,358,358,,358',
'358,358,,,,,358,,358,358,,358,358,358,,358,358,358,358,358,358,358,139',
',139,,139,139,,,,,,,,,,,,,,358,,,,,,,,,,,,,,,,,139,,,,,,,,,139,139,139',
',139,,,,139,139,,,,139,,139,139,139,139,139,139,139,,,,,,139,139,139',
'139,139,139,139,,,,139,139,139,139,139,139,139,139,139,139,139,,139',
'139,,139,139,139,,,,,139,,139,139,,139,139,139,,139,139,139,139,139',
'139,139,112,,112,,112,112,,,,,,,,,,,,,,139,,,,,,,,,,,,,,,,,112,,,,,',
',,,112,112,112,,112,,,,112,112,,,,112,,112,112,112,112,112,112,112,',
',,,,112,112,112,112,112,112,112,,,,112,112,112,112,112,112,112,112,112',
'112,112,,112,112,,112,112,112,,,,,112,,112,112,,112,112,,,112,112,112',
'112,112,112,112,374,,374,,374,374,,,,,,,,,,,,,,112,,,,,,,,,,,,,,,,,374',
',,,,,,,,374,374,374,,374,,,,374,374,,,,374,,374,374,374,374,374,374',
'374,,,,,,374,374,374,374,374,374,374,,,,374,374,374,374,374,374,374',
'374,374,374,374,,374,374,,374,374,374,,,,,374,,374,374,,374,374,,,374',
'374,374,374,374,374,374,114,,114,,114,114,,,,,,,,,,,,,,374,,,,,,,,,',
',,,,,,,114,,,,,,,,,114,114,114,,114,,,,114,114,,,,114,,114,114,114,114',
'114,114,114,,,,,,114,114,114,114,114,114,114,,,,114,114,114,114,114',
'114,114,114,114,114,114,,114,114,,114,114,114,,,,,114,,114,114,,114',
'114,,,114,114,114,114,114,114,114,832,,832,,832,832,,,,,,,,,,,,,,114',
',,,,,,,,,,,,,,,,832,,,,,,,,,832,832,832,,832,,,,832,832,,,,832,,832',
'832,832,832,832,832,832,,,,,,832,832,832,832,832,832,832,,,,832,832',
'832,832,832,832,832,832,832,832,832,,832,832,,832,832,832,,,,,832,,832',
'832,,832,832,832,,832,832,832,832,832,832,832,836,,836,,836,836,,,,',
',,,,,,,,,832,,,,,,,,,,,,,,,,,836,,,,,,,,,836,836,836,,836,,,,836,836',
',,,836,,836,836,836,836,836,836,836,,,,,,836,836,836,836,836,836,836',
',,,836,836,836,836,836,836,836,836,836,836,836,,836,836,,836,836,836',
',,,,836,,836,836,,836,836,,,836,836,836,836,836,836,836,691,,691,,691',
'691,,,,,,,,,,,,,,836,,,,,,,,,,,,,,,,,691,,,,,,,,,691,691,691,,691,,',
',691,691,,,,691,,691,691,691,691,691,691,691,,,,,,691,691,691,691,691',
'691,691,,,,691,691,691,691,691,691,691,691,691,691,691,,691,691,,691',
'691,691,,,,,691,,691,691,,691,691,,,691,691,691,691,691,691,691,,,,',
',,,549,,,,,,,,549,549,,,691,549,549,549,549,549,549,549,549,549,549',
'549,549,549,549,549,545,,,,,,,,545,545,,,,545,545,545,545,545,545,545',
'545,545,545,545,545,545,545,545,562,,,,,,,,562,562,,,,562,562,562,562',
'562,562,562,562,562,562,562,562,562,562,562,820,,,,,,,,820,820,,,,820',
'820,820,820,820,820,820,820,820,820,820,820,820,820,820,,,,,,,,,,,,',
',,,,549,549,549,549,549,549,549,549,,,,,,,,,,,,,,,,,,,,,545,545,545',
'545,545,545,545,545,,,,,,,,,,,,,,,,,,,,,562,562,562,562,562,562,562',
'562,,,,,,,,,,,,,,,,,,,,,820,820,820,820,820,820,820,820,879,,,,,,,,879',
'879,,,,879,879,879,879,879,879,879,879,879,879,879,879,879,879,879,565',
',,,,,,,565,565,,,,565,565,565,565,565,565,565,565,565,565,565,565,565',
'565,565,567,,,,,,,,567,567,,,,567,567,567,567,567,567,567,567,567,567',
'567,567,567,567,567,816,,,,,,,,816,816,,,,816,816,816,816,816,816,816',
'816,816,816,816,816,816,816,816,,,,,,,,,,,,,,,,,879,879,879,879,879',
'879,879,879,,,,,,,,,,,,,,,,,,,,,565,565,565,565,565,565,565,565,,,,',
',,,,,,,,,,,,,,,,567,567,567,567,567,567,567,567,,,,,,,,,,,,,,,,,,,,',
'816,816,816,816,816,816,816,816,568,,,,,,,,568,568,,,,568,568,568,568',
'568,568,568,568,568,568,568,568,568,568,517,,,,,,,,517,517,,,,517,517',
'517,517,517,517,517,517,517,517,517,517,517,517,517,727,,,,,,,,727,727',
',,,727,727,727,727,727,727,727,727,727,727,727,727,727,727,727,570,',
',,,,,,570,570,,,,570,570,570,570,570,570,570,570,570,570,570,570,570',
'570,,,,,,,,,,,,,,,,,,,568,568,568,568,568,568,568,568,,,,,,,,,,,,,,',
',,,,,517,517,517,517,517,517,517,517,,,,,,,,,,,,,,,,,,,,,727,727,727',
'727,727,727,727,727,,,,,,,,,,,,,,,,,,,,,570,570,570,570,570,570,570',
'570,130,,,,,,,,130,130,,,,130,130,130,130,130,130,130,130,130,130,130',
'130,130,130,130,886,,,,,,,,886,886,,,,886,886,886,886,886,886,886,886',
'886,886,886,886,886,886,886,75,,,,,,,,75,75,,,,75,75,75,75,75,75,75',
'75,75,75,75,75,75,75,75,645,,,,,,,,645,645,,,,645,645,645,645,645,645',
'645,645,645,645,645,645,645,645,645,,645,,,,,,,,,,,,,,,130,130,130,130',
'130,130,130,130,,,,,,,,,,,,,,,,,,,,,886,886,886,886,886,886,886,886',
',,,,,,,,,,,,,,,,,,,,75,75,75,75,75,75,75,75,,,,,,,,,,,,,,,,,,,,,645',
'645,645,645,645,645,645,645,616,,,,,,,,616,616,,,,616,616,616,616,616',
'616,616,616,616,616,616,616,616,616,616,814,616,,,,,,,814,814,,,,814',
'814,814,814,814,814,814,814,814,814,814,814,814,814,814,793,,,,,,,,793',
'793,,,,793,793,793,793,793,793,793,793,793,793,793,793,793,793,793,443',
',,,,,,,443,443,,,,443,443,443,443,443,443,443,443,443,443,443,443,443',
'443,443,,443,,,,,,,,,,,,,,616,616,616,616,616,616,616,616,616,,,,,,',
',,,,,,,,,,,,,,814,814,814,814,814,814,814,814,,,,,,,,,,,,,,,,,,,,,793',
'793,793,793,793,793,793,793,,,,,,,,,,,,,,,,,,,,,443,443,443,443,443',
'443,443,443,853,,,,,,,,853,853,,,,853,853,853,853,853,853,853,853,853',
'853,853,853,853,853,853,310,,,,,,,,310,310,,,,310,310,310,310,310,310',
'310,310,310,310,310,310,310,310,310,560,,,,,,,,560,560,,,,560,560,560',
'560,560,560,560,560,560,560,560,560,560,560,560,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,853,853,853,853,853,853,853,853,,,,,,,,,,,,',
',,,284,,,,,310,310,310,310,310,310,310,310,,,,,,,,,,,,,,,,,,,,284,560',
'560,560,560,560,560,560,560,284,284,284,,284,,,,284,284,,,,284,,284',
'284,284,284,284,284,284,,,,,,284,284,284,284,284,284,284,110,,,284,284',
'284,284,284,284,284,284,284,284,284,,284,284,,284,284,284,,,,,284,,284',
'284,,284,284,110,,284,284,284,284,284,284,284,110,110,110,,110,,,,110',
'110,284,,,110,,110,110,110,110,110,110,110,,,,,,110,110,110,110,110',
'110,110,512,,,110,110,110,110,110,110,110,110,110,110,110,,110,110,',
'110,110,110,,,,,110,,110,110,,110,110,512,,110,110,110,110,110,110,110',
'512,512,512,,512,,,,512,512,110,,,512,,512,512,512,512,512,512,512,',
',,,,512,512,512,512,512,512,512,78,,,512,512,512,512,512,512,512,512',
'512,512,512,,512,512,,512,512,512,,,,,512,,512,512,,512,512,78,,512',
'512,512,512,512,512,512,78,78,78,,78,,,,78,78,,,,78,,78,78,78,78,78',
'78,78,,,,,,78,78,78,78,78,78,78,,35,,78,78,78,78,78,78,78,78,78,78,78',
',78,78,,78,78,78,,,,,78,,78,78,,78,78,78,35,78,78,78,78,78,78,78,,35',
'35,35,,35,,,,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35',
'35,,778,,35,35,35,35,35,35,35,35,35,35,35,,35,35,,35,35,35,,,,,35,,35',
'35,,35,35,35,778,35,35,35,35,35,35,35,,778,778,778,,778,,,,778,778,',
',,778,,778,778,778,778,778,778,778,,,,,,778,778,778,778,778,778,778',
'102,,,778,778,778,778,778,778,778,778,778,778,778,,778,778,,778,778',
'778,,,,,778,,778,778,,778,778,102,,778,778,778,778,778,778,778,102,102',
'102,,102,,,,102,102,,,,102,,102,102,102,102,102,102,102,,,,,,102,102',
'102,102,102,102,102,408,,,102,102,102,102,102,102,102,102,102,102,102',
',102,102,,102,102,102,,,,,102,,102,102,,102,102,408,,102,102,102,102',
'102,102,102,408,408,408,,408,,,,408,408,,,,408,,408,408,408,408,408',
'408,408,,,,,,408,408,408,408,408,408,408,,,,408,408,408,408,408,408',
'408,408,408,408,408,89,408,408,,408,408,408,89,,,,408,,408,408,,408',
'408,,,408,408,408,408,408,408,408,,,,,,89,,,,,,,,,89,89,89,,89,,,,89',
'89,,,,89,,89,89,89,89,89,89,89,,,,,,89,89,89,89,89,89,89,847,,,89,89',
'89,89,89,89,89,89,89,89,89,,89,89,,89,89,89,,,,,89,,89,89,,89,89,847',
',89,89,89,89,89,89,89,847,847,847,,847,,,,847,847,,,,847,,847,847,847',
'847,847,847,847,,,,,,847,847,847,847,847,847,847,630,,,847,847,847,847',
'847,847,847,847,847,847,847,,847,847,,847,847,847,,,,,847,,847,847,',
'847,847,630,,847,847,847,847,847,847,847,630,630,630,,630,,,,630,630',
',,,630,,630,630,630,630,630,630,630,,,,,,630,630,630,630,630,630,630',
'711,,,630,630,630,630,630,630,630,630,630,630,630,,630,630,,630,630',
'630,,,,,630,,630,630,,630,630,711,,630,630,630,630,630,630,630,711,711',
'711,,711,,,,711,711,,,,711,,711,711,711,711,711,711,711,,,,,,711,711',
'711,711,711,711,711,769,,,711,711,711,711,711,711,711,711,711,711,711',
',711,711,,711,711,711,,,,,711,,711,711,,711,711,769,,711,711,711,711',
'711,711,711,769,769,769,,769,,,,769,769,,,,769,,769,769,769,769,769',
'769,769,,,,,,769,769,769,769,769,769,769,,,,769,769,769,769,769,769',
'769,769,769,769,769,,769,769,,769,769,769,,,,,769,,769,769,,769,769',
',,769,769,769,769,769,769,769' ]
        racc_action_check = arr = Array.new(23170, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1389,   nil,  8519,  1386,  2393,   nil,  1350,   -37,   nil,
   nil,   -62,  1340,  2080,  3912, 10319,   nil,   nil,  4492,   887,
   nil, 10559,   120,   nil,   nil,   nil, 10679,   nil,   nil,   nil,
 10919,   nil,   nil,   nil,   nil, 22433,  7825,   nil,    91,   nil,
  1227,   nil,   nil,  1239,   417, 11399,  1222,  1211,   nil,   nil,
 11999,  1199,  1067, 12599,   nil,   nil, 12839, 12959,   nil,   682,
   nil,   nil,   nil, 13199,   189, 13439,   nil,   nil,   nil,   nil,
  1126,   nil,   nil,  1171,  1225, 21598,   nil,   nil, 22357,   689,
  4263,   nil,  4368,   nil,     3,   nil,     0, 13799,   902, 22748,
   nil,   749,   nil,   nil,   nil,  5186, 14159,  3204,   nil,   nil,
 14279,  1281, 22584, 15959,   nil,   nil,  2519,   899,  2001,   nil,
 22207,   nil, 20159,  1172, 20399,  1269,  1171,   921, 16439,  1168,
   nil,   nil,   823,   nil,  1192,   nil,   913,   nil, 11159,  1205,
 21542,   nil,  8156,   nil,   nil,   nil,  1251,   nil,  9839, 20039,
  1006,   nil,  8759,     8,    19,   nil,  9119,   nil,  2638,  1186,
    43,   -11,  1184,  1133,   nil,   nil,   nil,   nil,   nil,   nil,
  1127,   nil,   nil,   nil,   nil,   -26,  1124,   nil,  1676,   nil,
   nil,   nil,   nil,   nil,  1210,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   789,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1773, 10799,  2677,  1689,   nil,
   nil,   nil,   nil,  1486,   nil,   593,    16,   325,   314,  1108,
   120,   637,  1475,  1096,  1048,   613,   717,   861,  1101,   864,
  1048,  1091,  7701,   nil, 22132,   nil,   nil,   nil,   -14,   nil,
   nil, 13679,  1044,  1056,   nil,  1174,  1173,   287,  1052,   754,
   nil,   547,  7338, 14879, 14999, 15119, 15239, 15359,   187,   nil,
 22010, 15719, 15839,   259,   nil,  1111,  1023,   186,  1881,    47,
 16679, 16799, 16919, 17039, 17159, 17279, 17399, 17519, 17639, 17759,
 17879, 17999, 18119, 18239, 18359, 18479, 18599, 18719, 18839, 18959,
 19079, 19199, 19319, 19439, 19559, 19679,   nil,   464,    84,    -9,
  1070,  1093,   nil,   nil,   -12,   -25,   nil,  1023, 19919,  1118,
  1004,   nil,  1187,   987,  6854,   377,   nil,   -38,  1014,   nil,
   nil,   nil,   -14,    45, 20279,   809,   706,  4158,  6507,  1075,
  1064,   968,   279,   311,   nil,   nil, 19799,  6383,   450,   nil,
   997,   958,   -67,   865,   235,   303,   422,   472,   846, 16319,
   495,  1726,   640,   nil,   719,  1246,   nil,   947, 22659,   nil,
   nil, 16199, 16079,   nil,   nil,  2622, 15599,  2780, 15479,   nil,
 14759, 14639,   929,   nil,   nil,   674, 14519,   nil,   943,   nil,
   935,   nil, 14399,   nil,   -28,   921,   nil,  1565,   nil,  5549,
   nil,   nil,  5307, 21846,   nil,   918,   nil, 14039,   971,   nil,
  5065,  4944,   nil,  2796,   nil,   nil,  3389,   nil,   nil,   970,
  3049,   nil,   926,   949,   873,   956,   nil,  2068,   nil,   877,
    45,   nil,  4702,   715,   nil,   nil,   nil,  3678,   618,   142,
   nil,   nil,   760,   426,   873,  3324,    45,   nil,   nil,   nil,
   153,   nil,   nil,   nil,   nil,  5428,   nil,   962,   nil,  3096,
  2993,   nil,  2938, 12719,  2835,   nil,   nil,   nil,   868,   609,
   845,   850, 22282,  5794,   nil,   nil,   nil, 21350,   nil,   428,
   nil,   nil,   nil, 12239, 12119,  5899,   nil,   nil,   834,   809,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  6020,   nil,   nil,
  6141, 11879,   865,   856, 11639, 20911, 11519,  3553,  3200, 20883,
   241,  3034,  2223,   225,  1876,  1711,   850,   706,   566,   117,
 22038,  4700, 20939,  3908,  1001, 21131,  1143, 21159, 21323,  1244,
 21406,    71,  1383,  2182, 11279,  2127,   190, 11039,  6262,  7217,
  7930,  1220,   769,   nil,   708,   nil,  1366,   nil,  2285, 10439,
  3450,   nil,   nil,   893,   114,  6612,   nil, 10199,   -30,  4032,
   nil,   nil,  3558,   nil,   nil,   nil, 10079,   794,   nil,  9959,
   nil,   nil,  9719,   nil,   nil,   nil, 21762,   nil,   766,   nil,
   nil,   nil,  4597,   nil,    11,  2733,   527,  4823,   nil,   629,
 22898,   nil,   643,   637,   nil,   606,  9599,   476,   284,   545,
   662,   561,   nil,   nil,   nil, 21626,  9479,   546,   nil,   nil,
   nil,    12,   520,   nil,   531,  1177,   485,   446,   nil,   435,
   438,   357,  9359,   315,   nil,   nil,   313,   384,   271,   nil,
   268,   nil,   151,   nil,   137,   133,   nil,  1765,  1405,    97,
    44,   nil,  6733,    14,   nil,   nil,   nil,   nil,   nil,   nil,
  1104, 20759,  8879,    77,   162,   nil,   nil,   nil,   216,  8999,
  9239,   424,   nil,   188,   196,   848,   665,   277,   564,   -20,
   nil, 22973,   345,   nil,   nil,   nil,   259,   405,   473,   nil,
   nil,   482,   500,   519,   nil,   519,   -33, 21378,   596,    85,
   332,   526,    88,    48,   221,   687,   709,   nil,   -19,  1117,
   564,   nil,   525,   690,   nil,   797,   258,  8277,   nil,   nil,
   nil,   nil,   755,   nil,   nil,   754,   nil,  8035,   850,   487,
 11759,   nil,  1572,   nil,   802,   nil,   917,   nil,   848, 23048,
   nil,   nil, 12359,    32, 12479, 13079,   888, 13319, 22509,   895,
  2575,   nil,   nil,   nil,   917,   nil,  2238,   nil,  3407,   nil,
   nil,   nil,   nil, 21818,   nil,   nil,   nil,   908,   nil,  2277,
   nil,  3260,   nil,   nil,  1937,   nil,   734,   nil,   944,  1436,
   nil,   949,   nil,   nil, 21790,   nil, 21187,   nil, 16559,   nil,
 20967,   nil,   213,   nil,  1066,  8639,   nil,   497,  1011,    50,
   nil,   nil, 20519,  6975,   nil,   nil, 20639,    89,  7096,   nil,
   nil,   nil,   nil,   nil,  1111,   nil,   242, 22823,   nil,   nil,
  7459,   nil,   nil, 21982,  7580,   nil,   nil,   nil, 13919,  1051,
   958,  1092,   nil,  1055,  1063,   279,   nil,  1065,  1066,  1067,
  1075,  1076,  1077,  1092,  1196,  1104,  1316,  1108,   nil, 21103,
   nil,   nil,   238,   nil,   nil,   463, 21570,  1206,   nil,  8398,
   752,   559,   779,  1199,   nil,   nil,  1242,  1670,   nil,  2891,
   nil,  3743,   nil,   nil,   nil,  3750,   nil,   nil,   nil,   nil,
  3396,   nil,   nil,  1175,  1554,  5670,   nil,   nil,   nil,   nil,
  1265,  3804, 13559,  1615,   730,   nil,  1186,  1201,  1216,  1217,
  1218,  1219,  1221,  1224,   242,   nil,   345,   667,  1227,   326,
   145,   nil,  3614,   nil,   nil,   nil,   nil,   nil,   239,  1258,
   nil ]

racc_action_default = [
    -2,  -538,    -1,  -537,  -538,  -382,    -3,  -538,  -526,  -445,
  -435,  -284,  -538,  -475,  -538,  -538,  -444,  -436,  -420,  -538,
   -65,  -538,  -524,  -446,  -418,  -309,  -538,  -447,  -420,  -402,
  -538,    -5,  -454,  -420,  -307,   -69,  -538,    -6,  -267,  -455,
  -410,  -398,  -308,  -538,  -538,  -538,  -416,  -401,  -310,   -79,
  -538,  -538,    -9,  -538,  -449,  -403,  -299,  -538,  -259,   -40,
  -448,  -311,  -260,  -538,  -452,  -300,  -450,  -312,  -301,  -261,
  -524,  -313,  -302,  -526,  -538,   -46,  -262,  -451,  -538,   -48,
  -538,  -263,  -537,   -49,  -304,  -264,  -512,  -538,  -514,  -538,
  -441,   -53,  -266,  -440,  -399,  -537,  -537,  -442,  -400,  -305,
  -276,  -538,  -538,  -537,  -443,  -306,  -538,  -231,  -279,   -41,
   -77,   951,  -538,  -538,  -538,  -538,  -537,  -538,  -538,  -537,
  -508,  -381,  -267,  -246,  -252,  -299,  -452,  -300,  -537,  -538,
  -232,  -242,  -537,  -304,  -247,  -276,  -538,   -63,  -538,  -538,
  -526,  -527,  -538,  -537,  -537,  -285,  -538,  -480,  -475,  -497,
  -481,  -538,  -538,  -537,  -498,  -495,  -478,  -367,  -499,  -477,
  -537,  -476,  -494,  -479,  -474,  -538,  -537,  -486,  -538,  -484,
  -492,  -286,  -283,  -375,   -57,    -8,  -177,  -126,  -170,  -178,
  -117,  -127,  -171,  -161,  -118,  -176,  -128,  -152,  -160,  -119,
  -139,  -169,  -155,  -132,  -179,  -120,  -181,  -133,  -141,  -164,
  -121,  -185,  -134,  -138,  -151,  -122,  -186,  -136,  -129,  -165,
  -137,  -142,  -123,  -154,  -140,  -146,  -124,  -143,  -145,  -147,
  -144,  -156,  -168,  -538,  -148,  -167,  -172,  -158,  -157,  -174,
  -430,  -180,  -166,  -149,  -109,  -159,  -130,  -106,  -173,  -110,
  -131,  -108,  -432,  -163,  -431,  -429,  -150,  -183,  -175,  -107,
  -433,  -184,  -182,  -125,  -135,  -538,  -537,  -538,  -223,   -45,
    -4,  -535,  -533,  -525,  -534,  -538,   -47,  -538,  -538,  -382,
  -538,  -538,  -208,  -279,  -538,  -538,   -92,  -538,   -70,   -85,
  -526,  -538,  -537,  -303,   -73,  -111,   -17,  -113,  -538,  -112,
  -114,  -538,  -538,  -538,   -81,  -437,  -438,  -538,  -538,  -538,
  -404,  -209,  -537,  -538,  -538,  -538,  -538,  -538,  -538,   -51,
  -224,  -538,  -538,  -538,   -52,  -538,  -525,  -524,  -538,  -273,
  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,
  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,  -538,
  -538,  -538,  -538,  -538,  -538,  -538,  -325,  -538,  -267,  -452,
  -538,  -538,  -324,  -372,  -537,  -537,  -115,   -22,  -538,   -67,
  -526,   -13,   -14,  -538,  -537,  -524,  -265,  -526,  -538,  -267,
  -452,  -104,  -538,  -538,  -538,  -101,  -102,  -538,  -538,  -538,
  -537,  -538,  -530,  -530,  -233,   -50,  -538,  -537,  -530,  -506,
  -538,  -538,  -538,  -176,  -169,  -179,  -164,  -146,  -147,  -538,
  -148,  -475,  -106,  -504,  -107,  -526,   -64,   -75,  -538,  -511,
  -248,  -538,  -250,  -251,  -243,  -538,  -537,  -538,  -250,  -244,
  -538,  -538,  -526,  -240,  -241,  -273,  -538,  -253,  -538,   -39,
   -38,   -30,  -538,  -282,  -526,  -538,   -44,  -537,  -354,  -537,
  -357,  -355,  -537,  -189,   -31,  -537,  -496,  -538,  -538,  -365,
  -537,  -537,  -500,  -538,  -503,  -467,  -538,  -472,  -483,  -538,
  -538,  -470,  -330,  -481,  -337,  -538,  -328,  -538,  -326,  -526,
  -537,   -58,  -537,  -538,  -434,  -421,  -422,  -538,  -515,  -517,
  -380,  -378,  -518,  -516,  -526,  -537,  -515,  -517,  -379,  -518,
  -516,    -7,  -536,  -405,  -419,  -537,  -316,  -315,  -406,  -538,
  -538,  -407,  -538,  -537,  -538,  -437,  -438,   -82,  -538,   -91,
  -526,   -71,  -538,  -538,   -21,   -20,   -19,  -197,   -36,  -538,
  -409,  -412,  -408,  -538,  -538,  -537,  -414,  -415,  -538,  -538,
   -26,   -27,   -23,   -24,   -25,  -318,  -319,  -537,   -43,   -42,
  -537,  -538,  -538,  -538,  -538,  -229,  -538,  -213,  -218,  -210,
  -225,  -219,  -211,  -226,  -220,  -212,  -221,  -200,  -222,  -205,
  -201,  -227,  -202,  -228,  -214,  -203,  -215,  -204,  -198,  -216,
  -199,  -526,  -217,  -538,  -537,  -538,  -273,  -538,  -537,  -537,
  -538,   -16,   -66,  -271,  -526,   -12,  -525,  -270,  -538,  -537,
  -538,  -101,  -103,  -102,  -538,  -537,  -456,  -538,  -538,  -537,
  -515,  -516,  -537,  -269,  -314,  -390,  -537,  -537,  -274,  -532,
  -234,  -531,  -532,  -236,   -37,  -252,  -187,   -29,  -538,  -507,
  -275,  -523,  -538,  -522,  -526,  -475,  -538,  -537,  -278,  -526,
  -538,   -83,   -78,  -537,  -249,  -254,  -538,  -515,  -516,  -526,
  -515,  -516,  -509,  -510,  -237,  -187,  -538,  -258,  -281,  -528,
  -490,  -481,  -537,  -359,  -537,  -538,  -537,  -537,  -353,  -538,
  -538,  -538,  -538,  -526,  -488,  -482,  -538,  -538,  -537,  -502,
  -537,  -487,  -537,  -501,  -537,  -537,  -493,  -538,  -538,  -335,
  -526,  -485,  -537,  -538,  -428,  -425,  -426,  -427,  -423,  -377,
   -61,  -538,  -538,  -538,  -383,  -239,  -238,  -376,   -59,  -538,
  -538,  -537,  -317,  -538,  -537,   -88,   -90,  -526,  -515,  -516,
   -80,  -538,   -74,   -18,  -413,  -411,  -206,  -207,  -537,  -417,
   -28,  -538,  -538,  -538,  -292,  -538,  -526,  -196,  -538,  -519,
  -272,  -526,  -515,  -516,  -538,  -538,  -538,  -116,   -68,   -15,
  -101,  -105,  -102,  -526,  -458,  -538,  -538,  -537,  -374,   -55,
  -373,   -54,  -537,  -393,  -392,  -391,  -322,  -537,  -537,  -530,
  -538,  -296,  -475,  -505,  -526,  -460,  -538,  -277,   -76,  -538,
  -245,  -255,  -538,  -383,  -538,  -538,  -256,  -538,  -538,  -538,
  -344,  -346,  -364,  -363,  -360,  -361,  -538,  -349,  -538,  -351,
  -356,  -385,  -384,  -190,  -366,  -368,  -369,  -538,  -465,  -538,
  -463,  -538,  -473,  -471,  -538,  -468,  -333,  -329,  -338,  -538,
  -327,  -538,  -424,   -62,  -194,   -35,  -195,  -529,  -538,   -60,
  -192,   -33,  -193,   -34,  -538,  -538,  -320,   -86,   -72,  -538,
  -289,  -290,  -538,  -537,  -291,  -280,  -538,  -383,  -537,  -371,
  -370,  -383,  -294,  -457,  -538,  -395,  -538,  -538,  -323,  -397,
  -537,   -11,  -235,  -188,  -537,  -459,  -297,   -84,  -538,  -257,
  -489,  -538,  -358,  -537,  -537,  -538,  -491,  -537,  -537,  -537,
  -537,  -537,  -537,  -537,  -538,  -331,  -538,  -336,   -56,  -191,
   -32,  -287,  -538,  -288,  -254,  -537,  -230,  -538,  -295,  -537,
  -538,  -100,   -93,  -538,  -394,  -396,  -538,  -538,  -273,  -538,
  -341,  -538,  -343,  -362,  -350,  -538,  -347,  -352,  -466,  -464,
  -538,  -461,  -469,  -334,  -538,  -537,  -386,  -388,  -387,  -293,
  -537,  -538,  -537,  -538,   -99,  -298,  -519,  -272,  -537,  -537,
  -537,  -537,  -537,  -332,  -537,  -389,  -519,   -98,  -526,  -515,
  -516,  -342,  -538,  -339,  -345,  -348,  -462,  -321,  -383,  -537,
  -340 ]

clist = [
'31,131,234,142,267,379,309,157,495,542,131,230,477,607,485,314,283,422',
'289,471,234,290,429,297,121,286,259,52,383,627,382,308,164,173,278,388',
'671,808,525,52,468,313,263,414,537,137,419,694,317,540,385,656,131,260',
'174,261,676,632,469,283,360,131,289,359,234,290,657,37,318,356,283,610',
'613,428,824,758,592,619,424,175,494,782,668,283,642,785,659,439,442',
'675,234,283,407,384,663,266,131,866,373,401,389,315,223,261,131,807',
'151,521,403,634,353,387,268,413,266,634,413,274,748,351,652,750,266',
'622,131,423,381,392,145,513,346,784,266,357,599,602,851,391,449,266',
'438,438,445,22,431,484,916,752,406,846,454,444,300,265,171,292,367,454',
'519,3,299,712,688,454,245,670,6,164,877,2,595,459,477,1,485,,,,,,,,',
',,,829,,,,,,,,,,,,,,,,773,,,,424,,,434,866,436,,,,,,,,,,,,,,,,,,,,,363',
'913,,,,725,,482,,,,,,,,,,,,,131,423,,,,704,,,510,704,,359,,283,511,',
',614,827,,,933,,508,488,,642,768,,530,363,532,533,534,,52,121,173,,782',
'741,,837,903,518,618,578,579,,779,,,807,639,841,947,,,,,,,,,,,,,428',
',,,,,,491,531,,,,704,,714,,679,,,468,,535,584,,633,359,535,704,543,',
'261,438,438,918,,629,,680,,,828,,,671,,,424,,,,,,266,,266,266,266,605',
',,538,539,581,,671,586,,,,283,854,617,707,,863,676,585,,261,482,,131',
',,,,596,631,,864,,,131,423,682,868,,,,,164,,,,,,,,872,,,,363,,653,,488',
',,,,,653,598,,,,455,852,,,,529,424,457,,658,,,,461,,,731,833,,,438,624',
',838,,,131,,723,,,743,693,,131,696,482,,,482,,,754,,,,283,,289,689,234',
'290,131,423,948,713,,695,745,,,,390,,631,,,363,,,690,409,488,410,,,488',
'424,698,,,929,,,,,,,813,,766,,424,428,759,,819,427,430,,,,468,468,,',
'935,603,734,,482,,,770,,289,,234,290,728,,,737,131,423,482,,,746,,,',
'917,,,,,,131,423,889,,660,,,661,,488,131,696,,131,696,666,667,,753,756',
',234,,,488,739,283,,726,,762,,,695,764,433,695,683,915,,,,744,,631,413',
'747,,,693,,,,,749,,,751,,164,701,266,,,653,,454,,454,454,,,844,,765',
',,,,,454,266,454,,454,,454,454,,,718,,19,875,117,704,468,,,,,,721,117',
'19,722,,283,,,117,815,,756,,117,696,693,,821,823,,,,275,631,,,,,756',
',724,,117,,,689,695,,,693,117,735,736,117,,,,,,,117,693,117,,,,,117',
',468,,468,845,283,,347,,,849,19,,,283,,117,,368,896,,,535,857,19,,,',
',117,,368,,,843,,164,117,,275,,468,,,,,,615,761,,,,,,,,,117,882,,,19',
',,,,938,,117,117,,117,,635,,117,,,880,390,,,643,283,,,,811,,,,,,647',
',582,,,,,,,587,,,,,,664,,,,,,,454,454,,,454,454,454,454,454,454,454',
',424,,,,,,,,,482,756,,,628,,,,,,,,,266,,830,831,,,834,,644,,,482,,848',
',,,,,,648,,,605,131,423,842,,,,,454,454,454,454,454,117,756,,693,,,',
'19,,,,856,488,,,,454,615,781,681,787,789,,,,,19,,275,,,,798,,800,117',
'802,,803,805,,,,,,,19,117,19,117,117,117,,885,,117,117,,887,,710,,,',
',,,,130,881,895,,,,883,,,130,12,,,,755,,258,635,,,390,888,12,,,272,',
',,,,,,,19,,,,,,19,920,,,771,301,,,,,117,130,310,,776,,,,,,130,,117,19',
'919,,738,934,,,,,,925,,117,,,,,,117,,,275,,,,,12,,130,117,,,130,,,130',
',,,12,130,,,763,130,,130,,767,,258,,19,,,19,,,,,130,,,19,19,,,,,,130',
'130,,,,,12,,443,,,,794,,,19,,,,,117,,,,,,900,902,117,810,904,906,907',
'908,909,911,912,,19,,,,,,,,117,,,,,,859,,,275,,,,,,,,,,,,654,19,,,,',
',,835,,,,,19,,,19,,,672,117,,,674,941,943,944,945,946,,,,,,,,,,,,884',
',,,,950,855,,,,117,130,,117,19,19,,,,,,,19,,,117,,64,,,12,19,,117,,117',
',,117,64,,,,,,,517,,,12,,,,,,,,,,279,,,,19,,,275,,,12,,12,,545,,547',
'548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564',
'565,566,567,568,569,570,571,572,,349,,,,64,,,,,,,370,,,,,19,64,,,,,',
'12,370,117,,,370,12,,,279,117,117,,,,,616,,,,,,275,,,,,,,12,,64,,,,130',
',,,,,443,130,,,,130,,130,,517,130,,,,,645,,19,,,,130,,,,,,19,,,,,,,',
',130,,,275,12,,,12,,,,,860,,,12,12,,,,,,,,,,,,,,130,,,,,,,12,130,,,',
',,,,,,,,,,117,,,,130,,,117,12,,,,,,,19,,,,101,19,,,,716,717,,,,890,',
'101,19,64,,,19,,12,,,,130,,,,38,727,,,12,,64,12,279,867,,869,38,,,,',
',,,870,,871,,,19,64,873,64,130,,,276,,,,,,,,,,,,130,12,12,,352,,,19',
'101,12,130,,,130,117,,,130,12,,130,101,,130,,,,,,,,348,,,,38,,,64,,',
',369,,64,,,130,38,,12,,,,,369,,130,101,,,,,276,,,,64,,,,,,793,,,,,928',
',930,,,,931,38,,,279,932,,,,,,,,,,,,,814,816,,12,,,,,820,822,,,,,,,',
'64,,949,64,,,,,,,,64,64,,,,,,,,,,,,,,,,,,,,,64,,,,,,,,,,,,,,,,,,12,853',
',,,64,,,,,12,,,814,,820,822,,130,101,,,279,,,,,,,,,,,,,64,,,101,,,,',
',,,38,64,,,64,,,,,,,,101,879,101,,,,,38,,276,,,,,,130,,,,886,,,,,,,',
'38,12,38,64,64,,12,,,,,64,,,879,,,,12,,64,,12,,,,,,,101,,,,,,101,,,',
',,,,,,,,,,,,,64,,,279,38,12,101,,,,38,,,,,,,,,,,,,,,,130,,,,,12,,38',
',,,,,,,,,,,,,,,,,,,,276,64,,,101,,,101,,,,,,,,101,101,,,,,,,,,,,,,,279',
'38,,,38,,,101,,,,,38,38,,,,,,,,,,,,,,,,,101,,,,38,684,64,,,,,,,,,,64',
',,,,,,,,,,38,279,,101,,,,,,,370,,,,,101,,276,101,,,,,,,,,,,,38,,,,,',
',,,,,,38,,,38,,,,,,,,,,,101,101,,,,,,,101,64,,,,,64,,,101,,,,,,892,',
',64,38,38,,64,,,,,38,,,,,,,,,38,,,,,101,,,,,,,,,,,,,,,,64,,,,,,,,,,270',
'38,,,276,270,,,,,,,,,,,64,,,,270,,,,,,,270,,101,,,,,,,,,,,,,,,,,,,270',
',,,,,,,38,,,270,,,,,,,270,,,,,,270,270,,,,,,,270,,270,,270,276,,,270',
',,,,,101,,,,,,,,,,101,,,,270,,,,,,,,,,,,,38,,,,,,,,,,38,,,,,,,,,,,,276',
',,,,,,,,369,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,,,,,101,,,,,,,,,894,,,101',
',,,101,,,,,,38,,,,,38,,,,,,,,,891,,,38,,,,38,,,,,,,,101,,,,,,,,,,,,',
',,,,,270,,,,,,,,101,38,,,,,,,,,,,,,,,,,,,,,,,,,270,38,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,270,,,270,270,,,,,,270,,270,270,,,,,270,,,,,,270,,,,,',
',,,,,,,,,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,270,,,,,,,,,,,270,270,,,,,,,,,,,,,,,,,270,,,,,270,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,,',
',,,,,,,,,,,,,,,270,,,,,,270,,,,,,,,,,270,,,,,,,,,,,,,,,,270,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,270,,,,,,,,,,,,,,,,,,,270,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,270,,,,,,,,,270,,,270,,270,270,,270,270,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,270,,,,270,,,,,',
',,,,,270,,,,,,,,,,,270' ]
        racc_goto_table = arr = Array.new(2990, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'7,34,54,32,19,11,36,118,83,90,34,53,38,13,38,36,59,25,57,40,54,58,28',
'19,64,17,21,10,63,98,61,19,110,64,47,63,135,104,83,10,102,19,9,66,87',
'39,66,26,19,87,36,107,34,6,39,95,136,49,103,59,44,34,57,43,54,58,108',
'8,32,17,59,62,62,61,84,14,51,62,36,8,130,115,108,59,140,114,112,41,41',
'108,54,59,48,7,112,30,34,137,52,53,7,6,127,95,34,101,116,130,75,67,74',
'52,127,7,30,67,7,127,65,92,105,65,30,100,34,7,60,99,79,31,22,113,30',
'18,38,38,15,78,117,30,7,7,118,5,21,25,120,121,39,122,7,21,125,126,81',
'128,30,7,129,4,131,49,132,7,133,134,3,110,104,2,94,139,38,1,38,,,,,',
',,,,,,14,,,,,,,,,,,,,,,,26,,,,36,,,30,137,30,,,,,,,,,,,,,,,,,,,,,12',
'104,,,,90,,54,,,,,,,,,,,,,34,7,,,,38,,,44,38,,43,,59,48,,,28,26,,,104',
',32,64,,140,49,,19,12,19,19,19,,10,64,64,,115,51,,26,114,21,11,41,41',
',112,,,101,25,26,84,,,,,,,,,,,,,61,,,,,,,8,10,,,,38,,130,,102,,,102',
',95,44,,63,43,95,38,6,,95,7,7,14,,36,,103,,,49,,,135,,,36,,,,,,30,,30',
'30,30,7,,,30,30,10,,135,9,,,,59,98,21,25,,107,136,6,,95,54,,34,,,,,95',
'47,,108,,,34,7,41,108,,,,,110,,,,,,,,108,,,,12,,7,,64,,,,,,7,30,,,,109',
'62,,,,12,36,109,,110,,,,109,,,25,83,,,7,30,,87,,,34,,61,,,25,32,,34',
'7,54,,,54,,,28,,,,59,,57,64,54,58,34,7,26,17,,64,11,,,,29,,47,,,12,',
',39,29,64,29,,,64,36,39,,,108,,,,,,,40,,11,,36,61,63,,40,29,29,,,,102',
'102,,,13,77,19,,54,,,66,,57,,54,58,32,,,17,34,7,54,,,19,,,,90,,,,,,34',
'7,83,,12,,,12,,64,34,7,,34,7,12,12,,7,7,,54,,,64,10,59,,30,,53,,,64',
'118,45,64,12,83,,,,95,,47,7,95,,,32,,,,,39,,,39,,110,12,30,,,7,,7,,7',
'7,,,11,,95,,,,,,7,30,7,,7,,7,7,,,12,,24,102,24,38,102,,,,,,12,24,24',
'12,,59,,,24,21,,7,,24,7,32,,21,21,,,,24,47,,,,,7,,77,,24,,,64,64,,,32',
'24,12,12,24,,,,,,,24,32,24,,,,,24,,102,,102,7,59,,24,,,7,24,,,59,,24',
',24,11,,,95,47,24,,,,,24,,24,,,95,,110,24,,24,,102,,,,,,29,77,,,,,,',
',,24,19,,,24,,,,,25,,24,24,,24,,29,,24,,,21,29,,,29,59,,,,12,,,,,,29',
',45,,,,,,,45,,,,,,29,,,,,,,7,7,,,7,7,7,7,7,7,7,,36,,,,,,,,,54,7,,,45',
',,,,,,,,30,,77,77,,,77,,45,,,54,,12,,,,,,,45,,,7,34,7,77,,,,,7,7,7,7',
'7,24,7,,32,,,,24,,,,77,64,,,,7,29,109,45,109,109,,,,,24,,24,,,,109,',
'109,24,109,,109,109,,,,,,,24,24,24,24,24,24,,12,,24,24,,12,,45,,,,,',
',,33,77,12,,,,77,,,33,23,,,,29,,33,29,,,29,77,23,,,33,,,,,,,,,24,,,',
',,24,12,,,29,33,,,,,24,33,33,,29,,,,,,33,,24,24,77,,45,12,,,,,,77,,24',
',,,,,24,,,24,,,,,23,,33,24,,,33,,,33,,,,23,33,,,45,33,,33,,45,,33,,24',
',,24,,,,,33,,,24,24,,,,,,33,33,,,,,23,,33,,,,45,,,24,,,,,24,,,,,,109',
'109,24,45,109,109,109,109,109,109,109,,24,,,,,,,,24,,,,,,29,,,24,,,',
',,,,,,,,106,24,,,,,,,45,,,,,24,,,24,,,106,24,,,106,109,109,109,109,109',
',,,,,,,,,,,29,,,,,109,45,,,,24,33,,24,24,24,,,,,,,24,,,24,,50,,,23,24',
',24,,24,,,24,50,,,,,,,33,,,23,,,,,,,,,,50,,,,24,,,24,,,23,,23,,33,,33',
'33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33',
'33,33,,50,,,,50,,,,,,,50,,,,,24,50,,,,,,23,50,24,,,50,23,,,50,24,24',
',,,,33,,,,,,24,,,,,,,23,,50,,,,33,,,,,,33,33,,,,33,,33,,33,33,,,,,33',
',24,,,,33,,,,,,24,,,,,,,,,33,,,24,23,,,23,,,,,24,,,23,23,,,,,,,,,,,',
',,33,,,,,,,23,33,,,,,,,,,,,,,,24,,,,33,,,24,23,,,,,,,24,,,,20,24,,,',
'33,33,,,,24,,20,24,50,,,24,,23,,,,33,,,,27,33,,,23,,50,23,50,106,,106',
'27,,,,,,,,106,,106,,,24,50,106,50,33,,,27,,,,,,,,,,,,33,23,23,,20,,',
'24,20,23,33,,,33,24,,,33,23,,33,20,,33,,,,,,,,27,,,,27,,,50,,,,27,,50',
',,33,27,,23,,,,,27,,33,20,,,,,27,,,,50,,,,,,33,,,,,106,,106,,,,106,27',
',,50,106,,,,,,,,,,,,,33,33,,23,,,,,33,33,,,,,,,,50,,106,50,,,,,,,,50',
'50,,,,,,,,,,,,,,,,,,,,,50,,,,,,,,,,,,,,,,,,23,33,,,,50,,,,,23,,,33,',
'33,33,,33,20,,,50,,,,,,,,,,,,,50,,,20,,,,,,,,27,50,,,50,,,,,,,,20,33',
'20,,,,,27,,27,,,,,,33,,,,33,,,,,,,,27,23,27,50,50,,23,,,,,50,,,33,,',
',23,,50,,23,,,,,,,20,,,,,,20,,,,,,,,,,,,,,,,,50,,,50,27,23,20,,,,27',
',,,,,,,,,,,,,,,33,,,,,23,,27,,,,,,,,,,,,,,,,,,,,,27,50,,,20,,,20,,,',
',,,,20,20,,,,,,,,,,,,,,50,27,,,27,,,20,,,,,27,27,,,,,,,,,,,,,,,,,20',
',,,27,27,50,,,,,,,,,,50,,,,,,,,,,,27,50,,20,,,,,,,50,,,,,20,,27,20,',
',,,,,,,,,,27,,,,,,,,,,,,27,,,27,,,,,,,,,,,20,20,,,,,,,20,50,,,,,50,',
',20,,,,,,50,,,50,27,27,,50,,,,,27,,,,,,,,,27,,,,,20,,,,,,,,,,,,,,,,50',
',,,,,,,,,42,27,,,27,42,,,,,,,,,,,50,,,,42,,,,,,,42,,20,,,,,,,,,,,,,',
',,,,,42,,,,,,,,27,,,42,,,,,,,42,,,,,,42,42,,,,,,,42,,42,,42,27,,,42',
',,,,,20,,,,,,,,,,20,,,,42,,,,,,,,,,,,,27,,,,,,,,,,27,,,,,,,,,,,,27,',
',,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,20,,,,,20,,,,,,,,,20,,,20,,,,20',
',,,,,27,,,,,27,,,,,,,,,27,,,27,,,,27,,,,,,,,20,,,,,,,,,,,,,,,,,,42,',
',,,,,,20,27,,,,,,,,,,,,,,,,,,,,,,,,,42,27,42,42,42,42,42,42,42,42,42',
'42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,42,42,,,,,,42,,42',
'42,,,,,42,,,,,,42,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,42,42,,,,,,,,,,,,,,,,,42',
',,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42',
',,42,,,42,,,,,,,,,,,,,,,,,,42,,,,,,42,,,,,,,,,,42,,,,,,,,,,,,,,,,42',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,42,,,42,,42,42,,42,42,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,42,,,,,,,,',
',,42,,,,,,,,,,,42' ]
        racc_goto_check = arr = Array.new(2990, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   173,   169,   163,   159,   140,    31,    -3,    64,    20,
    24,   -90,   150,  -367,  -532,  -622,   nil,   -11,    53,   -22,
  1508,     5,    52,  1005,   674,  -111,  -437,  1535,  -117,   406,
    69,  -157,    -5,   993,    -4,   nil,   -50,   nil,  -243,    40,
  -155,   -56,  2131,   -19,   -22,   480,   nil,    -1,   -18,  -351,
  1262,  -296,     9,    -7,   -16,   nil,   nil,   -18,   -15,   -19,
    30,   -66,  -311,   -68,    19,  -481,   -73,  -303,   nil,   nil,
   nil,   nil,   nil,   nil,    31,     2,   nil,   175,    34,   117,
   nil,   141,   nil,  -259,  -627,   nil,   nil,  -264,   nil,   nil,
  -306,   nil,    41,   nil,  -203,    33,   nil,   nil,  -372,    21,
  -269,  -572,  -128,  -110,  -641,  -317,   761,  -386,  -371,   294,
    19,   nil,  -351,  -524,  -570,  -574,    93,   -13,    -6,   nil,
  -739,  -459,  -603,   nil,   nil,   105,   129,    84,   115,  -134,
  -185,   114,  -311,   146,  -288,  -417,  -404,  -689,   nil,     6,
  -334 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   361,   nil,   316,
   362,   nil,   380,   nil,   826,   nil,   365,   nil,   nil,   nil,
   136,   109,     7,   115,   271,   nil,   nil,   122,   nil,   124,
    59,   nil,   435,    75,    79,    83,   134,    91,   703,   nil,
   nil,   nil,    14,    20,   nil,   nil,    35,    43,    49,   nil,
   126,   371,   nil,   285,   489,   239,   287,    94,    98,   107,
   nil,   116,   nil,   119,   480,   697,   nil,   123,    58,    62,
    69,    76,    81,    85,   366,    92,    95,   nil,   nil,   172,
    11,   nil,    26,   nil,   nil,    45,    53,   nil,    63,    70,
   nil,    78,   nil,    89,   nil,   497,   102,   106,   nil,   nil,
   nil,   466,   169,   nil,   462,   nil,   153,   nil,   160,   nil,
   669,   441,   nil,   nil,   nil,   147,   nil,   nil,   626,   481,
   nil,   nil,   nil,    41,    47,    55,   nil,   nil,   nil,   nil,
   475,   nil,   nil,   nil,   166,   167,   170,   650,   149,   152,
   120 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_1,
  0, 153, :_reduce_2,
  2, 151, :_reduce_3,
  2, 152, :_reduce_4,
  1, 154, :_reduce_5,
  1, 154, :_reduce_6,
  3, 154, :_reduce_7,
  2, 154, :_reduce_8,
  1, 157, :_reduce_9,
  1, 157, :_reduce_none,
  4, 160, :_reduce_11,
  2, 161, :_reduce_12,
  1, 165, :_reduce_13,
  1, 165, :_reduce_14,
  3, 165, :_reduce_15,
  2, 165, :_reduce_none,
  0, 180, :_reduce_17,
  4, 159, :_reduce_18,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 159, :_reduce_23,
  3, 159, :_reduce_24,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  4, 159, :_reduce_none,
  3, 159, :_reduce_29,
  3, 159, :_reduce_none,
  3, 159, :_reduce_31,
  6, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 179, :_reduce_none,
  3, 179, :_reduce_42,
  3, 179, :_reduce_43,
  3, 179, :_reduce_44,
  2, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 168, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_50,
  2, 170, :_reduce_51,
  2, 170, :_reduce_52,
  1, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 189, :_reduce_none,
  2, 183, :_reduce_57,
  3, 183, :_reduce_none,
  4, 183, :_reduce_59,
  5, 183, :_reduce_none,
  4, 183, :_reduce_none,
  5, 183, :_reduce_none,
  2, 183, :_reduce_63,
  2, 183, :_reduce_64,
  1, 171, :_reduce_none,
  3, 171, :_reduce_none,
  1, 193, :_reduce_none,
  3, 193, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  3, 192, :_reduce_none,
  5, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 196, :_reduce_none,
  3, 196, :_reduce_none,
  2, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 198, :_reduce_none,
  3, 198, :_reduce_none,
  1, 197, :_reduce_none,
  4, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  2, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_94,
  3, 169, :_reduce_95,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  2, 169, :_reduce_99,
  1, 169, :_reduce_none,
  1, 200, :_reduce_101,
  1, 200, :_reduce_102,
  2, 201, :_reduce_103,
  1, 201, :_reduce_104,
  3, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_109,
  1, 202, :_reduce_110,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 182, :_reduce_187,
  5, 182, :_reduce_none,
  3, 182, :_reduce_189,
  5, 182, :_reduce_none,
  6, 182, :_reduce_none,
  5, 182, :_reduce_192,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  4, 182, :_reduce_none,
  3, 182, :_reduce_none,
  3, 182, :_reduce_198,
  3, 182, :_reduce_199,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  3, 182, :_reduce_202,
  3, 182, :_reduce_203,
  3, 182, :_reduce_204,
  3, 182, :_reduce_205,
  4, 182, :_reduce_none,
  4, 182, :_reduce_none,
  2, 182, :_reduce_none,
  2, 182, :_reduce_209,
  3, 182, :_reduce_210,
  3, 182, :_reduce_211,
  3, 182, :_reduce_212,
  3, 182, :_reduce_213,
  3, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  2, 182, :_reduce_223,
  2, 182, :_reduce_224,
  3, 182, :_reduce_225,
  3, 182, :_reduce_226,
  3, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_none,
  6, 182, :_reduce_230,
  1, 182, :_reduce_none,
  1, 178, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  4, 209, :_reduce_none,
  2, 209, :_reduce_none,
  3, 213, :_reduce_237,
  1, 214, :_reduce_238,
  1, 214, :_reduce_none,
  1, 174, :_reduce_240,
  1, 174, :_reduce_none,
  1, 185, :_reduce_242,
  2, 185, :_reduce_243,
  2, 185, :_reduce_244,
  4, 185, :_reduce_245,
  1, 185, :_reduce_246,
  1, 188, :_reduce_none,
  2, 216, :_reduce_248,
  2, 215, :_reduce_249,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 210, :_reduce_252,
  2, 210, :_reduce_253,
  3, 210, :_reduce_254,
  4, 210, :_reduce_255,
  3, 177, :_reduce_none,
  4, 177, :_reduce_none,
  2, 177, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  2, 208, :_reduce_265,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 208, :_reduce_none,
  3, 208, :_reduce_none,
  3, 208, :_reduce_271,
  3, 208, :_reduce_272,
  2, 208, :_reduce_273,
  3, 208, :_reduce_274,
  3, 208, :_reduce_275,
  1, 208, :_reduce_276,
  4, 208, :_reduce_277,
  3, 208, :_reduce_278,
  1, 208, :_reduce_279,
  5, 208, :_reduce_none,
  4, 208, :_reduce_none,
  3, 208, :_reduce_none,
  2, 208, :_reduce_none,
  1, 208, :_reduce_284,
  2, 208, :_reduce_285,
  2, 208, :_reduce_none,
  6, 208, :_reduce_287,
  6, 208, :_reduce_288,
  5, 208, :_reduce_none,
  5, 208, :_reduce_none,
  5, 208, :_reduce_291,
  4, 208, :_reduce_292,
  7, 208, :_reduce_none,
  5, 208, :_reduce_294,
  6, 208, :_reduce_295,
  4, 208, :_reduce_296,
  5, 208, :_reduce_297,
  7, 208, :_reduce_298,
  1, 208, :_reduce_299,
  1, 208, :_reduce_300,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 173, :_reduce_none,
  1, 225, :_reduce_none,
  1, 231, :_reduce_none,
  1, 234, :_reduce_none,
  1, 235, :_reduce_none,
  1, 237, :_reduce_none,
  1, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 242, :_reduce_none,
  1, 245, :_reduce_none,
  1, 246, :_reduce_none,
  1, 226, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 233, :_reduce_320,
  5, 233, :_reduce_321,
  1, 163, :_reduce_322,
  2, 163, :_reduce_323,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 250, :_reduce_none,
  3, 250, :_reduce_none,
  1, 253, :_reduce_none,
  3, 253, :_reduce_none,
  1, 252, :_reduce_none,
  4, 252, :_reduce_none,
  6, 252, :_reduce_none,
  3, 252, :_reduce_none,
  5, 252, :_reduce_none,
  2, 252, :_reduce_none,
  4, 252, :_reduce_none,
  1, 252, :_reduce_none,
  3, 252, :_reduce_none,
  6, 254, :_reduce_none,
  8, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 190, :_reduce_354,
  1, 190, :_reduce_none,
  3, 260, :_reduce_none,
  1, 260, :_reduce_none,
  4, 260, :_reduce_358,
  1, 261, :_reduce_none,
  2, 261, :_reduce_none,
  1, 262, :_reduce_none,
  3, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  2, 230, :_reduce_none,
  4, 265, :_reduce_none,
  1, 265, :_reduce_none,
  3, 266, :_reduce_none,
  3, 266, :_reduce_none,
  4, 223, :_reduce_none,
  4, 223, :_reduce_371,
  2, 186, :_reduce_372,
  4, 186, :_reduce_none,
  4, 186, :_reduce_none,
  2, 229, :_reduce_375,
  4, 229, :_reduce_376,
  4, 229, :_reduce_377,
  3, 229, :_reduce_378,
  3, 229, :_reduce_none,
  3, 229, :_reduce_none,
  2, 229, :_reduce_381,
  1, 229, :_reduce_382,
  4, 229, :_reduce_383,
  4, 228, :_reduce_384,
  4, 228, :_reduce_385,
  5, 239, :_reduce_386,
  1, 269, :_reduce_387,
  1, 269, :_reduce_none,
  6, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  2, 271, :_reduce_none,
  1, 271, :_reduce_none,
  2, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 218, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 273, :_reduce_none,
  3, 274, :_reduce_405,
  3, 219, :_reduce_406,
  3, 220, :_reduce_407,
  3, 221, :_reduce_none,
  3, 221, :_reduce_none,
  0, 277, :_reduce_none,
  3, 277, :_reduce_none,
  1, 278, :_reduce_none,
  2, 278, :_reduce_none,
  3, 222, :_reduce_none,
  3, 222, :_reduce_none,
  0, 280, :_reduce_416,
  3, 280, :_reduce_none,
  0, 275, :_reduce_418,
  2, 275, :_reduce_419,
  0, 276, :_reduce_420,
  2, 276, :_reduce_421,
  1, 279, :_reduce_422,
  2, 279, :_reduce_423,
  3, 279, :_reduce_424,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  2, 206, :_reduce_429,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  3, 207, :_reduce_434,
  1, 272, :_reduce_435,
  1, 272, :_reduce_436,
  2, 272, :_reduce_none,
  2, 272, :_reduce_none,
  1, 199, :_reduce_439,
  1, 199, :_reduce_440,
  1, 199, :_reduce_441,
  1, 199, :_reduce_442,
  1, 199, :_reduce_443,
  1, 199, :_reduce_444,
  1, 199, :_reduce_445,
  1, 199, :_reduce_446,
  1, 199, :_reduce_447,
  1, 199, :_reduce_448,
  1, 199, :_reduce_449,
  1, 199, :_reduce_450,
  1, 199, :_reduce_451,
  1, 224, :_reduce_none,
  1, 172, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 243, :_reduce_456,
  3, 243, :_reduce_457,
  2, 243, :_reduce_458,
  3, 247, :_reduce_459,
  2, 247, :_reduce_460,
  6, 267, :_reduce_461,
  8, 267, :_reduce_462,
  4, 267, :_reduce_463,
  6, 267, :_reduce_464,
  4, 267, :_reduce_465,
  6, 267, :_reduce_466,
  2, 267, :_reduce_467,
  4, 267, :_reduce_468,
  6, 267, :_reduce_469,
  2, 267, :_reduce_470,
  4, 267, :_reduce_471,
  2, 267, :_reduce_472,
  4, 267, :_reduce_473,
  1, 267, :_reduce_474,
  0, 267, :_reduce_475,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_481,
  3, 251, :_reduce_482,
  2, 251, :_reduce_483,
  1, 284, :_reduce_484,
  3, 284, :_reduce_none,
  1, 255, :_reduce_486,
  3, 255, :_reduce_487,
  3, 285, :_reduce_none,
  3, 286, :_reduce_none,
  1, 256, :_reduce_none,
  3, 256, :_reduce_none,
  1, 283, :_reduce_492,
  3, 283, :_reduce_493,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 257, :_reduce_496,
  1, 257, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 259, :_reduce_500,
  3, 259, :_reduce_501,
  2, 258, :_reduce_502,
  1, 258, :_reduce_none,
  1, 248, :_reduce_none,
  3, 248, :_reduce_none,
  1, 227, :_reduce_506,
  2, 227, :_reduce_507,
  1, 212, :_reduce_508,
  3, 212, :_reduce_509,
  3, 289, :_reduce_510,
  2, 289, :_reduce_511,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 187, :_reduce_515,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 268, :_reduce_519,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  0, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 194, :_reduce_none,
  2, 175, :_reduce_none,
  0, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  0, 156, :_reduce_none ]

racc_reduce_n = 538

racc_shift_n = 951

racc_token_table = {
  false => 0,
  :error => 1,
  "!" => 2,
  :tTILDE => 3,
  :tUPLUS => 4,
  :tPOW => 5,
  :tUMINUS_NUM => 6,
  :tUMINUS => 7,
  :tSTAR2 => 8,
  :tDIVIDE => 9,
  :tPERCENT => 10,
  :tPLUS => 11,
  :tMINUS => 12,
  :tLSHFT => 13,
  :tRSHFT => 14,
  :tAMPER2 => 15,
  :tPIPE => 16,
  :tCARET => 17,
  ">" => 18,
  :tGEQ => 19,
  "<" => 20,
  :tLEQ => 21,
  :tCMP => 22,
  :tEQ => 23,
  :tEQQ => 24,
  :tNEQ => 25,
  :tMATCH => 26,
  :tNMATCH => 27,
  :tANDOP => 28,
  :tOROP => 29,
  :tDOT2 => 30,
  :tDOT3 => 31,
  "?" => 32,
  ":" => 33,
  :kRESCUE_MOD => 34,
  "=" => 35,
  :tOP_ASGN => 36,
  :kDEFINED => 37,
  :kNOT => 38,
  :kOR => 39,
  :kAND => 40,
  :kIF_MOD => 41,
  :kUNLESS_MOD => 42,
  :kWHILE_MOD => 43,
  :kUNTIL_MOD => 44,
  :tLBRACE_ARG => 45,
  :tLOWEST => 46,
  :kCLASS => 47,
  :kMODULE => 48,
  :kDEF => 49,
  :kUNDEF => 50,
  :kBEGIN => 51,
  :kRESCUE => 52,
  :kENSURE => 53,
  :kEND => 54,
  :kIF => 55,
  :kUNLESS => 56,
  :kTHEN => 57,
  :kELSIF => 58,
  :kELSE => 59,
  :kCASE => 60,
  :kWHEN => 61,
  :kWHILE => 62,
  :kUNTIL => 63,
  :kFOR => 64,
  :kBREAK => 65,
  :kNEXT => 66,
  :kREDO => 67,
  :kRETRY => 68,
  :kIN => 69,
  :kDO => 70,
  :kDO_COND => 71,
  :kDO_BLOCK => 72,
  :kDO_LAMBDA => 73,
  :kRETURN => 74,
  :kYIELD => 75,
  :kSUPER => 76,
  :kSELF => 77,
  :kNIL => 78,
  :kTRUE => 79,
  :kFALSE => 80,
  :kALIAS => 81,
  :klBEGIN => 82,
  :klEND => 83,
  :k__LINE__ => 84,
  :k__FILE__ => 85,
  :k__ENCODING__ => 86,
  :kDEFined => 87,
  :kBLOCK_GIVEN => 88,
  :tIDENTIFIER => 89,
  :tFID => 90,
  :tGVAR => 91,
  :tIVAR => 92,
  :tCONSTANT => 93,
  :tCVAR => 94,
  :tLABEL => 95,
  :tINTEGER => 96,
  :tFLOAT => 97,
  :tSTRING_CONTENT => 98,
  :tCHAR => 99,
  :tNTH_REF => 100,
  :tBACK_REF => 101,
  :tREGEXP_END => 102,
  :tAREF => 103,
  :tASET => 104,
  :tCOLON2 => 105,
  :tCOLON3 => 106,
  :tASSOC => 107,
  :tLPAREN => 108,
  :tLPAREN_ARG => 109,
  :tRPAREN => 110,
  :tLBRACK => 111,
  :tLBRACE => 112,
  :tSTAR => 113,
  :tAMPER => 114,
  :tLAMBDA => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSTRING_DBEG => 122,
  :tSTRING_DVAR => 123,
  :tSTRING_END => 124,
  :tLAMBEG => 125,
  :tSTRING => 126,
  :tXSTRING_END => 127,
  "{" => 128,
  "}" => 129,
  "[" => 130,
  "." => 131,
  "," => 132,
  "|" => 133,
  "^" => 134,
  "&" => 135,
  "+" => 136,
  "-" => 137,
  "*" => 138,
  "/" => 139,
  "%" => 140,
  "~" => 141,
  "`" => 142,
  "(" => 143,
  ")" => 144,
  "]" => 145,
  ";" => 146,
  " " => 147,
  "\\n" => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"!\"",
  "tTILDE",
  "tUPLUS",
  "tPOW",
  "tUMINUS_NUM",
  "tUMINUS",
  "tSTAR2",
  "tDIVIDE",
  "tPERCENT",
  "tPLUS",
  "tMINUS",
  "tLSHFT",
  "tRSHFT",
  "tAMPER2",
  "tPIPE",
  "tCARET",
  "\">\"",
  "tGEQ",
  "\"<\"",
  "tLEQ",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tMATCH",
  "tNMATCH",
  "tANDOP",
  "tOROP",
  "tDOT2",
  "tDOT3",
  "\"?\"",
  "\":\"",
  "kRESCUE_MOD",
  "\"=\"",
  "tOP_ASGN",
  "kDEFINED",
  "kNOT",
  "kOR",
  "kAND",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "tLBRACE_ARG",
  "tLOWEST",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kALIAS",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "kDEFined",
  "kBLOCK_GIVEN",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tLABEL",
  "tINTEGER",
  "tFLOAT",
  "tSTRING_CONTENT",
  "tCHAR",
  "tNTH_REF",
  "tBACK_REF",
  "tREGEXP_END",
  "tAREF",
  "tASET",
  "tCOLON2",
  "tCOLON3",
  "tASSOC",
  "tLPAREN",
  "tLPAREN_ARG",
  "tRPAREN",
  "tLBRACK",
  "tLBRACE",
  "tSTAR",
  "tAMPER",
  "tLAMBDA",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tLAMBEG",
  "tSTRING",
  "tXSTRING_END",
  "\"{\"",
  "\"}\"",
  "\"[\"",
  "\".\"",
  "\",\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "\"`\"",
  "\"(\"",
  "\")\"",
  "\"]\"",
  "\";\"",
  "\" \"",
  "\"\\\\n\"",
  "$start",
  "target",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "do_block",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "k_while",
  "do",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "f_args",
  "operation3",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "sym",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 103)
  def _reduce_1(val, _values, result)
                        # puts 'well, we got here..'
                    # puts val[0]
                    @parser_result = val[0]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 111)
  def _reduce_2(val, _values, result)
                        self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 115)
  def _reduce_3(val, _values, result)
                        # puts 'program'
                    # puts val[1]
                    result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 122)
  def _reduce_4(val, _values, result)
                        # puts 'top_compstmt'
                    # puts val[0]
                    # puts val[1]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 130)
  def _reduce_5(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 134)
  def _reduce_6(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 138)
  def _reduce_7(val, _values, result)
                        result = val[0] + [val[2]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 142)
  def _reduce_8(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 147)
  def _reduce_9(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 153)
  def _reduce_11(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 158)
  def _reduce_12(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 163)
  def _reduce_13(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 167)
  def _reduce_14(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 171)
  def _reduce_15(val, _values, result)
                        result = val[0] + [val[2]]
		              
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 177)
  def _reduce_17(val, _values, result)
                        self.lex_state = :EXPR_FNAME
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 181)
  def _reduce_18(val, _values, result)
                        result = node :alias, :lhs => val[1], :rhs => val[3] 
                  
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 189)
  def _reduce_23(val, _values, result)
                		    result = node :if_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 193)
  def _reduce_24(val, _values, result)
                		    result = node :unless_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 201)
  def _reduce_29(val, _values, result)
                		    result = node :assign, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 206)
  def _reduce_31(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 221)
  def _reduce_42(val, _values, result)
                  	    result = node :andop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 225)
  def _reduce_43(val, _values, result)
                  	    result = node :orop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 229)
  def _reduce_44(val, _values, result)
                  	    result = node :not, :expr => val[2]
              	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 240)
  def _reduce_50(val, _values, result)
                  	    result = node :return, :call_args => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 244)
  def _reduce_51(val, _values, result)
                	      result = node :break, :call_args => val[1]
            	    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 248)
  def _reduce_52(val, _values, result)
                	      result = node :next, :call_args => val[1]
            	    
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 259)
  def _reduce_57(val, _values, result)
                        # command call - no brackets/recv
          		      result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 265)
  def _reduce_59(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 272)
  def _reduce_63(val, _values, result)
          		          result = node :super, :call_args => val[1]
      		        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 276)
  def _reduce_64(val, _values, result)
            	          result = node :yield, :call_args => val[1]
        	        
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 317)
  def _reduce_94(val, _values, result)
    		                result = node :call, :recv => val[0], :meth => '[]', :args => val[2]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 321)
  def _reduce_95(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2]
                  
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 328)
  def _reduce_99(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 334)
  def _reduce_101(val, _values, result)
                        puts 'ERROR: cant use identifier for class/mod name'
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 338)
  def _reduce_102(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 344)
  def _reduce_103(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 347)
  def _reduce_104(val, _values, result)
      	                result = node :path, :cname => val[0]
  	              
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 356)
  def _reduce_109(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 361)
  def _reduce_110(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 397)
  def _reduce_187(val, _values, result)
                        result = node :assign, :lhs => val[0], :rhs => val[2]
                  
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 402)
  def _reduce_189(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 190 omitted

# reduce 191 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 408)
  def _reduce_192(val, _values, result)
                		    result = node :op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
                    # result = node :dot_identifier_op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
            		  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 418)
  def _reduce_198(val, _values, result)
                		    result = node :dot2, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 422)
  def _reduce_199(val, _values, result)
                		    result = node :dot3, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 426)
  def _reduce_200(val, _values, result)
                		    result = node :opt_plus, :recv => val[0], :meth => '+', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 430)
  def _reduce_201(val, _values, result)
                		    result = node :opt_minus, :recv => val[0], :meth => '-', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 434)
  def _reduce_202(val, _values, result)
                		    result = node :opt_mult, :recv => val[0], :meth => '*', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 438)
  def _reduce_203(val, _values, result)
                		    result = node :opt_div, :recv => val[0], :meth => '/', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 442)
  def _reduce_204(val, _values, result)
                		    result = node :opt_mod, :recv => val[0], :meth => '%', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 446)
  def _reduce_205(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '**', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 453)
  def _reduce_209(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '-@', :call_args => { :args => []}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 457)
  def _reduce_210(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '|', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 461)
  def _reduce_211(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '^', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 465)
  def _reduce_212(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '&', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 469)
  def _reduce_213(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 473)
  def _reduce_214(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 477)
  def _reduce_215(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 481)
  def _reduce_216(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 485)
  def _reduce_217(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 489)
  def _reduce_218(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '==', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 493)
  def _reduce_219(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '===', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 497)
  def _reduce_220(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 501)
  def _reduce_221(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '=~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 505)
  def _reduce_222(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 509)
  def _reduce_223(val, _values, result)
                  	    result = node :not, :expr => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 513)
  def _reduce_224(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 517)
  def _reduce_225(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 521)
  def _reduce_226(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 525)
  def _reduce_227(val, _values, result)
                		    result = node :andop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 529)
  def _reduce_228(val, _values, result)
                		    result = node :orop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 534)
  def _reduce_230(val, _values, result)
                		    result = node :tertiary, :expr => val[0], :true => val[2], :false => val[5]
            		  
    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 547)
  def _reduce_237(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 552)
  def _reduce_238(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 558)
  def _reduce_240(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 564)
  def _reduce_242(val, _values, result)
                		    result = node :call_args, :args => [val[0]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 568)
  def _reduce_243(val, _values, result)
                		    result = node :call_args, :args => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 572)
  def _reduce_244(val, _values, result)
                		    result = node :call_args, :assocs => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 576)
  def _reduce_245(val, _values, result)
                		    result = node :call_args, :args => val[0], :assocs => val[2], :block_arg => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 580)
  def _reduce_246(val, _values, result)
                		    result = node :call_args, :block_arg => val[0]
            		  
    result
  end
.,.,

# reduce 247 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 587)
  def _reduce_248(val, _values, result)
                        # puts "here for #{val[1]}"
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 593)
  def _reduce_249(val, _values, result)
                        resul = val[1]
                  
    result
  end
.,.,

# reduce 250 omitted

# reduce 251 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 600)
  def _reduce_252(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 604)
  def _reduce_253(val, _values, result)
    		                result = [val[1]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 608)
  def _reduce_254(val, _values, result)
    		                result = val[0] + [val[2]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 612)
  def _reduce_255(val, _values, result)
    		                result = val[0] + [val[3]]
		              
    result
  end
.,.,

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 627)
  def _reduce_265(val, _values, result)
                        # if val[0].node == :self
                      # result = val[0]
                    # else
                      # HACK: this rule shouldnt even exist. But for now it must for "identifier do .. end"
                      result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
                    # end
                  
    result
  end
.,.,

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 641)
  def _reduce_271(val, _values, result)
                		    result = node :lparen, :stmt => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 645)
  def _reduce_272(val, _values, result)
                		    result = node :colon2, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 649)
  def _reduce_273(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 653)
  def _reduce_274(val, _values, result)
                		    result = node :array, :args => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 657)
  def _reduce_275(val, _values, result)
                		    result = node :assoc_list, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 661)
  def _reduce_276(val, _values, result)
                		    result = node :return
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 665)
  def _reduce_277(val, _values, result)
            	          result = node :yield, :call_args => val[2]
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 669)
  def _reduce_278(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 673)
  def _reduce_279(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 681)
  def _reduce_284(val, _values, result)
                		    # puts 2
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 685)
  def _reduce_285(val, _values, result)
                		    val[0][:brace_block] = val[1]
            		    result = val[0]
            		  
    result
  end
.,.,

# reduce 286 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 691)
  def _reduce_287(val, _values, result)
                		    result = self.node :if, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 695)
  def _reduce_288(val, _values, result)
                		    result = self.node :unless, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

# reduce 289 omitted

# reduce 290 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 701)
  def _reduce_291(val, _values, result)
                		    result = node :case, :expr => val[1], :body => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 705)
  def _reduce_292(val, _values, result)
                		    result = node :case, :expr => nil, :body => val[2]
            		  
    result
  end
.,.,

# reduce 293 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 710)
  def _reduce_294(val, _values, result)
                		    result = self.node_class(:cpath => val[1], :superclass => val[2], :bodystmt => val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 714)
  def _reduce_295(val, _values, result)
                		    result = node :class_shift, :expr => val[2], :bodystmt => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 718)
  def _reduce_296(val, _values, result)
                		    result = self.node_module(:cpath => val[1], :body => val[2])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 722)
  def _reduce_297(val, _values, result)
                		    result = self.node :def, :fname => val[1], :arglist => val[2], :bodystmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 726)
  def _reduce_298(val, _values, result)
                		    result = self.node :def, :singleton => val[1], :fname => val[3], :arglist => val[4], :bodystmt => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 730)
  def _reduce_299(val, _values, result)
                		    result = node :break, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 734)
  def _reduce_300(val, _values, result)
                		    result = node :next, :call_args => nil
            		  
    result
  end
.,.,

# reduce 301 omitted

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

# reduce 312 omitted

# reduce 313 omitted

# reduce 314 omitted

# reduce 315 omitted

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 772)
  def _reduce_320(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 776)
  def _reduce_321(val, _values, result)
                  	    result = [self.node(:elsif, :expr => val[1], :stmt => val[3])] + val[4]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 781)
  def _reduce_322(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 785)
  def _reduce_323(val, _values, result)
                  	    result = [self.node(:else, :stmt => val[1])]
              	  
    result
  end
.,.,

# reduce 324 omitted

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 825)
  def _reduce_354(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

# reduce 355 omitted

# reduce 356 omitted

# reduce 357 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 833)
  def _reduce_358(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 359 omitted

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 856)
  def _reduce_371(val, _values, result)
                        result = node :brace_block, :params => val[1], :stmt => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 861)
  def _reduce_372(val, _values, result)
                        val[0][:brace_block] = val[1]
                    result = val[0]
                  
    result
  end
.,.,

# reduce 373 omitted

# reduce 374 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 869)
  def _reduce_375(val, _values, result)
                        result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 873)
  def _reduce_376(val, _values, result)
                        result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 877)
  def _reduce_377(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2], :args => val[3]
              	    puts "tCOLON2call"
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 882)
  def _reduce_378(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2]
              	    puts "tCOLON2call.noargs."
              	  
    result
  end
.,.,

# reduce 379 omitted

# reduce 380 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 889)
  def _reduce_381(val, _values, result)
                		    result = node :super, :call_args => val[1], :paren => true
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 893)
  def _reduce_382(val, _values, result)
                		    result = node :super, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 897)
  def _reduce_383(val, _values, result)
                        result = node :call, :recv => val[0], :meth => '[]', :call_args => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 903)
  def _reduce_384(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 907)
  def _reduce_385(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 912)
  def _reduce_386(val, _values, result)
                        result = [node(:when, :args => val[1], :stmt => val[3])] + val[4]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 917)
  def _reduce_387(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 388 omitted

# reduce 389 omitted

# reduce 390 omitted

# reduce 391 omitted

# reduce 392 omitted

# reduce 393 omitted

# reduce 394 omitted

# reduce 395 omitted

# reduce 396 omitted

# reduce 397 omitted

# reduce 398 omitted

# reduce 399 omitted

# reduce 400 omitted

# reduce 401 omitted

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 946)
  def _reduce_405(val, _values, result)
                        result = node :string, :value => val[1], :beg => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 951)
  def _reduce_406(val, _values, result)
                        result = node :xstring, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 956)
  def _reduce_407(val, _values, result)
                        result = node :regexp, :value => val[1]
                  
    result
  end
.,.,

# reduce 408 omitted

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 973)
  def _reduce_416(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

# reduce 417 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 980)
  def _reduce_418(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 985)
  def _reduce_419(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 990)
  def _reduce_420(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 995)
  def _reduce_421(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1000)
  def _reduce_422(val, _values, result)
                        result = node :string_content, :value => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1004)
  def _reduce_423(val, _values, result)
                        result = node :string_dvar, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1008)
  def _reduce_424(val, _values, result)
                        result = node :string_dbeg, :value => val[1]
                  
    result
  end
.,.,

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1018)
  def _reduce_429(val, _values, result)
                        result = node :symbol, :name => val[1]
                  
    result
  end
.,.,

# reduce 430 omitted

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1028)
  def _reduce_434(val, _values, result)
                        result = node :dsym, :contents => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1033)
  def _reduce_435(val, _values, result)
                        result = node :numeric, :value => val[0], :float => false
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1037)
  def _reduce_436(val, _values, result)
                        result = node :numeric, :value => val[0], :float => true
                  
    result
  end
.,.,

# reduce 437 omitted

# reduce 438 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1045)
  def _reduce_439(val, _values, result)
                        result = node :identifier, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1049)
  def _reduce_440(val, _values, result)
                        result = node :ivar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1053)
  def _reduce_441(val, _values, result)
                        result = node :gvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1057)
  def _reduce_442(val, _values, result)
                        result = node :constant, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1061)
  def _reduce_443(val, _values, result)
                        result = node :cvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1065)
  def _reduce_444(val, _values, result)
                        result = node :nil, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1069)
  def _reduce_445(val, _values, result)
                        result = node :self, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1073)
  def _reduce_446(val, _values, result)
                        result = node :true, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1077)
  def _reduce_447(val, _values, result)
                        result = node :false, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1081)
  def _reduce_448(val, _values, result)
                        result = node :__FILE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1085)
  def _reduce_449(val, _values, result)
                        result = node :__LINE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1089)
  def _reduce_450(val, _values, result)
                        result = node :__ENCODING__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1093)
  def _reduce_451(val, _values, result)
                        # added for block_given? support.. :D
                    result = node :block_given
                  
    result
  end
.,.,

# reduce 452 omitted

# reduce 453 omitted

# reduce 454 omitted

# reduce 455 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1106)
  def _reduce_456(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1110)
  def _reduce_457(val, _values, result)
                		    result = node :superclass, :expr => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1112)
  def _reduce_458(val, _values, result)
     puts 'OMFG' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1116)
  def _reduce_459(val, _values, result)
                        result = val[1]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1121)
  def _reduce_460(val, _values, result)
                        result = val[0]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1127)
  def _reduce_461(val, _values, result)
                        result = node_args(val[0], val[2], val[4], nil, val[5])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1131)
  def _reduce_462(val, _values, result)
                 		    result = node_args(val[0], val[2], val[4], val[6], val[7])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1135)
  def _reduce_463(val, _values, result)
                  	    result = node_args(val[0], val[2], nil, nil, val[3])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1139)
  def _reduce_464(val, _values, result)
                		    result = node_args(val[0], val[2], nil, val[4], val[5])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1143)
  def _reduce_465(val, _values, result)
                		    result = node_args(val[0], nil, val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1147)
  def _reduce_466(val, _values, result)
                		    result = node_args(val[0], nil, val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1151)
  def _reduce_467(val, _values, result)
                 		    result = node_args(val[0], nil, nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1155)
  def _reduce_468(val, _values, result)
                		    result = node_args(nil, val[0], val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1159)
  def _reduce_469(val, _values, result)
                		    result = node_args(nil, val[0], val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1163)
  def _reduce_470(val, _values, result)
                 		    result = node_args(nil, val[0], nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1167)
  def _reduce_471(val, _values, result)
                 		    result = node_args(nil, val[0], nil, val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1171)
  def _reduce_472(val, _values, result)
                 		    result = node_args(nil, nil, val[0], nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1175)
  def _reduce_473(val, _values, result)
                 		    result = node_args(nil, nil, val[0], val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1179)
  def _reduce_474(val, _values, result)
                 		    result = node_args(nil, nil, nil, nil, val[0])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1183)
  def _reduce_475(val, _values, result)
                  	    result = node_args(nil, nil, nil, nil, nil)
              	  
    result
  end
.,.,

# reduce 476 omitted

# reduce 477 omitted

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1194)
  def _reduce_481(val, _values, result)
                        # result = val[0]
              	    result = node :norm_arg, :value => val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1200)
  def _reduce_482(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1203)
  def _reduce_483(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1208)
  def _reduce_484(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 485 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1214)
  def _reduce_486(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1218)
  def _reduce_487(val, _values, result)
                        # val[0] + val[2]
                    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1231)
  def _reduce_492(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1235)
  def _reduce_493(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 494 omitted

# reduce 495 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1243)
  def _reduce_496(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1252)
  def _reduce_500(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1256)
  def _reduce_501(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1261)
  def _reduce_502(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1270)
  def _reduce_506(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1274)
  def _reduce_507(val, _values, result)
                  	    result = val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1279)
  def _reduce_508(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1283)
  def _reduce_509(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1288)
  def _reduce_510(val, _values, result)
                        result = node :assoc, :key => val[0], :value => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1292)
  def _reduce_511(val, _values, result)
                        result = node :label_assoc, :key => val[0], :value => val[1]
                  
    result
  end
.,.,

# reduce 512 omitted

# reduce 513 omitted

# reduce 514 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1302)
  def _reduce_515(val, _values, result)
                      
    result
  end
.,.,

# reduce 516 omitted

# reduce 517 omitted

# reduce 518 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1309)
  def _reduce_519(val, _values, result)
                        puts 4
                  
    result
  end
.,.,

# reduce 520 omitted

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyParser
  end   # module Vienna


