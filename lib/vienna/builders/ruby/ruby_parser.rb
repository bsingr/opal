#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
  #
# $Id$
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6'
    Racc_Runtime_Revision = '$Id$'

    Racc_Runtime_Core_Version_R = '1.4.6'
    Racc_Runtime_Core_Revision_R = '$Id$'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end


# require 'ctokenizer'
require 'strscan'

module Vienna
  class RubyParser < Racc::Parser

module_eval(<<'...end ruby_parser.rb.y/module_eval...', 'ruby_parser.rb.y', 1336)


...end ruby_parser.rb.y/module_eval...
##### State transition tables begin ###

clist = [
'-10,326,327,326,327,-521,326,327,405,434,-521,326,327,330,-93,4,478',
'-66,-521,-521,812,326,327,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-521,-521,-96,800,814,-521,-521,-521,-521',
'-521,-521,-521,478,478,478,478,815,420,-521,-521,-521,422,806,-521,-521',
'-521,603,-521,-274,-100,307,-99,553,-274,-97,710,-521,-521,-521,-521',
'-85,-274,-274,435,816,606,-274,-274,-274,-274,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-100,-274,-98,702,808,-274,-274,-274,-274',
'-274,-274,-521,330,-521,330,-80,649,330,-274,-274,-274,475,330,818,-274',
'-274,524,-274,-94,824,282,-521,285,435,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-521,-10,547,-10,-521,-521,-521,482,-521',
'475,475,475,475,-87,348,-89,-93,-455,-92,-92,470,-91,339,342,-89,467',
'-274,351,353,356,359,335,337,340,343,345,347,524,-229,355,357,358,-528',
'-95,709,-97,-87,823,-89,-96,-274,-274,-274,-90,-274,-274,-274,-274,-274',
'-274,-274,-274,-97,-523,282,-274,285,-274,-523,-274,282,524,285,-94',
'330,547,-523,-523,282,-86,285,-523,-523,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,-523,-523,-523,-523,-523,-99,482,-95,-523,-523,-523',
'-523,-523,-523,-523,514,-89,-87,547,-89,-85,-523,-523,-523,512,513,-523',
'-523,-523,-87,-523,-89,-93,-87,282,-89,285,-95,253,-523,-523,-523,-523',
'-517,-86,348,-96,-87,-96,338,341,344,346,349,350,352,354,348,282,-97',
'285,-97,798,-449,330,348,439,524,282,-91,285,-87,790,339,342,-523,330',
'-523,351,353,356,359,335,337,340,343,345,347,253,-449,355,357,358,795',
'282,-523,285,255,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523',
'-523,-523,-94,-270,330,-523,-523,-523,-270,-523,437,-93,-455,-93,-274',
'-93,-270,-270,-95,790,-95,-270,-270,-270,-270,-270,-270,-270,-270,-270',
'-270,-270,-270,-270,-270,-270,-270,-270,255,-274,-274,-270,-270,-270',
'-270,-270,-270,-270,282,282,285,285,-518,250,-270,-270,-270,417,418',
'-270,-270,-270,788,-270,338,341,344,346,349,350,352,354,-270,-270,-270',
'-270,338,341,344,346,349,350,352,354,338,341,344,346,349,350,352,354',
'-94,612,-94,-100,469,489,348,786,282,516,285,767,426,581,339,342,-270',
'611,-270,351,353,356,359,335,337,340,343,345,347,485,486,355,357,358',
'517,518,-270,-98,428,524,-270,-270,-270,-270,-270,-270,-270,-270,-270',
'-270,-270,-270,-96,-522,722,-270,-270,-270,-522,-270,326,327,-448,-446',
'-95,802,-522,-522,282,771,285,-522,-522,-522,-522,-522,-522,-522,-522',
'-522,-522,-522,-522,-522,-522,-522,-522,-522,-448,-446,-385,-522,-522',
'-522,-522,-522,-522,-522,612,785,365,-90,366,784,-522,-522,-522,446',
'330,-522,-522,-522,-518,-522,611,840,-88,-274,-454,-447,-454,-274,-522',
'-522,-522,-522,-385,-517,348,282,767,285,224,623,338,341,344,346,349',
'350,352,354,-274,-274,623,-447,-274,-274,348,-385,-450,-385,-385,218',
'-454,-518,339,342,-522,-518,-522,351,353,356,359,335,337,340,343,345',
'347,-97,803,355,357,358,-450,761,-522,-454,-454,-522,-522,-522,-522',
'-522,-522,-522,-522,-522,-522,-522,-522,-522,612,-521,609,-522,-522',
'-522,-521,-522,-452,365,623,366,-451,330,-521,-521,611,250,611,-521',
'-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'-452,-521,-96,701,-451,-521,-521,-521,-521,-521,-521,282,330,285,489',
'461,326,327,-521,-521,-521,282,839,285,-521,-521,250,-521,338,341,344',
'346,349,350,352,354,-521,923,485,486,462,463,348,508,282,-441,285,-234',
'338,341,344,346,349,350,352,354,832,767,623,-444,348,-275,924,925,489',
'843,276,844,339,342,348,-441,-521,351,353,356,359,335,337,340,343,345',
'347,-227,-229,-444,-275,-275,485,486,529,277,278,414,384,-521,-521,-521',
'-521,-88,-521,-521,-521,-521,-521,-521,-521,-521,-255,-274,771,-521',
'767,-521,-274,-521,311,312,415,416,385,330,-274,-274,-94,871,330,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274',
'-274,-274,-98,702,330,-274,-274,-274,-274,-274,-274,-274,-99,553,-80',
'-275,742,-275,-274,-274,-274,832,767,-274,-274,-274,623,-274,338,341',
'344,346,349,350,352,354,-274,-274,-274,-274,-275,-275,-275,-275,581',
'623,338,341,344,346,349,350,352,354,727,537,338,341,344,346,349,350',
'352,354,450,594,221,225,227,230,232,348,-274,22,-274,30,726,44,48,339',
'342,536,853,234,695,696,-254,697,721,224,595,596,-274,33,40,857,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,109,771,218,-274',
'-274,-274,718,-274,489,53,60,66,-256,124,330,330,330,93,100,489,862',
'446,19,662,29,35,42,47,54,61,67,435,485,486,487,330,94,101,106,5,9,16',
'24,485,486,506,868,51,58,64,69,75,80,86,88,91,98,104,660,10,17,652,28',
'33,40,-521,649,623,550,251,-254,125,84,633,97,103,874,-305,13,18,25',
'27,34,41,45,241,630,30,348,44,48,338,341,344,346,349,350,352,354,318',
'625,-521,-305,-305,55,319,320,321,322,-269,623,330,450,348,221,225,227',
'230,453,881,132,339,342,470,-521,620,-521,-521,509,53,60,66,608,124',
'-269,-269,810,93,100,-517,-269,598,19,597,29,35,42,117,118,61,67,771',
'589,462,510,866,127,101,106,5,9,16,24,623,623,-269,-269,51,58,64,69',
'75,80,86,88,91,98,104,236,10,17,330,28,33,40,-65,908,505,581,251,580',
'125,84,623,97,103,259,237,13,18,25,27,34,41,45,22,348,30,556,44,48,415',
'416,554,339,342,338,341,344,346,349,350,352,354,55,535,534,-257,623',
'533,450,330,221,225,227,230,453,790,790,903,109,338,341,344,346,349',
'350,352,354,53,60,66,532,124,906,520,868,93,100,489,790,519,19,515,29',
'35,42,47,54,61,67,482,909,663,910,912,94,101,106,5,9,16,24,485,486,790',
'915,51,58,64,69,75,80,86,88,91,98,104,790,10,17,481,28,33,40,474,-444',
'470,-444,251,467,125,84,623,97,103,464,460,13,18,25,27,34,41,45,22,456',
'30,926,44,48,444,441,868,338,341,344,346,349,350,352,354,-444,440,55',
'436,405,250,318,282,394,285,330,348,319,320,321,322,396,333,109,339',
'342,330,25,-515,625,-444,-444,53,60,66,73,78,790,868,-517,93,100,-518',
'-515,790,19,945,29,35,42,47,54,61,67,790,-441,790,-441,317,94,101,106',
'5,9,16,24,31,313,310,49,51,58,64,69,75,80,86,88,91,98,104,330,10,17',
'309,28,33,40,133,112,111,-441,71,790,81,84,,97,103,110,,13,18,25,27',
'34,41,45,22,,30,,44,48,-514,,-441,-441,450,,221,225,227,230,453,,,55',
',-514,,780,505,221,225,227,230,454,,,,,452,109,338,341,344,346,349,350',
'352,354,53,60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94',
'101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,,10,17,',
'28,33,40,-521,,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,338,341',
'344,346,349,350,352,354,,147,,156,161,,168,,-521,,,55,193,197,,,505',
'207,135,139,144,153,158,162,165,169,173,,,,,-521,,-521,-521,,,,681,',
'221,225,227,230,232,215,-517,221,225,227,230,232,,,,,147,234,156,161',
',168,220,224,234,,,193,197,220,224,,207,135,139,144,153,158,162,165',
'169,173,,,218,,,229,669,492,,218,670,,229,649,,,318,430,348,,174,178',
'319,320,321,322,339,342,,,209,351,353,356,359,335,337,340,343,345,347',
',,355,357,358,,,,,138,142,146,151,155,160,164,167,171,176,250,748,500',
',,749,,450,,221,225,227,230,453,,174,178,147,,156,161,,168,,,209,454',
',193,197,,792,,207,135,139,144,153,158,162,165,169,173,,,138,142,146',
'151,155,160,164,167,171,176,250,,215,,221,225,227,230,232,450,318,221',
'225,227,230,453,319,320,321,322,780,234,221,225,227,230,220,224,454',
',,338,341,344,346,349,350,352,354,,,215,,221,225,227,230,232,218,937',
'492,229,,938,,,213,,,,234,,,174,178,220,224,,,,241,,30,209,44,48,338',
'341,344,346,349,350,352,354,,,,218,,,229,,,138,142,146,151,155,160,164',
'167,171,176,250,,132,450,,221,225,227,230,453,,53,60,66,,124,,,,93,100',
',454,,19,,29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51,58',
'64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97',
'103,259,237,13,18,25,27,34,41,45,,,,,,,147,,156,161,,168,,,,,,193,197',
'55,,394,207,135,139,144,153,158,162,165,169,173,215,,221,225,227,230',
'232,215,,221,225,227,230,232,,,,,,234,,,,,220,224,234,,,,,220,224,450',
',221,225,227,230,232,,,,,,,218,,,229,,,234,218,430,,229,,224,,,745,492',
',450,746,221,225,227,230,453,,,,,174,178,,,218,,,241,454,30,209,44,48',
'452,,,,,,,,,450,,221,225,227,230,453,,138,142,146,151,155,160,164,167',
'171,176,250,454,132,450,,221,225,227,230,453,,53,60,66,,124,,,,93,100',
',454,,19,,29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51,58',
'64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97',
'103,259,237,13,18,25,27,34,41,45,,,,,,,147,,156,161,,168,,,,,,193,197',
'55,,250,207,135,139,144,153,158,162,165,169,173,681,,221,225,227,230',
'232,215,,221,225,227,230,232,,,,,,234,,,,,220,224,234,,,,,220,224,450',
',221,225,227,230,232,,,,,,,218,,,229,,,234,218,,,229,,224,,,672,500',
',450,673,221,225,227,230,453,,,,,174,178,,,218,,,-515,454,-515,209,-515',
'-515,,,,,,,,,,,,,,,,,,138,142,146,151,155,160,164,167,171,176,250,,-515',
',,,,,,,,-515,-515,-515,,-515,,,,-515,-515,,,,-515,,-515,-515,-515,-515',
'-515,-515,-515,,,,,,-515,-515,-515,-515,-515,-515,-515,,,,,-515,-515',
'-515,-515,-515,-515,-515,-515,-515,-515,-515,-515,-515,-515,,-515,-515',
'-515,,,,,-515,,-515,-515,,-515,-515,-515,-515,-515,-515,-515,-515,-515',
'-515,-515,,,,,,,-515,,,,,147,,156,161,,168,,,-515,,-515,193,197,,,,207',
'135,139,144,153,158,162,165,169,173,,,,,,,,,,,,215,,221,225,227,230',
'232,681,,221,225,227,230,232,,,,,147,234,156,161,,168,220,224,234,,',
'193,197,220,224,,207,135,139,144,153,158,162,165,169,173,,,218,,,229',
'715,500,,218,716,,229,,,,,,,,174,178,681,,221,225,227,230,232,,209,',
',,,,,,,,,234,,,,,220,224,,,138,142,146,151,155,160,164,167,171,176,250',
'712,492,,,713,,,218,,,229,,,,174,178,,,,348,,241,,30,209,44,48,339,342',
',,,351,353,356,359,335,337,340,343,345,347,-227,,138,142,146,151,155',
'160,164,167,171,176,250,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,',
'29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97,103,259,237',
'13,18,25,27,34,41,45,241,,30,,44,48,338,341,344,346,349,350,352,354',
',,,,,55,,250,450,,221,225,227,230,232,,,,,,,132,,,,,,234,,,53,60,66',
'224,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,218,,,127,101,106',
'5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40',
',,,,251,,125,84,,97,103,259,237,13,18,25,27,34,41,45,241,,30,,44,48',
',,,215,,221,225,227,230,232,,,,55,,250,,,,,,,234,,,,,220,224,132,,,',
',,,,,53,60,66,,124,,,,93,100,,218,,19,229,29,35,42,117,118,61,67,,,',
',,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17',
',28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44',
'48,,,450,,221,225,227,230,232,,,,,55,,550,,,,,,234,,,,,,224,,132,,,',
',,,,,53,60,66,,124,,,,93,100,218,,,19,,29,35,42,117,118,61,67,,253,',
',,127,101,106,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,236,10',
'17,,28,33,40,,,,,251,,125,84,,97,103,259,237,13,18,25,27,34,41,45,,',
',,,,255,,,,,147,,156,161,,168,,,55,,250,193,197,,,,207,135,139,144,153',
'158,162,165,169,173,450,,221,225,227,230,232,450,,221,225,227,230,232',
',,,,450,234,221,225,227,230,232,224,234,,,,,,224,,,,,234,,,,,,224,,',
'218,,,,,,450,218,221,225,227,230,232,,,672,500,,218,673,,,,,,234,,,',
'174,178,224,,,,,241,,30,209,44,48,,,,,,,,,,,218,,,,,,,138,142,146,151',
'155,160,164,167,171,176,250,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,',
'19,,29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51,58,64,69',
'75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97,103,259',
'237,13,18,25,27,34,41,45,,,,,,,147,,156,161,,168,,,,,,193,197,55,,250',
'207,135,139,144,153,158,162,165,169,173,,,,,,,,,,208,136,140,,,,,,,175',
'179,183,185,189,191,195,199,201,203,210,137,141,145,150,154,159,163',
'166,170,180,184,187,190,,,,202,204,206,134,143,148,152,157,,,,172,177',
'182,186,75,194,198,88,91,205,104,,,,,,,,,174,178,,,,,,-514,,-514,209',
'-514,-514,,,,,,,,,,,,,,,,,,138,142,146,151,155,160,164,167,171,176,181',
',-514,,,,,,,,,-514,-514,-514,,-514,,,,-514,-514,,,,-514,,-514,-514,-514',
'-514,-514,-514,-514,,,,,,-514,-514,-514,-514,-514,-514,-514,,,,,-514',
'-514,-514,-514,-514,-514,-514,-514,-514,-514,-514,-514,-514,-514,,-514',
'-514,-514,,,,,-514,,-514,-514,,-514,-514,-514,-514,-514,-514,-514,-514',
'-514,-514,-514,,,,,,,-514,,,,,147,,156,161,,168,,,-514,,-514,193,197',
',,,207,135,139,144,153,158,162,165,169,173,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,147,,156,161,,168,,,,,,193,197,,,,207,135,139,144,153,158,162,165',
'169,173,,,,,,,499,500,,,502,,,,,,,,,,174,178,,,,,,,,,209,,,,,,,,,,,',
',,,,,,,,138,142,146,151,155,160,164,167,171,176,250,600,500,,,601,,',
',,,,,,,174,178,147,,156,161,,168,,,209,,,193,197,,,,207,135,139,144',
'153,158,162,165,169,173,,,138,142,146,151,155,160,164,167,171,176,250',
',,,,,,,,,,,,,,,,147,,156,161,,168,,,,,,193,197,,,,207,135,139,144,153',
'158,162,165,169,173,,,,,,,940,500,,,941,,,,,,,,,,174,178,,,,,,,,,209',
',,,,,,,,,,,,,,,,,,,138,142,146,151,155,160,164,167,171,176,250,491,492',
',,494,,,,,,,,,,174,178,,,,,,241,,30,209,44,48,,,,,,,,,,,,,,,,,,138,142',
'146,151,155,160,164,167,171,176,250,,132,,,,,,,,,53,60,66,,124,,,,93',
'100,,,,19,,29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51',
'58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,',
'97,103,259,237,13,18,25,27,34,41,45,,,,,,,147,,156,161,,168,,,,,,193',
'197,55,,250,207,135,139,144,153,158,162,165,169,173,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,147,,156,161,,168,,,,,,193,197,,,,207,135,139,144,153,158',
'162,165,169,173,,,,,,,669,492,,,670,,,,,,,,348,,174,178,,,,,339,342',
',,209,351,353,356,359,335,337,340,343,345,347,-227,-229,355,357,358',
',,,,138,142,146,151,155,160,164,167,171,176,250,930,492,,,931,,,,,,',
',,,174,178,147,,156,161,,168,,,209,,,193,197,,,,207,135,139,144,153',
'158,162,165,169,173,,,138,142,146,151,155,160,164,167,171,176,250,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,338,341,344,346,349,350,352,354,,,,,,,,',
',,636,492,,,638,,,,,,,,,,174,178,,,,,368,22,,30,209,44,48,,,,,,,,,,',
',,,,,,,138,142,146,151,155,160,164,167,171,176,250,,109,,,,,,,,,53,60',
'66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9',
'16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,',
',71,,374,84,,97,103,110,,13,18,25,27,34,41,45,,,,,147,,156,161,,168',
',,,,,193,197,,,55,207,135,139,144,153,158,162,165,169,173,,,,,,,,,,208',
'136,140,,,,,,,175,179,183,185,189,191,195,199,201,203,210,137,141,145',
'150,154,159,163,166,170,180,184,187,190,,,,202,204,206,261,262,263,264',
'157,,,,265,266,267,186,,270,198,,,273,,,,,,,,,,174,178,,,,,368,22,,30',
'209,44,48,18,,,,,,,,,,,,,,,,,138,142,146,151,155,160,164,167,171,176',
',,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67',
',,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104',
',10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,368',
'22,,30,,44,48,,,,,,,348,,,,,,55,,339,342,,,,351,353,356,359,335,337',
'340,343,345,347,109,,355,357,358,,,,,53,60,66,73,124,,,,93,100,,,,19',
',29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69',
'75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,374,84,,97,103,110,,13',
'18,25,27,34,41,45,368,22,,30,,44,48,,,,,,,,,,,,,55,338,341,344,346,349',
'350,352,354,,,,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29',
'35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80',
'86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25',
'27,34,41,45,368,22,,30,,44,48,,,,,,,348,,,,,,55,,339,342,,,,351,353',
'356,359,335,337,340,343,345,347,109,,-540,-540,,,,,,53,60,66,73,124',
',,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,',
',49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84',
',97,103,110,,13,18,25,27,34,41,45,368,22,,30,,44,48,,,,,,,,,,,,,55,338',
'341,344,346,349,350,352,354,,,,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93',
'100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51',
'58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103',
'110,,13,18,25,27,34,41,45,368,22,,30,,44,48,,,,,,,,,,,,,55,,,,,,,,,',
',,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61',
'67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104',
',10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,,,',
',147,,156,161,,168,,,,,,193,197,,,55,207,135,139,144,153,158,162,165',
'169,173,,,,,,,,,,208,136,140,,,,,,,175,179,183,185,189,191,195,199,201',
'203,210,137,141,145,150,154,159,163,166,170,180,184,187,190,,,,202,204',
'206,261,262,263,264,157,,,,265,266,267,186,,270,198,,,273,,,,,,,,,,174',
'178,,,,,368,22,,30,209,44,48,18,,,,,,,,,,,,,,,,,138,142,146,151,155',
'160,164,167,171,176,,,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29',
'35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80',
'86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25',
'27,34,41,45,368,22,,30,,44,48,,,,,,,348,,,,,,55,,339,342,,,,351,353',
'356,359,335,337,340,343,345,347,109,,355,357,358,,,,,53,60,66,73,124',
',,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,',
',49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84',
',97,103,110,,13,18,25,27,34,41,45,368,22,,30,,44,48,,,,,,,,,,,,,55,338',
'341,344,346,349,350,352,354,,,,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93',
'100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51',
'58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103',
'110,,13,18,25,27,34,41,45,368,22,,30,,44,48,,,,,,,348,,,,,,55,,339,342',
',,,351,353,356,359,335,337,340,343,345,347,109,,355,357,358,,,,,53,60',
'66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9',
'16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,',
',71,,81,84,,97,103,110,,13,18,25,27,34,41,45,368,22,,30,,44,48,,,,,',
',,,,,,,55,338,341,344,346,349,350,352,354,,,,,,,,,109,,,,,,,,,53,60',
'66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9',
'16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,',
',71,,81,84,,97,103,110,,13,18,25,27,34,41,45,368,22,,30,,44,48,,,,,',
',348,,,,,,55,,339,342,,,,351,353,356,359,-540,-540,-540,-540,-540,-540',
'109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,',
',,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,,10',
'17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,368,22',
',30,,44,48,,,,,,,,,,,,,55,338,341,344,346,349,350,352,354,,,,,,,,,109',
',,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94',
'101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,,10,17,',
'28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,,,,,147,,156',
'161,,168,,,,,,193,197,,,55,207,135,139,144,153,158,162,165,169,173,',
',,,,,,,,208,136,140,,,,,,,175,179,183,185,189,191,195,199,201,203,210',
'137,141,145,150,154,159,163,166,170,180,184,187,190,,,,202,204,206,261',
'262,263,264,157,,,,265,266,267,186,,270,198,294,,273,,,,,,,,,,174,178',
',147,,156,161,,168,,209,,,18,193,197,,,,207,135,139,144,153,158,162',
'165,169,173,,138,142,146,151,155,160,164,167,171,176,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,600,500,,,601,,,,,,,,,,174,178,,',
',,368,22,,30,209,44,48,,,,,,,,,,,,,,,,,,138,142,146,151,155,160,164',
'167,171,176,,,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29,35,42',
'47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88',
'91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25,27,34',
'41,45,368,22,,30,,44,48,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,,109,,,,,,,,,53',
'60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5',
'9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,',
',,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,,,,,147,,156,161,,168',
',,,,,193,197,,,55,207,135,139,144,153,158,162,165,169,173,,,,,,,,,,',
',,,348,,,,,,,,339,342,,,,351,353,356,359,335,337,340,343,345,347,-227',
'-229,355,357,358,,,,,,,,,,,,,,,,,,,,,600,500,,,601,,,,,,,,,,174,178',
',,,348,,,,,209,,,339,342,,,,351,353,356,359,-540,-540,-540,-540,-540',
'-540,,,138,142,146,151,155,160,164,167,171,176,147,,156,161,,168,,,',
',,193,197,,,,207,135,139,144,153,158,162,165,169,173,338,341,344,346',
'349,350,352,354,,208,136,140,,,,,,,175,179,183,185,189,191,195,199,201',
'203,210,137,141,145,150,154,159,163,166,170,180,184,187,190,,,,202,204',
'206,261,262,263,264,157,,,,265,266,267,186,,270,198,271,272,273,274',
'338,341,344,346,349,350,352,354,174,178,,,,,368,22,,30,209,44,48,,,',
',,,,,,,,,,,,,,138,142,146,151,155,160,164,167,171,176,,,109,,,,,,,,',
'53,60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106',
'5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40',
',,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,368,22,,30,,44,48,,',
',,,,348,,,,,,55,,339,342,,,,351,353,356,359,335,337,340,343,345,347',
'109,,355,357,358,,,,,53,60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54',
'61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98',
'104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45',
'368,22,,30,,44,48,,,,,,,,,,,,,55,338,341,344,346,349,350,352,354,,,',
',,,,,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61',
'67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104',
',10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,368',
'22,,30,,44,48,,,,,,,348,,,,,,55,,339,342,,,,351,353,356,359,335,337',
'340,343,345,347,109,,355,357,358,,,,,53,60,66,73,124,,,,93,100,,,,19',
',29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69',
'75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13',
'18,25,27,34,41,45,368,22,,30,,44,48,,,,,,,,,,,,,55,338,341,344,346,349',
'350,352,354,,,,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29',
'35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80',
'86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25',
'27,34,41,45,368,22,,30,,44,48,,,,,,,348,,,,,,55,,339,342,,,,351,353',
'356,359,-540,-540,-540,-540,-540,-540,109,,,,,,,,,53,60,66,73,124,,',
',93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49',
'51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97',
'103,110,,13,18,25,27,34,41,45,368,22,,30,,44,48,,,,,,,,,,,,,55,338,341',
'344,346,349,350,352,354,,,,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93,100',
',,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58',
'64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110',
',13,18,25,27,34,41,45,,,,,147,,156,161,,168,,,,,,193,197,,,55,207,135',
'139,144,153,158,162,165,169,173,,,,,,,,,,208,136,140,,,,,,,175,179,183',
'185,189,191,195,199,201,203,210,137,141,145,150,154,159,163,166,170',
'180,184,187,190,,,,202,204,206,261,262,263,264,157,,,,265,266,267,186',
',270,198,,,273,,,,,,,,,,174,178,,,348,,,,,,209,,339,342,,,,351,353,356',
'359,-540,-540,-540,-540,-540,-540,,,,138,142,146,151,155,160,164,167',
'171,176,147,,156,161,,168,,,,,,193,197,,,,207,135,139,144,153,158,162',
'165,169,173,,,,,,,,,,208,136,140,,,,,,,175,179,183,185,189,191,195,199',
'201,203,210,137,141,145,150,154,159,163,166,170,180,184,187,190,,,,202',
'204,206,261,262,263,264,157,,,,265,266,267,186,,270,198,,,273,338,341',
'344,346,349,350,352,354,,174,178,,,,,368,22,,30,209,44,48,18,,,,,,,',
',,,,,,,,,138,142,146,151,155,160,164,167,171,176,,,109,,,,,,,,,53,60',
'66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9',
'16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,',
',71,,81,84,,97,103,110,,13,18,25,27,34,41,45,15,22,,30,,44,48,,,,,,',
'348,,,,,,55,,339,342,,,,351,353,356,359,335,337,340,343,345,347,109',
',355,357,358,,,,,53,60,66,73,78,,,,93,100,,,,19,,29,35,42,47,54,61,67',
',,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104',
',10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,368',
'22,,30,,44,48,,,,,,,,,,,,,55,338,341,344,346,349,350,352,354,,,,,,,',
',109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,',
',,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80,86,88,91,98,104,',
'10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25,27,34,41,45,368',
'22,,30,,44,48,,,,,,,348,,,,,,55,,339,342,,,,351,353,356,359,335,337',
'340,343,345,347,109,,-540,-540,,,,,,53,60,66,73,124,,,,93,100,,,,19',
',29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69',
'75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13',
'18,25,27,34,41,45,368,22,,30,,44,48,,,,,,,,,,,,,55,338,341,344,346,349',
'350,352,354,,,,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,,19,,29',
'35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64,69,75,80',
'86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110,,13,18,25',
'27,34,41,45,368,22,,30,,44,48,,,,,,,348,,,,,,55,,339,342,,,,351,353',
'356,359,335,337,340,343,345,347,109,,355,357,358,,,,,53,60,66,73,124',
',,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,',
',49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84',
',97,103,110,,13,18,25,27,34,41,45,368,22,,30,,44,48,,,,,,,,,,,,,55,338',
'341,344,346,349,350,352,354,,,,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93',
'100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51',
'58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,374,84,,97,103',
'110,,13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,348,,,,,,,55,339,342,',
',,351,353,356,359,335,337,340,343,345,347,109,,355,357,358,,,,,53,60',
'66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16',
'24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125',
'84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338',
'341,344,346,349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100',
',,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64',
'69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,',
'13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351',
'353,356,359,335,337,340,343,345,347,132,,355,357,358,,,,,53,60,66,,124',
',,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,',
',,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84',
',97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338,341',
'344,346,349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,',
',,19,,29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51,58,64',
'69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97,103',
'259,237,13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,348,,,,,,,55,339,342',
',,,351,353,356,359,335,337,340,343,345,347,109,,355,357,358,,,,,53,60',
'66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16',
'24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125',
'84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338',
'341,344,346,349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100',
',,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64',
'69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,',
'13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351',
'353,356,359,335,337,340,343,345,347,132,,355,357,358,,,,,53,60,66,,124',
',,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,',
',,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84',
',97,103,,,13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,,,,,,,,55,338,341',
'344,346,349,350,352,354,,,,,,,,109,,,,,,,,,53,60,66,,124,,,,93,100,',
',,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69',
'75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13',
'18,25,27,34,41,45,241,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351,353',
'356,359,-540,-540,-540,-540,-540,-540,132,,,,,,,,,53,60,66,,124,,,,93',
'100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58',
'64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103',
',,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338,341,344,346',
'349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29',
'35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80',
'86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25',
'27,34,41,45,22,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351,353,356',
'359,335,337,340,343,345,347,109,,355,357,358,,642,,,53,60,66,73,78,',
',,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,',
'49,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84',
',97,103,110,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338',
'341,344,346,349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100',
',,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69',
'75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,413,',
'13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351',
'353,356,359,335,337,340,343,345,347,132,,355,357,358,,,,,53,60,66,,124',
',,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,',
'51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,',
'97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338,341',
'344,346,349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,',
',,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64',
'69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,',
'13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351',
'353,356,359,-540,-540,-540,-540,-540,-540,132,,,,,,,,,53,60,66,,124',
',,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,',
',,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84',
',97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338,341',
'344,346,349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,',
',,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69',
'75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13',
'18,25,27,34,41,45,241,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351,353',
'356,359,335,337,340,343,345,347,132,,355,357,358,,,,,53,60,66,,124,',
',,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51',
'58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97',
'103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338,341,344',
'346,349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69,75,80',
'86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25',
'27,34,41,45,241,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351,353,356',
'359,335,337,340,343,345,347,132,,355,357,358,,,,,53,60,66,,124,,,,93',
'100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51',
'58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97',
'103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338,341,344',
'346,349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351,353',
'356,359,335,337,340,343,345,347,132,,355,357,358,,,,,53,60,66,,124,',
',,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,',
',,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84',
',97,103,,,13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,,,,,,,,55,338,341',
'344,346,349,350,352,354,,,,,,,,109,,,,,,,,,53,60,66,,124,,,,93,100,',
',,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69',
'75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13',
'18,25,27,34,41,45,241,,30,,44,48,,,,,,,348,,,,,,,55,339,342,,,,351,353',
'356,359,335,337,340,343,345,347,132,,355,357,358,,761,,,53,60,66,,124',
',,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,',
',,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84',
',97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,338,341',
'344,346,349,350,352,354,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,',
',,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64',
'69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,',
'13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132',
',,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97,103,259,237',
'13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,109',
',,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94',
'101,106,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97,103,259,237',
'13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132',
',,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,22,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,109,,,,',
',,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101',
'106,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40',
',,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,',
',,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,',
'29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69,75,80',
'86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25',
'27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,',
',,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128',
'131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40',
',,,,251,,125,84,,97,103,677,,13,18,25,27,34,41,45,22,,30,,44,48,,,,',
',,,,,,,,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,',
'19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64',
'69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110',
',13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,',
'132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,',
',,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17',
',28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44',
'48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100',
',,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64',
'69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,',
'13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132',
',,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,236,10,17,,28',
'33,40,,,,,251,,125,84,,97,103,677,237,13,18,25,27,34,41,45,241,,30,',
'44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93',
'100,,,,19,,29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51',
'58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,',
'97,103,259,237,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,',
',,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117',
'118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91',
'98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,259,,13,18,25,27,34',
'41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60',
'66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9',
'16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251',
',125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55',
',,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,47',
'54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98',
'104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,413,,13,18,25,27,34,41',
'45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66',
',124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16',
'24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125',
'84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,',
',,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117',
'118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91',
'98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97,103,,237,13,18,25,27',
'34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53',
'60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,101,106',
'5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40',
',,,,251,,125,84,,97,103,259,237,13,18,25,27,34,41,45,241,,30,,44,48',
',,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,',
',,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64',
'69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97,103',
',,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,',
',132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,',
',,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10',
'17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30',
',44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93',
'100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51',
'58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251,,125,84,',
'97,103,259,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,',
',,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118',
'61,67,,,,,,127,101,106,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104',
'236,10,17,,28,33,40,,,,,251,,125,84,,97,103,259,237,13,18,25,27,34,41',
'45,22,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53,60,66',
',124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24',
',,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125',
'84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,',
',,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117',
'118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91',
'98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41',
'45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66',
',124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16',
'24,,,,,51,58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251',
',125,84,,97,103,259,237,13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,,,',
',,,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29',
'35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69,75,80,86',
'88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27',
'34,41,45,22,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53',
'60,66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9',
'16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251',
',125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55',
',,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117',
'118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91',
'98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41',
'45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66',
',124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,101,106,5,9,16',
'24,,,,,51,58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,,251',
',125,84,,97,103,259,237,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,',
',,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29',
'35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80',
'86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25',
'27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,',
',,53,60,66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106',
'5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,',
',251,,125,84,,97,103,,,13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,,,,',
',,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35',
'42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69,75,80,86,88',
'91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27,34',
'41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60',
'66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9',
'16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40,,,,',
'251,,125,84,,97,103,677,,13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,,',
',,,,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29',
'35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69,75,80,86',
'88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27',
'34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53',
'60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131',
'5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40',
',,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,',
',,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,',
'29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,22,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,109,,,,',
',,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101',
'106,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40',
',,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,',
',,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,',
'29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,22,,30,,44,48,,,,',
',,,,,,,,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53,60,66,73,124,,,,93,100,,,',
'19,,29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,31,,,49,51,58,64',
'69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,71,,81,84,,97,103,110',
',13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,109',
',,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94',
'101,106,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,22,,30,,44,48,,,,',
',,,,,,,,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69,75,80',
'86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25',
'27,34,41,45,22,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,109,,,,,,,',
',53,60,66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106',
'5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,',
',251,,125,84,,97,103,,,13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,,,,',
',,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35',
'42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69,75,80,86,88',
'91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27,34',
'41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60',
'66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9',
'16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251',
',125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55',
',,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117',
'118,61,67,,,,,,127,101,106,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91',
'98,104,236,10,17,,28,33,40,,,,,251,,125,84,,97,103,259,237,13,18,25',
'27,34,41,45,22,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,109,,,,,,,',
',53,60,66,,124,,,,93,100,,,,19,,29,35,42,47,54,61,67,,,,,,94,101,106',
'5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,',
',251,,125,84,,97,103,,,13,18,25,27,34,41,45,22,,30,,44,48,,,,,,,,,,',
',,,55,,,,,,,,,,,,,,,,109,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35',
'42,47,54,61,67,,,,,,94,101,106,5,9,16,24,,,,,51,58,64,69,75,80,86,88',
'91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27,34',
'41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60',
'66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9',
'16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251',
',125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55',
',,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117',
'118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91',
'98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,413,,13,18,25,27,34',
'41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60',
'66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9',
'16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251',
',125,84,,97,103,773,,13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,',
',,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35',
'42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75,80,86',
'88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18,25,27',
'34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53',
'60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,101,106',
'5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,236,10,17,,28,33,40',
',,,,251,,125,84,,97,103,259,237,13,18,25,27,34,41,45,241,,30,,44,48',
',,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,',
',,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64',
'69,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,',
'13,18,25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132',
',,,,,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,241,,30,,44,48,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,',
',,,,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,,,51,58,64,69,75,80,86,88,91,98,104,,10,17,,28,33',
'40,,,,,251,,125,84,,97,103,,,13,18,25,27,34,41,45,241,,30,,44,48,,,',
',,,,,,,,,,55,,,,,,,,,,,,,,,,132,,,,,,,,,53,60,66,,124,,,,93,100,,,,19',
',29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64,69,75',
'80,86,88,91,98,104,,10,17,,28,33,40,,,,,251,,125,84,,97,103,,,13,18',
'25,27,34,41,45,,,,,,,,348,,,,,,,,339,342,,,55,351,353,356,359,335,337',
'340,343,345,347,-227,-229,355,357,358,348,,,,,,,,339,342,,,,351,353',
'356,359,335,337,340,343,345,347,-227,-229,355,357,358,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,,,,338,341',
'344,346,349,350,352,354,,,,,,,,,,,,,,,,,,,,132,338,341,344,346,349,350',
'352,354,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,116,,51,58,64,121,75,80,86,88,91,98,104,,10,17,',
'28,33,40,,,,,302,,125,84,,97,103,132,,13,18,25,27,34,41,45,53,60,66',
',124,,,,93,100,408,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9',
'16,24,,,116,,51,58,64,121,75,80,86,88,91,98,104,,10,17,,28,33,40,,,',
',302,,125,84,,97,103,132,,13,18,25,27,34,41,45,53,60,66,,124,,,,93,100',
'523,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,116,,51',
'58,64,121,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,895,,125,84,,97',
'103,132,,13,18,25,27,34,41,45,53,60,66,,124,,,,93,100,,,,19,,29,35,42',
'117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,116,51,58,64,121,75,80,86',
'88,91,98,104,,10,17,,28,33,40,,,,,381,,81,84,,97,103,110,132,13,18,25',
'27,34,41,45,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,',
',,,,127,128,131,5,9,16,24,,,116,,51,58,64,121,75,80,86,88,91,98,104',
',10,17,,28,33,40,,,,,302,,303,84,,97,103,132,,13,18,25,27,34,41,45,53',
'60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131',
'5,9,16,24,,,,,51,58,64,121,75,80,86,88,91,98,104,116,10,17,,28,33,40',
'389,,,,302,,303,84,,97,103,,,13,18,25,27,34,41,45,,,,,132,,,,,,,,,53',
'60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131',
'5,9,16,24,,,116,,51,58,64,121,75,126,86,88,91,129,104,,10,17,,28,33',
'40,,,,,122,,125,84,,97,103,132,,13,18,25,27,34,41,45,53,60,66,,124,',
',,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,',
'116,,51,58,64,121,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,873,,125',
'84,,97,103,132,,13,18,25,27,34,41,45,53,60,66,,124,,,,93,100,,,,19,',
'29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,116,51,58,64,121',
'75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,302,,303,84,,97,103,304,132',
'13,18,25,27,34,41,45,,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118',
'61,67,,,,,,127,128,131,5,9,16,24,,,116,,51,58,64,121,75,80,86,88,91',
'98,104,,10,17,,28,33,40,,,,,302,,303,84,,97,103,132,,13,18,25,27,34',
'41,45,53,60,66,,124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127',
'128,131,5,9,16,24,,,116,,51,58,64,121,75,126,86,88,91,129,104,,10,17',
',28,33,40,,,,,122,,125,84,,97,103,132,,13,18,25,27,34,41,45,53,60,66',
',124,,,,93,100,,,,19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16',
'24,,,116,,51,58,64,121,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,302',
',303,84,,97,103,132,,13,18,25,27,34,41,45,53,60,66,,124,,,,93,100,,',
',19,,29,35,42,117,118,61,67,,,,,,127,128,131,5,9,16,24,,,,,51,58,64',
'121,75,80,86,88,91,98,104,,10,17,,28,33,40,,,,,302,,303,84,,97,103,',
',13,18,25,27,34,41,45' ]
        racc_action_table = arr = Array.new(22180, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'78,730,730,628,628,669,376,376,109,215,669,429,429,109,380,1,482,743',
'669,669,686,607,607,669,669,669,669,669,669,669,669,669,669,669,669',
'669,669,669,669,669,669,669,688,669,669,669,669,669,669,669,255,253',
'365,366,689,122,669,669,669,122,681,669,669,669,388,669,494,39,39,333',
'333,494,502,502,669,669,669,669,380,494,494,215,690,388,494,494,494',
'494,494,494,494,494,494,494,494,494,494,494,494,379,494,494,494,684',
'494,494,494,494,494,494,669,730,669,628,743,683,376,494,494,494,482',
'429,693,494,494,306,494,704,704,607,669,607,681,669,669,669,669,669',
'669,669,669,669,669,669,669,669,78,332,78,669,669,669,700,669,255,253',
'365,366,715,578,716,63,63,379,39,675,333,578,578,502,674,494,578,578',
'578,578,578,578,578,578,578,578,854,578,578,578,578,578,499,499,749',
'715,703,716,937,494,494,494,494,494,494,494,494,494,494,494,494,941',
'493,388,494,388,494,493,494,306,884,306,845,671,750,493,493,332,704',
'332,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493,493',
'493,597,708,748,493,493,493,493,493,493,493,294,749,715,329,716,63,493',
'493,493,294,294,493,493,493,715,493,716,894,715,854,716,854,940,26,493',
'493,493,493,937,845,316,937,499,937,578,578,578,578,578,578,578,578',
'725,750,941,750,941,668,152,578,851,222,325,884,597,884,748,667,851',
'851,493,665,493,851,851,851,851,851,851,851,851,851,851,113,152,851',
'851,851,664,329,493,329,26,493,493,493,493,493,493,493,493,493,493,493',
'493,493,950,86,714,493,493,493,86,493,222,249,249,894,638,894,86,86',
'940,659,940,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,113,638',
'638,86,86,86,86,86,86,86,325,431,325,431,638,113,86,86,86,116,116,86',
'86,86,658,86,316,316,316,316,316,316,316,316,86,86,86,86,725,725,725',
'725,725,725,725,725,851,851,851,851,851,851,851,851,950,393,950,244',
'244,530,324,656,375,298,375,889,149,889,324,324,86,393,86,324,324,324',
'324,324,324,324,324,324,324,530,530,324,324,324,298,298,86,746,149,737',
'86,86,86,86,86,86,86,86,86,86,86,86,745,492,530,86,86,86,492,86,57,57',
'148,143,672,672,492,492,603,719,603,492,492,492,492,492,492,492,492',
'492,492,492,492,492,492,492,492,492,148,143,830,492,492,492,492,492',
'492,492,759,654,95,746,95,653,492,492,492,232,650,492,492,492,746,492',
'759,737,745,938,301,134,301,713,492,492,492,492,830,745,724,737,728',
'737,232,729,324,324,324,324,324,324,324,324,938,938,647,134,713,713',
'618,830,177,830,830,232,301,938,618,618,492,713,492,618,618,618,618',
'618,618,618,618,618,618,673,673,618,618,618,177,618,492,301,301,492',
'492,492,492,492,492,492,492,492,492,492,492,492,399,491,391,492,492',
'492,491,492,182,77,731,77,172,645,491,491,399,640,391,491,491,491,491',
'491,491,491,491,491,491,491,491,491,491,491,182,491,491,491,172,491',
'491,491,491,491,491,23,639,23,288,240,305,305,491,491,491,757,735,757',
'491,491,635,491,724,724,724,724,724,724,724,724,491,892,288,288,240',
'240,559,288,364,194,364,618,618,618,618,618,618,618,618,618,936,936',
'739,205,734,422,892,892,308,740,20,741,734,734,562,194,491,734,734,734',
'734,734,734,734,734,734,734,734,734,205,422,422,308,308,308,20,20,114',
'89,491,491,491,491,491,491,491,491,491,491,491,491,491,634,670,632,491',
'626,491,670,491,44,44,114,114,89,615,670,670,801,801,747,670,670,670',
'670,670,670,670,670,670,670,670,670,670,670,670,670,670,670,670,590',
'670,670,670,670,670,670,670,474,474,588,926,587,520,670,670,670,720',
'720,670,670,670,756,670,559,559,559,559,559,559,559,559,670,670,670',
'670,926,926,520,520,583,582,734,734,734,734,734,734,734,734,538,314',
'562,562,562,562,562,562,562,562,912,378,912,912,912,912,912,579,670',
'405,670,405,537,405,405,579,579,314,763,912,486,486,765,486,526,912',
'378,378,670,486,486,768,670,670,670,670,670,670,670,670,670,670,670',
'670,405,770,912,670,670,670,522,670,269,405,405,405,772,405,521,497',
'471,405,405,286,779,453,405,451,405,405,405,405,405,405,405,450,269',
'269,269,449,405,405,405,405,405,405,405,286,286,286,794,405,405,405',
'405,405,405,405,405,405,405,405,447,405,405,435,405,405,405,636,433',
'423,419,405,411,405,405,409,405,405,807,105,405,405,405,405,405,405',
'405,394,407,394,568,394,394,579,579,579,579,579,579,579,579,586,404',
'636,105,105,405,586,586,586,586,893,403,405,792,576,792,792,792,792',
'792,817,394,576,576,400,636,397,636,636,289,394,394,394,390,394,893',
'893,685,394,394,636,299,382,394,381,394,394,394,394,394,394,394,831',
'373,289,289,792,394,394,394,394,394,394,394,833,835,299,299,394,394',
'394,394,394,394,394,394,394,394,394,394,394,394,370,394,394,394,369',
'872,363,362,394,361,394,394,849,394,394,394,394,394,394,394,394,394',
'394,394,76,573,76,336,76,76,872,872,334,573,573,568,568,568,568,568',
'568,568,568,394,313,312,860,861,311,452,394,452,452,452,452,452,863',
'864,865,76,576,576,576,576,576,576,576,576,76,76,76,309,76,867,302,869',
'76,76,297,870,300,76,297,76,76,76,76,76,76,76,258,873,452,875,876,76',
'76,76,76,76,76,76,297,297,878,879,76,76,76,76,76,76,76,76,76,76,76,880',
'76,76,257,76,76,76,251,129,247,129,76,243,76,76,890,76,76,242,238,76',
'76,76,76,76,76,76,284,235,284,895,284,284,231,226,905,573,573,573,573',
'573,573,573,573,129,223,76,219,132,131,372,76,128,76,121,571,372,372',
'372,372,102,71,284,571,571,69,59,129,927,129,129,284,284,284,284,284',
'928,929,930,284,284,931,129,932,284,933,284,284,284,284,284,284,284',
'934,126,935,126,49,284,284,284,284,284,284,284,284,45,43,284,284,284',
'284,284,284,284,284,284,284,284,284,939,284,284,41,284,284,284,11,7',
'4,126,284,951,284,284,,284,284,284,,284,284,284,284,284,284,284,592',
',592,,592,592,126,,126,126,454,,454,454,454,454,454,,,284,,126,,862',
'284,862,862,862,862,454,,,,,454,592,571,571,571,571,571,571,571,571',
'592,592,592,592,592,,,,592,592,,,,592,,592,592,592,592,592,592,592,',
',,,,592,592,592,592,592,592,592,592,,,592,592,592,592,592,592,592,592',
'592,592,592,592,,592,592,,592,592,592,712,,,,592,,592,592,,592,592,592',
',592,592,592,592,592,592,592,279,279,279,279,279,279,279,279,,461,,461',
'461,,461,,712,,,592,461,461,,,592,461,461,461,461,461,461,461,461,461',
'461,,,,,712,,712,712,,,,475,,475,475,475,475,475,188,712,188,188,188',
'188,188,,,,,596,475,596,596,,596,475,475,188,,,596,596,188,188,,596',
'596,596,596,596,596,596,596,596,596,,,475,,,475,461,461,,188,461,,188',
'475,,,744,188,775,,461,461,744,744,744,744,775,775,,,461,775,775,775',
'775,775,775,775,775,775,775,,,775,775,775,,,,,461,461,461,461,461,461',
'461,461,461,461,461,596,596,,,596,,662,,662,662,662,662,662,,596,596',
'923,,923,923,,923,,,596,662,,923,923,,662,,923,923,923,923,923,923,923',
'923,923,923,,,596,596,596,596,596,596,596,596,596,596,596,,13,,13,13',
'13,13,13,866,50,866,866,866,866,866,50,50,50,50,649,13,649,649,649,649',
'13,13,866,,,775,775,775,775,775,775,775,775,,,430,,430,430,430,430,430',
'13,923,923,13,,923,,,13,,,,430,,,923,923,430,430,,,,101,,101,923,101',
'101,290,290,290,290,290,290,290,290,,,,430,,,430,,,923,923,923,923,923',
'923,923,923,923,923,923,,101,795,,795,795,795,795,795,,101,101,101,',
'101,,,,101,101,,795,,101,,101,101,101,101,101,101,101,,,,,,101,101,101',
'101,101,101,101,,,,,101,101,101,101,101,101,101,101,101,101,101,101',
'101,101,,101,101,101,,,,,101,,101,101,,101,101,101,101,101,101,101,101',
'101,101,101,,,,,,,594,,594,594,,594,,,,,,594,594,101,,101,594,594,594',
'594,594,594,594,594,594,594,643,,643,643,643,643,643,788,,788,788,788',
'788,788,,,,,,643,,,,,643,643,788,,,,,788,788,915,,915,915,915,915,915',
',,,,,,643,,,643,,,915,788,643,,788,,915,,,594,594,,234,594,234,234,234',
'234,234,,,,,594,594,,,915,,,106,234,106,594,106,106,234,,,,,,,,,868',
',868,868,868,868,868,,594,594,594,594,594,594,594,594,594,594,594,868',
'106,663,,663,663,663,663,663,,106,106,106,,106,,,,106,106,,663,,106',
',106,106,106,106,106,106,106,,,,,,106,106,106,106,106,106,106,,,,,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,,106,106,106,,,',
',106,,106,106,,106,106,106,106,106,106,106,106,106,106,106,,,,,,,463',
',463,463,,463,,,,,,463,463,106,,106,463,463,463,463,463,463,463,463',
'463,463,808,,808,808,808,808,808,441,,441,441,441,441,441,,,,,,808,',
',,,808,808,441,,,,,441,441,812,,812,812,812,812,812,,,,,,,808,,,808',
',,812,441,,,441,,812,,,463,463,,906,463,906,906,906,906,906,,,,,463',
'463,,,812,,,98,906,98,463,98,98,,,,,,,,,,,,,,,,,,463,463,463,463,463',
'463,463,463,463,463,463,,98,,,,,,,,,98,98,98,,98,,,,98,98,,,,98,,98',
'98,98,98,98,98,98,,,,,,98,98,98,98,98,98,98,,,,,98,98,98,98,98,98,98',
'98,98,98,98,98,98,98,,98,98,98,,,,,98,,98,98,,98,98,98,98,98,98,98,98',
'98,98,98,,,,,,,98,,,,,518,,518,518,,518,,,98,,98,518,518,,,,518,518',
'518,518,518,518,518,518,518,518,,,,,,,,,,,,213,,213,213,213,213,213',
'810,,810,810,810,810,810,,,,,516,213,516,516,,516,213,213,810,,,516',
'516,810,810,,516,516,516,516,516,516,516,516,516,516,,,213,,,213,518',
'518,,810,518,,810,,,,,,,,518,518,910,,910,910,910,910,910,,518,,,,,',
',,,,,910,,,,,910,910,,,518,518,518,518,518,518,518,518,518,518,518,516',
'516,,,516,,,910,,,910,,,,516,516,,,,733,,599,,599,516,599,599,733,733',
',,,733,733,733,733,733,733,733,733,733,733,733,,516,516,516,516,516',
'516,516,516,516,516,516,,599,,,,,,,,,599,599,599,,599,,,,599,599,,,',
'599,,599,599,599,599,599,599,599,,,,,,599,599,599,599,599,599,599,,',
',,599,599,599,599,599,599,599,599,599,599,599,599,599,599,,599,599,599',
',,,,599,,599,599,,599,599,599,599,599,599,599,599,599,599,599,602,,602',
',602,602,733,733,733,733,733,733,733,733,,,,,,599,,599,945,,945,945',
'945,945,945,,,,,,,602,,,,,,945,,,602,602,602,945,602,,,,602,602,,,,602',
',602,602,602,602,602,602,602,,,945,,,602,602,602,602,602,602,602,,,',
',602,602,602,602,602,602,602,602,602,602,602,602,602,602,,602,602,602',
',,,,602,,602,602,,602,602,602,602,602,602,602,602,602,602,602,331,,331',
',331,331,,,,456,,456,456,456,456,456,,,,602,,602,,,,,,,456,,,,,456,456',
'331,,,,,,,,,331,331,331,,331,,,,331,331,,456,,331,456,331,331,331,331',
'331,331,331,,,,,,331,331,331,331,331,331,331,,,,,331,331,331,331,331',
'331,331,331,331,331,331,,331,331,,331,331,331,,,,,331,,331,331,,331',
'331,,,331,331,331,331,331,331,331,14,,14,,14,14,,,798,,798,798,798,798',
'798,,,,,331,,331,,,,,,798,,,,,,798,,14,,,,,,,,,14,14,14,,14,,,,14,14',
'798,,,14,,14,14,14,14,14,14,14,,14,,,,14,14,14,14,14,14,14,,,,,14,14',
'14,14,14,14,14,14,14,14,14,14,14,14,,14,14,14,,,,,14,,14,14,,14,14,14',
'14,14,14,14,14,14,14,14,,,,,,,14,,,,,510,,510,510,,510,,,14,,14,510',
'510,,,,510,510,510,510,510,510,510,510,510,510,903,,903,903,903,903',
'903,444,,444,444,444,444,444,,,,,786,903,786,786,786,786,786,903,444',
',,,,,444,,,,,786,,,,,,786,,,903,,,,,,790,444,790,790,790,790,790,,,510',
'510,,786,510,,,,,,790,,,,510,510,790,,,,,490,,490,510,490,490,,,,,,',
',,,,790,,,,,,,510,510,510,510,510,510,510,510,510,510,510,,490,,,,,',
',,,490,490,490,,490,,,,490,490,,,,490,,490,490,490,490,490,490,490,',
',,,,490,490,490,490,490,490,490,,,,,490,490,490,490,490,490,490,490',
'490,490,490,490,490,490,,490,490,490,,,,,490,,490,490,,490,490,490,490',
'490,490,490,490,490,490,490,,,,,,,12,,12,12,,12,,,,,,12,12,490,,490',
'12,12,12,12,12,12,12,12,12,12,,,,,,,,,,12,12,12,,,,,,,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12',
'12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,12,,,,,,,,,12,12,,,',
',,80,,80,12,80,80,,,,,,,,,,,,,,,,,,12,12,12,12,12,12,12,12,12,12,12',
',80,,,,,,,,,80,80,80,,80,,,,80,80,,,,80,,80,80,80,80,80,80,80,,,,,,80',
'80,80,80,80,80,80,,,,,80,80,80,80,80,80,80,80,80,80,80,80,80,80,,80',
'80,80,,,,,80,,80,80,,80,80,80,80,80,80,80,80,80,80,80,,,,,,,80,,,,,278',
',278,278,,278,,,80,,80,278,278,,,,278,278,278,278,278,278,278,278,278',
'278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,416,,416,416,,416,,,,,,416,416,,,,416',
'416,416,416,416,416,416,416,416,416,,,,,,,278,278,,,278,,,,,,,,,,278',
'278,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,278,278,278,278,278,278,278,278',
'278,278,416,416,,,416,,,,,,,,,,416,416,925,,925,925,,925,,,416,,,925',
'925,,,,925,925,925,925,925,925,925,925,925,925,,,416,416,416,416,416',
'416,416,416,416,416,416,,,,,,,,,,,,,,,,,276,,276,276,,276,,,,,,276,276',
',,,276,276,276,276,276,276,276,276,276,276,,,,,,,925,925,,,925,,,,,',
',,,,925,925,,,,,,,,,925,,,,,,,,,,,,,,,,,,,,925,925,925,925,925,925,925',
'925,925,925,925,276,276,,,276,,,,,,,,,,276,276,,,,,,498,,498,276,498',
'498,,,,,,,,,,,,,,,,,,276,276,276,276,276,276,276,276,276,276,276,,498',
',,,,,,,,498,498,498,,498,,,,498,498,,,,498,,498,498,498,498,498,498',
'498,,,,,,498,498,498,498,498,498,498,,,,,498,498,498,498,498,498,498',
'498,498,498,498,498,498,498,,498,498,498,,,,,498,,498,498,,498,498,498',
'498,498,498,498,498,498,498,498,,,,,,,509,,509,509,,509,,,,,,509,509',
'498,,498,509,509,509,509,509,509,509,509,509,509,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,908,,908,908,,908,,,,,,908,908,,,,908,908,908,908,908,908',
'908,908,908,908,,,,,,,509,509,,,509,,,,,,,,72,,509,509,,,,,72,72,,,509',
'72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,,,,,509,509,509,509,509',
'509,509,509,509,509,509,908,908,,,908,,,,,,,,,,908,908,414,,414,414',
',414,,,908,,,414,414,,,,414,414,414,414,414,414,414,414,414,414,,,908',
'908,908,908,908,908,908,908,908,908,908,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,72,72,72,72,72,72,72,72,,,,,,,,,,,414,414,,,414,,,,,,,,,,414,414,',
',,,303,303,,303,414,303,303,,,,,,,,,,,,,,,,,,414,414,414,414,414,414',
'414,414,414,414,414,,303,,,,,,,,,303,303,303,303,303,,,,303,303,,,,303',
',303,303,303,303,303,303,303,,,,,,303,303,303,303,303,303,303,303,,',
'303,303,303,303,303,303,303,303,303,303,303,303,,303,303,,303,303,303',
',,,,303,,303,303,,303,303,303,,303,303,303,303,303,303,303,,,,,73,,73',
'73,,73,,,,,,73,73,,,303,73,73,73,73,73,73,73,73,73,73,,,,,,,,,,73,73',
'73,,,,,,,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73',
'73,73,73,73,,,,73,73,73,73,73,73,73,73,,,,73,73,73,73,,73,73,,,73,,',
',,,,,,,73,73,,,,,857,857,,857,73,857,857,73,,,,,,,,,,,,,,,,,73,73,73',
'73,73,73,73,73,73,73,,,857,,,,,,,,,857,857,857,857,857,,,,857,857,,',
',857,,857,857,857,857,857,857,857,,,,,,857,857,857,857,857,857,857,857',
',,857,857,857,857,857,857,857,857,857,857,857,857,,857,857,,857,857',
'857,,,,,857,,857,857,,857,857,857,,857,857,857,857,857,857,857,81,81',
',81,,81,81,,,,,,,527,,,,,,857,,527,527,,,,527,527,527,527,527,527,527',
'527,527,527,81,,527,527,527,,,,,81,81,81,81,81,,,,81,81,,,,81,,81,81',
'81,81,81,81,81,,,,,,81,81,81,81,81,81,81,81,,,81,81,81,81,81,81,81,81',
'81,81,81,81,,81,81,,81,81,81,,,,,81,,81,81,,81,81,81,,81,81,81,81,81',
'81,81,317,317,,317,,317,317,,,,,,,,,,,,,81,527,527,527,527,527,527,527',
'527,,,,,,,,,317,,,,,,,,,317,317,317,317,317,,,,317,317,,,,317,,317,317',
'317,317,317,317,317,,,,,,317,317,317,317,317,317,317,317,,,317,317,317',
'317,317,317,317,317,317,317,317,317,,317,317,,317,317,317,,,,,317,,317',
'317,,317,317,317,,317,317,317,317,317,317,317,485,485,,485,,485,485',
',,,,,,577,,,,,,317,,577,577,,,,577,577,577,577,577,577,577,577,577,577',
'485,,577,577,,,,,,485,485,485,485,485,,,,485,485,,,,485,,485,485,485',
'485,485,485,485,,,,,,485,485,485,485,485,485,485,485,,,485,485,485,485',
'485,485,485,485,485,485,485,485,,485,485,,485,485,485,,,,,485,,485,485',
',485,485,485,,485,485,485,485,485,485,485,604,604,,604,,604,604,,,,',
',,,,,,,,485,577,577,577,577,577,577,577,577,,,,,,,,,604,,,,,,,,,604',
'604,604,604,604,,,,604,604,,,,604,,604,604,604,604,604,604,604,,,,,',
'604,604,604,604,604,604,604,604,,,604,604,604,604,604,604,604,604,604',
'604,604,604,,604,604,,604,604,604,,,,,604,,604,604,,604,604,604,,604',
'604,604,604,604,604,604,480,480,,480,,480,480,,,,,,,,,,,,,604,,,,,,',
',,,,,,,,,,480,,,,,,,,,480,480,480,480,480,,,,480,480,,,,480,,480,480',
'480,480,480,480,480,,,,,,480,480,480,480,480,480,480,480,,,480,480,480',
'480,480,480,480,480,480,480,480,480,,480,480,,480,480,480,,,,,480,,480',
'480,,480,480,480,,480,480,480,480,480,480,480,,,,,511,,511,511,,511',
',,,,,511,511,,,480,511,511,511,511,511,511,511,511,511,511,,,,,,,,,',
'511,511,511,,,,,,,511,511,511,511,511,511,511,511,511,511,511,511,511',
'511,511,511,511,511,511,511,511,511,511,511,,,,511,511,511,511,511,511',
'511,511,,,,511,511,511,511,,511,511,,,511,,,,,,,,,,511,511,,,,,477,477',
',477,511,477,477,511,,,,,,,,,,,,,,,,,511,511,511,511,511,511,511,511',
'511,511,,,477,,,,,,,,,477,477,477,477,477,,,,477,477,,,,477,,477,477',
'477,477,477,477,477,,,,,,477,477,477,477,477,477,477,477,,,477,477,477',
'477,477,477,477,477,477,477,477,477,,477,477,,477,477,477,,,,,477,,477',
'477,,477,477,477,,477,477,477,477,477,477,477,776,776,,776,,776,776',
',,,,,,882,,,,,,477,,882,882,,,,882,882,882,882,882,882,882,882,882,882',
'776,,882,882,882,,,,,776,776,776,776,776,,,,776,776,,,,776,,776,776',
'776,776,776,776,776,,,,,,776,776,776,776,776,776,776,776,,,776,776,776',
'776,776,776,776,776,776,776,776,776,,776,776,,776,776,776,,,,,776,,776',
'776,,776,776,776,,776,776,776,776,776,776,776,846,846,,846,,846,846',
',,,,,,,,,,,,776,882,882,882,882,882,882,882,882,,,,,,,,,846,,,,,,,,',
'846,846,846,846,846,,,,846,846,,,,846,,846,846,846,846,846,846,846,',
',,,,846,846,846,846,846,846,846,846,,,846,846,846,846,846,846,846,846',
'846,846,846,846,,846,846,,846,846,846,,,,,846,,846,846,,846,846,846',
',846,846,846,846,846,846,846,841,841,,841,,841,841,,,,,,,732,,,,,,846',
',732,732,,,,732,732,732,732,732,732,732,732,732,732,841,,732,732,732',
',,,,841,841,841,841,841,,,,841,841,,,,841,,841,841,841,841,841,841,841',
',,,,,841,841,841,841,841,841,841,841,,,841,841,841,841,841,841,841,841',
'841,841,841,841,,841,841,,841,841,841,,,,,841,,841,841,,841,841,841',
',841,841,841,841,841,841,841,439,439,,439,,439,439,,,,,,,,,,,,,841,732',
'732,732,732,732,732,732,732,,,,,,,,,439,,,,,,,,,439,439,439,439,439',
',,,439,439,,,,439,,439,439,439,439,439,439,439,,,,,,439,439,439,439',
'439,439,439,439,,,439,439,439,439,439,439,439,439,439,439,439,439,,439',
'439,,439,439,439,,,,,439,,439,439,,439,439,439,,439,439,439,439,439',
'439,439,437,437,,437,,437,437,,,,,,,555,,,,,,439,,555,555,,,,555,555',
'555,555,555,555,555,555,555,555,437,,,,,,,,,437,437,437,437,437,,,,437',
'437,,,,437,,437,437,437,437,437,437,437,,,,,,437,437,437,437,437,437',
'437,437,,,437,437,437,437,437,437,437,437,437,437,437,437,,437,437,',
'437,437,437,,,,,437,,437,437,,437,437,437,,437,437,437,437,437,437,437',
'525,525,,525,,525,525,,,,,,,,,,,,,437,555,555,555,555,555,555,555,555',
',,,,,,,,525,,,,,,,,,525,525,525,525,525,,,,525,525,,,,525,,525,525,525',
'525,525,525,525,,,,,,525,525,525,525,525,525,525,525,,,525,525,525,525',
'525,525,525,525,525,525,525,525,,525,525,,525,525,525,,,,,525,,525,525',
',525,525,525,,525,525,525,525,525,525,525,,,,,31,,31,31,,31,,,,,,31',
'31,,,525,31,31,31,31,31,31,31,31,31,31,,,,,,,,,,31,31,31,,,,,,,31,31',
'31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,',
',31,31,31,31,31,31,31,31,,,,31,31,31,31,,31,31,31,,31,,,,,,,,,,31,31',
',384,,384,384,,384,,31,,,31,384,384,,,,384,384,384,384,384,384,384,384',
'384,384,,31,31,31,31,31,31,31,31,31,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,384,384,,,384,,,,,,,,,,384,384,,,,,107,107,,107',
'384,107,107,,,,,,,,,,,,,,,,,,384,384,384,384,384,384,384,384,384,384',
',,107,,,,,,,,,107,107,107,107,107,,,,107,107,,,,107,,107,107,107,107',
'107,107,107,,,,,,107,107,107,107,107,107,107,107,,,107,107,107,107,107',
'107,107,107,107,107,107,107,,107,107,,107,107,107,,,,,107,,107,107,',
'107,107,107,,107,107,107,107,107,107,107,767,767,,767,,767,767,,,,,',
',,,,,,,107,,,,,,,,,,,,,,,,,767,,,,,,,,,767,767,767,767,767,,,,767,767',
',,,767,,767,767,767,767,767,767,767,,,,,,767,767,767,767,767,767,767',
'767,,,767,767,767,767,767,767,767,767,767,767,767,767,,767,767,,767',
'767,767,,,,,767,,767,767,,767,767,767,,767,767,767,767,767,767,767,',
',,,385,,385,385,,385,,,,,,385,385,,,767,385,385,385,385,385,385,385',
'385,385,385,,,,,,,,,,,,,,252,,,,,,,,252,252,,,,252,252,252,252,252,252',
'252,252,252,252,252,252,252,252,252,,,,,,,,,,,,,,,,,,,,,385,385,,,385',
',,,,,,,,,385,385,,,,557,,,,,385,,,557,557,,,,557,557,557,557,557,557',
'557,557,557,557,,,385,385,385,385,385,385,385,385,385,385,18,,18,18',
',18,,,,,,18,18,,,,18,18,18,18,18,18,18,18,18,18,252,252,252,252,252',
'252,252,252,,18,18,18,,,,,,,18,18,18,18,18,18,18,18,18,18,18,18,18,18',
'18,18,18,18,18,18,18,18,18,18,,,,18,18,18,18,18,18,18,18,,,,18,18,18',
'18,,18,18,18,18,18,18,557,557,557,557,557,557,557,557,18,18,,,,,432',
'432,,432,18,432,432,,,,,,,,,,,,,,,,,,18,18,18,18,18,18,18,18,18,18,',
',432,,,,,,,,,432,432,432,432,432,,,,432,432,,,,432,,432,432,432,432',
'432,432,432,,,,,,432,432,432,432,432,432,432,432,,,432,432,432,432,432',
'432,432,432,432,432,432,432,,432,432,,432,432,432,,,,,432,,432,432,',
'432,432,432,,432,432,432,432,432,432,432,585,585,,585,,585,585,,,,,',
',828,,,,,,432,,828,828,,,,828,828,828,828,828,828,828,828,828,828,585',
',828,828,828,,,,,585,585,585,585,585,,,,585,585,,,,585,,585,585,585',
'585,585,585,585,,,,,,585,585,585,585,585,585,585,585,,,585,585,585,585',
'585,585,585,585,585,585,585,585,,585,585,,585,585,585,,,,,585,,585,585',
',585,585,585,,585,585,585,585,585,585,585,584,584,,584,,584,584,,,,',
',,,,,,,,585,828,828,828,828,828,828,828,828,,,,,,,,,584,,,,,,,,,584',
'584,584,584,584,,,,584,584,,,,584,,584,584,584,584,584,584,584,,,,,',
'584,584,584,584,584,584,584,584,,,584,584,584,584,584,584,584,584,584',
'584,584,584,,584,584,,584,584,584,,,,,584,,584,584,,584,584,584,,584',
'584,584,584,584,584,584,918,918,,918,,918,918,,,,,,,558,,,,,,584,,558',
'558,,,,558,558,558,558,558,558,558,558,558,558,918,,558,558,558,,,,',
'918,918,918,918,918,,,,918,918,,,,918,,918,918,918,918,918,918,918,',
',,,,918,918,918,918,918,918,918,918,,,918,918,918,918,918,918,918,918',
'918,918,918,918,,918,918,,918,918,918,,,,,918,,918,918,,918,918,918',
',918,918,918,918,918,918,918,758,758,,758,,758,758,,,,,,,,,,,,,918,558',
'558,558,558,558,558,558,558,,,,,,,,,758,,,,,,,,,758,758,758,758,758',
',,,758,758,,,,758,,758,758,758,758,758,758,758,,,,,,758,758,758,758',
'758,758,758,758,,,758,758,758,758,758,758,758,758,758,758,758,758,,758',
'758,,758,758,758,,,,,758,,758,758,,758,758,758,,758,758,758,758,758',
'758,758,123,123,,123,,123,123,,,,,,,560,,,,,,758,,560,560,,,,560,560',
'560,560,560,560,560,560,560,560,123,,,,,,,,,123,123,123,123,123,,,,123',
'123,,,,123,,123,123,123,123,123,123,123,,,,,,123,123,123,123,123,123',
'123,123,,,123,123,123,123,123,123,123,123,123,123,123,123,,123,123,',
'123,123,123,,,,,123,,123,123,,123,123,123,,123,123,123,123,123,123,123',
'125,125,,125,,125,125,,,,,,,,,,,,,123,560,560,560,560,560,560,560,560',
',,,,,,,,125,,,,,,,,,125,125,125,125,125,,,,125,125,,,,125,,125,125,125',
'125,125,125,125,,,,,,125,125,125,125,125,125,125,125,,,125,125,125,125',
'125,125,125,125,125,125,125,125,,125,125,,125,125,125,,,,,125,,125,125',
',125,125,125,,125,125,125,125,125,125,125,,,,,427,,427,427,,427,,,,',
',427,427,,,125,427,427,427,427,427,427,427,427,427,427,,,,,,,,,,427',
'427,427,,,,,,,427,427,427,427,427,427,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,427,427,427,427,,,,427,427,427,427,427,427,427',
'427,,,,427,427,427,427,,427,427,,,427,,,,,,,,,,427,427,,,563,,,,,,427',
',563,563,,,,563,563,563,563,563,563,563,563,563,563,,,,427,427,427,427',
'427,427,427,427,427,427,580,,580,580,,580,,,,,,580,580,,,,580,580,580',
'580,580,580,580,580,580,580,,,,,,,,,,580,580,580,,,,,,,580,580,580,580',
'580,580,580,580,580,580,580,580,580,580,580,580,580,580,580,580,580',
'580,580,580,,,,580,580,580,580,580,580,580,580,,,,580,580,580,580,,580',
'580,,,580,563,563,563,563,563,563,563,563,,580,580,,,,,692,692,,692',
'580,692,692,580,,,,,,,,,,,,,,,,,580,580,580,580,580,580,580,580,580',
'580,,,692,,,,,,,,,692,692,692,692,692,,,,692,692,,,,692,,692,692,692',
'692,692,692,692,,,,,,692,692,692,692,692,692,692,692,,,692,692,692,692',
'692,692,692,692,692,692,692,692,,692,692,,692,692,692,,,,,692,,692,692',
',692,692,692,,692,692,692,692,692,692,692,3,3,,3,,3,3,,,,,,,826,,,,',
',692,,826,826,,,,826,826,826,826,826,826,826,826,826,826,3,,826,826',
'826,,,,,3,3,3,3,3,,,,3,3,,,,3,,3,3,3,3,3,3,3,,,,,,3,3,3,3,3,3,3,3,,',
'3,3,3,3,3,3,3,3,3,3,3,3,,3,3,,3,3,3,,,,,3,,3,3,,3,3,3,,3,3,3,3,3,3,3',
'544,544,,544,,544,544,,,,,,,,,,,,,3,826,826,826,826,826,826,826,826',
',,,,,,,,544,,,,,,,,,544,544,544,544,544,,,,544,544,,,,544,,544,544,544',
'544,544,544,544,,,,,,544,544,544,544,544,544,544,544,,,544,544,544,544',
'544,544,544,544,544,544,544,544,,544,544,,544,544,544,,,,,544,,544,544',
',544,544,544,,544,544,544,544,544,544,544,549,549,,549,,549,549,,,,',
',,575,,,,,,544,,575,575,,,,575,575,575,575,575,575,575,575,575,575,549',
',575,575,,,,,,549,549,549,549,549,,,,549,549,,,,549,,549,549,549,549',
'549,549,549,,,,,,549,549,549,549,549,549,549,549,,,549,549,549,549,549',
'549,549,549,549,549,549,549,,549,549,,549,549,549,,,,,549,,549,549,',
'549,549,549,,549,549,549,549,549,549,549,552,552,,552,,552,552,,,,,',
',,,,,,,549,575,575,575,575,575,575,575,575,,,,,,,,,552,,,,,,,,,552,552',
'552,552,552,,,,552,552,,,,552,,552,552,552,552,552,552,552,,,,,,552',
'552,552,552,552,552,552,552,,,552,552,552,552,552,552,552,552,552,552',
'552,552,,552,552,,552,552,552,,,,,552,,552,552,,552,552,552,,552,552',
'552,552,552,552,552,897,897,,897,,897,897,,,,,,,561,,,,,,552,,561,561',
',,,561,561,561,561,561,561,561,561,561,561,897,,561,561,561,,,,,897',
'897,897,897,897,,,,897,897,,,,897,,897,897,897,897,897,897,897,,,,,',
'897,897,897,897,897,897,897,897,,,897,897,897,897,897,897,897,897,897',
'897,897,897,,897,897,,897,897,897,,,,,897,,897,897,,897,897,897,,897',
'897,897,897,897,897,897,374,374,,374,,374,374,,,,,,,,,,,,,897,561,561',
'561,561,561,561,561,561,,,,,,,,,374,,,,,,,,,374,374,374,374,374,,,,374',
'374,,,,374,,374,374,374,374,374,374,374,,,,,,374,374,374,374,374,374',
'374,374,,,374,374,374,374,374,374,374,374,374,374,374,374,,374,374,',
'374,374,374,,,,,374,,374,374,,374,374,374,,374,374,374,374,374,374,374',
'389,,389,,389,389,,,,,,,574,,,,,,,374,574,574,,,,574,574,574,574,574',
'574,574,574,574,574,389,,574,574,574,,,,,389,389,389,,389,,,,389,389',
',,,389,,389,389,389,389,389,389,389,,,,,,389,389,389,389,389,389,389',
',,,,389,389,389,389,389,389,389,389,389,389,389,,389,389,,389,389,389',
',,,,389,,389,389,,389,389,,,389,389,389,389,389,389,389,413,,413,,413',
'413,,,,,,,,,,,,,,389,574,574,574,574,574,574,574,574,,,,,,,,413,,,,',
',,,,413,413,413,,413,,,,413,413,,,,413,,413,413,413,413,413,413,413',
',,,,,413,413,413,413,413,413,413,,,,,413,413,413,413,413,413,413,413',
'413,413,413,,413,413,,413,413,413,,,,,413,,413,413,,413,413,,,413,413',
'413,413,413,413,413,803,,803,,803,803,,,,,,,822,,,,,,,413,822,822,,',
',822,822,822,822,822,822,822,822,822,822,803,,822,822,822,,,,,803,803',
'803,,803,,,,803,803,,,,803,,803,803,803,803,803,803,803,,,,,,803,803',
'803,803,803,803,803,,,,,803,803,803,803,803,803,803,803,803,803,803',
',803,803,,803,803,803,,,,,803,,803,803,,803,803,,,803,803,803,803,803',
'803,803,415,,415,,415,415,,,,,,,,,,,,,,803,822,822,822,822,822,822,822',
'822,,,,,,,,415,,,,,,,,,415,415,415,,415,,,,415,415,,,,415,,415,415,415',
'415,415,415,415,,,,,,415,415,415,415,415,415,415,,,,,415,415,415,415',
'415,415,415,415,415,415,415,415,415,415,,415,415,415,,,,,415,,415,415',
',415,415,415,415,415,415,415,415,415,415,415,181,,181,,181,181,,,,,',
',564,,,,,,,415,564,564,,,,564,564,564,564,564,564,564,564,564,564,181',
',564,564,564,,,,,181,181,181,,181,,,,181,181,,,,181,,181,181,181,181',
'181,181,181,,,,,,181,181,181,181,181,181,181,,,,,181,181,181,181,181',
'181,181,181,181,181,181,,181,181,,181,181,181,,,,,181,,181,181,,181',
'181,,,181,181,181,181,181,181,181,677,,677,,677,677,,,,,,,,,,,,,,181',
'564,564,564,564,564,564,564,564,,,,,,,,677,,,,,,,,,677,677,677,,677',
',,,677,677,,,,677,,677,677,677,677,677,677,677,,,,,,677,677,677,677',
'677,677,677,,,,,677,677,677,677,677,677,677,677,677,677,677,,677,677',
',677,677,677,,,,,677,,677,677,,677,677,,,677,677,677,677,677,677,677',
'802,,802,,802,802,,,,,,,820,,,,,,,677,820,820,,,,820,820,820,820,820',
'820,820,820,820,820,802,,820,820,820,,,,,802,802,802,,802,,,,802,802',
',,,802,,802,802,802,802,802,802,802,,,,,,802,802,802,802,802,802,802',
',,,,802,802,802,802,802,802,802,802,802,802,802,,802,802,,802,802,802',
',,,,802,,802,802,,802,802,,,802,802,802,802,802,802,802,406,,406,,406',
'406,,,,,,,,,,,,,,802,820,820,820,820,820,820,820,820,,,,,,,,406,,,,',
',,,,406,406,406,,406,,,,406,406,,,,406,,406,406,406,406,406,406,406',
',,,,,406,406,406,406,406,406,406,,,,,406,406,406,406,406,406,406,406',
'406,406,406,,406,406,,406,406,406,,,,,406,,406,406,,406,406,,,406,406',
'406,406,406,406,406,701,,701,,701,701,,,,,,,565,,,,,,,406,565,565,,',
',565,565,565,565,565,565,565,565,565,565,701,,,,,,,,,701,701,701,,701',
',,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701,701,701',
'701,701,701,,,,,701,701,701,701,701,701,701,701,701,701,701,,701,701',
',701,701,701,,,,,701,,701,701,,701,701,,,701,701,701,701,701,701,701',
'702,,702,,702,702,,,,,,,,,,,,,,701,565,565,565,565,565,565,565,565,',
',,,,,,702,,,,,,,,,702,702,702,,702,,,,702,702,,,,702,,702,702,702,702',
'702,702,702,,,,,,702,702,702,702,702,702,702,,,,,702,702,702,702,702',
'702,702,702,702,702,702,,702,702,,702,702,702,,,,,702,,702,702,,702',
'702,,,702,702,702,702,702,702,702,15,,15,,15,15,,,,,,,424,,,,,,,702',
'424,424,,,,424,424,424,424,424,424,424,424,424,424,15,,424,424,424,',
'424,,,15,15,15,15,15,,,,15,15,,,,15,,15,15,15,15,15,15,15,,,,,,15,15',
'15,15,15,15,15,15,,,15,15,15,15,15,15,15,15,15,15,15,15,,15,15,,15,15',
'15,,,,,15,,15,15,,15,15,15,,15,15,15,15,15,15,15,396,,396,,396,396,',
',,,,,,,,,,,,15,424,424,424,424,424,424,424,424,,,,,,,,396,,,,,,,,,396',
'396,396,,396,,,,396,396,,,,396,,396,396,396,396,396,396,396,,,,,,396',
'396,396,396,396,396,396,,,,,396,396,396,396,396,396,396,396,396,396',
'396,,396,396,,396,396,396,,,,,396,,396,396,,396,396,396,,396,396,396',
'396,396,396,396,22,,22,,22,22,,,,,,,566,,,,,,,396,566,566,,,,566,566',
'566,566,566,566,566,566,566,566,22,,566,566,566,,,,,22,22,22,,22,,,',
'22,22,,,,22,,22,22,22,22,22,22,22,,,,,,22,22,22,22,22,22,22,,,,,22,22',
'22,22,22,22,22,22,22,22,22,,22,22,,22,22,22,,,,,22,,22,22,,22,22,,,22',
'22,22,22,22,22,22,800,,800,,800,800,,,,,,,,,,,,,,22,566,566,566,566',
'566,566,566,566,,,,,,,,800,,,,,,,,,800,800,800,,800,,,,800,800,,,,800',
',800,800,800,800,800,800,800,,,,,,800,800,800,800,800,800,800,,,,,800',
'800,800,800,800,800,800,800,800,800,800,,800,800,,800,800,800,,,,,800',
',800,800,,800,800,,,800,800,800,800,800,800,800,434,,434,,434,434,,',
',,,,567,,,,,,,800,567,567,,,,567,567,567,567,567,567,567,567,567,567',
'434,,,,,,,,,434,434,434,,434,,,,434,434,,,,434,,434,434,434,434,434',
'434,434,,,,,,434,434,434,434,434,434,434,,,,,434,434,434,434,434,434',
'434,434,434,434,434,,434,434,,434,434,434,,,,,434,,434,434,,434,434',
',,434,434,434,434,434,434,434,824,,824,,824,824,,,,,,,,,,,,,,434,567',
'567,567,567,567,567,567,567,,,,,,,,824,,,,,,,,,824,824,824,,824,,,,824',
'824,,,,824,,824,824,824,824,824,824,824,,,,,,824,824,824,824,824,824',
'824,,,,,824,824,824,824,824,824,824,824,824,824,824,,824,824,,824,824',
'824,,,,,824,,824,824,,824,824,,,824,824,824,824,824,824,824,709,,709',
',709,709,,,,,,,569,,,,,,,824,569,569,,,,569,569,569,569,569,569,569',
'569,569,569,709,,569,569,569,,,,,709,709,709,,709,,,,709,709,,,,709',
',709,709,709,709,709,709,709,,,,,,709,709,709,709,709,709,709,,,,,709',
'709,709,709,709,709,709,709,709,709,709,,709,709,,709,709,709,,,,,709',
',709,709,,709,709,,,709,709,709,709,709,709,709,710,,710,,710,710,,',
',,,,,,,,,,,709,569,569,569,569,569,569,569,569,,,,,,,,710,,,,,,,,,710',
'710,710,,710,,,,710,710,,,,710,,710,710,710,710,710,710,710,,,,,,710',
'710,710,710,710,710,710,,,,,710,710,710,710,710,710,710,710,710,710',
'710,,710,710,,710,710,710,,,,,710,,710,710,,710,710,,,710,710,710,710',
'710,710,710,30,,30,,30,30,,,,,,,570,,,,,,,710,570,570,,,,570,570,570',
'570,570,570,570,570,570,570,30,,570,570,570,,,,,30,30,30,,30,,,,30,30',
',,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,,,30,30,30,30',
'30,30,30,30,30,30,30,,30,30,,30,30,30,,,,,30,,30,30,,30,30,,,30,30,30',
'30,30,30,30,236,,236,,236,236,,,,,,,,,,,,,,30,570,570,570,570,570,570',
'570,570,,,,,,,,236,,,,,,,,,236,236,236,,236,,,,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,,,236,236,236',
'236,236,236,236,236,236,236,236,,236,236,,236,236,236,,,,,236,,236,236',
',236,236,,,236,236,236,236,236,236,236,237,,237,,237,237,,,,,,,572,',
',,,,,236,572,572,,,,572,572,572,572,572,572,572,572,572,572,237,,572',
'572,572,,,,,237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237',
'237,237,,,,,,237,237,237,237,237,237,237,,,,,237,237,237,237,237,237',
'237,237,237,237,237,,237,237,,237,237,237,,,,,237,,237,237,,237,237',
',,237,237,237,237,237,237,237,38,,38,,38,38,,,,,,,,,,,,,,237,572,572',
'572,572,572,572,572,572,,,,,,,,38,,,,,,,,,38,38,38,,38,,,,38,38,,,,38',
',38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,,,38,38,38,38,38,38',
'38,38,38,38,38,,38,38,,38,38,38,,,,,38,,38,38,,38,38,,,38,38,38,38,38',
'38,38,556,,556,,556,556,,,,,,,691,,,,,,,38,691,691,,,,691,691,691,691',
'691,691,691,691,691,691,556,,691,691,691,,691,,,556,556,556,,556,,,',
'556,556,,,,556,,556,556,556,556,556,556,556,,,,,,556,556,556,556,556',
'556,556,,,,,556,556,556,556,556,556,556,556,556,556,556,,556,556,,556',
'556,556,,,,,556,,556,556,,556,556,,,556,556,556,556,556,556,556,241',
',241,,241,241,,,,,,,,,,,,,,556,691,691,691,691,691,691,691,691,,,,,',
',,241,,,,,,,,,241,241,241,,241,,,,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,,,241,241,241,241,241,241',
'241,241,241,241,241,,241,241,,241,241,241,,,,,241,,241,241,,241,241',
',,241,241,241,241,241,241,241,460,,460,,460,460,,,,,,,,,,,,,,241,,,',
',,,,,,,,,,,,460,,,,,,,,,460,460,460,,460,,,,460,460,,,,460,,460,460',
'460,460,460,460,460,,,,,,460,460,460,460,460,460,460,,,,,460,460,460',
'460,460,460,460,460,460,460,460,,460,460,,460,460,460,,,,,460,,460,460',
',460,460,,,460,460,460,460,460,460,460,554,,554,,554,554,,,,,,,,,,,',
',,460,,,,,,,,,,,,,,,,554,,,,,,,,,554,554,554,,554,,,,554,554,,,,554',
',554,554,554,554,554,554,554,,,,,,554,554,554,554,554,554,554,,,,,554',
'554,554,554,554,554,554,554,554,554,554,,554,554,,554,554,554,,,,,554',
',554,554,,554,554,,,554,554,554,554,554,554,554,553,,553,,553,553,,',
',,,,,,,,,,,554,,,,,,,,,,,,,,,,553,,,,,,,,,553,553,553,,553,,,,553,553',
',,,553,,553,553,553,553,553,553,553,,,,,,553,553,553,553,553,553,553',
',,,,553,553,553,553,553,553,553,553,553,553,553,,553,553,,553,553,553',
',,,,553,,553,553,,553,553,,,553,553,553,553,553,553,553,462,,462,,462',
'462,,,,,,,,,,,,,,553,,,,,,,,,,,,,,,,462,,,,,,,,,462,462,462,,462,,,',
'462,462,,,,462,,462,462,462,462,462,462,462,,,,,,462,462,462,462,462',
'462,462,,,,,462,462,462,462,462,462,462,462,462,462,462,462,462,462',
',462,462,462,,,,,462,,462,462,,462,462,462,462,462,462,462,462,462,462',
'462,832,,832,,832,832,,,,,,,,,,,,,,462,,,,,,,,,,,,,,,,832,,,,,,,,,832',
'832,832,,832,,,,832,832,,,,832,,832,832,832,832,832,832,832,,,,,,832',
'832,832,832,832,832,832,,,,,832,832,832,832,832,832,832,832,832,832',
'832,,832,832,,832,832,832,,,,,832,,832,832,,832,832,,,832,832,832,832',
'832,832,832,250,,250,,250,250,,,,,,,,,,,,,,832,,,,,,,,,,,,,,,,250,,',
',,,,,,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250,250,250',
',,,,,250,250,250,250,250,250,250,,,,,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,,250,250,250,,,,,250,,250,250,,250,250,250,250',
'250,250,250,250,250,250,250,642,,642,,642,642,,,,,,,,,,,,,,250,,,,,',
',,,,,,,,,,642,,,,,,,,,642,642,642,,642,,,,642,642,,,,642,,642,642,642',
'642,642,642,642,,,,,,642,642,642,642,642,642,642,,,,,642,642,642,642',
'642,642,642,642,642,642,642,,642,642,,642,642,642,,,,,642,,642,642,',
'642,642,,,642,642,642,642,642,642,642,839,,839,,839,839,,,,,,,,,,,,',
',642,,,,,,,,,,,,,,,,839,,,,,,,,,839,839,839,,839,,,,839,839,,,,839,',
'839,839,839,839,839,839,839,,,,,,839,839,839,839,839,839,839,,,,,839',
'839,839,839,839,839,839,839,839,839,839,,839,839,,839,839,839,,,,,839',
',839,839,,839,839,,,839,839,839,839,839,839,839,550,,550,,550,550,,',
',,,,,,,,,,,839,,,,,,,,,,,,,,,,550,,,,,,,,,550,550,550,,550,,,,550,550',
',,,550,,550,550,550,550,550,550,550,,,,,,550,550,550,550,550,550,550',
',,,,550,550,550,550,550,550,550,550,550,550,550,,550,550,,550,550,550',
',,,,550,,550,550,,550,550,,,550,550,550,550,550,550,550,133,,133,,133',
'133,,,,,,,,,,,,,,550,,,,,,,,,,,,,,,,133,,,,,,,,,133,133,133,,133,,,',
'133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133,133,133',
'133,133,,,,,133,133,133,133,133,133,133,133,133,133,133,,133,133,,133',
'133,133,,,,,133,,133,133,,133,133,,,133,133,133,133,133,133,133,840',
',840,,840,840,,,,,,,,,,,,,,133,,,,,,,,,,,,,,,,840,,,,,,,,,840,840,840',
',840,,,,840,840,,,,840,,840,840,840,840,840,840,840,,,,,,840,840,840',
'840,840,840,840,,,,,840,840,840,840,840,840,840,840,840,840,840,,840',
'840,,840,840,840,,,,,840,,840,840,,840,840,840,,840,840,840,840,840',
'840,840,368,,368,,368,368,,,,,,,,,,,,,,840,,,,,,,,,,,,,,,,368,,,,,,',
',,368,368,368,368,368,,,,368,368,,,,368,,368,368,368,368,368,368,368',
',,,,,368,368,368,368,368,368,368,368,,,368,368,368,368,368,368,368,368',
'368,368,368,368,,368,368,,368,368,368,,,,,368,,368,368,,368,368,368',
',368,368,368,368,368,368,368,259,,259,,259,259,,,,,,,,,,,,,,368,,,,',
',,,,,,,,,,,259,,,,,,,,,259,259,259,,259,,,,259,259,,,,259,,259,259,259',
'259,259,259,259,,,,,,259,259,259,259,259,259,259,,,,,259,259,259,259',
'259,259,259,259,259,259,259,,259,259,,259,259,259,,,,,259,,259,259,',
'259,259,,,259,259,259,259,259,259,259,761,,761,,761,761,,,,,,,,,,,,',
',259,,,,,,,,,,,,,,,,761,,,,,,,,,761,761,761,,761,,,,761,761,,,,761,',
'761,761,761,761,761,761,761,,,,,,761,761,761,761,761,761,761,,,,,761',
'761,761,761,761,761,761,761,761,761,761,,761,761,,761,761,761,,,,,761',
',761,761,,761,761,,,761,761,761,761,761,761,761,464,,464,,464,464,,',
',,,,,,,,,,,761,,,,,,,,,,,,,,,,464,,,,,,,,,464,464,464,,464,,,,464,464',
',,,464,,464,464,464,464,464,464,464,,,,,,464,464,464,464,464,464,464',
',,,,464,464,464,464,464,464,464,464,464,464,464,464,464,464,,464,464',
'464,,,,,464,,464,464,,464,464,464,464,464,464,464,464,464,464,464,277',
',277,,277,277,,,,,,,,,,,,,,464,,,,,,,,,,,,,,,,277,,,,,,,,,277,277,277',
',277,,,,277,277,,,,277,,277,277,277,277,277,277,277,,,,,,277,277,277',
'277,277,277,277,,,,,277,277,277,277,277,277,277,277,277,277,277,277',
'277,277,,277,277,277,,,,,277,,277,277,,277,277,277,277,277,277,277,277',
'277,277,277,581,,581,,581,581,,,,,,,,,,,,,,277,,,,,,,,,,,,,,,,581,,',
',,,,,,581,581,581,,581,,,,581,581,,,,581,,581,581,581,581,581,581,581',
',,,,,581,581,581,581,581,581,581,,,,,581,581,581,581,581,581,581,581',
'581,581,581,,581,581,,581,581,581,,,,,581,,581,581,,581,581,581,,581',
'581,581,581,581,581,581,534,,534,,534,534,,,,,,,,,,,,,,581,,,,,,,,,',
',,,,,,534,,,,,,,,,534,534,534,,534,,,,534,534,,,,534,,534,534,534,534',
'534,534,534,,,,,,534,534,534,534,534,534,534,,,,,534,534,534,534,534',
'534,534,534,534,534,534,,534,534,,534,534,534,,,,,534,,534,534,,534',
'534,,,534,534,534,534,534,534,534,112,,112,,112,112,,,,,,,,,,,,,,534',
',,,,,,,,,,,,,,,112,,,,,,,,,112,112,112,,112,,,,112,112,,,,112,,112,112',
'112,112,112,112,112,,,,,,112,112,112,112,112,112,112,,,,,112,112,112',
'112,112,112,112,112,112,112,112,,112,112,,112,112,112,,,,,112,,112,112',
',112,112,112,,112,112,112,112,112,112,112,533,,533,,533,533,,,,,,,,',
',,,,,112,,,,,,,,,,,,,,,,533,,,,,,,,,533,533,533,,533,,,,533,533,,,,533',
',533,533,533,533,533,533,533,,,,,,533,533,533,533,533,533,533,,,,,533',
'533,533,533,533,533,533,533,533,533,533,,533,533,,533,533,533,,,,,533',
',533,533,,533,533,,,533,533,533,533,533,533,533,467,,467,,467,467,,',
',,,,,,,,,,,533,,,,,,,,,,,,,,,,467,,,,,,,,,467,467,467,,467,,,,467,467',
',,,467,,467,467,467,467,467,467,467,,,,,,467,467,467,467,467,467,467',
',,,,467,467,467,467,467,467,467,467,467,467,467,467,467,467,,467,467',
'467,,,,,467,,467,467,,467,467,,467,467,467,467,467,467,467,467,595,',
'595,,595,595,,,,,,,,,,,,,,467,,,,,,,,,,,,,,,,595,,,,,,,,,595,595,595',
',595,,,,595,595,,,,595,,595,595,595,595,595,595,595,,,,,,595,595,595',
'595,595,595,595,,,,,595,595,595,595,595,595,595,595,595,595,595,595',
'595,595,,595,595,595,,,,,595,,595,595,,595,595,595,595,595,595,595,595',
'595,595,595,103,,103,,103,103,,,,,,,,,,,,,,595,,,,,,,,,,,,,,,,103,,',
',,,,,,103,103,103,,103,,,,103,103,,,,103,,103,103,103,103,103,103,103',
',,,,,103,103,103,103,103,103,103,,,,,103,103,103,103,103,103,103,103',
'103,103,103,103,103,103,,103,103,103,,,,,103,,103,103,,103,103,,,103',
'103,103,103,103,103,103,773,,773,,773,773,,,,,,,,,,,,,,103,,,,,,,,,',
',,,,,,773,,,,,,,,,773,773,773,,773,,,,773,773,,,,773,,773,773,773,773',
'773,773,773,,,,,,773,773,773,773,773,773,773,,,,,773,773,773,773,773',
'773,773,773,773,773,773,,773,773,,773,773,773,,,,,773,,773,773,,773',
'773,,,773,773,773,773,773,773,773,97,,97,,97,97,,,,,,,,,,,,,,773,,,',
',,,,,,,,,,,,97,,,,,,,,,97,97,97,,97,,,,97,97,,,,97,,97,97,97,97,97,97',
'97,,,,,,97,97,97,97,97,97,97,,,,,97,97,97,97,97,97,97,97,97,97,97,97',
'97,97,,97,97,97,,,,,97,,97,97,,97,97,97,,97,97,97,97,97,97,97,517,,517',
',517,517,,,,,,,,,,,,,,97,,,,,,,,,,,,,,,,517,,,,,,,,,517,517,517,,517',
',,,517,517,,,,517,,517,517,517,517,517,517,517,,,,,,517,517,517,517',
'517,517,517,,,,,517,517,517,517,517,517,517,517,517,517,517,517,517',
'517,,517,517,517,,,,,517,,517,517,,517,517,517,517,517,517,517,517,517',
'517,517,598,,598,,598,598,,,,,,,,,,,,,,517,,,,,,,,,,,,,,,,598,,,,,,',
',,598,598,598,,598,,,,598,598,,,,598,,598,598,598,598,598,598,598,,',
',,,598,598,598,598,598,598,598,,,,,598,598,598,598,598,598,598,598,598',
'598,598,,598,598,,598,598,598,,,,,598,,598,598,,598,598,,,598,598,598',
'598,598,598,598,871,,871,,871,871,,,,,,,,,,,,,,598,,,,,,,,,,,,,,,,871',
',,,,,,,,871,871,871,,871,,,,871,871,,,,871,,871,871,871,871,871,871',
'871,,,,,,871,871,871,871,871,871,871,,,,,871,871,871,871,871,871,871',
'871,871,871,871,,871,871,,871,871,871,,,,,871,,871,871,,871,871,,,871',
'871,871,871,871,871,871,94,,94,,94,94,,,,,,,,,,,,,,871,,,,,,,,,,,,,',
',,94,,,,,,,,,94,94,94,,94,,,,94,94,,,,94,,94,94,94,94,94,94,94,,,,,',
'94,94,94,94,94,94,94,,,,,94,94,94,94,94,94,94,94,94,94,94,94,94,94,',
'94,94,94,,,,,94,,94,94,,94,94,94,94,94,94,94,94,94,94,94,84,,84,,84',
'84,,,,,,,,,,,,,,94,,,,,,,,,,,,,,,,84,,,,,,,,,84,84,84,,84,,,,84,84,',
',,84,,84,84,84,84,84,84,84,,,,,,84,84,84,84,84,84,84,,,,,84,84,84,84',
'84,84,84,84,84,84,84,,84,84,,84,84,84,,,,,84,,84,84,,84,84,,,84,84,84',
'84,84,84,84,606,,606,,606,606,,,,,,,,,,,,,,84,,,,,,,,,,,,,,,,606,,,',
',,,,,606,606,606,,606,,,,606,606,,,,606,,606,606,606,606,606,606,606',
',,,,,606,606,606,606,606,606,606,,,,,606,606,606,606,606,606,606,606',
'606,606,606,,606,606,,606,606,606,,,,,606,,606,606,,606,606,,,606,606',
'606,606,606,606,606,355,,355,,355,355,,,,,,,,,,,,,,606,,,,,,,,,,,,,',
',,355,,,,,,,,,355,355,355,,355,,,,355,355,,,,355,,355,355,355,355,355',
'355,355,,,,,,355,355,355,355,355,355,355,,,,,355,355,355,355,355,355',
'355,355,355,355,355,,355,355,,355,355,355,,,,,355,,355,355,,355,355',
',,355,355,355,355,355,355,355,924,,924,,924,924,,,,,,,,,,,,,,355,,,',
',,,,,,,,,,,,924,,,,,,,,,924,924,924,,924,,,,924,924,,,,924,,924,924',
'924,924,924,924,924,,,,,,924,924,924,924,924,924,924,,,,,924,924,924',
'924,924,924,924,924,924,924,924,924,924,924,,924,924,924,,,,,924,,924',
'924,,924,924,924,924,924,924,924,924,924,924,924,470,,470,,470,470,',
',,,,,,,,,,,,924,,,,,,,,,,,,,,,,470,,,,,,,,,470,470,470,,470,,,,470,470',
',,,470,,470,470,470,470,470,470,470,,,,,,470,470,470,470,470,470,470',
',,,,470,470,470,470,470,470,470,470,470,470,470,,470,470,,470,470,470',
',,,,470,,470,470,,470,470,,,470,470,470,470,470,470,470,307,,307,,307',
'307,,,,,,,,,,,,,,470,,,,,,,,,,,,,,,,307,,,,,,,,,307,307,307,,307,,,',
'307,307,,,,307,,307,307,307,307,307,307,307,,,,,,307,307,307,307,307',
'307,307,,,,,307,307,307,307,307,307,307,307,307,307,307,,307,307,,307',
'307,307,,,,,307,,307,307,,307,307,,,307,307,307,307,307,307,307,70,',
'70,,70,70,,,,,,,,,,,,,,307,,,,,,,,,,,,,,,,70,,,,,,,,,70,70,70,,70,,',
',70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,,,70',
'70,70,70,70,70,70,70,70,70,70,,70,70,,70,70,70,,,,,70,,70,70,,70,70',
',,70,70,70,70,70,70,70,609,,609,,609,609,,,,,,,,,,,,,,70,,,,,,,,,,,',
',,,,609,,,,,,,,,609,609,609,,609,,,,609,609,,,,609,,609,609,609,609',
'609,609,609,,,,,,609,609,609,609,609,609,609,,,,,609,609,609,609,609',
'609,609,609,609,609,609,609,609,609,,609,609,609,,,,,609,,609,609,,609',
'609,609,,609,609,609,609,609,609,609,62,,62,,62,62,,,,,,,,,,,,,,609',
',,,,,,,,,,,,,,,62,,,,,,,,,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62',
'62,62,,,,,,62,62,62,62,62,62,62,,,,,62,62,62,62,62,62,62,62,62,62,62',
',62,62,,62,62,62,,,,,62,,62,62,,62,62,,,62,62,62,62,62,62,62,612,,612',
',612,612,,,,,,,,,,,,,,62,,,,,,,,,,,,,,,,612,,,,,,,,,612,612,612,,612',
',,,612,612,,,,612,,612,612,612,612,612,612,612,,,,,,612,612,612,612',
'612,612,612,,,,,612,612,612,612,612,612,612,612,612,612,612,612,612',
'612,,612,612,612,,,,,612,,612,612,,612,612,,,612,612,612,612,612,612',
'612,359,,359,,359,359,,,,,,,,,,,,,,612,,,,,,,,,,,,,,,,359,,,,,,,,,359',
'359,359,,359,,,,359,359,,,,359,,359,359,359,359,359,359,359,,,,,,359',
'359,359,359,359,359,359,,,,,359,359,359,359,359,359,359,359,359,359',
'359,,359,359,,359,359,359,,,,,359,,359,359,,359,359,,,359,359,359,359',
'359,359,359,56,,56,,56,56,,,,,,,,,,,,,,359,,,,,,,,,,,,,,,,56,,,,,,,',
',56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,,,,,56,56,56,56',
'56,56,56,,,,,56,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56,,,,,56',
',56,56,,56,56,,,56,56,56,56,56,56,56,358,,358,,358,358,,,,,,,,,,,,,',
'56,,,,,,,,,,,,,,,,358,,,,,,,,,358,358,358,,358,,,,358,358,,,,358,,358',
'358,358,358,358,358,358,,,,,,358,358,358,358,358,358,358,,,,,358,358',
'358,358,358,358,358,358,358,358,358,,358,358,,358,358,358,,,,,358,,358',
'358,,358,358,,,358,358,358,358,358,358,358,55,,55,,55,55,,,,,,,,,,,',
',,358,,,,,,,,,,,,,,,,55,,,,,,,,,55,55,55,,55,,,,55,55,,,,55,,55,55,55',
'55,55,55,55,,,,,,55,55,55,55,55,55,55,,,,,55,55,55,55,55,55,55,55,55',
'55,55,,55,55,,55,55,55,,,,,55,,55,55,,55,55,,,55,55,55,55,55,55,55,318',
',318,,318,318,,,,,,,,,,,,,,55,,,,,,,,,,,,,,,,318,,,,,,,,,318,318,318',
'318,318,,,,318,318,,,,318,,318,318,318,318,318,318,318,,,,,,318,318',
'318,318,318,318,318,318,,,318,318,318,318,318,318,318,318,318,318,318',
'318,,318,318,,318,318,318,,,,,318,,318,318,,318,318,318,,318,318,318',
'318,318,318,318,319,,319,,319,319,,,,,,,,,,,,,,318,,,,,,,,,,,,,,,,319',
',,,,,,,,319,319,319,,319,,,,319,319,,,,319,,319,319,319,319,319,319',
'319,,,,,,319,319,319,319,319,319,319,,,,,319,319,319,319,319,319,319',
'319,319,319,319,,319,319,,319,319,319,,,,,319,,319,319,,319,319,,,319',
'319,319,319,319,319,319,320,,320,,320,320,,,,,,,,,,,,,,319,,,,,,,,,',
',,,,,,320,,,,,,,,,320,320,320,,320,,,,320,320,,,,320,,320,320,320,320',
'320,320,320,,,,,,320,320,320,320,320,320,320,,,,,320,320,320,320,320',
'320,320,320,320,320,320,,320,320,,320,320,320,,,,,320,,320,320,,320',
'320,,,320,320,320,320,320,320,320,321,,321,,321,321,,,,,,,,,,,,,,320',
',,,,,,,,,,,,,,,321,,,,,,,,,321,321,321,,321,,,,321,321,,,,321,,321,321',
'321,321,321,321,321,,,,,,321,321,321,321,321,321,321,,,,,321,321,321',
'321,321,321,321,321,321,321,321,,321,321,,321,321,321,,,,,321,,321,321',
',321,321,,,321,321,321,321,321,321,321,322,,322,,322,322,,,,,,,,,,,',
',,321,,,,,,,,,,,,,,,,322,,,,,,,,,322,322,322,,322,,,,322,322,,,,322',
',322,322,322,322,322,322,322,,,,,,322,322,322,322,322,322,322,,,,,322',
'322,322,322,322,322,322,322,322,322,322,,322,322,,322,322,322,,,,,322',
',322,322,,322,322,,,322,322,322,322,322,322,322,357,,357,,357,357,,',
',,,,,,,,,,,322,,,,,,,,,,,,,,,,357,,,,,,,,,357,357,357,,357,,,,357,357',
',,,357,,357,357,357,357,357,357,357,,,,,,357,357,357,357,357,357,357',
',,,,357,357,357,357,357,357,357,357,357,357,357,,357,357,,357,357,357',
',,,,357,,357,357,,357,357,,,357,357,357,357,357,357,357,54,,54,,54,54',
',,,,,,,,,,,,,357,,,,,,,,,,,,,,,,54,,,,,,,,,54,54,54,,54,,,,54,54,,,',
'54,,54,54,54,54,54,54,54,,,,,,54,54,54,54,54,54,54,,,,,54,54,54,54,54',
'54,54,54,54,54,54,54,54,54,,54,54,54,,,,,54,,54,54,,54,54,54,54,54,54',
'54,54,54,54,54,326,,326,,326,326,,,,,,,,,,,,,,54,,,,,,,,,,,,,,,,326',
',,,,,,,,326,326,326,,326,,,,326,326,,,,326,,326,326,326,326,326,326',
'326,,,,,,326,326,326,326,326,326,326,,,,,326,326,326,326,326,326,326',
'326,326,326,326,,326,326,,326,326,326,,,,,326,,326,326,,326,326,,,326',
'326,326,326,326,326,326,327,,327,,327,327,,,,,,,,,,,,,,326,,,,,,,,,',
',,,,,,327,,,,,,,,,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327',
'327,327,327,,,,,,327,327,327,327,327,327,327,,,,,327,327,327,327,327',
'327,327,327,327,327,327,,327,327,,327,327,327,,,,,327,,327,327,,327',
'327,,,327,327,327,327,327,327,327,481,,481,,481,481,,,,,,,,,,,,,,327',
',,,,,,,,,,,,,,,481,,,,,,,,,481,481,481,,481,,,,481,481,,,,481,,481,481',
'481,481,481,481,481,,,,,,481,481,481,481,481,481,481,,,,,481,481,481',
'481,481,481,481,481,481,481,481,,481,481,,481,481,481,,,,,481,,481,481',
',481,481,,,481,481,481,481,481,481,481,625,,625,,625,625,,,,,,,,,,,',
',,481,,,,,,,,,,,,,,,,625,,,,,,,,,625,625,625,,625,,,,625,625,,,,625',
',625,625,625,625,625,625,625,,,,,,625,625,625,625,625,625,625,,,,,625',
'625,625,625,625,625,625,625,625,625,625,,625,625,,625,625,625,,,,,625',
',625,625,,625,625,625,,625,625,625,625,625,625,625,633,,633,,633,633',
',,,,,,,,,,,,,625,,,,,,,,,,,,,,,,633,,,,,,,,,633,633,633,,633,,,,633',
'633,,,,633,,633,633,633,633,633,633,633,,,,,,633,633,633,633,633,633',
'633,,,,,633,633,633,633,633,633,633,633,633,633,633,,633,633,,633,633',
'633,,,,,633,,633,633,,633,633,633,,633,633,633,633,633,633,633,48,,48',
',48,48,,,,,,,,,,,,,,633,,,,,,,,,,,,,,,,48,,,,,,,,,48,48,48,,48,,,,48',
'48,,,,48,,48,48,48,48,48,48,48,,,,,,48,48,48,48,48,48,48,,,,,48,48,48',
'48,48,48,48,48,48,48,48,,48,48,,48,48,48,,,,,48,,48,48,,48,48,,,48,48',
'48,48,48,48,48,47,,47,,47,47,,,,,,,,,,,,,,48,,,,,,,,,,,,,,,,47,,,,,',
',,,47,47,47,,47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47',
'47,47,47,,,,,47,47,47,47,47,47,47,47,47,47,47,47,47,47,,47,47,47,,,',
',47,,47,47,,47,47,47,47,47,47,47,47,47,47,47,335,,335,,335,335,,,,,',
',,,,,,,,47,,,,,,,,,,,,,,,,335,,,,,,,,,335,335,335,,335,,,,335,335,,',
',335,,335,335,335,335,335,335,335,,,,,,335,335,335,335,335,335,335,',
',,,335,335,335,335,335,335,335,335,335,335,335,,335,335,,335,335,335',
',,,,335,,335,335,,335,335,,,335,335,335,335,335,335,335,356,,356,,356',
'356,,,,,,,,,,,,,,335,,,,,,,,,,,,,,,,356,,,,,,,,,356,356,356,,356,,,',
'356,356,,,,356,,356,356,356,356,356,356,356,,,,,,356,356,356,356,356',
'356,356,,,,,356,356,356,356,356,356,356,356,356,356,356,,356,356,,356',
'356,356,,,,,356,,356,356,,356,356,,,356,356,356,356,356,356,356,337',
',337,,337,337,,,,,,,,,,,,,,356,,,,,,,,,,,,,,,,337,,,,,,,,,337,337,337',
',337,,,,337,337,,,,337,,337,337,337,337,337,337,337,,,,,,337,337,337',
'337,337,337,337,,,,,337,337,337,337,337,337,337,337,337,337,337,,337',
'337,,337,337,337,,,,,337,,337,337,,337,337,,,337,337,337,337,337,337',
'337,338,,338,,338,338,,,,,,,,,,,,,,337,,,,,,,,,,,,,,,,338,,,,,,,,,338',
'338,338,,338,,,,338,338,,,,338,,338,338,338,338,338,338,338,,,,,,338',
'338,338,338,338,338,338,,,,,338,338,338,338,338,338,338,338,338,338',
'338,,338,338,,338,338,338,,,,,338,,338,338,,338,338,,,338,338,338,338',
'338,338,338,339,,339,,339,339,,,,,,,,,,,,,,338,,,,,,,,,,,,,,,,339,,',
',,,,,,339,339,339,,339,,,,339,339,,,,339,,339,339,339,339,339,339,339',
',,,,,339,339,339,339,339,339,339,,,,,339,339,339,339,339,339,339,339',
'339,339,339,,339,339,,339,339,339,,,,,339,,339,339,,339,339,,,339,339',
'339,339,339,339,339,340,,340,,340,340,,,,,,,,,,,,,,339,,,,,,,,,,,,,',
',,340,,,,,,,,,340,340,340,,340,,,,340,340,,,,340,,340,340,340,340,340',
'340,340,,,,,,340,340,340,340,340,340,340,,,,,340,340,340,340,340,340',
'340,340,340,340,340,,340,340,,340,340,340,,,,,340,,340,340,,340,340',
',,340,340,340,340,340,340,340,341,,341,,341,341,,,,,,,,,,,,,,340,,,',
',,,,,,,,,,,,341,,,,,,,,,341,341,341,,341,,,,341,341,,,,341,,341,341',
'341,341,341,341,341,,,,,,341,341,341,341,341,341,341,,,,,341,341,341',
'341,341,341,341,341,341,341,341,,341,341,,341,341,341,,,,,341,,341,341',
',341,341,,,341,341,341,341,341,341,341,342,,342,,342,342,,,,,,,,,,,',
',,341,,,,,,,,,,,,,,,,342,,,,,,,,,342,342,342,,342,,,,342,342,,,,342',
',342,342,342,342,342,342,342,,,,,,342,342,342,342,342,342,342,,,,,342',
'342,342,342,342,342,342,342,342,342,342,,342,342,,342,342,342,,,,,342',
',342,342,,342,342,,,342,342,342,342,342,342,342,343,,343,,343,343,,',
',,,,,,,,,,,342,,,,,,,,,,,,,,,,343,,,,,,,,,343,343,343,,343,,,,343,343',
',,,343,,343,343,343,343,343,343,343,,,,,,343,343,343,343,343,343,343',
',,,,343,343,343,343,343,343,343,343,343,343,343,,343,343,,343,343,343',
',,,,343,,343,343,,343,343,,,343,343,343,343,343,343,343,344,,344,,344',
'344,,,,,,,,,,,,,,343,,,,,,,,,,,,,,,,344,,,,,,,,,344,344,344,,344,,,',
'344,344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344,344',
'344,344,,,,,344,344,344,344,344,344,344,344,344,344,344,,344,344,,344',
'344,344,,,,,344,,344,344,,344,344,,,344,344,344,344,344,344,344,345',
',345,,345,345,,,,,,,,,,,,,,344,,,,,,,,,,,,,,,,345,,,,,,,,,345,345,345',
',345,,,,345,345,,,,345,,345,345,345,345,345,345,345,,,,,,345,345,345',
'345,345,345,345,,,,,345,345,345,345,345,345,345,345,345,345,345,,345',
'345,,345,345,345,,,,,345,,345,345,,345,345,,,345,345,345,345,345,345',
'345,346,,346,,346,346,,,,,,,,,,,,,,345,,,,,,,,,,,,,,,,346,,,,,,,,,346',
'346,346,,346,,,,346,346,,,,346,,346,346,346,346,346,346,346,,,,,,346',
'346,346,346,346,346,346,,,,,346,346,346,346,346,346,346,346,346,346',
'346,,346,346,,346,346,346,,,,,346,,346,346,,346,346,,,346,346,346,346',
'346,346,346,347,,347,,347,347,,,,,,,,,,,,,,346,,,,,,,,,,,,,,,,347,,',
',,,,,,347,347,347,,347,,,,347,347,,,,347,,347,347,347,347,347,347,347',
',,,,,347,347,347,347,347,347,347,,,,,347,347,347,347,347,347,347,347',
'347,347,347,,347,347,,347,347,347,,,,,347,,347,347,,347,347,,,347,347',
'347,347,347,347,347,348,,348,,348,348,,,,,,,,,,,,,,347,,,,,,,,,,,,,',
',,348,,,,,,,,,348,348,348,,348,,,,348,348,,,,348,,348,348,348,348,348',
'348,348,,,,,,348,348,348,348,348,348,348,,,,,348,348,348,348,348,348',
'348,348,348,348,348,,348,348,,348,348,348,,,,,348,,348,348,,348,348',
',,348,348,348,348,348,348,348,349,,349,,349,349,,,,,,,,,,,,,,348,,,',
',,,,,,,,,,,,349,,,,,,,,,349,349,349,,349,,,,349,349,,,,349,,349,349',
'349,349,349,349,349,,,,,,349,349,349,349,349,349,349,,,,,349,349,349',
'349,349,349,349,349,349,349,349,,349,349,,349,349,349,,,,,349,,349,349',
',349,349,,,349,349,349,349,349,349,349,350,,350,,350,350,,,,,,,,,,,',
',,349,,,,,,,,,,,,,,,,350,,,,,,,,,350,350,350,,350,,,,350,350,,,,350',
',350,350,350,350,350,350,350,,,,,,350,350,350,350,350,350,350,,,,,350',
'350,350,350,350,350,350,350,350,350,350,,350,350,,350,350,350,,,,,350',
',350,350,,350,350,,,350,350,350,350,350,350,350,351,,351,,351,351,,',
',,,,,,,,,,,350,,,,,,,,,,,,,,,,351,,,,,,,,,351,351,351,,351,,,,351,351',
',,,351,,351,351,351,351,351,351,351,,,,,,351,351,351,351,351,351,351',
',,,,351,351,351,351,351,351,351,351,351,351,351,,351,351,,351,351,351',
',,,,351,,351,351,,351,351,,,351,351,351,351,351,351,351,352,,352,,352',
'352,,,,,,,,,,,,,,351,,,,,,,,,,,,,,,,352,,,,,,,,,352,352,352,,352,,,',
'352,352,,,,352,,352,352,352,352,352,352,352,,,,,,352,352,352,352,352',
'352,352,,,,,352,352,352,352,352,352,352,352,352,352,352,,352,352,,352',
'352,352,,,,,352,,352,352,,352,352,,,352,352,352,352,352,352,352,353',
',353,,353,353,,,,,,,,,,,,,,352,,,,,,,,,,,,,,,,353,,,,,,,,,353,353,353',
',353,,,,353,353,,,,353,,353,353,353,353,353,353,353,,,,,,353,353,353',
'353,353,353,353,,,,,353,353,353,353,353,353,353,353,353,353,353,,353',
'353,,353,353,353,,,,,353,,353,353,,353,353,,,353,353,353,353,353,353',
'353,354,,354,,354,354,,,,,,,,,,,,,,353,,,,,,,,,,,,,,,,354,,,,,,,,,354',
'354,354,,354,,,,354,354,,,,354,,354,354,354,354,354,354,354,,,,,,354',
'354,354,354,354,354,354,,,,,354,354,354,354,354,354,354,354,354,354',
'354,,354,354,,354,354,354,,,,,354,,354,354,,354,354,,,354,354,354,354',
'354,354,354,469,,469,,469,469,,,,,,,,,,,,,,354,,,,,,,,,,,,,,,,469,,',
',,,,,,469,469,469,,469,,,,469,469,,,,469,,469,469,469,469,469,469,469',
',,,,,469,469,469,469,469,469,469,,,,,469,469,469,469,469,469,469,469',
'469,469,469,,469,469,,469,469,469,,,,,469,,469,469,,469,469,,,469,469',
'469,469,469,469,469,,,,,,,,551,,,,,,,,551,551,,,469,551,551,551,551',
'551,551,551,551,551,551,551,551,551,551,551,887,,,,,,,,887,887,,,,887',
'887,887,887,887,887,887,887,887,887,887,887,887,887,887,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,110,,,,551,551',
'551,551,551,551,551,551,,,,,,,,,,,,,,,,,,,,110,887,887,887,887,887,887',
'887,887,110,110,110,,110,,,,110,110,,,,110,,110,110,110,110,110,110',
'110,,,,,,110,110,110,110,110,110,110,,,304,,110,110,110,110,110,110',
'110,110,110,110,110,,110,110,,110,110,110,,,,,110,,110,110,,110,110',
'304,,110,110,110,110,110,110,110,304,304,304,,304,,,,304,304,110,,,304',
',304,304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,853',
',304,304,304,304,304,304,304,304,304,304,304,,304,304,,304,304,304,',
',,,304,,304,304,,304,304,853,,304,304,304,304,304,304,304,853,853,853',
',853,,,,853,853,304,,,853,,853,853,853,853,853,853,853,,,,,,853,853',
'853,853,853,853,853,,,87,,853,853,853,853,853,853,853,853,853,853,853',
',853,853,,853,853,853,,,,,853,,853,853,,853,853,87,,853,853,853,853',
'853,853,853,87,87,87,,87,,,,87,87,,,,87,,87,87,87,87,87,87,87,,,,,,87',
'87,87,87,87,87,87,,,,523,87,87,87,87,87,87,87,87,87,87,87,,87,87,,87',
'87,87,,,,,87,,87,87,,87,87,87,523,87,87,87,87,87,87,87,,523,523,523',
',523,,,,523,523,,,,523,,523,523,523,523,523,523,523,,,,,,523,523,523',
'523,523,523,523,,,771,,523,523,523,523,523,523,523,523,523,523,523,',
'523,523,,523,523,523,,,,,523,,523,523,,523,523,771,,523,523,523,523',
'523,523,523,771,771,771,,771,,,,771,771,,,,771,,771,771,771,771,771',
'771,771,,,,,,771,771,771,771,771,771,771,,,,,771,771,771,771,771,771',
'771,771,771,771,771,96,771,771,,771,771,771,96,,,,771,,771,771,,771',
'771,,,771,771,771,771,771,771,771,,,,,96,,,,,,,,,96,96,96,,96,,,,96',
'96,,,,96,,96,96,96,96,96,96,96,,,,,,96,96,96,96,96,96,96,,,806,,96,96',
'96,96,96,96,96,96,96,96,96,,96,96,,96,96,96,,,,,96,,96,96,,96,96,806',
',96,96,96,96,96,96,96,806,806,806,,806,,,,806,806,,,,806,,806,806,806',
'806,806,806,806,,,,,,806,806,806,806,806,806,806,,,36,,806,806,806,806',
'806,806,806,806,806,806,806,,806,806,,806,806,806,,,,,806,,806,806,',
'806,806,36,,806,806,806,806,806,806,806,36,36,36,,36,,,,36,36,,,,36',
',36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,,408,36,36,36,36,36',
'36,36,36,36,36,36,,36,36,,36,36,36,,,,,36,,36,36,,36,36,36,408,36,36',
'36,36,36,36,36,,408,408,408,,408,,,,408,408,,,,408,,408,408,408,408',
'408,408,408,,,,,,408,408,408,408,408,408,408,,,8,,408,408,408,408,408',
'408,408,408,408,408,408,,408,408,,408,408,408,,,,,408,,408,408,,408',
'408,8,,408,408,408,408,408,408,408,8,8,8,,8,,,,8,8,,,,8,,8,8,8,8,8,8',
'8,,,,,,8,8,8,8,8,8,8,,,630,,8,8,8,8,8,8,8,8,8,8,8,,8,8,,8,8,8,,,,,8',
',8,8,,8,8,630,,8,8,8,8,8,8,8,630,630,630,,630,,,,630,630,,,,630,,630',
'630,630,630,630,630,630,,,,,,630,630,630,630,630,630,630,,,718,,630',
'630,630,630,630,630,630,630,630,630,630,,630,630,,630,630,630,,,,,630',
',630,630,,630,630,718,,630,630,630,630,630,630,630,718,718,718,,718',
',,,718,718,,,,718,,718,718,718,718,718,718,718,,,,,,718,718,718,718',
'718,718,718,,,,,718,718,718,718,718,718,718,718,718,718,718,,718,718',
',718,718,718,,,,,718,,718,718,,718,718,,,718,718,718,718,718,718,718' ]
        racc_action_check = arr = Array.new(22180, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    15,   nil,  8039,  1344,   nil,   nil,  1308, 21906,   nil,
   nil,  1306,  3242,  1600,  2877,  9964,   nil,   nil,  6711,   nil,
   628,   nil, 10204,   532,   nil,   nil,   207,   nil,   nil,   nil,
 10924,  6113,   nil,   nil,   nil,   nil, 21753,   nil, 11284,    32,
   nil,  1191,   nil,  1190,   687,  1174,   nil, 18364, 18244,  1184,
  1663,   nil,   nil,   nil, 17524, 16684, 16444,   461,   nil,  1164,
   nil,   nil, 16084,   126,   nil,   nil,   nil,   nil,   nil,  1132,
 15844,  1183,  4024,  4318,   nil,   nil,  1120,   573,     0,   nil,
  3350,  4547,   nil,   nil, 15124,   nil,   350, 21359,   nil,   656,
   nil,   nil,   nil,   nil, 15004,   470, 21601, 14524,  2223,   nil,
   nil,  1755,  1240, 14284,   nil,   889,  1989,  6325,   nil,  -135,
 21131,   nil, 13804,   257,   655,   nil,   308,   nil,   nil,   nil,
   nil,  1121,   -34,  7424,   nil,  7545,  1240,   nil,  1124,  1154,
   nil,  1121,  1120, 12724,   453,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   397,   nil,   nil,   nil,   nil,   396,   346,
   nil,   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   540,   nil,   nil,   nil,   nil,   484,   nil,   nil,
   nil,  9244,   536,   nil,   nil,   nil,   nil,   nil,  1446,   nil,
   nil,   nil,   nil,   nil,   607,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   621,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  2304,   nil,   -26,   nil,   nil,   nil,  1173,
   nil,   nil,   232,  1171,   nil,   nil,  1117,   nil,   nil,   nil,
   nil,  1116,   457,   nil,  1884,  1111, 11044, 11164,  1198,   nil,
   577, 11524,  1101,  1095,   407,   nil,   nil,  1117,   nil,   323,
 12244,  1129,  6606,    22,   nil,    21,   nil,  1183,  1144, 13084,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   827,
   nil,   nil,   nil,   nil,   nil,   nil,  3694, 13444,  3481,  1349,
   nil,   nil,   nil,   nil,  1240,   nil,   838,   nil,   583,   940,
  1630,   nil,   nil,   nil,   162,   nil,   nil,  1078,   343,   952,
  1046,   488,  1079,  4194, 21207,   645,    69, 15724,   633,  1045,
   nil,  1141,  1138,  1018,   766,   nil,   278,  4668, 16804, 16924,
 17044, 17164, 17284,   nil,   440,   249, 17644, 17764,   nil,   186,
   nil,  2757,    77,    34,  1102, 18484,  1096, 18724, 18844, 18964,
 19084, 19204, 19324, 19444, 19564, 19684, 19804, 19924, 20044, 20164,
 20284, 20404, 20524, 20644, 20764, 15364, 18604, 17404, 16564, 16324,
   nil,   975,  1045,   958,   565,    23,    24,   nil, 12964,  1067,
   950,   nil,  1231,   925,  8644,   301,   -32,   nil,   769,    31,
   -54,   967,   990,   nil,  6217,  6570,   nil,   nil,    63,  8764,
   904,   503,   nil,   308,  1000,   nil, 10084,   913,   nil,   501,
   933,   nil,   nil,   974,   966,   880,  9604,   871, 21830,   858,
   nil,   855,   nil,  8884,  4086,  9124,  3536,   nil,   nil,   842,
   nil,   nil,   623,   931,  9973,   nil,   nil,  7669,   nil,   -27,
  1639,   250,  6819,   837, 10444,   889,   nil,  5868,   nil,  5747,
   nil,  2061,   nil,   nil,  2954,   nil,   nil,   886,   nil,   804,
   841,   808,  1058,   849,  1283,   nil,  2679,   nil,   nil,   nil,
 11644,  1489, 12004,  2115, 13324,   nil,   nil, 14044,   nil, 20884,
 15604,   785,   nil,   nil,   786,  1439,   nil,  5263,   nil,   nil,
  5031, 17884,   -13,   nil,   nil,  4789,   802,   nil,   nil,   nil,
  3116,   634,   492,   208,    66,   nil,   nil,   784,  3802,   153,
   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,  3928,
  3008,  5155,   nil,   nil,   nil,   nil,  2409, 14644,  2354,   nil,
   721,   783,   791, 21436,   nil,  5989,   841,  4556,   nil,   nil,
   346,   nil,   nil, 13924, 13684,   nil,   nil,   738,   734,   nil,
   nil,   nil,   nil,   nil,  8160,   nil,   nil,   nil,   nil,  8281,
 12604, 21008,  8402, 11884, 11764,  5877, 11404,  6673,  7191,   704,
  7433,  8532,   732,  7771,  9253,  9733, 10213, 10453,  1000, 10693,
 10933,  1265, 11173,  1118,  8773,  8290,  1025,  4798,   154,   875,
  7810, 13564,   801,   793,  7061,  6940,   982,   681,   691,   nil,
   665,   nil,  1360,   nil,  1881, 14164,  1544,   175, 14764,  2517,
   nil,   nil,  2637,   361,  4910,   nil, 15244,   -17,   nil, 15964,
   nil,   nil, 16204,   nil,   nil,   640,   nil,   nil,   582,   nil,
   nil,   nil,   nil,   nil,   nil, 18004,   721,   nil,   -35,   nil,
 21982,   nil,   645, 18124,   643,   550,   913,   nil,   256,   531,
   507,   nil, 12364,  1820,   nil,   498,   nil,   530,   nil,  1618,
   399,   nil,   nil,   413,   485,   nil,   314,   nil,   277,   234,
   nil,   nil,  1550,  1938,   199,   166,   nil,   178,   168,     5,
   776,    71,   468,   575,    38,    58,   nil,  9364,   nil,   nil,
   nil,    25,   nil,   -31,   -29,   921,  -112,   nil,   -91,     1,
   -47, 11413,  7918,    -7,   nil,   nil,   nil,   nil,   nil,   nil,
   108,  9724,  9844,    47,    92,   nil,   nil,   nil,   200, 10684,
 10804,   nil,  1393,   455,   203,   123,   125,   nil, 22058,   376,
   773,   nil,   nil,   nil,   562,   290,   nil,   nil,   511,   519,
   -37,   590,  5635,  2512,   722,   656,   nil,   422,   nil,   672,
   679,   681,   nil,   -18,  1554,   423,   408,   645,   177,   122,
   150,   nil,   nil,   nil,   nil,   nil,   782,   542,  7303,   405,
   nil, 13204,   nil,   784,   nil,   763,   nil,  6446,   852,   nil,
   786, 21512,   797, 14404,   nil,  1585,  5384,   nil,   nil,   805,
   nil,   nil,   nil,   nil,   nil,   nil,  2965,   nil,  1827,   nil,
  2999,   nil,   940,   nil,   831,  1704,   nil,   nil,  2798,   nil,
 10324,   756,  9484,  9004,   nil,   nil, 21677,   860,  2054,   nil,
  2311,   nil,  2087,   nil,   nil,   nil,   nil,   907,   nil,   nil,
  9493,   nil,  9013,   nil, 10564,   nil,  8048,   nil,  6949,   nil,
   460,   936, 12124,  1027,   nil,  1028,   nil,   nil,   nil, 12484,
 12844,  5626,   nil,   nil,   nil,   150,  5505,   nil,   nil,  1057,
   nil,   298,   nil, 21283,   126,   nil,   nil,  4426,   nil,   nil,
  1012,  1092,  1296,  1022,  1023,  1024,  1607,  1039,  1917,  1041,
  1045, 14884,   998,  1096,   nil,  1059,  1060,   nil,  1070,  1071,
  1083,   nil,  5393,   nil,   160,   nil,   nil, 21036,   nil,   392,
  1177,   nil,   599,   921,   214,  1152,   nil,  8523,   nil,   nil,
   nil,   nil,   nil,  2947,   nil,  1118,  2118,   nil,  3983,   nil,
  2370,   nil,   784,   nil,   nil,  1853,   nil,   nil,  7182,   nil,
   nil,   nil,   nil,  1647, 15484,  3639,   719,  1232,  1159,  1160,
  1150,  1153,  1166,  1168,  1176,  1178,   666,   138,   451,  1187,
   219,   151,   nil,   nil,   nil,  2572,   nil,   nil,   nil,   nil,
   293,  1215,   nil ]

racc_action_default = [
    -2,  -540,    -1,  -539,  -540,  -447,    -3,  -540,  -540,  -446,
  -437,  -540,  -540,  -477,  -540,  -540,  -448,  -438,  -422,  -311,
  -540,   -65,  -540,  -526,  -449,  -420,  -286,  -422,  -404,  -309,
  -540,  -540,    -5,  -456,  -422,  -310,   -69,    -6,  -540,  -269,
  -457,  -412,  -312,  -540,  -540,  -418,   -79,  -301,  -540,  -540,
    -9,  -451,  -400,  -313,  -302,  -540,  -540,   -40,  -450,  -403,
  -314,  -303,  -540,  -454,  -452,  -405,  -315,  -304,  -261,  -528,
  -540,  -540,   -46,  -540,  -262,  -453,  -526,   -48,  -306,  -263,
  -441,  -539,   -49,  -264,  -540,  -265,  -516,  -540,  -443,   -53,
  -266,  -442,  -401,  -307,  -278,  -268,  -540,  -539,  -444,  -402,
  -308,  -281,  -540,  -539,  -445,  -233,  -384,  -539,   -41,  -528,
   -77,   953,  -540,  -540,  -540,  -269,  -540,  -301,  -302,  -454,
  -104,  -528,  -540,  -539,  -306,  -539,  -101,  -278,  -281,  -102,
  -305,  -384,  -540,  -540,  -176,  -126,  -171,  -161,  -117,  -127,
  -152,  -160,  -118,  -169,  -128,  -155,  -119,  -139,  -179,  -540,
  -181,  -132,  -164,  -120,  -185,  -133,  -141,  -151,  -121,  -186,
  -134,  -138,  -122,  -165,  -136,  -129,  -154,  -137,  -142,  -123,
  -168,  -140,  -146,  -124,  -143,  -156,  -145,  -147,  -144,  -167,
  -172,  -540,  -148,  -157,  -174,  -180,  -158,  -166,  -477,  -149,
  -159,  -173,  -109,  -130,  -106,  -163,  -110,  -131,  -108,  -150,
  -506,  -183,  -175,  -184,  -182,  -107,  -177,  -125,  -170,  -135,
  -178,  -488,  -486,  -477,  -494,  -483,  -288,  -482,  -500,  -499,
  -497,  -480,  -540,  -540,  -501,  -479,  -539,  -478,  -369,  -496,
  -481,  -539,  -540,  -476,  -540,  -539,  -540,  -540,  -540,  -285,
  -540,  -540,  -539,  -539,  -269,  -510,  -377,  -254,  -248,  -454,
  -539,  -540,  -234,  -539,  -244,  -539,  -249,  -540,   -57,  -540,
    -8,  -176,  -169,  -179,  -164,  -146,  -147,  -148,  -432,  -540,
  -106,  -434,  -433,  -107,  -435,  -431,  -540,  -539,  -540,  -223,
   -45,    -4,  -535,  -537,  -527,  -536,  -540,  -287,  -540,  -540,
  -208,  -111,   -17,  -113,  -540,  -112,  -114,  -540,  -540,   -92,
   -70,   -85,  -540,  -539,   -73,   -47,  -540,  -540,  -540,  -540,
   -81,  -439,  -440,  -540,  -540,   -51,  -209,  -539,  -540,  -540,
  -540,  -540,  -540,   -52,  -224,  -540,  -540,  -540,  -406,  -540,
  -529,  -540,  -540,  -275,  -540,  -540,  -540,  -540,  -540,  -540,
  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,
  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,
  -115,   -22,  -540,  -527,  -526,  -539,  -539,  -374,  -540,   -67,
  -528,   -13,   -14,  -540,  -539,  -526,  -528,  -327,  -540,  -269,
  -454,  -540,  -540,  -326,  -540,  -540,   -50,  -267,  -540,  -540,
  -540,  -532,  -235,  -532,  -528,   -64,  -540,  -540,  -508,  -532,
  -540,  -383,   -63,  -540,  -539,  -528,  -540,   -75,  -540,  -540,
   -39,   -38,   -30,  -540,  -540,  -539,  -540,  -439,  -440,  -540,
  -101,  -103,  -102,  -540,  -189,   -31,  -525,  -540,  -524,  -528,
  -477,  -540,  -539,  -539,  -540,  -540,  -498,  -539,  -367,  -539,
  -502,  -540,  -505,  -469,  -540,  -474,  -485,  -540,  -328,  -528,
  -483,  -332,  -339,  -540,  -540,  -330,  -540,  -472,  -513,  -250,
  -540,  -540,  -539,  -540,  -252,  -253,  -245,  -252,  -246,  -540,
  -540,  -528,  -242,  -243,  -275,  -539,  -356,  -539,  -359,  -357,
  -539,  -540,  -539,   -58,  -255,  -539,  -540,  -436,  -423,  -424,
  -540,  -517,  -519,  -520,  -518,  -382,  -380,  -528,  -539,  -517,
  -519,  -520,  -518,  -381,    -7,  -538,  -407,  -421,  -408,  -540,
  -540,  -540,   -21,   -20,   -19,  -409,  -540,  -539,  -540,   -82,
   -91,  -528,   -71,  -540,  -318,  -539,  -317,  -197,   -36,  -411,
  -540,  -414,  -410,  -540,  -540,  -416,  -417,  -540,  -540,   -27,
   -23,   -24,   -25,   -26,  -539,   -43,   -42,  -321,  -320,  -539,
  -540,  -231,  -539,  -540,  -540,  -213,  -540,  -218,  -210,  -225,
  -219,  -211,  -226,  -220,  -212,  -221,  -200,  -222,  -205,  -201,
  -202,  -214,  -203,  -215,  -204,  -198,  -216,  -199,  -227,  -217,
  -540,  -540,  -540,  -540,  -539,  -539,   -16,  -540,   -66,  -273,
  -528,   -12,  -527,  -272,  -540,  -539,  -540,  -275,  -540,  -539,
  -517,  -518,  -539,  -540,  -539,  -458,  -540,  -540,  -276,  -534,
  -236,  -533,  -534,  -238,  -280,  -528,   -37,  -254,  -187,   -29,
  -277,  -509,  -271,  -316,  -392,  -539,  -539,  -284,  -528,   -44,
  -540,   -83,   -78,  -540,  -260,  -540,  -101,  -105,  -102,  -528,
  -539,  -298,  -540,  -477,  -507,  -528,  -462,  -540,  -361,  -540,
  -528,  -490,  -484,  -540,  -540,  -489,  -539,  -504,  -539,  -539,
  -503,  -487,  -540,  -540,  -337,  -528,  -495,  -539,  -539,  -517,
  -518,  -528,  -517,  -518,  -539,  -256,  -251,  -540,  -511,  -512,
  -239,  -483,  -492,  -539,  -539,  -539,  -539,  -355,  -540,  -540,
  -540,  -187,  -539,  -540,  -430,  -427,  -428,  -429,  -425,  -379,
   -61,  -540,  -540,  -540,  -385,  -240,  -241,  -378,   -59,  -540,
  -540,   -18,   -88,   -90,  -528,  -517,  -518,   -80,  -540,   -74,
  -539,  -319,  -413,  -415,  -206,  -207,  -419,   -28,  -539,  -540,
  -528,  -540,  -196,  -228,  -230,  -540,  -116,  -540,  -294,  -540,
  -540,  -540,  -530,   -68,   -15,  -521,  -274,  -528,  -517,  -518,
  -540,  -376,   -55,  -375,   -54,  -460,  -540,  -540,  -539,  -532,
  -279,  -540,  -395,  -539,  -394,  -393,  -324,  -539,  -539,  -283,
   -76,  -540,  -258,  -540,  -385,  -190,  -539,  -461,  -299,  -362,
  -365,  -363,  -366,  -368,  -370,  -371,  -540,  -467,  -540,  -465,
  -540,  -475,  -335,  -331,  -340,  -540,  -329,  -473,  -540,  -470,
  -540,  -385,  -540,  -540,  -247,  -257,  -540,  -540,  -346,  -348,
  -540,  -351,  -540,  -353,  -358,  -387,  -386,  -540,  -426,   -62,
  -194,   -35,  -195,  -531,  -540,   -60,  -192,   -33,  -193,   -34,
   -86,   -72,  -540,  -540,  -322,  -540,  -291,  -282,  -292,  -540,
  -540,  -539,  -293,  -373,  -372,  -385,  -539,  -296,  -459,  -540,
  -237,  -188,  -397,  -540,  -540,  -325,  -399,  -539,   -11,   -84,
  -259,  -540,  -540,  -539,  -539,  -539,  -540,  -333,  -540,  -338,
  -539,  -540,  -491,  -540,  -360,  -539,  -539,  -493,  -539,  -539,
  -539,   -56,  -191,   -32,  -540,  -289,  -290,  -232,  -256,  -539,
  -540,  -297,  -540,  -100,  -454,  -540,  -396,  -539,  -398,  -300,
  -364,  -468,  -466,  -540,  -463,  -336,  -540,  -471,  -540,  -275,
  -540,  -343,  -540,  -345,  -352,  -540,  -349,  -354,  -539,  -388,
  -389,  -390,  -295,  -540,  -539,  -540,   -99,  -539,  -539,  -334,
  -521,  -274,  -539,  -539,  -539,  -539,  -539,  -521,   -98,  -528,
  -517,  -518,  -391,  -464,  -344,  -540,  -341,  -347,  -350,  -323,
  -385,  -539,  -342 ]

clist = [
'32,525,233,582,471,305,432,483,410,626,391,315,704,393,130,280,655,331',
'323,399,544,50,403,305,284,409,300,549,254,305,552,497,666,50,228,466',
'468,305,423,421,37,188,130,305,296,685,370,268,768,678,369,376,260,281',
'292,650,192,406,386,295,449,254,192,507,258,610,833,613,254,419,877',
'306,793,621,794,192,123,438,604,283,367,632,490,269,498,531,296,407',
'200,325,683,781,288,130,392,329,360,688,387,297,398,295,130,332,751',
'412,362,753,254,364,782,287,427,390,448,254,130,192,676,149,254,676',
'511,377,779,361,425,858,222,397,23,656,283,919,763,854,328,286,216,308',
'530,3,477,314,480,698,668,275,429,658,835,395,6,2,774,382,402,447,1',
',,,,,388,686,,,,639,877,,,,,,,233,,,,,,,,,801,,,,599,602,20,,678,,719',
'114,,,,,233,240,20,,869,,,,,240,,,473,,671,,,,,,640,442,739,298,,240',
'442,830,,,442,,433,,240,,,465,465,473,,240,,240,,472,,,476,240,476,',
'584,585,,,,240,,,845,,254,240,,490,521,498,20,714,369,240,472,,378,905',
'793,,665,522,949,240,,114,305,305,305,305,240,254,616,545,546,240,20',
',,298,528,240,50,770,900,807,,723,,409,130,920,20,,20,,640,929,,,493',
'504,240,782,640,,,,,,,637,664,11,448,,539,,,590,,,,369,,11,,647,,747',
',,540,541,542,543,607,,615,,,,476,476,666,655,,,,,240,692,628,629,,',
'592,,875,473,674,,,655,,548,586,,548,619,,831,,,583,,,,631,,,624,640',
',,591,,,254,,,11,472,,130,,,,,233,283,,,,,,473,,,254,648,283,841,850',
',,,11,,240,,,,,605,703,,,846,819,,645,,11,950,11,643,825,493,472,,776',
',,687,,240,804,102,,,192,648,20,,,254,,865,476,102,473,,,,,,646,,,246',
',20,298,737,705,240,,876,,879,,,,254,493,20,20,240,240,240,240,254,631',
'472,240,240,730,,756,,764,,,296,759,735,,,130,921,254,942,,711,,,,409',
'295,700,,448,448,,,102,,708,897,,,383,493,,192,,20,,473,493,,,20,,305',
',,,,,,102,305,,,,,240,918,,,401,240,,240,,703,102,246,102,,472,296,240',
'240,705,298,,705,933,,,736,240,,,401,295,254,744,,,254,11,,254,,,703',
'631,20,762,766,192,,20,,20,,,750,233,11,,,130,705,493,757,,,,,,,,11',
'11,752,,240,754,442,,442,442,,,755,,,703,758,442,442,20,,,20,,465,867',
'849,20,448,,,939,240,648,442,442,442,,,,240,,,,861,,,821,703,,,11,,',
',827,829,11,,240,,631,,,,298,,20,,,766,63,,,,,119,130,766,,119,,,63',
'640,,20,,,,,20,240,,20,,,,,448,,448,102,,301,,,503,,,,,,852,859,11,',
',856,,11,102,11,,,,20,20,,,130,659,,,20,102,102,240,,448,240,240,,667',
'240,,20,,240,63,,,305,,,380,,,,548,11,,684,11,119,130,848,,11,,883,',
'298,,,63,,,301,,,,,,,,102,,,622,,63,102,63,,,,,,,,,,,,,,,11,641,,,130',
'442,442,442,,,884,,442,,,,,442,442,11,442,442,442,,11,,20,11,,,,766',
'703,473,,240,,503,,,,,102,240,240,,,102,,102,,,298,,,,,,,11,11,,,,,',
'472,11,,624,442,,,,442,442,442,442,766,11,,,,254,503,,,102,,,102,,20',
'442,,102,,493,,,,20,,,,298,,,,,20,699,493,,,39,,,,706,115,,,,,373,,39',
',,,503,,,,102,,,,503,872,,,,63,,,,299,,,,,,102,,,,240,102,738,,102,63',
'301,,240,11,,373,,,,,,20,,63,63,,20,,,,,,,892,,,,20,,39,102,102,400',
',,379,,,102,,,411,,,115,,,,,,102,,,503,,39,706,,299,706,,778,,,63,,',
'20,,11,63,39,,39,,,,,11,,,,,,,,,11,20,,,,699,,240,,,706,,,,863,,864',
'301,,,,,,,,,870,,,,,,,,,,,,878,,880,63,,,,,63,,63,,,102,,,,,836,,838',
',,,,,,11,842,,,,11,,,,,,,,458,459,,11,,847,,,63,,,63,,,,,63,,373,,,',
',484,,,,,,,,,538,,,588,,,,102,,593,,11,,,,,102,,,,,928,301,,63,102,',
'614,932,,934,,11,935,,39,,,627,,,,,63,,,,,63,,885,63,886,,39,299,,373',
',,,,644,951,,,891,,39,39,,,,,,,,,899,,,,661,63,63,,,,,,102,63,,,,102',
',252,,,,,896,63,680,279,102,922,,,,,,290,,,,,,39,653,,654,,,39,,,617',
'301,252,316,,,,,,252,324,,,,,,,634,102,,,,,,,,717,,,,,299,689,,,690',
',,651,102,693,,,,,,,,,252,,,252,,,39,252,503,252,,39,252,39,63,,,,252',
'675,,,400,,,679,,,,,,720,,,,,,,,424,301,,,,,,743,,,,728,39,,,39,729',
',,731,39,694,,,,,,,,,,,760,,,,,,,,,63,,,,769,,,,,63,740,741,,301,,,',
'299,63,39,,777,,,,,783,,,,,,,,,,,,39,,,796,,39,,,39,,119,,,,,,,,617',
',,,,,252,252,443,,,279,,445,,,,457,,,252,,39,39,,,,63,675,252,39,400',
'63,,,,,,,894,,,39,63,765,,,252,,,837,,772,,,,,,,,,,817,,,,,,299,,,,',
',,,,527,,,,,,63,,,,,,,,,,,,,805,,,,,551,,,63,555,,557,558,559,560,561',
'562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578',
'579,39,,,,,,,855,,,,,,,,,,,,,,,,,,,299,,,113,,,,,252,,618,,,,,,,,,,',
',,,,113,,252,,252,,113,,,,,860,,,,39,,,113,,,,,252,39,113,,,299,,889',
',,39,,890,,,,,,,,,,,898,,,424,,252,,252,,,252,113,527,252,,,,115,,,113',
'113,,,691,,,113,,,,,888,252,113,,,,,,927,252,,,,,,,,,,,39,,,,,39,,,252',
'936,,,893,,,,39,,,,,,,,724,725,,,,,,,,,,,,,,,,,,,732,733,,734,,,,,,',
',,39,,,,,,,,,,,,,,,,252,,,,,39,,,,,,,,,252,,,,252,,,252,,,,,,,252,,',
'252,,,,,113,113,,,,113,,,252,,,,,,,,252,,,,,,,113,,775,,,,,,,,,,,,,',
',,,,,,,,,,,,787,,789,791,,,,,,252,,797,799,,,,,113,,,,,,,,,,,809,811',
'813,,,820,822,,,,,,,826,828,,113,,,,113,,113,113,113,113,113,113,113',
'113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,,,,',
',,,,,,,,,,,,,,,,851,,,,,,,,,,,,252,,,,,,,,,,,,,,,,113,,,,,113,,,,,,820',
',826,828,,,,,,,,,,,,113,,,,,,,,,882,,,,,,,,,,,,,,,887,252,113,,,,113',
',,113,,113,113,,,,,,,,,,,113,,,,,,,,,882,,,,901,902,904,,,,,907,,,,',
'911,913,,914,916,917,,,,,,,,,,,,113,,,,,,,,,,113,113,,,,,,,,,252,,,',
',,,,,,113,113,,113,,,943,,,,944,946,947,948,,,,,,,,,,,,,,,113,952,,',
',,,,,,,,,,,,,,,,,,,,,,,,113,,,113,,,,,,,,,,,,,113,,,,,113,,,113,,,,',
',,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,,,,,,,,,,,,,,,,,,,,,',
',,113,,,,,,,,,,,,,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113',
',,,,,,,,,113,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,113,113,,,113,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,113,113,,,,,,,,,,,,,113,,,,,,,,,,,,,,,,,',
'113' ]
        racc_goto_table = arr = Array.new(2552, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'7,85,112,92,25,30,100,40,28,13,63,36,26,65,59,21,137,32,36,65,85,10',
'11,30,9,63,47,89,34,30,89,25,138,10,120,68,68,30,11,51,8,53,59,30,58',
'109,44,53,14,142,43,30,8,6,17,114,54,32,36,57,105,34,54,132,39,64,86',
'64,34,32,139,19,103,64,106,54,52,119,96,97,77,49,38,129,38,132,58,48',
'76,19,107,116,129,59,7,19,17,114,77,129,7,57,59,19,67,21,6,67,34,19',
'117,81,102,62,104,34,59,54,69,101,34,69,31,22,115,18,21,15,118,80,5',
'110,97,122,123,124,127,128,83,130,131,4,41,133,41,134,110,135,30,136',
'14,39,3,2,26,94,39,141,1,,,,,,52,110,,,,25,139,,,,,,,112,,,,,,,,,26',
',,,38,38,24,,142,,49,24,,,,,112,24,24,,106,,,,,24,,,36,,25,,,,,,38,7',
'92,24,,24,7,26,,,7,,120,,24,,,7,7,36,,24,,24,,7,,,7,24,7,,41,41,,,,24',
',,26,,34,24,,38,44,38,24,25,43,24,7,,24,106,103,,105,48,86,24,,24,30',
'30,30,30,24,34,28,30,30,24,24,,,24,21,24,10,49,116,114,,132,,63,59,14',
'24,,24,,38,106,,,54,8,24,117,38,,,,,,,51,104,23,104,,10,,,44,,,,43,',
'23,,11,,25,,,19,19,19,19,30,,36,,,,7,7,138,137,,,,,24,41,30,30,,,9,',
'109,36,65,,,137,,97,10,,97,21,,49,,,6,,,,47,,,7,38,,,6,,,34,,,23,7,',
'59,,,,,112,97,,,,,,36,,,34,7,97,85,64,,,,23,,24,,,,,97,32,,,89,40,,120',
',23,26,23,53,40,54,7,,100,,,112,,24,68,20,,,54,7,24,,,34,,110,7,20,36',
',,,,,97,,,66,,24,24,63,7,24,,110,,110,,,,34,54,24,24,24,24,24,24,34',
'47,7,24,24,30,,11,,28,,,58,65,32,,,59,92,34,13,,17,,,,63,57,39,,104',
'104,,,20,,39,85,,,20,54,,54,,24,,36,54,,,24,,30,,,,,,,20,30,,,,,24,85',
',,66,24,,24,,32,20,66,20,,7,58,24,24,7,24,,7,110,,,17,24,,,66,57,34',
'10,,,34,23,,34,,,32,47,24,7,7,54,,24,,24,,,19,112,23,,,59,7,54,19,,',
',,,,,23,23,39,,24,39,7,,7,7,,,97,,,32,97,7,7,24,,,24,,7,104,11,24,104',
',,25,24,7,7,7,7,,,,24,,,,11,,,21,32,,,23,,,,21,21,23,,24,,47,,,,24,',
'24,,,7,50,,,,,50,59,7,,50,,,50,38,,24,,,,,24,24,,24,,,,,104,,104,20',
',50,,,66,,,,,,7,47,23,,,7,,23,20,23,,,,24,24,,,59,108,,,24,20,20,24',
',104,24,24,,108,24,,24,,24,50,,,30,,,50,,,,97,23,,108,23,50,59,97,,23',
',21,,24,,,50,,,50,,,,,,,,20,,,79,,50,20,50,,,,,,,,,,,,,,,23,79,,,59',
'7,7,7,,,19,,7,,,,,7,7,23,7,7,7,,23,,24,23,,,,7,32,36,,24,,66,,,,,20',
'24,24,,,20,,20,,,24,,,,,,,23,23,,,,,,7,23,,7,7,,,,7,7,7,7,7,23,,,,34',
'66,,,20,,,20,,24,7,,20,,54,,,,24,,,,24,,,,,24,66,54,,,27,,,,66,27,,',
',,12,,27,,,,66,,,,20,,,,66,24,,,,50,,,,27,,,,,,20,,,,24,20,79,,20,50',
'50,,24,23,,12,,,,,,24,,50,50,,24,,,,,,,24,,,,24,,27,20,20,29,,,27,,',
'20,,,29,,,27,,,,,,20,,,66,,27,66,,27,66,,79,,,50,,,24,,23,50,27,,27',
',,,,23,,,,,,,,,23,24,,,,66,,24,,,66,,,,108,,108,50,,,,,,,,,108,,,,,',
',,,,,,108,,108,50,,,,,50,,50,,,20,,,,,79,,79,,,,,,,23,79,,,,23,,,,,',
',,29,29,,23,,79,,,50,,,50,,,,,50,,12,,,,,29,,,,,,,,,12,,,45,,,,20,,45',
',23,,,,,20,,,,,108,50,,50,20,,45,108,,108,,23,108,,27,,,45,,,,,50,,',
',,50,,79,50,79,,27,27,,12,,,,,45,108,,,79,,27,27,,,,,,,,,79,,,,45,50',
'50,,,,,,20,50,,,,20,,33,,,,,20,50,45,33,20,79,,,,,,33,,,,,,27,12,,12',
',,27,,,29,50,33,33,,,,,,33,33,,,,,,,29,20,,,,,,,,45,,,,,27,12,,,12,',
',29,20,12,,,,,,,,,33,,,33,,,27,33,66,33,,27,33,27,50,,,,33,29,,,29,',
',29,,,,,,12,,,,,,,,33,50,,,,,,45,,,,12,27,,,27,12,,,12,27,27,,,,,,,',
',,,45,,,,,,,,,50,,,,45,,,,,50,12,12,,50,,,,27,50,27,,45,,,,,45,,,,,',
',,,,,,27,,,45,,27,,,27,,50,,,,,,,,29,,,,,,33,33,111,,,33,,111,,,,111',
',,33,,27,27,,,,50,29,33,27,29,50,,,,,,,50,,,27,50,29,,,33,,,45,,29,',
',,,,,,,,12,,,,,,27,,,,,,,,,33,,,,,,50,,,,,,,,,,,,,29,,,,,33,,,50,33',
',33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33',
'27,,,,,,,12,,,,,,,,,,,,,,,,,,,27,,,42,,,,,33,,33,,,,,,,,,,,,,,,42,,33',
',33,,42,,,,,29,,,,27,,,42,,,,,33,27,42,,,27,,12,,,27,,12,,,,,,,,,,,12',
',,33,,33,,33,,,33,42,33,33,,,,27,,,42,42,,,33,,,42,,,,,29,33,42,,,,',
',12,33,,,,,,,,,,,27,,,,,27,,,33,12,,,27,,,,27,,,,,,,,33,33,,,,,,,,,',
',,,,,,,,,33,33,,33,,,,,,,,,27,,,,,,,,,,,,,,,,33,,,,,27,,,,,,,,,33,,',
',33,,,33,,,,,,,33,,,33,,,,,42,42,,,,42,,,33,,,,,,,,33,,,,,,,42,,33,',
',,,,,,,,,,,,,,,,,,,,,,,,111,,111,111,,,,,,33,,111,111,,,,,42,,,,,,,',
',,,111,111,111,,,33,33,,,,,,,33,33,,42,,,,42,,42,42,42,42,42,42,42,42',
'42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,,33',
',,,,,,,,,,,33,,,,,,,,,,,,,,,,42,,,,,42,,,,,,33,,33,33,,,,,,,,,,,,42',
',,,,,,,,33,,,,,,,,,,,,,,,33,33,42,,,,42,,,42,,42,42,,,,,,,,,,,42,,,',
',,,,,33,,,,111,111,111,,,,,111,,,,,111,111,,111,111,111,,,,,,,,,,,,42',
',,,,,,,,,42,42,,,,,,,,,33,,,,,,,,,,42,42,,42,,,111,,,,111,111,111,111',
',,,,,,,,,,,,,,42,111,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,42,,,,,,,,,,,,,42',
',,,,42,,,42,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,',
',,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,42,,,,,,,,,,42,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,42,42,,',
'42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,42,,,,,,,,,,,,,42,,,,,,,,,,,,',
',,,,,42' ]
        racc_goto_check = arr = Array.new(2552, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   158,   153,   149,   141,   127,    30,    -3,    37,     1,
    18,   -85,   899,  -395,  -578,  -641,   nil,    23,    52,    33,
   465,    -7,    36,   330,   189,  -246,  -485,   967,  -104,   948,
   -33,  -170,   -52,  1299,    14,   nil,   -36,   nil,  -194,    50,
  -251,  -111,  1680,   -31,   -35,   849,   nil,   -10,   -23,  -327,
   715,   -83,    68,    29,    44,   nil,   nil,    28,    13,     6,
   nil,   nil,    16,   -87,  -326,   -84,   476,  -495,  -207,  -346,
   nil,   nil,   nil,   nil,   nil,   nil,    76,     3,   nil,   433,
    26,    85,   nil,   125,   nil,  -305,  -654,   nil,   nil,  -302,
   nil,   nil,  -359,   nil,    68,   nil,  -310,    56,   nil,   nil,
  -182,   107,   -37,  -590,  -120,  -174,  -589,  -385,   334,  -430,
  -310,  1311,   -11,   nil,  -378,  -525,  -558,  -539,   115,  -145,
    21,   nil,  -756,  -491,  -628,   nil,   nil,    77,   112,    65,
    98,  -168,  -223,    98,  -341,   129,  -292,  -425,  -424,  -740,
   nil,   -75,  -418 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   371,   nil,   363,
   372,   nil,   404,   nil,   834,   nil,   375,   nil,   nil,   nil,
   257,   108,     7,   238,   289,   nil,   nil,   244,   nil,   247,
    57,   nil,   587,    72,    77,    82,   256,    89,   635,   nil,
   nil,   nil,    14,    21,   nil,   nil,    36,    43,    46,   nil,
   249,   120,   nil,   291,   501,   196,   293,    92,    99,   105,
   334,   336,   nil,   242,   nil,   243,   495,   707,   nil,   248,
    68,    74,    79,    83,    85,    90,    95,   nil,   107,   nil,
   nil,   239,    26,   nil,    38,   nil,   nil,    56,    62,   nil,
    70,    76,   nil,    87,   nil,    96,   nil,   526,     8,    12,
   nil,   nil,   nil,   455,   212,   nil,   451,   nil,   226,   nil,
   231,   nil,   657,   479,   nil,   nil,   nil,   217,   nil,   nil,
   431,   496,   nil,   nil,   nil,    52,    59,    65,   nil,   nil,
   nil,   nil,   488,   nil,   nil,   nil,   235,   211,   214,   682,
   219,   223,   245 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_1,
  0, 153, :_reduce_2,
  2, 151, :_reduce_3,
  2, 152, :_reduce_4,
  1, 154, :_reduce_5,
  1, 154, :_reduce_6,
  3, 154, :_reduce_7,
  2, 154, :_reduce_8,
  1, 157, :_reduce_9,
  1, 157, :_reduce_none,
  4, 160, :_reduce_11,
  2, 161, :_reduce_12,
  1, 165, :_reduce_13,
  1, 165, :_reduce_14,
  3, 165, :_reduce_15,
  2, 165, :_reduce_none,
  0, 180, :_reduce_17,
  4, 159, :_reduce_18,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 159, :_reduce_23,
  3, 159, :_reduce_24,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  4, 159, :_reduce_none,
  3, 159, :_reduce_29,
  3, 159, :_reduce_none,
  3, 159, :_reduce_31,
  6, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 179, :_reduce_none,
  3, 179, :_reduce_none,
  3, 179, :_reduce_none,
  3, 179, :_reduce_44,
  2, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 168, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_50,
  2, 170, :_reduce_51,
  2, 170, :_reduce_52,
  1, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 189, :_reduce_none,
  2, 183, :_reduce_57,
  3, 183, :_reduce_none,
  4, 183, :_reduce_59,
  5, 183, :_reduce_none,
  4, 183, :_reduce_none,
  5, 183, :_reduce_none,
  2, 183, :_reduce_63,
  2, 183, :_reduce_64,
  1, 171, :_reduce_none,
  3, 171, :_reduce_none,
  1, 193, :_reduce_none,
  3, 193, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  3, 192, :_reduce_none,
  5, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 196, :_reduce_none,
  3, 196, :_reduce_none,
  2, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 198, :_reduce_none,
  3, 198, :_reduce_none,
  1, 197, :_reduce_none,
  4, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  2, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_94,
  3, 169, :_reduce_95,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  2, 169, :_reduce_99,
  1, 169, :_reduce_none,
  1, 200, :_reduce_101,
  1, 200, :_reduce_102,
  2, 201, :_reduce_103,
  1, 201, :_reduce_104,
  3, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_109,
  1, 202, :_reduce_110,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 182, :_reduce_187,
  5, 182, :_reduce_none,
  3, 182, :_reduce_189,
  5, 182, :_reduce_none,
  6, 182, :_reduce_none,
  5, 182, :_reduce_192,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  4, 182, :_reduce_none,
  3, 182, :_reduce_none,
  3, 182, :_reduce_198,
  3, 182, :_reduce_199,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  3, 182, :_reduce_202,
  3, 182, :_reduce_203,
  3, 182, :_reduce_204,
  3, 182, :_reduce_205,
  4, 182, :_reduce_none,
  4, 182, :_reduce_none,
  2, 182, :_reduce_none,
  2, 182, :_reduce_209,
  3, 182, :_reduce_210,
  3, 182, :_reduce_211,
  3, 182, :_reduce_212,
  3, 182, :_reduce_213,
  3, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  2, 182, :_reduce_223,
  2, 182, :_reduce_224,
  3, 182, :_reduce_225,
  3, 182, :_reduce_226,
  0, 209, :_reduce_227,
  4, 182, :_reduce_228,
  0, 210, :_reduce_229,
  4, 182, :_reduce_230,
  3, 182, :_reduce_none,
  6, 182, :_reduce_232,
  1, 182, :_reduce_none,
  1, 178, :_reduce_none,
  1, 211, :_reduce_none,
  2, 211, :_reduce_none,
  4, 211, :_reduce_none,
  2, 211, :_reduce_none,
  3, 215, :_reduce_239,
  1, 216, :_reduce_240,
  1, 216, :_reduce_none,
  1, 174, :_reduce_242,
  1, 174, :_reduce_none,
  1, 185, :_reduce_244,
  2, 185, :_reduce_245,
  2, 185, :_reduce_246,
  4, 185, :_reduce_247,
  1, 185, :_reduce_248,
  1, 188, :_reduce_none,
  2, 218, :_reduce_250,
  2, 217, :_reduce_251,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 212, :_reduce_254,
  2, 212, :_reduce_255,
  3, 212, :_reduce_256,
  4, 212, :_reduce_257,
  3, 177, :_reduce_none,
  4, 177, :_reduce_none,
  2, 177, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  2, 208, :_reduce_267,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 208, :_reduce_none,
  3, 208, :_reduce_none,
  3, 208, :_reduce_273,
  3, 208, :_reduce_274,
  2, 208, :_reduce_275,
  3, 208, :_reduce_276,
  3, 208, :_reduce_277,
  1, 208, :_reduce_278,
  4, 208, :_reduce_279,
  3, 208, :_reduce_280,
  1, 208, :_reduce_281,
  5, 208, :_reduce_none,
  4, 208, :_reduce_none,
  3, 208, :_reduce_none,
  2, 208, :_reduce_none,
  1, 208, :_reduce_286,
  2, 208, :_reduce_287,
  2, 208, :_reduce_none,
  6, 208, :_reduce_289,
  6, 208, :_reduce_290,
  5, 208, :_reduce_none,
  5, 208, :_reduce_none,
  5, 208, :_reduce_293,
  4, 208, :_reduce_294,
  7, 208, :_reduce_none,
  5, 208, :_reduce_296,
  6, 208, :_reduce_297,
  4, 208, :_reduce_298,
  5, 208, :_reduce_299,
  7, 208, :_reduce_300,
  1, 208, :_reduce_301,
  1, 208, :_reduce_302,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 173, :_reduce_none,
  1, 227, :_reduce_none,
  1, 233, :_reduce_none,
  1, 236, :_reduce_none,
  1, 237, :_reduce_none,
  1, 239, :_reduce_none,
  1, 240, :_reduce_none,
  1, 242, :_reduce_none,
  1, 244, :_reduce_none,
  1, 247, :_reduce_none,
  1, 248, :_reduce_none,
  1, 228, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  2, 234, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  1, 235, :_reduce_322,
  5, 235, :_reduce_323,
  1, 163, :_reduce_324,
  2, 163, :_reduce_325,
  1, 243, :_reduce_none,
  1, 243, :_reduce_none,
  1, 252, :_reduce_none,
  3, 252, :_reduce_none,
  1, 255, :_reduce_none,
  3, 255, :_reduce_none,
  1, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  3, 254, :_reduce_none,
  5, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  1, 254, :_reduce_none,
  3, 254, :_reduce_none,
  6, 256, :_reduce_none,
  8, 256, :_reduce_none,
  4, 256, :_reduce_none,
  6, 256, :_reduce_none,
  4, 256, :_reduce_none,
  2, 256, :_reduce_none,
  6, 256, :_reduce_none,
  2, 256, :_reduce_none,
  4, 256, :_reduce_none,
  6, 256, :_reduce_none,
  2, 256, :_reduce_none,
  4, 256, :_reduce_none,
  2, 256, :_reduce_none,
  4, 256, :_reduce_none,
  1, 256, :_reduce_none,
  1, 190, :_reduce_356,
  1, 190, :_reduce_none,
  3, 262, :_reduce_none,
  1, 262, :_reduce_none,
  4, 262, :_reduce_360,
  1, 263, :_reduce_none,
  2, 263, :_reduce_none,
  1, 264, :_reduce_none,
  3, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  2, 232, :_reduce_none,
  4, 267, :_reduce_none,
  1, 267, :_reduce_none,
  3, 268, :_reduce_none,
  3, 268, :_reduce_none,
  4, 226, :_reduce_none,
  4, 226, :_reduce_373,
  2, 186, :_reduce_374,
  4, 186, :_reduce_none,
  4, 186, :_reduce_none,
  2, 231, :_reduce_377,
  4, 231, :_reduce_378,
  4, 231, :_reduce_379,
  3, 231, :_reduce_380,
  3, 231, :_reduce_none,
  3, 231, :_reduce_none,
  2, 231, :_reduce_383,
  1, 231, :_reduce_384,
  4, 231, :_reduce_385,
  4, 230, :_reduce_386,
  4, 230, :_reduce_387,
  5, 241, :_reduce_388,
  1, 271, :_reduce_389,
  1, 271, :_reduce_none,
  6, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 272, :_reduce_none,
  1, 272, :_reduce_none,
  1, 272, :_reduce_none,
  2, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  1, 220, :_reduce_none,
  1, 275, :_reduce_none,
  1, 275, :_reduce_none,
  2, 275, :_reduce_none,
  3, 276, :_reduce_407,
  3, 221, :_reduce_408,
  3, 222, :_reduce_none,
  3, 223, :_reduce_none,
  3, 223, :_reduce_none,
  0, 279, :_reduce_none,
  3, 279, :_reduce_none,
  1, 280, :_reduce_none,
  2, 280, :_reduce_none,
  3, 224, :_reduce_none,
  3, 224, :_reduce_none,
  0, 282, :_reduce_418,
  3, 282, :_reduce_none,
  0, 277, :_reduce_420,
  2, 277, :_reduce_421,
  0, 278, :_reduce_422,
  2, 278, :_reduce_423,
  1, 281, :_reduce_424,
  2, 281, :_reduce_425,
  3, 281, :_reduce_426,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  1, 283, :_reduce_none,
  2, 206, :_reduce_431,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  1, 284, :_reduce_none,
  3, 207, :_reduce_436,
  1, 274, :_reduce_437,
  1, 274, :_reduce_438,
  2, 274, :_reduce_none,
  2, 274, :_reduce_none,
  1, 199, :_reduce_441,
  1, 199, :_reduce_442,
  1, 199, :_reduce_443,
  1, 199, :_reduce_444,
  1, 199, :_reduce_445,
  1, 199, :_reduce_446,
  1, 199, :_reduce_447,
  1, 199, :_reduce_448,
  1, 199, :_reduce_449,
  1, 199, :_reduce_450,
  1, 199, :_reduce_451,
  1, 199, :_reduce_452,
  1, 199, :_reduce_453,
  1, 225, :_reduce_none,
  1, 172, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 245, :_reduce_458,
  3, 245, :_reduce_459,
  2, 245, :_reduce_460,
  3, 249, :_reduce_461,
  2, 249, :_reduce_462,
  6, 269, :_reduce_463,
  8, 269, :_reduce_464,
  4, 269, :_reduce_465,
  6, 269, :_reduce_466,
  4, 269, :_reduce_467,
  6, 269, :_reduce_468,
  2, 269, :_reduce_469,
  4, 269, :_reduce_470,
  6, 269, :_reduce_471,
  2, 269, :_reduce_472,
  4, 269, :_reduce_473,
  2, 269, :_reduce_474,
  4, 269, :_reduce_475,
  1, 269, :_reduce_476,
  0, 269, :_reduce_477,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 266, :_reduce_none,
  1, 253, :_reduce_none,
  1, 253, :_reduce_483,
  3, 253, :_reduce_484,
  2, 253, :_reduce_485,
  1, 286, :_reduce_486,
  3, 286, :_reduce_none,
  1, 257, :_reduce_488,
  3, 257, :_reduce_489,
  3, 287, :_reduce_none,
  3, 288, :_reduce_none,
  1, 258, :_reduce_none,
  3, 258, :_reduce_none,
  1, 285, :_reduce_none,
  3, 285, :_reduce_none,
  1, 289, :_reduce_none,
  1, 289, :_reduce_none,
  2, 259, :_reduce_none,
  1, 259, :_reduce_none,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  2, 261, :_reduce_502,
  3, 261, :_reduce_503,
  2, 260, :_reduce_504,
  1, 260, :_reduce_none,
  1, 250, :_reduce_none,
  3, 250, :_reduce_none,
  1, 229, :_reduce_508,
  2, 229, :_reduce_509,
  1, 214, :_reduce_510,
  3, 214, :_reduce_511,
  3, 291, :_reduce_512,
  2, 291, :_reduce_513,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 187, :_reduce_517,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 270, :_reduce_521,
  1, 270, :_reduce_none,
  1, 270, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  0, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 194, :_reduce_none,
  2, 175, :_reduce_none,
  0, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  0, 156, :_reduce_none ]

racc_reduce_n = 540

racc_shift_n = 953

racc_token_table = {
  false => 0,
  :error => 1,
  "!" => 2,
  :tTILDE => 3,
  :tUPLUS => 4,
  :tPOW => 5,
  :tUMINUS_NUM => 6,
  :tUMINUS => 7,
  :tSTAR2 => 8,
  :tDIVIDE => 9,
  :tPERCENT => 10,
  :tPLUS => 11,
  :tMINUS => 12,
  :tLSHFT => 13,
  :tRSHFT => 14,
  :tAMPER2 => 15,
  :tPIPE => 16,
  :tCARET => 17,
  ">" => 18,
  :tGEQ => 19,
  "<" => 20,
  :tLEQ => 21,
  :tCMP => 22,
  :tEQ => 23,
  :tEQQ => 24,
  :tNEQ => 25,
  :tMATCH => 26,
  :tNMATCH => 27,
  :tANDOP => 28,
  :tOROP => 29,
  :tDOT2 => 30,
  :tDOT3 => 31,
  "?" => 32,
  ":" => 33,
  :kRESCUE_MOD => 34,
  "=" => 35,
  :tOP_ASGN => 36,
  :kNOT => 37,
  :kOR => 38,
  :kAND => 39,
  :kIF_MOD => 40,
  :kUNLESS_MOD => 41,
  :kWHILE_MOD => 42,
  :kUNTIL_MOD => 43,
  :tLBRACE_ARG => 44,
  :tLOWEST => 45,
  :kCLASS => 46,
  :kMODULE => 47,
  :kDEF => 48,
  :kUNDEF => 49,
  :kBEGIN => 50,
  :kRESCUE => 51,
  :kENSURE => 52,
  :kEND => 53,
  :kIF => 54,
  :kUNLESS => 55,
  :kTHEN => 56,
  :kELSIF => 57,
  :kELSE => 58,
  :kCASE => 59,
  :kWHEN => 60,
  :kWHILE => 61,
  :kUNTIL => 62,
  :kFOR => 63,
  :kBREAK => 64,
  :kNEXT => 65,
  :kREDO => 66,
  :kRETRY => 67,
  :kIN => 68,
  :kDO => 69,
  :kDO_COND => 70,
  :kDO_BLOCK => 71,
  :kDO_LAMBDA => 72,
  :kRETURN => 73,
  :kYIELD => 74,
  :kSUPER => 75,
  :kSELF => 76,
  :kNIL => 77,
  :kTRUE => 78,
  :kFALSE => 79,
  :kALIAS => 80,
  :kDEFINED => 81,
  :klBEGIN => 82,
  :klEND => 83,
  :k__LINE__ => 84,
  :k__FILE__ => 85,
  :k__ENCODING__ => 86,
  :kDEFined => 87,
  :kBLOCK_GIVEN => 88,
  :tIDENTIFIER => 89,
  :tFID => 90,
  :tGVAR => 91,
  :tIVAR => 92,
  :tCONSTANT => 93,
  :tCVAR => 94,
  :tLABEL => 95,
  :tINTEGER => 96,
  :tFLOAT => 97,
  :tSTRING_CONTENT => 98,
  :tCHAR => 99,
  :tNTH_REF => 100,
  :tBACK_REF => 101,
  :tREGEXP_END => 102,
  :tAREF => 103,
  :tASET => 104,
  :tCOLON2 => 105,
  :tCOLON3 => 106,
  :tASSOC => 107,
  :tLPAREN => 108,
  :tLPAREN_ARG => 109,
  :tRPAREN => 110,
  :tLBRACK => 111,
  :tLBRACE => 112,
  :tSTAR => 113,
  :tAMPER => 114,
  :tLAMBDA => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSTRING_DBEG => 122,
  :tSTRING_DVAR => 123,
  :tSTRING_END => 124,
  :tLAMBEG => 125,
  :tSTRING => 126,
  :tXSTRING_END => 127,
  "{" => 128,
  "}" => 129,
  "[" => 130,
  "." => 131,
  "," => 132,
  "|" => 133,
  "^" => 134,
  "&" => 135,
  "+" => 136,
  "-" => 137,
  "*" => 138,
  "/" => 139,
  "%" => 140,
  "~" => 141,
  "`" => 142,
  "(" => 143,
  ")" => 144,
  "]" => 145,
  ";" => 146,
  " " => 147,
  "\\n" => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"!\"",
  "tTILDE",
  "tUPLUS",
  "tPOW",
  "tUMINUS_NUM",
  "tUMINUS",
  "tSTAR2",
  "tDIVIDE",
  "tPERCENT",
  "tPLUS",
  "tMINUS",
  "tLSHFT",
  "tRSHFT",
  "tAMPER2",
  "tPIPE",
  "tCARET",
  "\">\"",
  "tGEQ",
  "\"<\"",
  "tLEQ",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tMATCH",
  "tNMATCH",
  "tANDOP",
  "tOROP",
  "tDOT2",
  "tDOT3",
  "\"?\"",
  "\":\"",
  "kRESCUE_MOD",
  "\"=\"",
  "tOP_ASGN",
  "kNOT",
  "kOR",
  "kAND",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "tLBRACE_ARG",
  "tLOWEST",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "kDEFined",
  "kBLOCK_GIVEN",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tLABEL",
  "tINTEGER",
  "tFLOAT",
  "tSTRING_CONTENT",
  "tCHAR",
  "tNTH_REF",
  "tBACK_REF",
  "tREGEXP_END",
  "tAREF",
  "tASET",
  "tCOLON2",
  "tCOLON3",
  "tASSOC",
  "tLPAREN",
  "tLPAREN_ARG",
  "tRPAREN",
  "tLBRACK",
  "tLBRACE",
  "tSTAR",
  "tAMPER",
  "tLAMBDA",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tLAMBEG",
  "tSTRING",
  "tXSTRING_END",
  "\"{\"",
  "\"}\"",
  "\"[\"",
  "\".\"",
  "\",\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "\"`\"",
  "\"(\"",
  "\")\"",
  "\"]\"",
  "\";\"",
  "\" \"",
  "\"\\\\n\"",
  "$start",
  "target",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "primary",
  "@3",
  "@4",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "do_block",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "k_while",
  "do",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "f_args",
  "operation3",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "sym",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 101)
  def _reduce_1(val, _values, result)
                        # puts 'well, we got here..'
                    # puts val[0]
                    @parser_result = val[0]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 109)
  def _reduce_2(val, _values, result)
                        self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 113)
  def _reduce_3(val, _values, result)
                        # puts 'program'
                    # puts val[1]
                    result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 120)
  def _reduce_4(val, _values, result)
                        # puts 'top_compstmt'
                    # puts val[0]
                    # puts val[1]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 128)
  def _reduce_5(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 132)
  def _reduce_6(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 136)
  def _reduce_7(val, _values, result)
                        result = val[0] + [val[2]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 140)
  def _reduce_8(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 145)
  def _reduce_9(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 151)
  def _reduce_11(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 156)
  def _reduce_12(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 161)
  def _reduce_13(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 165)
  def _reduce_14(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 169)
  def _reduce_15(val, _values, result)
                        result = val[0] + [val[2]]
		              
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 175)
  def _reduce_17(val, _values, result)
                        self.lex_state = :EXPR_FNAME
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 180)
  def _reduce_18(val, _values, result)
                      
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 187)
  def _reduce_23(val, _values, result)
                		    result = node :if_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 191)
  def _reduce_24(val, _values, result)
                		    result = node :unless_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 199)
  def _reduce_29(val, _values, result)
                		    result = node :assign, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 204)
  def _reduce_31(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 221)
  def _reduce_44(val, _values, result)
                  	    result = node :not, :expr => val[2]
              	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 232)
  def _reduce_50(val, _values, result)
                  	    result = node :return, :call_args => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 236)
  def _reduce_51(val, _values, result)
                	      result = node :break, :call_args => val[1]
            	    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 240)
  def _reduce_52(val, _values, result)
                	      result = node :next, :call_args => val[1]
            	    
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 251)
  def _reduce_57(val, _values, result)
                        # command call - no brackets/recv
          		      result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 257)
  def _reduce_59(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 264)
  def _reduce_63(val, _values, result)
          		          result = node :super, :call_args => val[1]
      		        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 268)
  def _reduce_64(val, _values, result)
            	          result = node :yield, :call_args => val[1]
        	        
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 309)
  def _reduce_94(val, _values, result)
    		                result = node :call, :recv => val[0], :meth => '[]', :args => val[2]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 313)
  def _reduce_95(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2]
                  
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 320)
  def _reduce_99(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 326)
  def _reduce_101(val, _values, result)
                        puts 'ERROR: cant use identifier for class/mod name'
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 330)
  def _reduce_102(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 336)
  def _reduce_103(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 339)
  def _reduce_104(val, _values, result)
      	                result = node :path, :cname => val[0]
  	              
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 348)
  def _reduce_109(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 353)
  def _reduce_110(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 389)
  def _reduce_187(val, _values, result)
                        result = node :assign, :lhs => val[0], :rhs => val[2]
                  
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 394)
  def _reduce_189(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 190 omitted

# reduce 191 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 400)
  def _reduce_192(val, _values, result)
                		    result = node :op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
                    # result = node :dot_identifier_op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
            		  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 410)
  def _reduce_198(val, _values, result)
                		    result = node :dot2, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 414)
  def _reduce_199(val, _values, result)
                		    result = node :dot3, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 418)
  def _reduce_200(val, _values, result)
                		    result = node :opt_plus, :recv => val[0], :meth => '+', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 422)
  def _reduce_201(val, _values, result)
                		    result = node :opt_minus, :recv => val[0], :meth => '-', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 426)
  def _reduce_202(val, _values, result)
                		    result = node :opt_mult, :recv => val[0], :meth => '*', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 430)
  def _reduce_203(val, _values, result)
                		    result = node :opt_div, :recv => val[0], :meth => '/', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 434)
  def _reduce_204(val, _values, result)
                		    result = node :opt_mod, :recv => val[0], :meth => '%', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 438)
  def _reduce_205(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '**', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 445)
  def _reduce_209(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '-@', :call_args => { :args => []}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 449)
  def _reduce_210(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '|', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 453)
  def _reduce_211(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '^', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 457)
  def _reduce_212(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '&', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 461)
  def _reduce_213(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 465)
  def _reduce_214(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 469)
  def _reduce_215(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 473)
  def _reduce_216(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 477)
  def _reduce_217(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 481)
  def _reduce_218(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '==', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 485)
  def _reduce_219(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '===', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 489)
  def _reduce_220(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 493)
  def _reduce_221(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '=~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 497)
  def _reduce_222(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 501)
  def _reduce_223(val, _values, result)
                  	    result = node :not, :expr => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 505)
  def _reduce_224(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 509)
  def _reduce_225(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 513)
  def _reduce_226(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 517)
  def _reduce_227(val, _values, result)
                          # weird? unless break here, it throws an error? hmm...
                      # we must use val[3] then as this counts as one match....
              		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 523)
  def _reduce_228(val, _values, result)
                		    result = node :andop, :lhs => val[0], :rhs => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 527)
  def _reduce_229(val, _values, result)
                        # weird? unless break here, it throws an error? hmm...
                    # we must use val[3] then as this counts as one match....
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 533)
  def _reduce_230(val, _values, result)
                		    result = node :orop, :lhs => val[0], :rhs => val[3]
            		  
    result
  end
.,.,

# reduce 231 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 538)
  def _reduce_232(val, _values, result)
                		    result = node :tertiary, :expr => val[0], :true => val[2], :false => val[5]
            		  
    result
  end
.,.,

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 551)
  def _reduce_239(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 556)
  def _reduce_240(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 562)
  def _reduce_242(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 243 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 568)
  def _reduce_244(val, _values, result)
                		    result = node :call_args, :args => [val[0]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 572)
  def _reduce_245(val, _values, result)
                		    result = node :call_args, :args => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 576)
  def _reduce_246(val, _values, result)
                		    result = node :call_args, :assocs => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 580)
  def _reduce_247(val, _values, result)
                		    result = node :call_args, :args => val[0], :assocs => val[2], :block_arg => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 584)
  def _reduce_248(val, _values, result)
                		    result = node :call_args, :block_arg => val[0]
            		  
    result
  end
.,.,

# reduce 249 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 591)
  def _reduce_250(val, _values, result)
                        # puts "here for #{val[1]}"
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 597)
  def _reduce_251(val, _values, result)
                        resul = val[1]
                  
    result
  end
.,.,

# reduce 252 omitted

# reduce 253 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 604)
  def _reduce_254(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 608)
  def _reduce_255(val, _values, result)
    		                result = [val[1]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 612)
  def _reduce_256(val, _values, result)
    		                result = val[0] + [val[2]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 616)
  def _reduce_257(val, _values, result)
    		                result = val[0] + [val[3]]
		              
    result
  end
.,.,

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 631)
  def _reduce_267(val, _values, result)
                        # HACK: this rule shouldnt even exist. But for now it must for "identifier do .. end"
  	                result = node :call, :recv => nil, :meth => val[0][:name], :brace_block => val[1]
  	              
    result
  end
.,.,

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 641)
  def _reduce_273(val, _values, result)
                		    result = node :lparen, :stmt => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 645)
  def _reduce_274(val, _values, result)
                		    result = node :colon2, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 649)
  def _reduce_275(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 653)
  def _reduce_276(val, _values, result)
                		    result = node :array, :args => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 657)
  def _reduce_277(val, _values, result)
                		    result = node :assoc_list, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 661)
  def _reduce_278(val, _values, result)
                		    result = node :return
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 665)
  def _reduce_279(val, _values, result)
            	          result = node :yield, :call_args => val[2]
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 669)
  def _reduce_280(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 673)
  def _reduce_281(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 681)
  def _reduce_286(val, _values, result)
                		    # puts 2
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 685)
  def _reduce_287(val, _values, result)
                		    val[0][:brace_block] = val[1]
            		    result = val[0]
            		  
    result
  end
.,.,

# reduce 288 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 691)
  def _reduce_289(val, _values, result)
                		    result = self.node :if, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 695)
  def _reduce_290(val, _values, result)
                		    result = self.node :unless, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

# reduce 291 omitted

# reduce 292 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 701)
  def _reduce_293(val, _values, result)
                		    result = node :case, :expr => val[1], :body => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 705)
  def _reduce_294(val, _values, result)
                		    result = node :case, :expr => nil, :body => val[2]
            		  
    result
  end
.,.,

# reduce 295 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 710)
  def _reduce_296(val, _values, result)
                		    result = self.node_class(:cpath => val[1], :superclass => val[2], :bodystmt => val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 714)
  def _reduce_297(val, _values, result)
                		    result = node :class_shift, :expr => val[2], :bodystmt => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 718)
  def _reduce_298(val, _values, result)
                		    result = self.node_module(:cpath => val[1], :body => val[2])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 722)
  def _reduce_299(val, _values, result)
                		    result = self.node :def, :fname => val[1], :arglist => val[2], :bodystmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 726)
  def _reduce_300(val, _values, result)
                		    result = self.node :def, :singleton => val[1], :fname => val[3], :arglist => val[4], :bodystmt => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 730)
  def _reduce_301(val, _values, result)
                		    result = node :break, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 734)
  def _reduce_302(val, _values, result)
                		    result = node :next, :call_args => nil
            		  
    result
  end
.,.,

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

# reduce 312 omitted

# reduce 313 omitted

# reduce 314 omitted

# reduce 315 omitted

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 772)
  def _reduce_322(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 776)
  def _reduce_323(val, _values, result)
                  	    result = [self.node(:elsif, :expr => val[1], :stmt => val[3])] + val[4]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 781)
  def _reduce_324(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 785)
  def _reduce_325(val, _values, result)
                  	    result = [self.node(:else, :stmt => val[1])]
              	  
    result
  end
.,.,

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 825)
  def _reduce_356(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 833)
  def _reduce_360(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 856)
  def _reduce_373(val, _values, result)
                        result = node :brace_block, :params => val[1], :stmt => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 861)
  def _reduce_374(val, _values, result)
                        val[0][:brace_block] = val[1]
                    result = val[0]
                  
    result
  end
.,.,

# reduce 375 omitted

# reduce 376 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 869)
  def _reduce_377(val, _values, result)
                        result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 873)
  def _reduce_378(val, _values, result)
                        result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 877)
  def _reduce_379(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2], :args => val[3]
              	    puts "tCOLON2call"
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 882)
  def _reduce_380(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2]
              	    puts "tCOLON2call.noargs."
              	  
    result
  end
.,.,

# reduce 381 omitted

# reduce 382 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 889)
  def _reduce_383(val, _values, result)
                		    result = node :super, :call_args => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 893)
  def _reduce_384(val, _values, result)
                		    result = node :super, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 897)
  def _reduce_385(val, _values, result)
                        result = node :call, :recv => val[0], :meth => '[]', :call_args => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 903)
  def _reduce_386(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 907)
  def _reduce_387(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 912)
  def _reduce_388(val, _values, result)
                        result = [node(:when, :args => val[1], :stmt => val[3])] + val[4]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 917)
  def _reduce_389(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 390 omitted

# reduce 391 omitted

# reduce 392 omitted

# reduce 393 omitted

# reduce 394 omitted

# reduce 395 omitted

# reduce 396 omitted

# reduce 397 omitted

# reduce 398 omitted

# reduce 399 omitted

# reduce 400 omitted

# reduce 401 omitted

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

# reduce 405 omitted

# reduce 406 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 946)
  def _reduce_407(val, _values, result)
                        result = node :string, :value => val[1], :beg => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 951)
  def _reduce_408(val, _values, result)
                        result = node :xstring, :value => val[1]
                  
    result
  end
.,.,

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

# reduce 417 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 970)
  def _reduce_418(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

# reduce 419 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 977)
  def _reduce_420(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 982)
  def _reduce_421(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 987)
  def _reduce_422(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 992)
  def _reduce_423(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 997)
  def _reduce_424(val, _values, result)
                        result = node :string_content, :value => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1001)
  def _reduce_425(val, _values, result)
                        result = node :string_dvar, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1005)
  def _reduce_426(val, _values, result)
                        result = node :string_dbeg, :value => val[1]
                  
    result
  end
.,.,

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1015)
  def _reduce_431(val, _values, result)
                        result = node :symbol, :name => val[1]
                  
    result
  end
.,.,

# reduce 432 omitted

# reduce 433 omitted

# reduce 434 omitted

# reduce 435 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1025)
  def _reduce_436(val, _values, result)
                        result = node :dsym, :contents => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1030)
  def _reduce_437(val, _values, result)
                        result = node :numeric, :value => val[0], :float => false
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1034)
  def _reduce_438(val, _values, result)
                        result = node :numeric, :value => val[0], :float => true
                  
    result
  end
.,.,

# reduce 439 omitted

# reduce 440 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1042)
  def _reduce_441(val, _values, result)
                        result = node :identifier, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1046)
  def _reduce_442(val, _values, result)
                        result = node :ivar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1050)
  def _reduce_443(val, _values, result)
                        result = node :gvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1054)
  def _reduce_444(val, _values, result)
                        result = node :constant, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1058)
  def _reduce_445(val, _values, result)
                        result = node :cvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1062)
  def _reduce_446(val, _values, result)
                        result = node :nil, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1066)
  def _reduce_447(val, _values, result)
                        result = node :self, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1070)
  def _reduce_448(val, _values, result)
                        result = node :true, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1074)
  def _reduce_449(val, _values, result)
                        result = node :false, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1078)
  def _reduce_450(val, _values, result)
                        result = node :__FILE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1082)
  def _reduce_451(val, _values, result)
                        result = node :__LINE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1086)
  def _reduce_452(val, _values, result)
                        result = node :__ENCODING__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1090)
  def _reduce_453(val, _values, result)
                        # added for block_given? support.. :D
                    result = node :block_given
                  
    result
  end
.,.,

# reduce 454 omitted

# reduce 455 omitted

# reduce 456 omitted

# reduce 457 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1103)
  def _reduce_458(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1107)
  def _reduce_459(val, _values, result)
                		    result = node :superclass, :expr => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1109)
  def _reduce_460(val, _values, result)
     puts 'OMFG' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1113)
  def _reduce_461(val, _values, result)
                        result = val[1]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1118)
  def _reduce_462(val, _values, result)
                        result = val[0]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1124)
  def _reduce_463(val, _values, result)
                        result = node_args(val[0], val[2], val[4], nil, val[5])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1128)
  def _reduce_464(val, _values, result)
                 		    result = node_args(val[0], val[2], val[4], val[6], val[7])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1132)
  def _reduce_465(val, _values, result)
                  	    result = node_args(val[0], val[2], nil, nil, val[3])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1136)
  def _reduce_466(val, _values, result)
                		    result = node_args(val[0], val[2], nil, val[4], val[5])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1140)
  def _reduce_467(val, _values, result)
                		    result = node_args(val[0], nil, val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1144)
  def _reduce_468(val, _values, result)
                		    result = node_args(val[0], nil, val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1148)
  def _reduce_469(val, _values, result)
                 		    result = node_args(val[0], nil, nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1152)
  def _reduce_470(val, _values, result)
                		    result = node_args(nil, val[0], val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1156)
  def _reduce_471(val, _values, result)
                		    result = node_args(nil, val[0], val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1160)
  def _reduce_472(val, _values, result)
                 		    result = node_args(nil, val[0], nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1164)
  def _reduce_473(val, _values, result)
                 		    result = node_args(nil, val[0], nil, val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1168)
  def _reduce_474(val, _values, result)
                 		    result = node_args(nil, nil, val[0], nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1172)
  def _reduce_475(val, _values, result)
                 		    result = node_args(nil, nil, val[0], val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1176)
  def _reduce_476(val, _values, result)
                 		    result = node_args(nil, nil, nil, nil, val[0])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1180)
  def _reduce_477(val, _values, result)
                  	    result = node_args(nil, nil, nil, nil, nil)
              	  
    result
  end
.,.,

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1191)
  def _reduce_483(val, _values, result)
                        # result = val[0]
              	    result = node :norm_arg, :value => val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1197)
  def _reduce_484(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1200)
  def _reduce_485(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1205)
  def _reduce_486(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 487 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1211)
  def _reduce_488(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1215)
  def _reduce_489(val, _values, result)
                        # val[0] + val[2]
                    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1240)
  def _reduce_502(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1244)
  def _reduce_503(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1249)
  def _reduce_504(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1258)
  def _reduce_508(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1262)
  def _reduce_509(val, _values, result)
                  	    result = val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1267)
  def _reduce_510(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1271)
  def _reduce_511(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1276)
  def _reduce_512(val, _values, result)
                        result = node :assoc, :key => val[0], :value => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1280)
  def _reduce_513(val, _values, result)
                        result = node :label_assoc, :key => val[0], :value => val[1]
                  
    result
  end
.,.,

# reduce 514 omitted

# reduce 515 omitted

# reduce 516 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1290)
  def _reduce_517(val, _values, result)
                      
    result
  end
.,.,

# reduce 518 omitted

# reduce 519 omitted

# reduce 520 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1297)
  def _reduce_521(val, _values, result)
                        puts 4
                  
    result
  end
.,.,

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyParser
  end   # module Vienna


