#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
  #
# $Id$
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6'
    Racc_Runtime_Revision = '$Id$'

    Racc_Runtime_Core_Version_R = '1.4.6'
    Racc_Runtime_Core_Revision_R = '$Id$'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end


# require 'ctokenizer'
require 'strscan'

module Vienna
  class RubyParser < Racc::Parser

module_eval(<<'...end ruby_parser.rb.y/module_eval...', 'ruby_parser.rb.y', 1396)


...end ruby_parser.rb.y/module_eval...
##### State transition tables begin ###

clist = [
'-10,-520,-66,442,442,538,-520,4,538,-95,-100,-93,-98,-96,-520,-520,453',
'312,313,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520',
'-520,-520,-520,-95,-520,-96,693,442,442,-520,-520,-520,-520,-520,-520',
'-447,-87,312,313,442,596,814,-520,-520,-520,312,313,141,-520,-520,611',
'-520,142,-99,548,142,144,452,-448,599,-520,-447,-92,-85,-90,-88,613',
'312,313,263,-87,265,263,333,265,-517,-516,312,313,449,-100,292,819,780',
'-448,333,-87,-95,-80,-95,-449,-93,-454,324,327,-520,439,439,338,340',
'343,346,321,322,325,328,330,332,335,337,342,344,345,263,145,265,-449',
'811,-520,-520,-520,-520,-88,-520,-520,472,-520,-520,-520,-520,-520,439',
'439,-87,-520,-10,-520,-10,-520,-273,-97,702,498,439,-273,-87,142,498',
'538,-87,-91,450,-273,-273,142,450,806,-273,-273,-273,-273,-273,-273',
'-273,-273,-273,-273,-273,-273,-273,-273,-273,-273,-273,-98,694,142,-92',
'-273,-273,-273,-273,-273,-273,-273,263,142,265,-85,-94,860,-273,-273',
'-273,-94,820,-273,-273,-273,-97,-273,323,326,329,331,334,336,339,341',
'-273,-273,-273,-273,323,326,329,331,334,336,339,341,-95,701,263,614',
'265,507,508,142,614,-99,263,-89,265,333,-94,263,-89,265,803,613,498',
'324,327,-273,613,-273,338,340,343,346,321,322,325,328,330,332,335,337',
'342,344,345,312,313,-273,-97,-89,498,-273,-273,-273,-273,-273,-273,-273',
'-273,-273,-273,-273,-273,614,-521,498,-273,-273,-273,-521,-273,-97,-96',
'-97,-86,-94,-91,-521,-521,613,144,-86,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,834,803,-87,478',
'-521,-521,-521,-521,-521,-521,-521,518,-89,-89,263,129,265,-521,-521',
'-521,516,517,-521,-521,-521,-89,-521,474,475,-89,-446,-384,500,827,759',
'-521,-521,-521,-521,145,263,333,265,296,297,-451,323,326,329,331,334',
'336,339,341,129,263,-446,265,129,-516,333,355,-96,356,-96,-94,-384,-94',
'324,327,-521,-451,-521,338,340,343,346,321,322,325,328,330,332,335,337',
'342,344,345,-440,-384,-521,-384,-384,-521,-521,-521,-521,-521,-521,-521',
'801,-521,-521,-521,-521,-521,799,-520,305,-521,-521,-521,-520,-521,-440',
'306,307,308,304,575,-520,-520,263,142,265,-520,-520,-520,-520,-520,-520',
'-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-520,-96,774,576,577',
'-520,-520,-520,-520,-520,-520,-520,263,263,265,265,478,-443,-520,-520',
'-520,460,593,-520,-520,-520,595,-520,323,326,329,331,334,336,339,341',
'-520,-520,-520,-520,474,475,333,-443,827,759,159,323,326,329,331,334',
'336,339,341,759,798,543,623,797,-445,333,263,-273,265,717,263,155,265',
'324,327,-520,142,-520,338,340,343,346,-539,-539,-539,-539,-539,-539',
'625,-520,-445,771,-273,-273,899,-520,-453,530,-520,-520,-520,-520,-520',
'-520,-520,-517,-520,-520,-520,-520,-520,263,-269,265,-520,-520,-520',
'-269,-520,591,592,-453,-453,529,-520,-269,-269,-93,-454,794,-269,-269',
'-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269',
'-269,-520,793,-520,-520,-269,-269,-269,-269,-269,-269,-269,-97,777,759',
'378,-516,-450,-269,-269,-269,-95,776,-269,-269,-269,606,-269,323,326',
'329,331,334,336,339,341,-269,-269,-269,-269,478,379,333,-450,-99,548',
'606,323,326,329,331,334,336,339,341,785,792,157,160,162,164,333,-100',
'422,474,475,495,606,478,324,327,-269,333,-269,338,340,343,346,-539,-539',
'-539,-539,-539,-539,790,-514,312,313,333,788,923,-269,474,475,522,-269',
'-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,838,-522,782',
'-269,-269,-269,-522,-269,924,925,657,142,-254,-443,-522,-522,142,-520',
'423,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522',
'-522,-522,-522,-522,-514,841,-443,-443,-522,-522,-522,-522,-522,-522',
'-522,687,688,842,689,-514,-520,-522,-522,-522,32,39,-522,-522,-522,420',
'-522,323,326,329,331,334,336,339,341,-522,-522,-522,-522,-520,-268,-520',
'-520,478,771,142,323,326,329,331,334,336,339,341,-516,606,142,323,326',
'329,331,334,336,339,341,-268,-268,474,475,476,-522,606,-522,323,326',
'329,331,334,336,339,341,465,759,157,160,162,164,467,142,-274,-522,256',
'849,-522,-522,-522,-522,-522,-522,-522,-253,-522,-522,-522,-522,-522',
'-80,-273,852,-522,-522,-522,-273,-522,-274,-274,257,258,543,606,-273',
'-273,722,142,876,-273,-273,-273,-273,-273,-273,-273,-273,-273,-273,-273',
'-273,-273,-273,-273,606,-273,-98,694,333,771,-273,-273,-273,-273,-273',
'-273,324,327,721,713,142,-440,546,-273,-273,-273,-440,704,-255,-273',
'-273,142,-273,-273,-440,-440,142,864,460,-440,-440,-440,-440,-440,-440',
'-440,-440,-440,-440,-440,-440,-440,-440,-440,-440,-440,-440,-440,-273',
'-273,-440,-440,-440,-440,-440,-440,-440,867,450,679,-274,-517,675,-440',
'-440,-440,-273,667,-440,-440,-440,465,-440,157,160,162,164,467,-304',
'657,-440,355,-440,356,-440,-274,-274,-273,651,-253,-273,-273,-273,-90',
'-273,-273,-273,-273,-273,-273,-273,-273,648,-304,-304,-273,878,-273',
'142,-273,880,632,-273,-273,680,333,-440,21,-440,30,622,44,50,324,327',
'-517,323,326,329,331,334,336,339,341,423,-453,-440,610,608,606,-440',
'-440,-440,-440,-440,-440,-440,-440,-440,-440,-440,-440,606,8,585,-440',
'-440,-440,771,-440,-453,-453,61,67,71,606,134,142,-65,582,99,105,504',
'579,578,25,606,34,42,48,56,65,68,72,494,543,528,526,525,100,108,5,9',
'16,23,27,524,505,506,54,60,66,73,77,86,88,90,93,97,104,-256,10,17,511',
'29,32,39,900,901,903,355,130,356,133,87,142,96,103,-274,803,13,18,24',
'28,33,40,46,21,907,30,803,44,50,323,326,329,331,334,336,339,341,416',
'803,-274,-274,-440,57,333,803,912,305,803,-268,142,509,324,327,306,307',
'308,304,916,406,8,878,129,417,418,-513,590,-440,-440,61,67,71,472,134',
'-268,-268,462,99,105,501,-513,458,25,606,34,42,48,56,65,68,72,591,592',
'455,454,448,100,108,5,9,16,23,27,428,417,502,54,60,66,73,77,86,88,90',
'93,97,104,305,10,17,926,29,32,39,306,307,308,304,130,606,133,87,478',
'96,103,427,503,13,18,24,28,33,40,46,119,305,30,423,44,50,420,472,306',
'307,308,304,474,475,413,878,412,141,785,57,157,160,162,164,263,608,265',
'387,323,326,329,331,334,336,339,341,113,465,320,157,160,162,164,467',
'142,61,67,71,303,134,-516,-517,803,99,105,944,469,803,25,803,34,42,48',
'126,128,68,72,803,878,24,299,295,136,108,5,9,16,23,27,142,294,147,54',
'60,66,73,77,86,88,90,93,97,104,112,10,17,140,29,32,39,111,803,,,130',
',133,87,,96,103,139,114,13,18,24,28,33,40,46,21,333,30,,44,50,,,,324',
'327,,,118,,,,,465,57,157,160,162,164,467,465,142,157,160,162,164,166',
',,,,8,469,,,,,808,,169,61,67,71,80,84,159,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,155,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,323,326,329,331,334,336,339,341,,,57,,,,,494',
'465,,157,160,162,164,166,,,,,8,465,,157,160,162,164,467,169,61,67,71',
'80,134,159,,,99,105,,469,,25,,34,42,48,56,65,68,72,,,,,155,100,108,5',
'9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,323,326,329,331,334',
'336,339,341,,191,,199,204,,212,,,,,57,237,241,,,494,254,178,182,187',
'196,201,206,209,213,217,653,,157,160,162,164,166,465,,157,160,162,164',
'467,333,,,,,169,,,324,327,156,159,469,338,340,343,346,321,322,325,328',
'330,332,335,337,342,344,345,,,,,155,,465,163,157,160,162,164,467,,,657',
',,,938,481,,,939,,469,,,,,466,,,218,221,,,,,333,,,,255,,,,324,327,,',
',338,340,343,346,-539,-539,-539,-539,-539,-539,,181,185,190,194,198',
'203,208,211,215,219,129,191,,199,204,,212,,,,,,237,241,,,,254,178,182',
'187,196,201,206,209,213,217,323,326,329,331,334,336,339,341,,,179,183',
'188,,,,,,,222,226,229,232,234,239,244,247,248,252,180,184,189,193,197',
'202,207,210,214,223,227,230,233,236,,,,249,253,177,394,395,396,397,205',
',,398,399,401,228,77,403,242,90,93,405,104,323,326,329,331,334,336,339',
'341,218,221,191,,199,204,,212,,,255,,,237,241,,,,254,178,182,187,196',
'201,206,209,213,217,,,181,185,190,194,198,203,208,211,215,219,400,,151',
',157,160,162,164,166,323,326,329,331,334,336,339,341,191,,199,204,169',
'212,,,,156,159,237,241,,,,254,178,182,187,196,201,206,209,213,217,,',
',,,155,742,481,163,,744,,465,627,157,160,162,164,467,,218,221,,151,',
'157,160,162,164,166,255,469,,,,,466,,,,,,169,,,,,156,159,,181,185,190',
'194,198,203,208,211,215,219,129,639,481,,,640,,,,155,,,163,,,218,221',
'627,,,,,119,,30,255,44,50,,,,,,,,,,465,,157,160,162,164,467,,181,185',
'190,194,198,203,208,211,215,219,129,469,,113,465,,157,160,162,164,467',
',61,67,71,,134,,,,99,105,,469,,25,,34,42,48,126,128,68,72,,,,,,136,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,,,,,,,191,,199',
'204,,212,,118,,,,237,241,57,,406,254,178,182,187,196,201,206,209,213',
'217,,,,,,,,,,,,,,,151,,157,160,162,164,166,,,,,,,,,191,,199,204,169',
'212,,,,156,159,237,241,,,,254,178,182,187,196,201,206,209,213,217,,',
',,,155,734,489,163,,735,,,149,,,,,,,218,221,653,,157,160,162,164,166',
',255,,,,,,,,,,,169,,,,,156,159,,,181,185,190,194,198,203,208,211,215',
'219,129,731,481,,,732,,,155,,,163,,,,218,221,191,,199,204,,212,,,255',
',,237,241,,,,254,178,182,187,196,201,206,209,213,217,,,181,185,190,194',
'198,203,208,211,215,219,129,,151,,157,160,162,164,166,,,,,,,,,191,,199',
'204,169,212,,,,156,159,237,241,,,,254,178,182,187,196,201,206,209,213',
'217,,,,,,155,602,489,163,,603,,,,,,,,,,218,221,151,,157,160,162,164',
'166,,255,,,,,,,,,,,169,,,,,156,159,,,181,185,190,194,198,203,208,211',
'215,219,129,642,489,,,643,,,155,,,163,,,,218,221,,,,,333,-514,,-514',
'255,-514,-514,,324,327,,,,338,340,343,346,-539,-539,-539,-539,-539,-539',
',181,185,190,194,198,203,208,211,215,219,129,,,-514,,,,,,,,,-514,-514',
'-514,,-514,,,,-514,-514,,,,-514,,-514,-514,-514,-514,-514,-514,-514',
',,,,,-514,-514,-514,-514,-514,-514,-514,,,,-514,-514,-514,-514,-514',
'-514,-514,-514,-514,-514,-514,-514,-514,-514,,-514,-514,-514,,,,,-514',
',-514,-514,,-514,-514,-514,-514,-514,-514,-514,-514,-514,-514,-514,119',
',30,,44,50,-514,323,326,329,331,334,336,339,341,,,,,-514,,-514,,465',
',157,160,162,164,166,,,,,,,113,,,,,,169,,,61,67,71,159,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,155,,,136,274,270,9,16,23,27,,,,54,60',
'66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103',
',,13,18,24,28,33,40,46,119,,30,,44,50,151,,157,160,162,164,166,,,,,',
',57,,546,,,,169,,,,,156,159,,,,,113,,,,,,,,,61,67,71,,134,,,155,99,105',
'163,,,25,,34,42,48,126,128,68,72,,144,,,,136,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,',
'96,103,139,114,13,18,24,28,33,40,46,,,,,,,145,,,,,,191,118,199,204,',
'212,,57,,129,,237,241,,,,254,178,182,187,196,201,206,209,213,217,,,',
',,,,,,,,653,,157,160,162,164,166,653,,157,160,162,164,166,,,,,191,169',
'199,204,,212,156,159,169,,,237,241,156,159,,254,178,182,187,196,201',
'206,209,213,217,,,155,,,163,710,489,,155,711,,163,,,,,,,,218,221,151',
',157,160,162,164,166,,255,,,,,,,,,,,169,,,,,156,159,,,181,185,190,194',
'198,203,208,211,215,219,129,707,481,,,708,,,155,,,163,,,,218,221,191',
',199,204,,212,,,255,,,237,241,,,,254,178,182,187,196,201,206,209,213',
'217,,,181,185,190,194,198,203,208,211,215,219,129,,151,,157,160,162',
'164,166,,,,,,,,,191,,199,204,169,212,,,,156,159,237,241,,,,254,178,182',
'187,196,201,206,209,213,217,,,,,,155,642,489,163,,643,,,,,,,,,,218,221',
'465,,157,160,162,164,166,,255,,,,,,,,,,,169,,,,,,159,,,181,185,190,194',
'198,203,208,211,215,219,129,639,481,,,640,,,155,,,,,,,218,221,,,,,,119',
',30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219',
'129,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68',
'72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112',
'10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46',
'119,,30,,44,50,465,,157,160,162,164,166,118,,,,,,57,,129,,,,169,,,,',
',159,,,,,113,,,,,,,,,61,67,71,,134,,,155,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28',
'33,40,46,119,,30,,44,50,465,,157,160,162,164,166,118,,,,,,57,,129,,',
',169,,,,,,159,,,,,113,,,,,,,,,61,67,71,,134,,,155,99,105,,,,25,,34,42',
'48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18',
'24,28,33,40,46,,,,,,,191,,199,204,,212,,118,,,,237,241,57,,129,254,178',
'182,187,196,201,206,209,213,217,,,,,,,,,,,,465,,157,160,162,164,166',
'465,,157,160,162,164,166,,,,,191,169,199,204,,212,,159,169,,,237,241',
',159,,254,178,182,187,196,201,206,209,213,217,,,155,,,,488,489,,155',
'492,,,,,,,,333,,218,221,,,,,324,327,,,255,338,340,343,346,321,322,325',
'328,330,332,335,337,342,344,345,,,,,181,185,190,194,198,203,208,211',
'215,219,129,928,481,,,929,,,,,,,,,,218,221,191,,199,204,,212,,,255,',
',237,241,,,,254,178,182,187,196,201,206,209,213,217,,,181,185,190,194',
'198,203,208,211,215,219,129,465,,157,160,162,164,166,,,,,,,,,,,,,169',
',,,,,159,,,,,323,326,329,331,334,336,339,341,,,,,,,,,155,,941,489,,',
'942,,,,,,,,,,218,221,,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185',
'190,194,198,203,208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60',
'66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96',
'103,139,114,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,118,,,,237',
'241,57,,129,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,480,481,,,485,,,,,,,,,',
'218,221,,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190,194,198',
'203,208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114',
'13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,118,,,,,,57,,129,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,,,',
',191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201,206,209',
'213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239,244,247',
'248,252,180,184,189,193,197,202,207,210,214,223,227,230,233,236,,,,249',
'253,177,186,192,195,200,205,,,216,220,225,228,,238,242,,,250,,,,,,,',
',,218,221,,359,21,,30,333,44,50,255,,,18,,324,327,,,,338,340,343,346',
'-539,-539,-539,-539,-539,-539,181,185,190,194,198,203,208,211,215,219',
'8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,365,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30',
',44,50,,,,,323,326,329,331,334,336,339,341,57,,,,,,,,,,,,,,,,,,8,,,',
',,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204',
',212,,,,,,237,241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,',
',,,,,179,183,188,,,,,,,222,226,229,232,234,239,244,247,248,252,180,184',
'189,193,197,202,207,210,214,223,227,230,233,236,,,,249,253,177,186,192',
'195,200,205,,,216,220,225,228,,238,242,,,250,,,,,,,,,,218,221,,359,21',
',30,333,44,50,255,,,18,,324,327,,,,338,340,343,346,321,322,325,328,330',
'332,181,185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,',
'51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87',
',96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,323,326,329',
'331,334,336,339,341,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,',
',99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,333,,,,,,57,,324',
'327,,,,338,340,343,346,321,322,325,328,330,332,335,8,,,,,,,,,61,67,71',
'80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74',
',82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,',
',,,57,323,326,329,331,334,336,339,341,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,333,,,',
',,57,,324,327,,,,338,340,343,346,-539,-539,-539,-539,-539,-539,,8,,',
',,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44',
'50,,,,,,,,,,,,,57,323,326,329,331,334,336,339,341,,,,,,,,,,8,,,,,,,',
',61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50',
',,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110',
',13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201',
'206,209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239',
'244,247,248,252,180,184,189,193,197,202,207,210,214,223,227,230,233',
'236,,,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238,242,289',
',250,,,,,,,,,,218,221,,,191,,199,204,,212,255,,,18,,237,241,,,,254,178',
'182,187,196,201,206,209,213,217,181,185,190,194,198,203,208,211,215',
'219,179,183,188,,,,,,,222,226,229,232,234,239,244,247,248,252,180,184',
'189,193,197,202,207,210,214,223,227,230,233,236,,,,249,253,177,186,192',
'195,200,205,,,216,220,225,228,,238,242,,,250,,,,,,,,,,218,221,,359,21',
',30,,44,50,255,,,18,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211',
'215,219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,237',
'241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,191,,199,204,,212,,,,,,237,241,,,,254,178,182,187,196,201,206',
'209,213,217,,,,,,,,602,489,,,603,,,,,,,,,,218,221,,,,,,,,,255,,,,,,',
',,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219,602,489,,,603,',
',,,,,,,,218,221,,359,21,,30,,44,50,255,,,,,,,,,,,,,,,,,,,,181,185,190',
'194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18',
'24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,',
',,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44',
'50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,365,87,,96,103,110',
',13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,237',
'241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188',
',,,,,,222,226,229,232,234,239,244,247,248,252,180,184,189,193,197,202',
'207,210,214,223,227,230,233,236,,,,249,253,177,186,192,195,200,205,',
',216,220,225,228,,238,242,243,245,250,251,,,,,,,,,218,221,,359,21,,30',
',44,50,255,,,,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219',
'8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30',
',44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,',
'99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
'80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74',
',365,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24',
'28,33,40,46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187',
'196,201,206,209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232',
'234,239,244,247,248,252,180,184,189,193,197,202,207,210,214,223,227',
'230,233,236,,,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238',
'242,,,250,,,,,,,,,,218,221,,359,21,,30,,44,50,255,,,,,,,,,,,,,,,,,,',
',181,185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134,',
',,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'359,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
'80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74',
',82,87,,96,103,110,,13,18,24,28,33,40,46,359,21,,30,,44,50,,,,,,,,,',
',,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24',
'28,33,40,46,15,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,779,,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,',
'54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87',
',96,103,638,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,434,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,',
',,,,,,,,,,,,8,,,,,,,,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118',
',,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,',
'44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,',
',,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,',
'96,103,139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57',
',,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46',
'21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,',
',,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42',
'48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,21,,30,,44',
'50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,',
'134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,',
',54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118,,',
',,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,,13,18,24,28,33,40,46,119,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,',
',,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29',
'32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,',
',25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,',
',,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,114,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103',
'139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,',
',,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,',
'44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,',
'113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,',
',,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,',
'134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,638,114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118',
',,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,434,,13,18,24,28,33,40,46,119,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,434,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,638,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,,,,,,,,333,,,,,,,,324,327,,,57,338,340,343,346,321,322',
'325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343',
'346,321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,',
',,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333,,',
',,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,',
',,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326',
'329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336',
'339,341,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332',
'335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325',
'328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,342,344,345,,,,,,,,,,,,',
',,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329',
'331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339',
'341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,333,,,,,,,,324',
'327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333',
',,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332',
'335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325',
'328,330,332,335,337,-539,-539,,,,,,,,,,,,,,,,,,323,326,329,331,334,336',
'339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,',
',,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323',
'326,329,331,334,336,339,341,333,,,,,,,,324,327,,,,338,340,343,346,321',
'322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340',
'343,346,321,322,325,328,330,332,335,337,-539,-539,333,,,,,,,,324,327',
',,,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333,',
',,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342',
'344,345,,762,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,',
',,,,,,,,,,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,323,326',
'329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336',
'339,341,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332',
'335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325',
'328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338,340,343,346',
'321,322,325,328,330,332,335,337,342,344,345,333,,,,,,,,324,327,,,,338',
'340,343,346,321,322,325,328,330,332,335,337,342,344,345,,,,,,,,,,,,',
',,,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329',
'331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339',
'341,,,,,,,,,,,,,,,,,,,,,323,326,329,331,334,336,339,341,333,,,,,,,,324',
'327,,,,338,340,343,346,321,322,325,328,330,332,335,337,342,344,345,333',
'664,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330,332,335,337',
'342,344,345,333,,,,,,,,324,327,,,,338,340,343,346,321,322,325,328,330',
'332,335,337,342,344,345,,762,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,323,326,329,331,334,336,339,341,,,,,,,,,,,,,,,,,,,,,323,326,329,331',
'334,336,339,341,278,,,,,,,,,,,,,,,,,,,-232,323,326,329,331,334,336,339',
'341,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,282,,133,87,,96,103,113,,13,18,24,28,33',
'40,46,61,67,71,,134,,,,99,105,409,,,25,,34,42,48,126,128,68,72,,,,,',
'136,274,270,9,16,23,27,,,,54,60,66,281,77,86,88,90,93,97,104,278,10',
'17,,29,32,39,375,,,,282,,133,87,,96,103,,,13,18,24,28,33,40,46,,,,,',
'113,,,,,514,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72',
',,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,376,88,90,93,377,104',
',10,17,,29,32,39,,,,,373,,133,87,,96,103,113,,13,18,24,28,33,40,46,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,895,,133,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,',
'54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87',
',96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103,113,,13',
'18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68',
'72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,863,,133,87,,96,103,113,,13,18,24,28,33,40',
'46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,282,,283,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,',
'278,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283',
'87,,96,103,285,113,13,18,24,28,33,40,46,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66',
'281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103,113',
',13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,376,88,90,93',
'377,104,,10,17,,29,32,39,,,,,373,,133,87,,96,103,113,,13,18,24,28,33',
'40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,278,,54,60,66,281,77,86,88,90,93,97,104,,10,17,',
'29,32,39,,,,,351,,82,87,,96,103,110,113,13,18,24,28,33,40,46,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16',
'23,27,,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282',
',283,87,,96,103,,,13,18,24,28,33,40,46' ]
        racc_action_table = arr = Array.new(23258, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'84,480,740,356,144,309,480,1,736,941,349,350,732,731,480,480,152,600',
'600,480,480,480,480,480,480,480,480,480,480,480,480,480,480,480,734',
'480,480,480,355,145,480,480,480,480,480,480,396,710,436,436,472,374',
'685,480,480,480,368,368,8,480,480,383,480,8,320,320,682,11,152,397,374',
'480,396,349,350,732,731,383,626,626,309,710,309,736,552,736,732,731',
'728,728,151,38,38,695,653,397,573,734,941,740,941,399,64,64,573,573',
'480,356,144,573,573,573,573,573,573,573,573,573,573,573,573,573,573',
'573,600,11,600,399,681,480,480,480,480,480,480,480,700,480,480,480,480',
'480,355,145,710,480,84,480,84,480,640,492,492,268,472,640,710,436,884',
'314,710,320,151,640,640,368,653,677,640,640,640,640,640,640,640,640',
'640,640,640,640,640,640,640,640,640,640,640,626,38,640,640,640,640,640',
'640,640,374,728,374,64,775,775,640,640,640,696,696,640,640,640,942,640',
'552,552,552,552,552,552,552,552,640,640,640,640,573,573,573,573,573',
'573,573,573,488,488,314,389,314,278,278,573,761,578,268,711,268,567',
'839,884,492,884,676,389,725,567,567,640,761,640,567,567,567,567,567',
'567,567,567,567,567,567,567,567,567,567,59,59,640,735,711,848,640,640',
'640,640,640,640,640,640,640,640,640,640,384,481,298,640,640,640,481',
'640,942,938,942,696,950,578,481,481,384,271,839,481,481,481,481,481',
'481,481,481,481,481,481,481,481,481,481,481,481,725,674,488,269,481',
'481,481,481,481,481,481,289,735,711,725,705,725,481,481,481,289,289',
'481,481,481,711,481,269,269,711,394,829,269,703,703,481,481,481,481',
'271,848,555,848,44,44,401,567,567,567,567,567,567,567,567,271,298,394',
'298,706,938,551,79,938,79,938,950,829,950,551,551,481,401,481,551,551',
'551,551,551,551,551,551,551,551,551,551,551,551,551,403,829,481,829',
'829,481,481,481,481,481,481,481,672,481,481,481,481,481,670,639,583',
'481,481,481,639,481,403,583,583,583,583,348,639,639,628,709,628,639',
'639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639,639',
'639,348,348,639,639,639,639,639,639,639,596,22,596,22,521,405,639,639',
'639,166,373,639,639,639,373,639,555,555,555,555,555,555,555,555,639',
'639,639,639,521,521,561,405,936,936,166,551,551,551,551,551,551,551',
'551,887,669,887,393,668,395,550,318,744,318,521,366,166,366,550,550',
'639,665,639,550,550,550,550,550,550,550,550,550,550,393,742,395,714',
'744,744,862,639,894,300,639,639,639,639,639,639,639,744,639,639,639',
'639,639,748,88,748,639,639,639,88,639,862,862,894,894,300,742,88,88',
'127,127,663,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,742,662',
'742,742,88,88,88,88,88,88,88,643,643,720,91,742,398,88,88,88,642,642',
'88,88,88,723,88,561,561,561,561,561,561,561,561,88,88,88,88,266,91,718',
'398,427,427,724,550,550,550,550,550,550,550,550,867,661,867,867,867',
'867,549,123,123,266,266,266,727,293,549,549,88,719,88,549,549,549,549',
'549,549,549,549,549,549,659,377,267,267,302,658,892,88,293,293,293,88',
'88,88,88,88,88,88,88,88,88,88,88,730,484,656,88,88,88,484,88,892,892',
'654,733,649,377,484,484,641,707,637,484,484,484,484,484,484,484,484',
'484,484,484,484,484,484,484,484,484,377,737,377,377,484,484,484,484',
'484,484,484,475,475,738,475,377,707,484,484,484,475,475,484,484,484',
'635,484,718,718,718,718,718,718,718,718,484,484,484,484,707,277,707',
'707,224,634,631,549,549,549,549,549,549,549,549,707,620,745,719,719',
'719,719,719,719,719,719,277,277,224,224,224,484,747,484,302,302,302',
'302,302,302,302,302,808,609,808,808,808,808,808,586,511,484,19,754,484',
'484,484,484,484,484,484,757,484,484,484,484,484,584,485,760,484,484',
'484,485,484,511,511,19,19,545,544,485,485,531,766,808,485,485,485,485',
'485,485,485,485,485,485,485,485,485,485,485,768,485,485,485,566,770',
'485,485,485,485,485,485,566,566,530,513,512,86,510,485,485,485,86,499',
'778,485,485,486,485,708,86,86,471,781,467,86,86,86,86,86,86,86,86,86',
'86,86,86,86,86,86,86,86,86,86,708,708,86,86,86,86,86,86,86,786,465,464',
'595,708,461,86,86,86,485,450,86,86,86,466,86,466,466,466,466,466,107',
'447,86,86,86,86,86,595,595,939,437,432,485,485,485,485,485,485,485,485',
'485,485,485,485,430,107,107,485,810,485,424,485,813,408,939,939,466',
'568,86,141,86,141,392,141,141,568,568,939,566,566,566,566,566,566,566',
'566,391,280,86,382,381,826,86,86,86,86,86,86,86,86,86,86,86,86,380,141',
'364,86,86,86,830,86,280,280,141,141,141,831,141,361,360,358,141,141',
'276,352,351,141,846,141,141,141,141,141,141,141,317,316,299,297,296',
'141,141,141,141,141,141,141,294,276,276,141,141,141,141,141,141,141',
'141,141,141,141,861,141,141,282,141,141,141,863,865,866,376,141,376',
'141,141,281,141,141,926,869,141,141,141,141,141,141,141,70,870,70,871',
'70,70,568,568,568,568,568,568,568,568,117,872,926,926,376,141,571,873',
'874,363,875,893,141,279,571,571,363,363,363,363,877,274,70,879,270,117',
'117,376,369,376,376,70,70,70,175,70,893,893,167,70,70,272,376,161,70',
'889,70,70,70,70,70,70,70,369,369,154,153,150,70,70,70,70,70,70,70,137',
'272,272,70,70,70,70,70,70,70,70,70,70,70,52,70,70,895,70,70,70,52,52',
'52,52,70,898,70,70,275,70,70,130,275,70,70,70,70,70,70,70,406,741,406',
'125,406,406,120,692,741,741,741,741,275,275,116,915,115,113,657,70,657',
'657,657,657,70,922,70,101,571,571,571,571,571,571,571,571,406,878,74',
'878,878,878,878,878,73,406,406,406,51,406,928,929,930,406,406,931,878',
'932,406,933,406,406,406,406,406,406,406,934,935,47,46,43,406,406,406',
'406,406,406,406,940,40,12,406,406,406,406,406,406,406,406,406,406,406',
'406,406,406,7,406,406,406,4,951,,,406,,406,406,,406,406,406,406,406',
'406,406,406,406,406,406,264,574,264,,264,264,,,,574,574,,,406,,,,,679',
'406,679,679,679,679,679,806,406,806,806,806,806,806,,,,,264,679,,,,',
'679,,806,264,264,264,264,264,806,,,264,264,,,,264,,264,264,264,264,264',
'264,264,,,,,806,264,264,264,264,264,264,264,264,,264,264,264,264,264',
'264,264,264,264,264,264,264,,264,264,,264,264,264,,,,,264,,264,264,',
'264,264,264,,264,264,264,264,264,264,264,588,,588,,588,588,,,,574,574',
'574,574,574,574,574,574,,,264,,,,,264,912,,912,912,912,912,912,,,,,588',
'876,,876,876,876,876,876,912,588,588,588,588,588,912,,,588,588,,876',
',588,,588,588,588,588,588,588,588,,,,,912,588,588,588,588,588,588,588',
'588,,588,588,588,588,588,588,588,588,588,588,588,588,,588,588,,588,588',
'588,,,,,588,,588,588,,588,588,588,,588,588,588,588,588,588,588,259,259',
'259,259,259,259,259,259,,923,,923,923,,923,,,,,588,923,923,,,588,923',
'923,923,923,923,923,923,923,923,923,439,,439,439,439,439,439,680,,680',
'680,680,680,680,554,,,,,439,,,554,554,439,439,680,554,554,554,554,554',
'554,554,554,554,554,554,554,554,554,554,,,,,439,,469,439,469,469,469',
'469,469,,,439,,,,923,923,,,923,,469,,,,,469,,,923,923,,,,,556,,,,923',
',,,556,556,,,,556,556,556,556,556,556,556,556,556,556,,923,923,923,923',
'923,923,923,923,923,923,923,106,,106,106,,106,,,,,,106,106,,,,106,106',
'106,106,106,106,106,106,106,106,554,554,554,554,554,554,554,554,,,106',
'106,106,,,,,,,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,106,106,106,106,106,106,106,106,106,,,,106,106,106,106,106,106,106',
'106,,,106,106,106,106,106,106,106,106,106,106,106,556,556,556,556,556',
'556,556,556,106,106,590,,590,590,,590,,,106,,,590,590,,,,590,590,590',
'590,590,590,590,590,590,590,,,106,106,106,106,106,106,106,106,106,106',
'106,,764,,764,764,764,764,764,273,273,273,273,273,273,273,273,416,,416',
'416,764,416,,,,764,764,416,416,,,,416,416,416,416,416,416,416,416,416',
'416,,,,,,764,590,590,764,,590,,169,764,169,169,169,169,169,,590,590',
',402,,402,402,402,402,402,590,169,,,,,169,,,,,,402,,,,,402,402,,590',
'590,590,590,590,590,590,590,590,590,590,416,416,,,416,,,,402,,,402,',
',416,416,402,,,,,108,,108,416,108,108,,,,,,,,,,811,,811,811,811,811',
'811,,416,416,416,416,416,416,416,416,416,416,416,811,,108,916,,916,916',
'916,916,916,,108,108,108,,108,,,,108,108,,916,,108,,108,108,108,108',
'108,108,108,,,,,,108,108,108,108,108,108,108,,,,108,108,108,108,108',
'108,108,108,108,108,108,108,108,108,,108,108,108,,,,,108,,108,108,,108',
'108,108,108,108,108,108,108,108,108,108,,,,,,,577,,577,577,,577,,108',
',,,577,577,108,,108,577,577,577,577,577,577,577,577,577,577,,,,,,,,',
',,,,,,13,,13,13,13,13,13,,,,,,,,,575,,575,575,13,575,,,,13,13,575,575',
',,,575,575,575,575,575,575,575,575,575,575,,,,,,13,577,577,13,,577,',
',13,,,,,,,577,577,782,,782,782,782,782,782,,577,,,,,,,,,,,782,,,,,782',
'782,,,577,577,577,577,577,577,577,577,577,577,577,575,575,,,575,,,782',
',,782,,,,575,575,592,,592,592,,592,,,575,,,592,592,,,,592,592,592,592',
'592,592,592,592,592,592,,,575,575,575,575,575,575,575,575,575,575,575',
',149,,149,149,149,149,149,,,,,,,,,418,,418,418,149,418,,,,149,149,418',
'418,,,,418,418,418,418,418,418,418,418,418,418,,,,,,149,592,592,149',
',592,,,,,,,,,,592,592,801,,801,801,801,801,801,,592,,,,,,,,,,,801,,',
',,801,801,,,592,592,592,592,592,592,592,592,592,592,592,418,418,,,418',
',,801,,,801,,,,418,418,,,,,558,97,,97,418,97,97,,558,558,,,,558,558',
'558,558,558,558,558,558,558,558,,418,418,418,418,418,418,418,418,418',
'418,418,,,97,,,,,,,,,97,97,97,,97,,,,97,97,,,,97,,97,97,97,97,97,97',
'97,,,,,,97,97,97,97,97,97,97,,,,97,97,97,97,97,97,97,97,97,97,97,97',
'97,97,,97,97,97,,,,,97,,97,97,,97,97,97,97,97,97,97,97,97,97,97,319',
',319,,319,319,97,558,558,558,558,558,558,558,558,,,,,97,,97,,803,,803',
'803,803,803,803,,,,,,,319,,,,,,803,,,319,319,319,803,319,,,,319,319',
',,,319,,319,319,319,319,319,319,319,,,803,,,319,319,319,319,319,319',
'319,,,,319,319,319,319,319,319,319,319,319,319,319,,319,319,,319,319',
'319,,,,,319,,319,319,,319,319,,,319,319,319,319,319,319,319,14,,14,',
'14,14,627,,627,627,627,627,627,,,,,,,319,,319,,,,627,,,,,627,627,,,',
',14,,,,,,,,,14,14,14,,14,,,627,14,14,627,,,14,,14,14,14,14,14,14,14',
',14,,,,14,14,14,14,14,14,14,,,,14,14,14,14,14,14,14,14,14,14,14,14,14',
'14,,14,14,14,,,,,14,,14,14,,14,14,14,14,14,14,14,14,14,14,14,,,,,,,14',
',,,,,506,14,506,506,,506,,14,,14,,506,506,,,,506,506,506,506,506,506',
'506,506,506,506,,,,,,,,,,,,901,,901,901,901,901,901,788,,788,788,788',
'788,788,,,,,504,901,504,504,,504,901,901,788,,,504,504,788,788,,504',
'504,504,504,504,504,504,504,504,504,,,901,,,901,506,506,,788,506,,788',
',,,,,,,506,506,455,,455,455,455,455,455,,506,,,,,,,,,,,455,,,,,455,455',
',,506,506,506,506,506,506,506,506,506,506,506,504,504,,,504,,,455,,',
'455,,,,504,504,502,,502,502,,502,,,504,,,502,502,,,,502,502,502,502',
'502,502,502,502,502,502,,,504,504,504,504,504,504,504,504,504,504,504',
',462,,462,462,462,462,462,,,,,,,,,501,,501,501,462,501,,,,462,462,501',
'501,,,,501,501,501,501,501,501,501,501,501,501,,,,,,462,502,502,462',
',502,,,,,,,,,,502,502,799,,799,799,799,799,799,,502,,,,,,,,,,,799,,',
',,,799,,,502,502,502,502,502,502,502,502,502,502,502,501,501,,,501,',
',799,,,,,,,501,501,,,,,,601,,601,501,601,601,,,,,,,,,,,,,,,,,,501,501',
'501,501,501,501,501,501,501,501,501,,,601,,,,,,,,,601,601,601,,601,',
',,601,601,,,,601,,601,601,601,601,601,601,601,,,,,,601,601,601,601,601',
'601,601,,,,601,601,601,601,601,601,601,601,601,601,601,601,601,601,',
'601,601,601,,,,,601,,601,601,,601,601,601,601,601,601,601,601,601,601',
'601,487,,487,,487,487,944,,944,944,944,944,944,601,,,,,,601,,601,,,',
'944,,,,,,944,,,,,487,,,,,,,,,487,487,487,,487,,,944,487,487,,,,487,',
'487,487,487,487,487,487,487,,,,,,487,487,487,487,487,487,487,,,,487',
'487,487,487,487,487,487,487,487,487,487,487,487,487,,487,487,487,,,',
',487,,487,487,,487,487,487,487,487,487,487,487,487,487,487,604,,604',
',604,604,907,,907,907,907,907,907,487,,,,,,487,,487,,,,907,,,,,,907',
',,,,604,,,,,,,,,604,604,604,,604,,,907,604,604,,,,604,,604,604,604,604',
'604,604,604,,,,,,604,604,604,604,604,604,604,,,,604,604,604,604,604',
'604,604,604,604,604,604,604,604,604,,604,604,604,,,,,604,,604,604,,604',
'604,604,604,604,604,604,604,604,604,604,,,,,,,258,,258,258,,258,,604',
',,,258,258,604,,604,258,258,258,258,258,258,258,258,258,258,,,,,,,,',
',,,790,,790,790,790,790,790,903,,903,903,903,903,903,,,,,899,790,899',
'899,,899,,790,903,,,899,899,,903,,899,899,899,899,899,899,899,899,899',
'899,,,790,,,,258,258,,903,258,,,,,,,,547,,258,258,,,,,547,547,,,258',
'547,547,547,547,547,547,547,547,547,547,547,547,547,547,547,,,,,258',
'258,258,258,258,258,258,258,258,258,258,899,899,,,899,,,,,,,,,,899,899',
'925,,925,925,,925,,,899,,,925,925,,,,925,925,925,925,925,925,925,925',
'925,925,,,899,899,899,899,899,899,899,899,899,899,899,458,,458,458,458',
'458,458,,,,,,,,,,,,,458,,,,,,458,,,,,547,547,547,547,547,547,547,547',
',,,,,,,,458,,925,925,,,925,,,,,,,,,,925,925,,,,,,5,,5,925,5,5,,,,,,',
',,,,,,,,,,,925,925,925,925,925,925,925,925,925,925,925,,,5,,,,,,,,,5',
'5,5,,5,,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,,5,5,5,5,5,5',
'5,5,5,5,5,5,5,5,,5,5,5,,,,,5,,5,5,,5,5,5,5,5,5,5,5,5,5,5,,,,,,,256,',
'256,256,,256,,5,,,,256,256,5,,5,256,256,256,256,256,256,256,256,256',
'256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,256',
'256,,,256,,,,,,,,,,256,256,,,,,,479,,479,256,479,479,,,,,,,,,,,,,,,',
',,256,256,256,256,256,256,256,256,256,256,256,,,479,,,,,,,,,479,479',
'479,,479,,,,479,479,,,,479,,479,479,479,479,479,479,479,,,,,,479,479',
'479,479,479,479,479,,,,479,479,479,479,479,479,479,479,479,479,479,479',
'479,479,,479,479,479,,,,,479,,479,479,,479,479,479,479,479,479,479,479',
'479,479,479,388,388,,388,,388,388,,,,,,,479,,,,,,479,,479,,,,,,,,,,',
',,,,,388,,,,,,,,,388,388,388,388,388,,,,388,388,,,,388,,388,388,388',
'388,388,388,388,,,,,,388,388,388,388,388,388,388,388,,388,388,388,388',
'388,388,388,388,388,388,388,388,,388,388,,388,388,388,,,,,388,,388,388',
',388,388,388,,388,388,388,388,388,388,388,,,,,80,,80,80,,80,,,,,,80',
'80,,,388,80,80,80,80,80,80,80,80,80,80,,,,,,,,,,,80,80,80,,,,,,,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,,',
',80,80,80,80,80,80,80,80,,,80,80,80,80,,80,80,,,80,,,,,,,,,,80,80,,82',
'82,,82,560,82,82,80,,,80,,560,560,,,,560,560,560,560,560,560,560,560',
'560,560,80,80,80,80,80,80,80,80,80,80,82,,,,,,,,,82,82,82,82,82,,,,82',
'82,,,,82,,82,82,82,82,82,82,82,,,,,,82,82,82,82,82,82,82,82,,82,82,82',
'82,82,82,82,82,82,82,82,82,,82,82,,82,82,82,,,,,82,,82,82,,82,82,82',
',82,82,82,82,82,82,82,497,497,,497,,497,497,,,,,560,560,560,560,560',
'560,560,560,82,,,,,,,,,,,,,,,,,,497,,,,,,,,,497,497,497,497,497,,,,497',
'497,,,,497,,497,497,497,497,497,497,497,,,,,,497,497,497,497,497,497',
'497,497,,497,497,497,497,497,497,497,497,497,497,497,497,,497,497,,497',
'497,497,,,,,497,,497,497,,497,497,497,,497,497,497,497,497,497,497,',
',,,515,,515,515,,515,,,,,,515,515,,,497,515,515,515,515,515,515,515',
'515,515,515,,,,,,,,,,,515,515,515,,,,,,,515,515,515,515,515,515,515',
'515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515,515',
',,,515,515,515,515,515,515,515,515,,,515,515,515,515,,515,515,,,515',
',,,,,,,,,515,515,,453,453,,453,563,453,453,515,,,515,,563,563,,,,563',
'563,563,563,563,563,563,563,563,563,515,515,515,515,515,515,515,515',
'515,515,453,,,,,,,,,453,453,453,453,453,,,,453,453,,,,453,,453,453,453',
'453,453,453,453,,,,,,453,453,453,453,453,453,453,453,,453,453,453,453',
'453,453,453,453,453,453,453,453,,453,453,,453,453,453,,,,,453,,453,453',
',453,453,453,,453,453,453,453,453,453,453,527,527,,527,,527,527,,,,',
'563,563,563,563,563,563,563,563,453,,,,,,,,,,,,,,,,,,527,,,,,,,,,527',
'527,527,527,527,,,,527,527,,,,527,,527,527,527,527,527,527,527,,,,,',
'527,527,527,527,527,527,527,527,,527,527,527,527,527,527,527,527,527',
'527,527,527,,527,527,,527,527,527,,,,,527,,527,527,,527,527,527,,527',
'527,527,527,527,527,527,452,452,,452,,452,452,,,,,,,565,,,,,,527,,565',
'565,,,,565,565,565,565,565,565,565,565,565,565,565,452,,,,,,,,,452,452',
'452,452,452,,,,452,452,,,,452,,452,452,452,452,452,452,452,,,,,,452',
'452,452,452,452,452,452,452,,452,452,452,452,452,452,452,452,452,452',
'452,452,,452,452,,452,452,452,,,,,452,,452,452,,452,452,452,,452,452',
'452,452,452,452,452,444,444,,444,,444,444,,,,,,,,,,,,,452,565,565,565',
'565,565,565,565,565,,,,,,,,,,444,,,,,,,,,444,444,444,444,444,,,,444',
'444,,,,444,,444,444,444,444,444,444,444,,,,,,444,444,444,444,444,444',
'444,444,,444,444,444,444,444,444,444,444,444,444,444,444,,444,444,,444',
'444,444,,,,,444,,444,444,,444,444,444,,444,444,444,444,444,444,444,95',
'95,,95,,95,95,,,,,,,553,,,,,,444,,553,553,,,,553,553,553,553,553,553',
'553,553,553,553,,95,,,,,,,,,95,95,95,95,95,,,,95,95,,,,95,,95,95,95',
'95,95,95,95,,,,,,95,95,95,95,95,95,95,95,,95,95,95,95,95,95,95,95,95',
'95,95,95,,95,95,,95,95,95,,,,,95,,95,95,,95,95,95,,95,95,95,95,95,95',
'95,441,441,,441,,441,441,,,,,,,,,,,,,95,553,553,553,553,553,553,553',
'553,,,,,,,,,,441,,,,,,,,,441,441,441,441,441,,,,441,441,,,,441,,441',
'441,441,441,441,441,441,,,,,,441,441,441,441,441,441,441,441,,441,441',
'441,441,441,441,441,441,441,441,441,441,,441,441,,441,441,441,,,,,441',
',441,441,,441,441,441,,441,441,441,441,441,441,441,539,539,,539,,539',
'539,,,,,,,,,,,,,441,,,,,,,,,,,,,,,,,,539,,,,,,,,,539,539,539,539,539',
',,,539,539,,,,539,,539,539,539,539,539,539,539,,,,,,539,539,539,539',
'539,539,539,539,,539,539,539,539,539,539,539,539,539,539,539,539,,539',
'539,,539,539,539,,,,,539,,539,539,,539,539,539,,539,539,539,539,539',
'539,539,542,542,,542,,542,542,,,,,,,,,,,,,539,,,,,,,,,,,,,,,,,,542,',
',,,,,,,542,542,542,542,542,,,,542,542,,,,542,,542,542,542,542,542,542',
'542,,,,,,542,542,542,542,542,542,542,542,,542,542,542,542,542,542,542',
'542,542,542,542,542,,542,542,,542,542,542,,,,,542,,542,542,,542,542',
'542,,542,542,542,542,542,542,542,580,580,,580,,580,580,,,,,,,,,,,,,542',
',,,,,,,,,,,,,,,,,580,,,,,,,,,580,580,580,580,580,,,,580,580,,,,580,',
'580,580,580,580,580,580,580,,,,,,580,580,580,580,580,580,580,580,,580',
'580,580,580,580,580,580,580,580,580,580,580,,580,580,,580,580,580,,',
',,580,,580,580,,580,580,580,,580,580,580,580,580,580,580,581,581,,581',
',581,581,,,,,,,,,,,,,580,,,,,,,,,,,,,,,,,,581,,,,,,,,,581,581,581,581',
'581,,,,581,581,,,,581,,581,581,581,581,581,581,581,,,,,,581,581,581',
'581,581,581,581,581,,581,581,581,581,581,581,581,581,581,581,581,581',
',581,581,,581,581,581,,,,,581,,581,581,,581,581,581,,581,581,581,581',
'581,581,581,,,,,36,,36,36,,36,,,,,,36,36,,,581,36,36,36,36,36,36,36',
'36,36,36,,,,,,,,,,,36,36,36,,,,,,,36,36,36,36,36,36,36,36,36,36,36,36',
'36,36,36,36,36,36,36,36,36,36,36,36,,,,36,36,36,36,36,36,36,36,,,36',
'36,36,36,,36,36,36,,36,,,,,,,,,,36,36,,,582,,582,582,,582,36,,,36,,582',
'582,,,,582,582,582,582,582,582,582,582,582,582,36,36,36,36,36,36,36',
'36,36,36,582,582,582,,,,,,,582,582,582,582,582,582,582,582,582,582,582',
'582,582,582,582,582,582,582,582,582,582,582,582,582,,,,582,582,582,582',
'582,582,582,582,,,582,582,582,582,,582,582,,,582,,,,,,,,,,582,582,,474',
'474,,474,,474,474,582,,,582,,,,,,,,,,,,,,,,,582,582,582,582,582,582',
'582,582,582,582,474,,,,,,,,,474,474,474,474,474,,,,474,474,,,,474,,474',
'474,474,474,474,474,474,,,,,,474,474,474,474,474,474,474,474,,474,474',
'474,474,474,474,474,474,474,474,474,474,,474,474,,474,474,474,,,,,474',
',474,474,,474,474,474,,474,474,474,474,474,474,474,759,759,,759,,759',
'759,,,,,,,,,,,,,474,,,,,,,,,,,,,,,,,,759,,,,,,,,,759,759,759,759,759',
',,,759,759,,,,759,,759,759,759,759,759,759,759,,,,,,759,759,759,759',
'759,759,759,759,,759,759,759,759,759,759,759,759,759,759,759,759,,759',
'759,,759,759,759,,,,,759,,759,759,,759,759,759,,759,759,759,759,759',
'759,759,,,,,379,,379,379,,379,,,,,,379,379,,,759,379,379,379,379,379',
'379,379,379,379,379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,378,,378,378,,378,,',
',,,378,378,,,,378,378,378,378,378,378,378,378,378,378,,,,,,,,379,379',
',,379,,,,,,,,,,379,379,,,,,,,,,379,,,,,,,,,,,,,,,,,,,,379,379,379,379',
'379,379,379,379,379,379,378,378,,,378,,,,,,,,,,378,378,,917,917,,917',
',917,917,378,,,,,,,,,,,,,,,,,,,,378,378,378,378,378,378,378,378,378',
'378,917,,,,,,,,,917,917,917,917,917,,,,917,917,,,,917,,917,917,917,917',
'917,917,917,,,,,,917,917,917,917,917,917,917,917,,917,917,917,917,917',
'917,917,917,917,917,917,917,,917,917,,917,917,917,,,,,917,,917,917,',
'917,917,917,,917,917,917,917,917,917,917,749,749,,749,,749,749,,,,,',
',,,,,,,917,,,,,,,,,,,,,,,,,,749,,,,,,,,,749,749,749,749,749,,,,749,749',
',,,749,,749,749,749,749,749,749,749,,,,,,749,749,749,749,749,749,749',
'749,,749,749,749,749,749,749,749,749,749,749,749,749,,749,749,,749,749',
'749,,,,,749,,749,749,,749,749,749,,749,749,749,749,749,749,749,365,365',
',365,,365,365,,,,,,,,,,,,,749,,,,,,,,,,,,,,,,,,365,,,,,,,,,365,365,365',
'365,365,,,,365,365,,,,365,,365,365,365,365,365,365,365,,,,,,365,365',
'365,365,365,365,365,365,,365,365,365,365,365,365,365,365,365,365,365',
'365,,365,365,,365,365,365,,,,,365,,365,365,,365,365,365,,365,365,365',
'365,365,365,365,835,835,,835,,835,835,,,,,,,,,,,,,365,,,,,,,,,,,,,,',
',,,835,,,,,,,,,835,835,835,835,835,,,,835,835,,,,835,,835,835,835,835',
'835,835,835,,,,,,835,835,835,835,835,835,835,835,,835,835,835,835,835',
'835,835,835,835,835,835,835,,835,835,,835,835,835,,,,,835,,835,835,',
'835,835,835,,835,835,835,835,835,835,835,840,840,,840,,840,840,,,,,',
',,,,,,,835,,,,,,,,,,,,,,,,,,840,,,,,,,,,840,840,840,840,840,,,,840,840',
',,,840,,840,840,840,840,840,840,840,,,,,,840,840,840,840,840,840,840',
'840,,840,840,840,840,840,840,840,840,840,840,840,840,,840,840,,840,840',
'840,,,,,840,,840,840,,840,840,840,,840,840,840,840,840,840,840,,,,,18',
',18,18,,18,,,,,,18,18,,,840,18,18,18,18,18,18,18,18,18,18,,,,,,,,,,',
'18,18,18,,,,,,,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18',
'18,18,18,18,18,18,,,,18,18,18,18,18,18,18,18,,,18,18,18,18,,18,18,18',
'18,18,18,,,,,,,,,18,18,,303,303,,303,,303,303,18,,,,,,,,,,,,,,,,,,,',
'18,18,18,18,18,18,18,18,18,18,303,,,,,,,,,303,303,303,303,303,,,,303',
'303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303,303,303',
'303,303,,303,303,303,303,303,303,303,303,303,303,303,303,,303,303,,303',
'303,303,,,,,303,,303,303,,303,303,303,,303,303,303,303,303,303,303,852',
'852,,852,,852,852,,,,,,,,,,,,,303,,,,,,,,,,,,,,,,,,852,,,,,,,,,852,852',
'852,852,852,,,,852,852,,,,852,,852,852,852,852,852,852,852,,,,,,852',
'852,852,852,852,852,852,852,,852,852,852,852,852,852,852,852,852,852',
'852,852,,852,852,,852,852,852,,,,,852,,852,852,,852,852,852,,852,852',
'852,852,852,852,852,856,856,,856,,856,856,,,,,,,,,,,,,852,,,,,,,,,,',
',,,,,,,856,,,,,,,,,856,856,856,856,856,,,,856,856,,,,856,,856,856,856',
'856,856,856,856,,,,,,856,856,856,856,856,856,856,856,,856,856,856,856',
'856,856,856,856,856,856,856,856,,856,856,,856,856,856,,,,,856,,856,856',
',856,856,856,,856,856,856,856,856,856,856,283,283,,283,,283,283,,,,',
',,,,,,,,856,,,,,,,,,,,,,,,,,,283,,,,,,,,,283,283,283,283,283,,,,283',
'283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283,283',
'283,283,,283,283,283,283,283,283,283,283,283,283,283,283,,283,283,,283',
'283,283,,,,,283,,283,283,,283,283,283,,283,283,283,283,283,283,283,597',
'597,,597,,597,597,,,,,,,,,,,,,283,,,,,,,,,,,,,,,,,,597,,,,,,,,,597,597',
'597,597,597,,,,597,597,,,,597,,597,597,597,597,597,597,597,,,,,,597',
'597,597,597,597,597,597,597,,597,597,597,597,597,597,597,597,597,597',
'597,597,,597,597,,597,597,597,,,,,597,,597,597,,597,597,597,,597,597',
'597,597,597,597,597,,,,,624,,624,624,,624,,,,,,624,624,,,597,624,624',
'624,624,624,624,624,624,624,624,,,,,,,,,,,624,624,624,,,,,,,624,624',
'624,624,624,624,624,624,624,624,624,624,624,624,624,624,624,624,624',
'624,624,624,624,624,,,,624,624,624,624,624,624,624,624,,,624,624,624',
'624,,624,624,,,624,,,,,,,,,,624,624,,629,629,,629,,629,629,624,,,,,',
',,,,,,,,,,,,,,624,624,624,624,624,624,624,624,624,624,629,,,,,,,,,629',
'629,629,629,629,,,,629,629,,,,629,,629,629,629,629,629,629,629,,,,,',
'629,629,629,629,629,629,629,629,,629,629,629,629,629,629,629,629,629',
'629,629,629,,629,629,,629,629,629,,,,,629,,629,629,,629,629,629,,629',
'629,629,629,629,629,629,684,684,,684,,684,684,,,,,,,,,,,,,629,,,,,,',
',,,,,,,,,,,684,,,,,,,,,684,684,684,684,684,,,,684,684,,,,684,,684,684',
'684,684,684,684,684,,,,,,684,684,684,684,684,684,684,684,,684,684,684',
'684,684,684,684,684,684,684,684,684,,684,684,,684,684,684,,,,,684,,684',
'684,,684,684,684,,684,684,684,684,684,684,684,133,133,,133,,133,133',
',,,,,,,,,,,,684,,,,,,,,,,,,,,,,,,133,,,,,,,,,133,133,133,133,133,,,',
'133,133,,,,133,,133,133,133,133,133,133,133,,,,,,133,133,133,133,133',
'133,133,133,,133,133,133,133,133,133,133,133,133,133,133,133,,133,133',
',133,133,133,,,,,133,,133,133,,133,133,133,,133,133,133,133,133,133',
'133,891,891,,891,,891,891,,,,,,,,,,,,,133,,,,,,,,,,,,,,,,,,891,,,,,',
',,,891,891,891,891,891,,,,891,891,,,,891,,891,891,891,891,891,891,891',
',,,,,891,891,891,891,891,891,891,891,,891,891,891,891,891,891,891,891',
'891,891,891,891,,891,891,,891,891,891,,,,,891,,891,891,,891,891,891',
',891,891,891,891,891,891,891,3,3,,3,,3,3,,,,,,,,,,,,,891,,,,,,,,,,,',
',,,,,,3,,,,,,,,,3,3,3,3,3,,,,3,3,,,,3,,3,3,3,3,3,3,3,,,,,,3,3,3,3,3',
'3,3,3,,3,3,3,3,3,3,3,3,3,3,3,3,,3,3,,3,3,3,,,,,3,,3,3,,3,3,3,,3,3,3',
'3,3,3,3,827,,827,,827,827,,,,,,,,,,,,,,3,,,,,,,,,,,,,,,,,827,,,,,,,',
',827,827,827,,827,,,,827,827,,,,827,,827,827,827,827,827,827,827,,,',
',,827,827,827,827,827,827,827,,,,827,827,827,827,827,827,827,827,827',
'827,827,,827,827,,827,827,827,,,,,827,,827,827,,827,827,,,827,827,827',
'827,827,827,827,139,,139,,139,139,,,,,,,,,,,,,,827,,,,,,,,,,,,,,,,,139',
',,,,,,,,139,139,139,,139,,,,139,139,,,,139,,139,139,139,139,139,139',
'139,,,,,,139,139,139,139,139,139,139,,,,139,139,139,139,139,139,139',
'139,139,139,139,,139,139,,139,139,139,,,,,139,,139,139,,139,139,,,139',
'139,139,139,139,139,139,143,,143,,143,143,,,,,,,,,,,,,,139,,,,,,,,,',
',,,,,,,143,,,,,,,,,143,143,143,,143,,,,143,143,,,,143,,143,143,143,143',
'143,143,143,,,,,,143,143,143,143,143,143,143,,,,143,143,143,143,143',
'143,143,143,143,143,143,,143,143,,143,143,143,,,,,143,,143,143,,143',
'143,,,143,143,143,143,143,143,143,119,,119,,119,119,,,,,,,,,,,,,,143',
',,,,,,,,,,,,,,,,119,,,,,,,,,119,119,119,,119,,,,119,119,,,,119,,119',
'119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,,119,119',
'119,119,119,119,119,119,119,119,119,,119,119,,119,119,119,,,,,119,,119',
'119,,119,119,,,119,119,119,119,119,119,119,694,,694,,694,694,,,,,,,',
',,,,,,119,,,,,,,,,,,,,,,,,694,,,,,,,,,694,694,694,,694,,,,694,694,,',
',694,,694,694,694,694,694,694,694,,,,,,694,694,694,694,694,694,694,',
',,694,694,694,694,694,694,694,694,694,694,694,,694,694,,694,694,694',
',,,,694,,694,694,,694,694,,,694,694,694,694,694,694,694,147,,147,,147',
'147,,,,,,,,,,,,,,694,,,,,,,,,,,,,,,,,147,,,,,,,,,147,147,147,,147,,',
',147,147,,,,147,,147,147,147,147,147,147,147,,,,,,147,147,147,147,147',
'147,147,,,,147,147,147,147,147,147,147,147,147,147,147,,147,147,,147',
'147,147,,,,,147,,147,147,,147,147,,,147,147,147,147,147,147,147,701',
',701,,701,701,,,,,,,,,,,,,,147,,,,,,,,,,,,,,,,,701,,,,,,,,,701,701,701',
',701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701,701,701',
'701,701,701,701,,,,701,701,701,701,701,701,701,701,701,701,701,,701',
'701,,701,701,701,,,,,701,,701,701,,701,701,,,701,701,701,701,701,701',
'701,702,,702,,702,702,,,,,,,,,,,,,,701,,,,,,,,,,,,,,,,,702,,,,,,,,,702',
'702,702,,702,,,,702,702,,,,702,,702,702,702,702,702,702,702,,,,,,702',
'702,702,702,702,702,702,,,,702,702,702,702,702,702,702,702,702,702,702',
',702,702,,702,702,702,,,,,702,,702,702,,702,702,,,702,702,702,702,702',
'702,702,664,,664,,664,664,,,,,,,,,,,,,,702,,,,,,,,,,,,,,,,,664,,,,,',
',,,664,664,664,,664,,,,664,664,,,,664,,664,664,664,664,664,664,664,',
',,,,664,664,664,664,664,664,664,,,,664,664,664,664,664,664,664,664,664',
'664,664,,664,664,,664,664,664,,,,,664,,664,664,,664,664,,,664,664,664',
'664,664,664,664,648,,648,,648,648,,,,,,,,,,,,,,664,,,,,,,,,,,,,,,,,648',
',,,,,,,,648,648,648,,648,,,,648,648,,,,648,,648,648,648,648,648,648',
'648,,,,,,648,648,648,648,648,648,648,,,,648,648,648,648,648,648,648',
'648,648,648,648,,648,648,,648,648,648,,,,,648,,648,648,,648,648,648',
',648,648,648,648,648,648,648,638,,638,,638,638,,,,,,,,,,,,,,648,,,,',
',,,,,,,,,,,,638,,,,,,,,,638,638,638,,638,,,,638,638,,,,638,,638,638',
'638,638,638,638,638,,,,,,638,638,638,638,638,638,638,,,,638,638,638',
'638,638,638,638,638,638,638,638,,638,638,,638,638,638,,,,,638,,638,638',
',638,638,,,638,638,638,638,638,638,638,614,,614,,614,614,,,,,,,,,,,',
',,638,,,,,,,,,,,,,,,,,614,,,,,,,,,614,614,614,,614,,,,614,614,,,,614',
',614,614,614,614,614,614,614,,,,,,614,614,614,614,614,614,614,,,,614',
'614,614,614,614,614,614,614,614,614,614,614,614,614,,614,614,614,,,',
',614,,614,614,,614,614,,,614,614,614,614,614,614,614,611,,611,,611,611',
',,,,,,,,,,,,,614,,,,,,,,,,,,,,,,,611,,,,,,,,,611,611,611,,611,,,,611',
'611,,,,611,,611,611,611,611,611,611,611,,,,,,611,611,611,611,611,611',
'611,,,,611,611,611,611,611,611,611,611,611,611,611,611,611,611,,611',
'611,611,,,,,611,,611,611,,611,611,611,,611,611,611,611,611,611,611,608',
',608,,608,608,,,,,,,,,,,,,,611,,,,,,,,,,,,,,,,,608,,,,,,,,,608,608,608',
',608,,,,608,608,,,,608,,608,608,608,608,608,608,608,,,,,,608,608,608',
'608,608,608,608,,,,608,608,608,608,608,608,608,608,608,608,608,,608',
'608,,608,608,608,,,,,608,,608,608,,608,608,608,,608,608,608,608,608',
'608,608,599,,599,,599,599,,,,,,,,,,,,,,608,,,,,,,,,,,,,,,,,599,,,,,',
',,,599,599,599,,599,,,,599,599,,,,599,,599,599,599,599,599,599,599,',
',,,,599,599,599,599,599,599,599,,,,599,599,599,599,599,599,599,599,599',
'599,599,,599,599,,599,599,599,,,,,599,,599,599,,599,599,,,599,599,599',
'599,599,599,599,15,,15,,15,15,,,,,,,,,,,,,,599,,,,,,,,,,,,,,,,,15,,',
',,,,,,15,15,15,15,15,,,,15,15,,,,15,,15,15,15,15,15,15,15,,,,,,15,15',
'15,15,15,15,15,15,,15,15,15,15,15,15,15,15,15,15,15,15,,15,15,,15,15',
'15,,,,,15,,15,15,,15,15,15,,15,15,15,15,15,15,15,591,,591,,591,591,',
',,,,,,,,,,,,15,,,,,,,,,,,,,,,,,591,,,,,,,,,591,591,591,,591,,,,591,591',
',,,591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591,591,591',
',,,591,591,591,591,591,591,591,591,591,591,591,591,591,591,,591,591',
'591,,,,,591,,591,591,,591,591,591,591,591,591,591,591,591,591,591,21',
',21,,21,21,,,,,,,,591,,,,,,591,,,,,,,,,,,,,,,,,21,,,,,,,,,21,21,21,',
'21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,,21,21,21,21,21,21,21,,',
',21,21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,,,,,21,,21,21,,21',
'21,,,21,21,21,21,21,21,21,26,,26,,26,26,,,,,,,,,,,,,,21,,,,,,,,,,,,',
',,,,26,,,,,,,,,26,26,26,,26,,,,26,26,,,,26,,26,26,26,26,26,26,26,,,',
',,26,26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26,26,,26,26,,26',
'26,26,,,,,26,,26,26,,26,26,,,26,26,26,26,26,26,26,257,,257,,257,257',
',,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,257,,,,,,,,,257,257,257,,257,,,,257',
'257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257',
'257,,,,257,257,257,257,257,257,257,257,257,257,257,257,257,257,,257',
'257,257,,,,,257,,257,257,,257,257,257,257,257,257,257,257,257,257,257',
'129,,129,,129,129,,,,,,,,257,,,,,,257,,,,,,,,,,,,,,,,,129,,,,,,,,,129',
'129,129,,129,,,,129,129,,,,129,,129,129,129,129,129,129,129,,,,,,129',
'129,129,129,129,129,129,,,,129,129,129,129,129,129,129,129,129,129,129',
'129,129,129,,129,129,129,,,,,129,,129,129,,129,129,129,129,129,129,129',
'129,129,129,129,30,,30,,30,30,,,,,,,,129,,,,,,129,,,,,,,,,,,,,,,,,30',
',,,,,,,,30,30,30,,30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30',
'30,30,30,30,30,,,,30,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30',
',,,,30,,30,30,,30,30,,,30,30,30,30,30,30,30,579,,579,,579,579,,,,,,',
',,,,,,,30,,,,,,,,,,,,,,,,,579,,,,,,,,,579,579,579,,579,,,,579,579,,',
',579,,579,579,579,579,579,579,579,,,,,,579,579,579,579,579,579,579,',
',,579,579,579,579,579,579,579,579,579,579,579,,579,579,,579,579,579',
',,,,579,,579,579,,579,579,,,579,579,579,579,579,579,579,576,,576,,576',
'576,,,,,,,,,,,,,,579,,,,,,,,,,,,,,,,,576,,,,,,,,,576,576,576,,576,,',
',576,576,,,,576,,576,576,576,576,576,576,576,,,,,,576,576,576,576,576',
'576,576,,,,576,576,576,576,576,576,576,576,576,576,576,576,576,576,',
'576,576,576,,,,,576,,576,576,,576,576,576,576,576,576,576,576,576,576',
'576,45,,45,,45,45,,,,,,,,576,,,,,,576,,,,,,,,,,,,,,,,,45,,,,,,,,,45',
'45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,,45,45,45,45,45,45',
'45,,,,45,45,45,45,45,45,45,45,45,45,45,,45,45,,45,45,45,,,,,45,,45,45',
',45,45,,,45,45,45,45,45,45,45,359,,359,,359,359,,,,,,,,,,,,,,45,,,,',
',,,,,,,,,,,,359,,,,,,,,,359,359,359,359,359,,,,359,359,,,,359,,359,359',
'359,359,359,359,359,,,,,,359,359,359,359,359,359,359,359,,359,359,359',
'359,359,359,359,359,359,359,359,359,,359,359,,359,359,359,,,,,359,,359',
'359,,359,359,359,,359,359,359,359,359,359,359,548,,548,,548,548,,,,',
',,,,,,,,,359,,,,,,,,,,,,,,,,,548,,,,,,,,,548,548,548,,548,,,,548,548',
',,,548,,548,548,548,548,548,548,548,,,,,,548,548,548,548,548,548,548',
',,,548,548,548,548,548,548,548,548,548,548,548,,548,548,,548,548,548',
',,,,548,,548,548,,548,548,,,548,548,548,548,548,548,548,546,,546,,546',
'546,,,,,,,,,,,,,,548,,,,,,,,,,,,,,,,,546,,,,,,,,,546,546,546,,546,,',
',546,546,,,,546,,546,546,546,546,546,546,546,,,,,,546,546,546,546,546',
'546,546,,,,546,546,546,546,546,546,546,546,546,546,546,,546,546,,546',
'546,546,,,,,546,,546,546,,546,546,,,546,546,546,546,546,546,546,762',
',762,,762,762,,,,,,,,,,,,,,546,,,,,,,,,,,,,,,,,762,,,,,,,,,762,762,762',
',762,,,,762,762,,,,762,,762,762,762,762,762,762,762,,,,,,762,762,762',
'762,762,762,762,,,,762,762,762,762,762,762,762,762,762,762,762,,762',
'762,,762,762,762,,,,,762,,762,762,,762,762,,,762,762,762,762,762,762',
'762,543,,543,,543,543,,,,,,,,,,,,,,762,,,,,,,,,,,,,,,,,543,,,,,,,,,543',
'543,543,,543,,,,543,543,,,,543,,543,543,543,543,543,543,543,,,,,,543',
'543,543,543,543,543,543,,,,543,543,543,543,543,543,543,543,543,543,543',
',543,543,,543,543,543,,,,,543,,543,543,,543,543,543,,543,543,543,543',
'543,543,543,50,,50,,50,50,,,,,,,,,,,,,,543,,,,,,,,,,,,,,,,,50,,,,,,',
',,50,50,50,,50,,,,50,50,,,,50,,50,50,50,50,50,50,50,,,,,,50,50,50,50',
'50,50,50,,,,50,50,50,50,50,50,50,50,50,50,50,,50,50,,50,50,50,,,,,50',
',50,50,,50,50,,,50,50,50,50,50,50,50,526,,526,,526,526,,,,,,,,,,,,,',
'50,,,,,,,,,,,,,,,,,526,,,,,,,,,526,526,526,,526,,,,526,526,,,,526,,526',
'526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,,526,526',
'526,526,526,526,526,526,526,526,526,,526,526,,526,526,526,,,,,526,,526',
'526,,526,526,,,526,526,526,526,526,526,526,525,,525,,525,525,,,,,,,',
',,,,,,526,,,,,,,,,,,,,,,,,525,,,,,,,,,525,525,525,,525,,,,525,525,,',
',525,,525,525,525,525,525,525,525,,,,,,525,525,525,525,525,525,525,',
',,525,525,525,525,525,525,525,525,525,525,525,,525,525,,525,525,525',
',,,,525,,525,525,,525,525,,,525,525,525,525,525,525,525,774,,774,,774',
'774,,,,,,,,,,,,,,525,,,,,,,,,,,,,,,,,774,,,,,,,,,774,774,774,,774,,',
',774,774,,,,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774',
'774,774,,,,774,774,774,774,774,774,774,774,774,774,774,,774,774,,774',
'774,774,,,,,774,,774,774,,774,774,,,774,774,774,774,774,774,774,776',
',776,,776,776,,,,,,,,,,,,,,774,,,,,,,,,,,,,,,,,776,,,,,,,,,776,776,776',
',776,,,,776,776,,,,776,,776,776,776,776,776,776,776,,,,,,776,776,776',
'776,776,776,776,,,,776,776,776,776,776,776,776,776,776,776,776,,776',
'776,,776,776,776,,,,,776,,776,776,,776,776,,,776,776,776,776,776,776',
'776,505,,505,,505,505,,,,,,,,,,,,,,776,,,,,,,,,,,,,,,,,505,,,,,,,,,505',
'505,505,,505,,,,505,505,,,,505,,505,505,505,505,505,505,505,,,,,,505',
'505,505,505,505,505,505,,,,505,505,505,505,505,505,505,505,505,505,505',
'505,505,505,,505,505,505,,,,,505,,505,505,,505,505,505,505,505,505,505',
'505,505,505,505,53,,53,,53,53,,,,,,,,505,,,,,,505,,,,,,,,,,,,,,,,,53',
',,,,,,,,53,53,53,,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,,53,53',
'53,53,53,53,53,,,,53,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53',
',,,,53,,53,53,,53,53,,,53,53,53,53,53,53,53,56,,56,,56,56,,,,,,,,,,',
',,,53,,,,,,,,,,,,,,,,,56,,,,,,,,,56,56,56,,56,,,,56,56,,,,56,,56,56',
'56,56,56,56,56,,,,,,56,56,56,56,56,56,56,,,,56,56,56,56,56,56,56,56',
'56,56,56,56,56,56,,56,56,56,,,,,56,,56,56,,56,56,56,56,56,56,56,56,56',
'56,56,57,,57,,57,57,,,,,,,,56,,,,,,56,,,,,,,,,,,,,,,,,57,,,,,,,,,57',
'57,57,,57,,,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,,57,57,57,57,57,57',
'57,,,,57,57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57,,,,,57,,57,57',
',57,57,,,57,57,57,57,57,57,57,777,,777,,777,777,,,,,,,,,,,,,,57,,,,',
',,,,,,,,,,,,777,,,,,,,,,777,777,777,,777,,,,777,777,,,,777,,777,777',
'777,777,777,777,777,,,,,,777,777,777,777,777,777,777,,,,777,777,777',
'777,777,777,777,777,777,777,777,,777,777,,777,777,777,,,,,777,,777,777',
',777,777,,,777,777,777,777,777,777,777,63,,63,,63,63,,,,,,,,,,,,,,777',
',,,,,,,,,,,,,,,,63,,,,,,,,,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63',
'63,63,63,,,,,,63,63,63,63,63,63,63,,,,63,63,63,63,63,63,63,63,63,63',
'63,,63,63,,63,63,63,,,,,63,,63,63,,63,63,,,63,63,63,63,63,63,63,779',
',779,,779,779,,,,,,,,,,,,,,63,,,,,,,,,,,,,,,,,779,,,,,,,,,779,779,779',
',779,,,,779,779,,,,779,,779,779,779,779,779,779,779,,,,,,779,779,779',
'779,779,779,779,,,,779,779,779,779,779,779,779,779,779,779,779,,779',
'779,,779,779,779,,,,,779,,779,779,,779,779,,,779,779,779,779,779,779',
'779,65,,65,,65,65,,,,,,,,,,,,,,779,,,,,,,,,,,,,,,,,65,,,,,,,,,65,65',
'65,,65,,,,65,65,,,,65,,65,65,65,65,65,65,65,,,,,,65,65,65,65,65,65,65',
',,,65,65,65,65,65,65,65,65,65,65,65,65,65,65,,65,65,65,,,,,65,,65,65',
',65,65,65,65,65,65,65,65,65,65,65,292,,292,,292,292,,,,,,,,65,,,,,,65',
',,,,,,,,,,,,,,,,292,,,,,,,,,292,292,292,,292,,,,292,292,,,,292,,292',
'292,292,292,292,292,292,,,,,,292,292,292,292,292,292,292,,,,292,292',
'292,292,292,292,292,292,292,292,292,,292,292,,292,292,292,,,,,292,,292',
'292,,292,292,,,292,292,292,292,292,292,292,924,,924,,924,924,,,,,,,',
',,,,,,292,,,,,,,,,,,,,,,,,924,,,,,,,,,924,924,924,,924,,,,924,924,,',
',924,,924,924,924,924,924,924,924,,,,,,924,924,924,924,924,924,924,',
',,924,924,924,924,924,924,924,924,924,924,924,924,924,924,,924,924,924',
',,,,924,,924,924,,924,924,924,924,924,924,924,924,924,924,924,860,,860',
',860,860,,,,,,,,924,,,,,,924,,,,,,,,,,,,,,,,,860,,,,,,,,,860,860,860',
',860,,,,860,860,,,,860,,860,860,860,860,860,860,860,,,,,,860,860,860',
'860,860,860,860,,,,860,860,860,860,860,860,860,860,860,860,860,,860',
'860,,860,860,860,,,,,860,,860,860,,860,860,,,860,860,860,860,860,860',
'860,87,,87,,87,87,,,,,,,,,,,,,,860,,,,,,,,,,,,,,,,,87,,,,,,,,,87,87',
'87,,87,,,,87,87,,,,87,,87,87,87,87,87,87,87,,,,,,87,87,87,87,87,87,87',
',,,87,87,87,87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,87,,87,87,',
'87,87,,,87,87,87,87,87,87,87,449,,449,,449,449,,,,,,,,,,,,,,87,,,,,',
',,,,,,,,,,,449,,,,,,,,,449,449,449,,449,,,,449,449,,,,449,,449,449,449',
'449,449,449,449,,,,,,449,449,449,449,449,449,449,,,,449,449,449,449',
'449,449,449,449,449,449,449,,449,449,,449,449,449,,,,,449,,449,449,',
'449,449,,,449,449,449,449,449,449,449,96,,96,,96,96,,,,,,,,,,,,,,449',
',,,,,,,,,,,,,,,,96,,,,,,,,,96,96,96,,96,,,,96,96,,,,96,,96,96,96,96',
'96,96,96,,,,,,96,96,96,96,96,96,96,,,,96,96,96,96,96,96,96,96,96,96',
'96,96,96,96,,96,96,96,,,,,96,,96,96,,96,96,96,,96,96,96,96,96,96,96',
'434,,434,,434,434,,,,,,,,,,,,,,96,,,,,,,,,,,,,,,,,434,,,,,,,,,434,434',
'434,,434,,,,434,434,,,,434,,434,434,434,434,434,434,434,,,,,,434,434',
'434,434,434,434,434,,,,434,434,434,434,434,434,434,434,434,434,434,',
'434,434,,434,434,434,,,,,434,,434,434,,434,434,,,434,434,434,434,434',
'434,434,428,,428,,428,428,,,,,,,,,,,,,,434,,,,,,,,,,,,,,,,,428,,,,,',
',,,428,428,428,,428,,,,428,428,,,,428,,428,428,428,428,428,428,428,',
',,,,428,428,428,428,428,428,428,,,,428,428,428,428,428,428,428,428,428',
'428,428,,428,428,,428,428,428,,,,,428,,428,428,,428,428,,,428,428,428',
'428,428,428,428,423,,423,,423,423,,,,,,,,,,,,,,428,,,,,,,,,,,,,,,,,423',
',,,,,,,,423,423,423,,423,,,,423,423,,,,423,,423,423,423,423,423,423',
'423,,,,,,423,423,423,423,423,423,423,,,,423,423,423,423,423,423,423',
'423,423,423,423,,423,423,,423,423,423,,,,,423,,423,423,,423,423,,,423',
'423,423,423,423,423,423,422,,422,,422,422,,,,,,,,,,,,,,423,,,,,,,,,',
',,,,,,,422,,,,,,,,,422,422,422,,422,,,,422,422,,,,422,,422,422,422,422',
'422,422,422,,,,,,422,422,422,422,422,422,422,,,,422,422,422,422,422',
'422,422,422,422,422,422,,422,422,,422,422,422,,,,,422,,422,422,,422',
'422,,,422,422,422,422,422,422,422,304,,304,,304,304,,,,,,,,,,,,,,422',
',,,,,,,,,,,,,,,,304,,,,,,,,,304,304,304,,304,,,,304,304,,,,304,,304',
'304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,,304,304',
'304,304,304,304,304,304,304,304,304,,304,304,,304,304,304,,,,,304,,304',
'304,,304,304,,,304,304,304,304,304,304,304,305,,305,,305,305,,,,,,,',
',,,,,,304,,,,,,,,,,,,,,,,,305,,,,,,,,,305,305,305,305,305,,,,305,305',
',,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305',
'305,,305,305,305,305,305,305,305,305,305,305,305,305,,305,305,,305,305',
'305,,,,,305,,305,305,,305,305,305,,305,305,305,305,305,305,305,306,',
'306,,306,306,,,,,,,,,,,,,,305,,,,,,,,,,,,,,,,,306,,,,,,,,,306,306,306',
',306,,,,306,306,,,,306,,306,306,306,306,306,306,306,,,,,,306,306,306',
'306,306,306,306,,,,306,306,306,306,306,306,306,306,306,306,306,,306',
'306,,306,306,306,,,,,306,,306,306,,306,306,,,306,306,306,306,306,306',
'306,307,,307,,307,307,,,,,,,,,,,,,,306,,,,,,,,,,,,,,,,,307,,,,,,,,,307',
'307,307,,307,,,,307,307,,,,307,,307,307,307,307,307,307,307,,,,,,307',
'307,307,307,307,307,307,,,,307,307,307,307,307,307,307,307,307,307,307',
',307,307,,307,307,307,,,,,307,,307,307,,307,307,,,307,307,307,307,307',
'307,307,308,,308,,308,308,,,,,,,,,,,,,,307,,,,,,,,,,,,,,,,,308,,,,,',
',,,308,308,308,,308,,,,308,308,,,,308,,308,308,308,308,308,308,308,',
',,,,308,308,308,308,308,308,308,,,,308,308,308,308,308,308,308,308,308',
'308,308,,308,308,,308,308,308,,,,,308,,308,308,,308,308,,,308,308,308',
'308,308,308,308,420,,420,,420,420,,,,,,,,,,,,,,308,,,,,,,,,,,,,,,,,420',
',,,,,,,,420,420,420,,420,,,,420,420,,,,420,,420,420,420,420,420,420',
'420,,,,,,420,420,420,420,420,420,420,,,,420,420,420,420,420,420,420',
'420,420,420,420,420,420,420,,420,420,420,,,,,420,,420,420,,420,420,',
'420,420,420,420,420,420,420,420,100,,100,,100,100,,,,,,,,420,,,,,,420',
',,,,,,,,,,,,,,,,100,,,,,,,,,100,100,100,,100,,,,100,100,,,,100,,100',
'100,100,100,100,100,100,,,,,,100,100,100,100,100,100,100,,,,100,100',
'100,100,100,100,100,100,100,100,100,100,100,100,,100,100,100,,,,,100',
',100,100,,100,100,100,100,100,100,100,100,100,100,100,312,,312,,312',
'312,,,,,,,,100,,,,,,100,,,,,,,,,,,,,,,,,312,,,,,,,,,312,312,312,,312',
',,,312,312,,,,312,,312,312,312,312,312,312,312,,,,,,312,312,312,312',
'312,312,312,,,,312,312,312,312,312,312,312,312,312,312,312,,312,312',
',312,312,312,,,,,312,,312,312,,312,312,,,312,312,312,312,312,312,312',
'313,,313,,313,313,,,,,,,,,,,,,,312,,,,,,,,,,,,,,,,,313,,,,,,,,,313,313',
'313,,313,,,,313,313,,,,313,,313,313,313,313,313,313,313,,,,,,313,313',
'313,313,313,313,313,,,,313,313,313,313,313,313,313,313,313,313,313,',
'313,313,,313,313,313,,,,,313,,313,313,,313,313,,,313,313,313,313,313',
'313,313,417,,417,,417,417,,,,,,,,,,,,,,313,,,,,,,,,,,,,,,,,417,,,,,',
',,,417,417,417,,417,,,,417,417,,,,417,,417,417,417,417,417,417,417,',
',,,,417,417,417,417,417,417,417,,,,417,417,417,417,417,417,417,417,417',
'417,417,417,417,417,,417,417,417,,,,,417,,417,417,,417,417,417,417,417',
'417,417,417,417,417,417,413,,413,,413,413,,,,,,,,417,,,,,,417,,,,,,',
',,,,,,,,,,413,,,,,,,,,413,413,413,,413,,,,413,413,,,,413,,413,413,413',
'413,413,413,413,,,,,,413,413,413,413,413,413,413,,,,413,413,413,413',
'413,413,413,413,413,413,413,413,413,413,,413,413,413,,,,,413,,413,413',
',413,413,413,413,413,413,413,413,413,413,413,412,,412,,412,412,,,,,',
',,413,,,,,,413,,,,,,,,,,,,,,,,,412,,,,,,,,,412,412,412,,412,,,,412,412',
',,,412,,412,412,412,412,412,412,412,,,,,,412,412,412,412,412,412,412',
',,,412,412,412,412,412,412,412,412,412,412,412,,412,412,,412,412,412',
',,,,412,,412,412,,412,412,,,412,412,412,412,412,412,412,103,,103,,103',
'103,,,,,,,,,,,,,,412,,,,,,,,,,,,,,,,,103,,,,,,,,,103,103,103,,103,,',
',103,103,,,,103,,103,103,103,103,103,103,103,,,,,,103,103,103,103,103',
'103,103,,,,103,103,103,103,103,103,103,103,103,103,103,103,103,103,',
'103,103,103,,,,,103,,103,103,,103,103,,,103,103,103,103,103,103,103',
'118,,118,,118,118,,,,,,,,,,,,,,103,,,,,,,,,,,,,,,,,118,,,,,,,,,118,118',
'118,,118,,,,118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118',
'118,118,118,118,118,,,,118,118,118,118,118,118,118,118,118,118,118,',
'118,118,,118,118,118,,,,,118,,118,118,,118,118,,,118,118,118,118,118',
'118,118,400,,400,,400,400,,,,,,,,,,,,,,118,,,,,,,,,,,,,,,,,400,,,,,',
',,,400,400,400,,400,,,,400,400,,,,400,,400,400,400,400,400,400,400,',
',,,,400,400,400,400,400,400,400,,,,400,400,400,400,400,400,400,400,400',
'400,400,,400,400,,400,400,400,,,,,400,,400,400,,400,400,,,400,400,400',
'400,400,400,400,321,,321,,321,321,,,,,,,,,,,,,,400,,,,,,,,,,,,,,,,,321',
',,,,,,,,321,321,321,,321,,,,321,321,,,,321,,321,321,321,321,321,321',
'321,,,,,,321,321,321,321,321,321,321,,,,321,321,321,321,321,321,321',
'321,321,321,321,,321,321,,321,321,321,,,,,321,,321,321,,321,321,,,321',
'321,321,321,321,321,321,322,,322,,322,322,,,,,,,,,,,,,,321,,,,,,,,,',
',,,,,,,322,,,,,,,,,322,322,322,,322,,,,322,322,,,,322,,322,322,322,322',
'322,322,322,,,,,,322,322,322,322,322,322,322,,,,322,322,322,322,322',
'322,322,322,322,322,322,,322,322,,322,322,322,,,,,322,,322,322,,322',
'322,,,322,322,322,322,322,322,322,323,,323,,323,323,,,,,,,,,,,,,,322',
',,,,,,,,,,,,,,,,323,,,,,,,,,323,323,323,,323,,,,323,323,,,,323,,323',
'323,323,323,323,323,323,,,,,,323,323,323,323,323,323,323,,,,323,323',
'323,323,323,323,323,323,323,323,323,,323,323,,323,323,323,,,,,323,,323',
'323,,323,323,,,323,323,323,323,323,323,323,324,,324,,324,324,,,,,,,',
',,,,,,323,,,,,,,,,,,,,,,,,324,,,,,,,,,324,324,324,,324,,,,324,324,,',
',324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324,324,',
',,324,324,324,324,324,324,324,324,324,324,324,,324,324,,324,324,324',
',,,,324,,324,324,,324,324,,,324,324,324,324,324,324,324,325,,325,,325',
'325,,,,,,,,,,,,,,324,,,,,,,,,,,,,,,,,325,,,,,,,,,325,325,325,,325,,',
',325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325,325,325',
'325,325,,,,325,325,325,325,325,325,325,325,325,325,325,,325,325,,325',
'325,325,,,,,325,,325,325,,325,325,,,325,325,325,325,325,325,325,326',
',326,,326,326,,,,,,,,,,,,,,325,,,,,,,,,,,,,,,,,326,,,,,,,,,326,326,326',
',326,,,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326,326,326',
'326,326,326,326,,,,326,326,326,326,326,326,326,326,326,326,326,,326',
'326,,326,326,326,,,,,326,,326,326,,326,326,,,326,326,326,326,326,326',
'326,327,,327,,327,327,,,,,,,,,,,,,,326,,,,,,,,,,,,,,,,,327,,,,,,,,,327',
'327,327,,327,,,,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327',
'327,327,327,327,327,327,,,,327,327,327,327,327,327,327,327,327,327,327',
',327,327,,327,327,327,,,,,327,,327,327,,327,327,,,327,327,327,327,327',
'327,327,328,,328,,328,328,,,,,,,,,,,,,,327,,,,,,,,,,,,,,,,,328,,,,,',
',,,328,328,328,,328,,,,328,328,,,,328,,328,328,328,328,328,328,328,',
',,,,328,328,328,328,328,328,328,,,,328,328,328,328,328,328,328,328,328',
'328,328,,328,328,,328,328,328,,,,,328,,328,328,,328,328,,,328,328,328',
'328,328,328,328,329,,329,,329,329,,,,,,,,,,,,,,328,,,,,,,,,,,,,,,,,329',
',,,,,,,,329,329,329,,329,,,,329,329,,,,329,,329,329,329,329,329,329',
'329,,,,,,329,329,329,329,329,329,329,,,,329,329,329,329,329,329,329',
'329,329,329,329,,329,329,,329,329,329,,,,,329,,329,329,,329,329,,,329',
'329,329,329,329,329,329,330,,330,,330,330,,,,,,,,,,,,,,329,,,,,,,,,',
',,,,,,,330,,,,,,,,,330,330,330,,330,,,,330,330,,,,330,,330,330,330,330',
'330,330,330,,,,,,330,330,330,330,330,330,330,,,,330,330,330,330,330',
'330,330,330,330,330,330,,330,330,,330,330,330,,,,,330,,330,330,,330',
'330,,,330,330,330,330,330,330,330,331,,331,,331,331,,,,,,,,,,,,,,330',
',,,,,,,,,,,,,,,,331,,,,,,,,,331,331,331,,331,,,,331,331,,,,331,,331',
'331,331,331,331,331,331,,,,,,331,331,331,331,331,331,331,,,,331,331',
'331,331,331,331,331,331,331,331,331,,331,331,,331,331,331,,,,,331,,331',
'331,,331,331,,,331,331,331,331,331,331,331,332,,332,,332,332,,,,,,,',
',,,,,,331,,,,,,,,,,,,,,,,,332,,,,,,,,,332,332,332,,332,,,,332,332,,',
',332,,332,332,332,332,332,332,332,,,,,,332,332,332,332,332,332,332,',
',,332,332,332,332,332,332,332,332,332,332,332,,332,332,,332,332,332',
',,,,332,,332,332,,332,332,,,332,332,332,332,332,332,332,333,,333,,333',
'333,,,,,,,,,,,,,,332,,,,,,,,,,,,,,,,,333,,,,,,,,,333,333,333,,333,,',
',333,333,,,,333,,333,333,333,333,333,333,333,,,,,,333,333,333,333,333',
'333,333,,,,333,333,333,333,333,333,333,333,333,333,333,,333,333,,333',
'333,333,,,,,333,,333,333,,333,333,,,333,333,333,333,333,333,333,334',
',334,,334,334,,,,,,,,,,,,,,333,,,,,,,,,,,,,,,,,334,,,,,,,,,334,334,334',
',334,,,,334,334,,,,334,,334,334,334,334,334,334,334,,,,,,334,334,334',
'334,334,334,334,,,,334,334,334,334,334,334,334,334,334,334,334,,334',
'334,,334,334,334,,,,,334,,334,334,,334,334,,,334,334,334,334,334,334',
'334,335,,335,,335,335,,,,,,,,,,,,,,334,,,,,,,,,,,,,,,,,335,,,,,,,,,335',
'335,335,,335,,,,335,335,,,,335,,335,335,335,335,335,335,335,,,,,,335',
'335,335,335,335,335,335,,,,335,335,335,335,335,335,335,335,335,335,335',
',335,335,,335,335,335,,,,,335,,335,335,,335,335,,,335,335,335,335,335',
'335,335,336,,336,,336,336,,,,,,,,,,,,,,335,,,,,,,,,,,,,,,,,336,,,,,',
',,,336,336,336,,336,,,,336,336,,,,336,,336,336,336,336,336,336,336,',
',,,,336,336,336,336,336,336,336,,,,336,336,336,336,336,336,336,336,336',
'336,336,,336,336,,336,336,336,,,,,336,,336,336,,336,336,,,336,336,336',
'336,336,336,336,337,,337,,337,337,,,,,,,,,,,,,,336,,,,,,,,,,,,,,,,,337',
',,,,,,,,337,337,337,,337,,,,337,337,,,,337,,337,337,337,337,337,337',
'337,,,,,,337,337,337,337,337,337,337,,,,337,337,337,337,337,337,337',
'337,337,337,337,,337,337,,337,337,337,,,,,337,,337,337,,337,337,,,337',
'337,337,337,337,337,337,338,,338,,338,338,,,,,,,,,,,,,,337,,,,,,,,,',
',,,,,,,338,,,,,,,,,338,338,338,,338,,,,338,338,,,,338,,338,338,338,338',
'338,338,338,,,,,,338,338,338,338,338,338,338,,,,338,338,338,338,338',
'338,338,338,338,338,338,,338,338,,338,338,338,,,,,338,,338,338,,338',
'338,,,338,338,338,338,338,338,338,339,,339,,339,339,,,,,,,,,,,,,,338',
',,,,,,,,,,,,,,,,339,,,,,,,,,339,339,339,,339,,,,339,339,,,,339,,339',
'339,339,339,339,339,339,,,,,,339,339,339,339,339,339,339,,,,339,339',
'339,339,339,339,339,339,339,339,339,,339,339,,339,339,339,,,,,339,,339',
'339,,339,339,,,339,339,339,339,339,339,339,340,,340,,340,340,,,,,,,',
',,,,,,339,,,,,,,,,,,,,,,,,340,,,,,,,,,340,340,340,,340,,,,340,340,,',
',340,,340,340,340,340,340,340,340,,,,,,340,340,340,340,340,340,340,',
',,340,340,340,340,340,340,340,340,340,340,340,,340,340,,340,340,340',
',,,,340,,340,340,,340,340,,,340,340,340,340,340,340,340,341,,341,,341',
'341,,,,,,,,,,,,,,340,,,,,,,,,,,,,,,,,341,,,,,,,,,341,341,341,,341,,',
',341,341,,,,341,,341,341,341,341,341,341,341,,,,,,341,341,341,341,341',
'341,341,,,,341,341,341,341,341,341,341,341,341,341,341,,341,341,,341',
'341,341,,,,,341,,341,341,,341,341,,,341,341,341,341,341,341,341,342',
',342,,342,342,,,,,,,,,,,,,,341,,,,,,,,,,,,,,,,,342,,,,,,,,,342,342,342',
',342,,,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342',
'342,342,342,342,,,,342,342,342,342,342,342,342,342,342,342,342,,342',
'342,,342,342,342,,,,,342,,342,342,,342,342,,,342,342,342,342,342,342',
'342,343,,343,,343,343,,,,,,,,,,,,,,342,,,,,,,,,,,,,,,,,343,,,,,,,,,343',
'343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343,343,,,,,,343',
'343,343,343,343,343,343,,,,343,343,343,343,343,343,343,343,343,343,343',
',343,343,,343,343,343,,,,,343,,343,343,,343,343,,,343,343,343,343,343',
'343,343,344,,344,,344,344,,,,,,,,,,,,,,343,,,,,,,,,,,,,,,,,344,,,,,',
',,,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344,344,344,',
',,,,344,344,344,344,344,344,344,,,,344,344,344,344,344,344,344,344,344',
'344,344,,344,344,,344,344,344,,,,,344,,344,344,,344,344,,,344,344,344',
'344,344,344,344,345,,345,,345,345,,,,,,,,,,,,,,344,,,,,,,,,,,,,,,,,345',
',,,,,,,,345,345,345,,345,,,,345,345,,,,345,,345,345,345,345,345,345',
'345,,,,,,345,345,345,345,345,345,345,,,,345,345,345,345,345,345,345',
'345,345,345,345,,345,345,,345,345,345,,,,,345,,345,345,,345,345,,,345',
'345,345,345,345,345,345,346,,346,,346,346,,,,,,,,,,,,,,345,,,,,,,,,',
',,,,,,,346,,,,,,,,,346,346,346,,346,,,,346,346,,,,346,,346,346,346,346',
'346,346,346,,,,,,346,346,346,346,346,346,346,,,,346,346,346,346,346',
'346,346,346,346,346,346,,346,346,,346,346,346,,,,,346,,346,346,,346',
'346,,,346,346,346,346,346,346,346,820,,820,,820,820,,,,,,,,,,,,,,346',
',,,,,,,,,,,,,,,,820,,,,,,,,,820,820,820,,820,,,,820,820,,,,820,,820',
'820,820,820,820,820,820,,,,,,820,820,820,820,820,820,820,,,,820,820',
'820,820,820,820,820,820,820,820,820,,820,820,,820,820,820,,,,,820,,820',
'820,,820,820,,,820,820,820,820,820,820,820,387,,387,,387,387,,,,,,,',
',,,,,,820,,,,,,,,,,,,,,,,,387,,,,,,,,,387,387,387,,387,,,,387,387,,',
',387,,387,387,387,387,387,387,387,,,,,,387,387,387,387,387,387,387,',
',,387,387,387,387,387,387,387,387,387,387,387,,387,387,,387,387,387',
',,,,387,,387,387,,387,387,387,,387,387,387,387,387,387,387,140,,140',
',140,140,,,,,,,,,,,,,,387,,,,,,,,,,,,,,,,,140,,,,,,,,,140,140,140,,140',
',,,140,140,,,,140,,140,140,140,140,140,140,140,,,,,,140,140,140,140',
'140,140,140,,,,140,140,140,140,140,140,140,140,140,140,140,,140,140',
',140,140,140,,,,,140,,140,140,,140,140,140,,140,140,140,140,140,140',
'140,112,,112,,112,112,,,,,,,,,,,,,,140,,,,,,,,,,,,,,,,,112,,,,,,,,,112',
'112,112,,112,,,,112,112,,,,112,,112,112,112,112,112,112,112,,,,,,112',
'112,112,112,112,112,112,,,,112,112,112,112,112,112,112,112,112,112,112',
',112,112,,112,112,112,,,,,112,,112,112,,112,112,,,112,112,112,112,112',
'112,112,375,,375,,375,375,,,,,,,,,,,,,,112,,,,,,,,,,,,,,,,,375,,,,,',
',,,375,375,375,,375,,,,375,375,,,,375,,375,375,375,375,375,375,375,',
',,,,375,375,375,375,375,375,375,,,,375,375,375,375,375,375,375,375,375',
'375,375,,375,375,,375,375,375,,,,,375,,375,375,,375,375,,,375,375,375',
'375,375,375,375,114,,114,,114,114,,,,,,,,,,,,,,375,,,,,,,,,,,,,,,,,114',
',,,,,,,,114,114,114,,114,,,,114,114,,,,114,,114,114,114,114,114,114',
'114,,,,,,114,114,114,114,114,114,114,,,,114,114,114,114,114,114,114',
'114,114,114,114,,114,114,,114,114,114,,,,,114,,114,114,,114,114,,,114',
'114,114,114,114,114,114,834,,834,,834,834,,,,,,,,,,,,,,114,,,,,,,,,',
',,,,,,,834,,,,,,,,,834,834,834,,834,,,,834,834,,,,834,,834,834,834,834',
'834,834,834,,,,,,834,834,834,834,834,834,834,,,,834,834,834,834,834',
'834,834,834,834,834,834,,834,834,,834,834,834,,,,,834,,834,834,,834',
'834,834,,834,834,834,834,834,834,834,838,,838,,838,838,,,,,,,,,,,,,',
'834,,,,,,,,,,,,,,,,,838,,,,,,,,,838,838,838,,838,,,,838,838,,,,838,',
'838,838,838,838,838,838,838,,,,,,838,838,838,838,838,838,838,,,,838',
'838,838,838,838,838,838,838,838,838,838,,838,838,,838,838,838,,,,,838',
',838,838,,838,838,,,838,838,838,838,838,838,838,693,,693,,693,693,,',
',,,,,,,,,,,838,,,,,,,,,,,,,,,,,693,,,,,,,,,693,693,693,,693,,,,693,693',
',,,693,,693,693,693,693,693,693,693,,,,,,693,693,693,693,693,693,693',
',,,693,693,693,693,693,693,693,693,693,693,693,,693,693,,693,693,693',
',,,,693,,693,693,,693,693,,,693,693,693,693,693,693,693,,,,,,,,881,',
',,,,,,881,881,,,693,881,881,881,881,881,881,881,881,881,881,881,881',
'881,881,881,557,,,,,,,,557,557,,,,557,557,557,557,557,557,557,557,557',
'557,557,557,557,557,557,559,,,,,,,,559,559,,,,559,559,559,559,559,559',
'559,559,559,559,559,559,559,559,559,519,,,,,,,,519,519,,,,519,519,519',
'519,519,519,519,519,519,519,519,519,519,519,519,,,,,,,,,,,,,,,,,881',
'881,881,881,881,881,881,881,,,,,,,,,,,,,,,,,,,,,557,557,557,557,557',
'557,557,557,,,,,,,,,,,,,,,,,,,,,559,559,559,559,559,559,559,559,,,,',
',,,,,,,,,,,,,,,,519,519,519,519,519,519,519,519,824,,,,,,,,824,824,',
',,824,824,824,824,824,824,824,824,824,824,824,824,824,824,824,822,,',
',,,,,822,822,,,,822,822,822,822,822,822,822,822,822,822,822,822,822',
'822,822,562,,,,,,,,562,562,,,,562,562,562,562,562,562,562,562,562,562',
'562,562,562,562,562,564,,,,,,,,564,564,,,,564,564,564,564,564,564,564',
'564,564,564,564,564,564,564,564,,,,,,,,,,,,,,,,,824,824,824,824,824',
'824,824,824,,,,,,,,,,,,,,,,,,,,,822,822,822,822,822,822,822,822,,,,',
',,,,,,,,,,,,,,,,562,562,562,562,562,562,562,562,,,,,,,,,,,,,,,,,,,,',
'564,564,564,564,564,564,564,564,818,,,,,,,,818,818,,,,818,818,818,818',
'818,818,818,818,818,818,818,818,818,818,818,729,,,,,,,,729,729,,,,729',
'729,729,729,729,729,729,729,729,729,729,729,729,729,729,569,,,,,,,,569',
'569,,,,569,569,569,569,569,569,569,569,569,569,569,569,569,569,569,570',
',,,,,,,570,570,,,,570,570,570,570,570,570,570,570,570,570,570,570,570',
'570,,,,,,,,,,,,,,,,,,818,818,818,818,818,818,818,818,,,,,,,,,,,,,,,',
',,,,,729,729,729,729,729,729,729,729,,,,,,,,,,,,,,,,,,,,,569,569,569',
'569,569,569,569,569,,,,,,,,,,,,,,,,,,,,,570,570,570,570,570,570,570',
'570,311,,,,,,,,311,311,,,,311,311,311,311,311,311,311,311,311,311,311',
'311,311,311,311,572,,,,,,,,572,572,,,,572,572,572,572,572,572,572,572',
'572,572,572,572,572,572,75,,,,,,,,75,75,,,,75,75,75,75,75,75,75,75,75',
'75,75,75,75,75,75,647,,,,,,,,647,647,,,,647,647,647,647,647,647,647',
'647,647,647,647,647,647,647,647,,647,,,,,,,,,,,,,,,,311,311,311,311',
'311,311,311,311,,,,,,,,,,,,,,,,,,,,,572,572,572,572,572,572,572,572',
',,,,,,,,,,,,,,,,,,,75,75,75,75,75,75,75,75,,,,,,,,,,,,,,,,,,,,,647,647',
'647,647,647,647,647,647,131,,,,,,,,131,131,,,,131,131,131,131,131,131',
'131,131,131,131,131,131,131,131,131,795,,,,,,,,795,795,,,,795,795,795',
'795,795,795,795,795,795,795,795,795,795,795,795,816,,,,,,,,816,816,',
',,816,816,816,816,816,816,816,816,816,816,816,816,816,816,816,855,,',
',,,,,855,855,,,,855,855,855,855,855,855,855,855,855,855,855,855,855',
'855,855,,,,,,,,,,,,,,,,,131,131,131,131,131,131,131,131,,,,,,,,,,,,',
',,,,,,,,795,795,795,795,795,795,795,795,,,,,,,,,,,,,,,,,,,,,816,816',
'816,816,816,816,816,816,,,,,,,,,,,,,,,,,,,,,855,855,855,855,855,855',
'855,855,445,,,,,,,,445,445,,,,445,445,445,445,445,445,445,445,445,445',
'445,445,445,445,445,888,445,,,,,,,888,888,,,,888,888,888,888,888,888',
'888,888,888,888,888,888,888,888,888,618,,,,,,,,618,618,,,,618,618,618',
'618,618,618,618,618,618,618,618,618,618,618,618,,618,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,445,445,445,445,445,445,445,445,,,,,,,,,',
',,,,,,,,,,,888,888,888,888,888,888,888,888,110,,,,,,,,,,,,,,,,,,,618',
'618,618,618,618,618,618,618,618,,,,,110,,,,,,,,,110,110,110,,110,,,',
'110,110,,,,110,,110,110,110,110,110,110,110,,,,,,110,110,110,110,110',
'110,110,285,,,110,110,110,110,110,110,110,110,110,110,110,,110,110,',
'110,110,110,,,,,110,,110,110,,110,110,285,,110,110,110,110,110,110,110',
'285,285,285,,285,,,,285,285,110,,,285,,285,285,285,285,285,285,285,',
',,,,285,285,285,285,285,285,285,,,,285,285,285,285,285,285,285,285,285',
'285,285,89,285,285,,285,285,285,89,,,,285,,285,285,,285,285,,,285,285',
'285,285,285,285,285,,,,,,89,,,,,285,,,,89,89,89,,89,,,,89,89,,,,89,',
'89,89,89,89,89,89,89,,,,,,89,89,89,89,89,89,89,849,,,89,89,89,89,89',
'89,89,89,89,89,89,,89,89,,89,89,89,,,,,89,,89,89,,89,89,849,,89,89,89',
'89,89,89,89,849,849,849,,849,,,,849,849,,,,849,,849,849,849,849,849',
'849,849,,,,,,849,849,849,849,849,849,849,632,,,849,849,849,849,849,849',
'849,849,849,849,849,,849,849,,849,849,849,,,,,849,,849,849,,849,849',
'632,,849,849,849,849,849,849,849,632,632,632,,632,,,,632,632,,,,632',
',632,632,632,632,632,632,632,,,,,,632,632,632,632,632,632,632,514,,',
'632,632,632,632,632,632,632,632,632,632,632,,632,632,,632,632,632,,',
',,632,,632,632,,632,632,514,,632,632,632,632,632,632,632,514,514,514',
',514,,,,514,514,,,,514,,514,514,514,514,514,514,514,,,,,,514,514,514',
'514,514,514,514,780,,,514,514,514,514,514,514,514,514,514,514,514,,514',
'514,,514,514,514,,,,,514,,514,514,,514,514,780,,514,514,514,514,514',
'514,514,780,780,780,,780,,,,780,780,,,,780,,780,780,780,780,780,780',
'780,,,,,,780,780,780,780,780,780,780,771,,,780,780,780,780,780,780,780',
'780,780,780,780,,780,780,,780,780,780,,,,,780,,780,780,,780,780,771',
',780,780,780,780,780,780,780,771,771,771,,771,,,,771,771,,,,771,,771',
'771,771,771,771,771,771,,,,,,771,771,771,771,771,771,771,35,,,771,771',
'771,771,771,771,771,771,771,771,771,,771,771,,771,771,771,,,,,771,,771',
'771,,771,771,35,,771,771,771,771,771,771,771,35,35,35,,35,,,,35,35,',
',,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,409,,35,35,35',
'35,35,35,35,35,35,35,35,,35,35,,35,35,35,,,,,35,,35,35,,35,35,35,409',
'35,35,35,35,35,35,35,,409,409,409,,409,,,,409,409,,,,409,,409,409,409',
'409,409,409,409,,,,,,409,409,409,409,409,409,409,102,,,409,409,409,409',
'409,409,409,409,409,409,409,,409,409,,409,409,409,,,,,409,,409,409,',
'409,409,102,,409,409,409,409,409,409,409,102,102,102,,102,,,,102,102',
',,,102,,102,102,102,102,102,102,102,,,,,,102,102,102,102,102,102,102',
'78,,,102,102,102,102,102,102,102,102,102,102,102,,102,102,,102,102,102',
',,,,102,,102,102,,102,102,78,,102,102,102,102,102,102,102,78,78,78,',
'78,,,,78,78,,,,78,,78,78,78,78,78,78,78,,,,,,78,78,78,78,78,78,78,,713',
',78,78,78,78,78,78,78,78,78,78,78,,78,78,,78,78,78,,,,,78,,78,78,,78',
'78,78,713,78,78,78,78,78,78,78,,713,713,713,,713,,,,713,713,,,,713,',
'713,713,713,713,713,713,713,,,,,,713,713,713,713,713,713,713,,,,713',
'713,713,713,713,713,713,713,713,713,713,,713,713,,713,713,713,,,,,713',
',713,713,,713,713,,,713,713,713,713,713,713,713' ]
        racc_action_check = arr = Array.new(23258, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,     7,   nil,  8474,  1356,  3803,   nil,  1317,   -85,   nil,
   nil,    -3,  1301,  2110,  2718, 10394,   nil,   nil,  7172,   739,
   nil, 10634,   335,   nil,   nil,   nil, 10754,   nil,   nil,   nil,
 11114,   nil,   nil,   nil,   nil, 22834,  5950,   nil,    56,   nil,
  1189,   nil,   nil,  1195,   274, 11474,  1179,  1208,   nil,   nil,
 12194,  1176,  1195, 12914,   nil,   nil, 13034, 13154,   nil,   234,
   nil,   nil,   nil, 13394,    67, 13634,   nil,   nil,   nil,   nil,
  1134,   nil,   nil,  1152,  1201, 21673,   nil,   nil, 23060,   318,
  4282,   nil,  4387,   nil,     0,   nil,   910, 14114,   576, 22384,
   nil,   520,   nil,   nil,   nil,  5221, 14354,  2478,   nil,   nil,
 15674,  1248, 22985, 16394,   nil,   nil,  1765,   872,  2031,   nil,
 22220,   nil, 20234,  1130, 20474,  1236,  1138,  1045, 16514,  8954,
  1130,   nil,   nil,   637,   nil,  1152,   nil,   556,   nil, 10994,
  1154, 21837,   nil,  8232,   nil,   nil,   nil,  1180,   nil,  8714,
 20114,  1014,   nil,  8834,   -25,    10,   nil,  9194,   nil,  2268,
  1118,    55,   -57,  1117,  1073,   nil,   nil,   nil,   nil,   nil,
   nil,  1061,   nil,   nil,   nil,   nil,   400,  1056,   nil,  1874,
   nil,   nil,   nil,   nil,   nil,  1139,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   698,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  3929, 10874,  3537,  1483,
   nil,   nil,   nil,   nil,  1374,   nil,   552,   657,    96,   232,
  1031,   238,  1086,  1784,  1028,  1146,   966,   688,   141,  1031,
   929,   976,  1019,  7640,   nil, 22295,   nil,   nil,   nil,   247,
   nil,   nil, 13754,   580,   971,   nil,  1082,  1081,   236,   961,
   463,   nil,   693,  7277, 14954, 15074, 15194, 15314, 15434,   -66,
   nil, 21618, 15794, 15914,    88,   nil,  1023,   937,   384,  2598,
    29, 16754, 16874, 16994, 17114, 17234, 17354, 17474, 17594, 17714,
 17834, 17954, 18074, 18194, 18314, 18434, 18554, 18674, 18794, 18914,
 19034, 19154, 19274, 19394, 19514, 19634, 19754,   nil,   341,   -59,
   -58,   980,  1003,   nil,   nil,     9,   -26,   nil,   936, 11594,
  1032,   918,   nil,  1125,   909,  6806,   388,   nil,    17,  1073,
   nil,   nil,   nil,   401,    50, 20354,  1049,   625,  6459,  6405,
   997,   985,   891,   -71,   159,   nil,   nil, 19994,  4158,   103,
   nil,   926,   890,   421,   252,   423,   -59,   -36,   522,    -4,
 16634,   267,  1885,   310,   nil,   380,  1254,   nil,   878, 22910,
   nil,   nil, 16274, 16154,   nil,   nil,  1923, 16034,  2370,   nil,
 15554,   nil, 14834, 14714,   859,   nil,   nil,   619, 14594,   nil,
   869,   nil,   856,   nil, 14474,   nil,     9,   843,   nil,  1562,
   nil,  5342,   nil,   nil,  5100, 22057,   nil,   832,   nil, 14234,
   877,   nil,  4979,  4737,   nil,  2866,   nil,   nil,  3647,   nil,
   nil,   872,  2961,   nil,   826,   850,   881,   838,   nil,  1610,
   nil,   777,    21,   nil,  6160,   673,   nil,   nil,   nil,  4037,
     1,   292,   nil,   nil,   718,   860,   772,  3291,   197,   nil,
   nil,   nil,   116,   nil,   nil,   nil,   nil,  4508,   nil,   859,
   nil,  3063,  3008,   nil,  2905, 12794,  2850,   nil,   nil,   nil,
   768,   737,   761,   776, 22609,  4632,   nil,   nil,   nil, 21042,
   nil,   386,   nil,   nil,   nil, 12434, 12314,  4858,   nil,   nil,
   760,   746,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  5463,
   nil,   nil,  5584, 12074,   818,   810, 11834,  3633, 11714,   666,
   524,   382,    79,  5230,  1660,   363,  1727, 20986,  2474, 21014,
  4387,   505, 21234,  4737, 21262,  4988,   892,   240,  1009, 21454,
 21482,  1151, 21646,    91,  1372,  2212, 11354,  2157,   172, 11234,
  5705,  5826,  6055,   401,   727,   nil,   693,   nil,  1494,   nil,
  1868, 10514,  2315,   nil,   nil,   854,   334,  7761,   nil, 10274,
   -22,  3171,   nil,   nil,  3411,   nil,   nil,   nil, 10154,   776,
   nil, 10034,   nil,   nil,  9914,   nil,   nil,   nil, 22113,   nil,
   754,   nil,   nil,   nil,  7885,   nil,    39,  2637,   303,  7990,
   nil,   650, 22534,   nil,   665,   646,   nil,   628,  9794,   434,
   150,   585,   596,   587,   nil,   nil,   nil, 21701,  9674,   597,
   nil,   nil,   nil,    59,   581,   nil,   587,  1185,   567,   562,
   nil,   533,   558,   464,  9554,   392,   nil,   nil,   398,   470,
   301,   nil,   295,   nil,   196,   nil,   118,    35,   nil,  1305,
  1569,    -4,   -82,   nil,  8111,   -77,   nil,   nil,   nil,   nil,
   nil,   nil,  1218, 20834,  9074,   -52,   170,   nil,   nil,   nil,
    91,  9314,  9434,   302,   nil,   199,   242,   664,   817,   302,
    12,   208,   nil, 23136,   423,   nil,   nil,   nil,   647,   677,
   565,   nil,   nil,   582,   602,   195,   nil,   623,    49, 21426,
   684,   -56,   -57,   580,   -35,   207,   -63,   700,   712,   nil,
   -33,  1223,   483,   nil,   426,   661,   nil,   770,   429,  6685,
   nil,   nil,   nil,   nil,   738,   nil,   nil,   721,   nil,  6281,
   808,   108, 11954,   nil,  1821,   nil,   728,   nil,   839,   nil,
   766, 22759,   nil,   nil, 12554,   165, 12674, 13274,   785, 13514,
 22684,   793,  2173,   nil,   nil,   nil,   824,   nil,  2807,   nil,
  3487,   nil,   nil,   nil,   nil, 21865,   nil,   nil,   nil,  3024,
   nil,  2331,   nil,  2534,   nil,   nil,  1312,   nil,   745,   nil,
   873,  1959,   nil,   880,   nil,   nil, 21893,   nil, 21398,   nil,
 19874,   nil, 21206,   nil, 21178,   nil,   984,  8594,   nil,   288,
   925,  1010,   nil,   nil, 20594,  6927,   nil,   nil, 20714,   177,
  7048,   nil,   nil,   nil,   nil,   nil,  1021,   nil,   221, 22459,
   nil,   nil,  7398,   nil,   nil, 21921,  7519,   nil,   nil,   nil,
 13994,   977,   453,  1023,   nil,   985,   986,   576,   nil,   996,
  1005,  1007,  1019,  1025,  1026,  1028,  1444,  1038,  1204,  1041,
   nil, 20958,   nil,   nil,   101,   nil,   nil,   464, 22085,  1141,
   nil,  8353,   595,  1056,   455,  1139,   nil,   nil,  1187,  3592,
   nil,  2800,   nil,  3494,   nil,   nil,   nil,  3330,   nil,   nil,
   nil,   nil,  1432,   nil,   nil,  1139,  1981,  6564,   nil,   nil,
   nil,   nil,  1229,  1623, 13874,  3695,  1022,   nil,  1163,  1164,
  1176,  1179,  1181,  1183,  1191,  1192,   454,   nil,   243,   881,
  1187,   -48,   153,   nil,  3210,   nil,   nil,   nil,   nil,   nil,
   246,  1225,   nil ]

racc_action_default = [
    -2,  -539,    -1,  -538,  -539,  -383,    -3,  -539,  -527,  -446,
  -436,  -285,  -539,  -476,  -539,  -539,  -445,  -437,  -421,  -539,
   -65,  -539,  -525,  -447,  -419,  -310,  -539,  -448,  -421,  -403,
  -539,    -5,  -455,  -421,  -308,   -69,  -539,    -6,  -268,  -456,
  -411,  -399,  -309,  -539,  -539,  -539,  -417,  -402,  -311,   -79,
  -539,  -539,    -9,  -539,  -450,  -404,  -300,  -539,  -260,   -40,
  -449,  -312,  -261,  -539,  -453,  -301,  -451,  -313,  -302,  -262,
  -525,  -314,  -303,  -527,  -539,   -46,  -263,  -452,  -539,   -48,
  -539,  -264,  -538,   -49,  -305,  -265,  -513,  -539,  -515,  -539,
  -442,   -53,  -267,  -441,  -400,  -538,  -538,  -443,  -401,  -306,
  -277,  -539,  -539,  -538,  -444,  -307,  -539,  -231,  -280,   -41,
   -77,   953,  -539,  -539,  -539,  -539,  -538,  -539,  -539,  -539,
  -538,  -509,  -382,  -268,  -246,  -253,  -300,  -453,  -301,  -538,
  -539,  -232,  -242,  -538,  -305,  -247,  -277,  -539,   -63,  -539,
  -539,  -527,  -528,  -539,  -538,  -538,  -286,  -539,  -481,  -476,
  -498,  -482,  -539,  -539,  -538,  -499,  -496,  -479,  -368,  -500,
  -478,  -538,  -477,  -495,  -480,  -475,  -539,  -538,  -487,  -539,
  -485,  -493,  -287,  -284,  -376,   -57,    -8,  -177,  -126,  -170,
  -178,  -117,  -127,  -171,  -161,  -118,  -176,  -128,  -152,  -160,
  -119,  -139,  -169,  -155,  -132,  -179,  -120,  -181,  -133,  -141,
  -164,  -121,  -185,  -134,  -138,  -151,  -122,  -186,  -136,  -129,
  -165,  -137,  -142,  -123,  -154,  -140,  -146,  -124,  -143,  -145,
  -147,  -144,  -156,  -168,  -539,  -148,  -167,  -172,  -158,  -157,
  -174,  -431,  -180,  -166,  -149,  -109,  -159,  -130,  -106,  -173,
  -110,  -131,  -108,  -433,  -163,  -432,  -430,  -150,  -183,  -175,
  -107,  -434,  -184,  -182,  -125,  -135,  -539,  -538,  -539,  -223,
   -45,    -4,  -536,  -534,  -526,  -535,  -539,   -47,  -539,  -539,
  -383,  -539,  -539,  -208,  -280,  -539,  -539,   -92,  -539,   -70,
   -85,  -527,  -539,  -538,  -304,   -73,  -111,   -17,  -113,  -539,
  -112,  -114,  -539,  -539,  -539,   -81,  -438,  -439,  -539,  -539,
  -539,  -405,  -209,  -538,  -539,  -539,  -539,  -539,  -539,  -539,
   -51,  -224,  -539,  -539,  -539,   -52,  -539,  -526,  -525,  -539,
  -274,  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,
  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -539,
  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -326,  -539,  -268,
  -453,  -539,  -539,  -325,  -373,  -538,  -538,  -115,   -22,  -539,
   -67,  -527,   -13,   -14,  -539,  -538,  -525,  -266,  -527,  -539,
  -268,  -453,  -104,  -539,  -539,  -539,  -101,  -102,  -539,  -539,
  -539,  -538,  -539,  -531,  -531,  -233,   -50,  -539,  -538,  -531,
  -507,  -539,  -539,  -539,  -176,  -169,  -179,  -164,  -146,  -147,
  -539,  -148,  -476,  -106,  -505,  -107,  -527,   -64,   -75,  -539,
  -512,  -248,  -539,  -251,  -252,  -243,  -539,  -538,  -539,  -249,
  -251,  -244,  -539,  -539,  -527,  -240,  -241,  -274,  -539,  -254,
  -539,   -39,   -38,   -30,  -539,  -283,  -527,  -539,   -44,  -538,
  -355,  -538,  -358,  -356,  -538,  -189,   -31,  -538,  -497,  -539,
  -539,  -366,  -538,  -538,  -501,  -539,  -504,  -468,  -539,  -473,
  -484,  -539,  -539,  -471,  -331,  -482,  -338,  -539,  -329,  -539,
  -327,  -527,  -538,   -58,  -538,  -539,  -435,  -422,  -423,  -539,
  -516,  -518,  -381,  -379,  -519,  -517,  -527,  -538,  -516,  -518,
  -380,  -519,  -517,    -7,  -537,  -406,  -420,  -538,  -317,  -316,
  -407,  -539,  -539,  -408,  -539,  -538,  -539,  -438,  -439,   -82,
  -539,   -91,  -527,   -71,  -539,  -539,   -21,   -20,   -19,  -197,
   -36,  -539,  -410,  -413,  -409,  -539,  -539,  -538,  -415,  -416,
  -539,  -539,   -26,   -27,   -23,   -24,   -25,  -319,  -320,  -538,
   -43,   -42,  -538,  -539,  -539,  -539,  -539,  -229,  -539,  -213,
  -218,  -210,  -225,  -219,  -211,  -226,  -220,  -212,  -221,  -200,
  -222,  -205,  -201,  -227,  -202,  -228,  -214,  -203,  -215,  -204,
  -198,  -216,  -199,  -527,  -217,  -539,  -538,  -539,  -274,  -539,
  -538,  -538,  -539,   -16,   -66,  -272,  -527,   -12,  -526,  -271,
  -539,  -538,  -539,  -101,  -103,  -102,  -539,  -538,  -457,  -539,
  -539,  -538,  -516,  -517,  -538,  -270,  -315,  -391,  -538,  -538,
  -275,  -533,  -234,  -532,  -533,  -236,   -37,  -253,  -187,   -29,
  -539,  -508,  -276,  -524,  -539,  -523,  -527,  -476,  -539,  -538,
  -279,  -527,  -539,   -83,   -78,  -538,  -250,  -255,  -539,  -516,
  -517,  -527,  -516,  -517,  -510,  -511,  -237,  -187,  -539,  -259,
  -282,  -529,  -491,  -482,  -538,  -360,  -538,  -539,  -538,  -538,
  -354,  -539,  -539,  -539,  -539,  -527,  -489,  -483,  -539,  -539,
  -538,  -503,  -538,  -488,  -538,  -502,  -538,  -538,  -494,  -539,
  -539,  -336,  -527,  -486,  -538,  -539,  -429,  -426,  -427,  -428,
  -424,  -378,   -61,  -539,  -539,  -539,  -384,  -239,  -238,  -377,
   -59,  -539,  -539,  -538,  -318,  -539,  -538,   -88,   -90,  -527,
  -516,  -517,   -80,  -539,   -74,   -18,  -414,  -412,  -206,  -207,
  -538,  -418,   -28,  -539,  -539,  -539,  -293,  -539,  -527,  -196,
  -539,  -520,  -273,  -527,  -516,  -517,  -539,  -539,  -539,  -116,
   -68,   -15,  -101,  -105,  -102,  -527,  -459,  -539,  -539,  -538,
  -375,   -55,  -374,   -54,  -538,  -394,  -393,  -392,  -323,  -538,
  -538,  -531,  -539,  -297,  -476,  -506,  -527,  -461,  -539,  -278,
   -76,  -539,  -245,  -256,  -539,  -384,  -539,  -539,  -257,  -539,
  -539,  -539,  -345,  -347,  -365,  -364,  -361,  -362,  -539,  -350,
  -539,  -352,  -357,  -386,  -385,  -190,  -367,  -369,  -370,  -539,
  -466,  -539,  -464,  -539,  -474,  -472,  -539,  -469,  -334,  -330,
  -339,  -539,  -328,  -539,  -425,   -62,  -194,   -35,  -195,  -530,
  -539,   -60,  -192,   -33,  -193,   -34,  -539,  -539,  -321,   -86,
   -72,  -539,  -290,  -291,  -539,  -538,  -292,  -281,  -539,  -384,
  -538,  -372,  -371,  -384,  -295,  -458,  -539,  -396,  -539,  -539,
  -324,  -398,  -538,   -11,  -235,  -188,  -538,  -460,  -298,   -84,
  -539,  -258,  -490,  -539,  -359,  -538,  -538,  -539,  -492,  -538,
  -538,  -538,  -538,  -538,  -538,  -538,  -539,  -332,  -539,  -337,
   -56,  -191,   -32,  -288,  -539,  -289,  -255,  -538,  -230,  -539,
  -296,  -538,  -539,  -100,   -93,  -539,  -395,  -397,  -539,  -539,
  -274,  -539,  -342,  -539,  -344,  -363,  -351,  -539,  -348,  -353,
  -467,  -465,  -539,  -462,  -470,  -335,  -539,  -538,  -387,  -389,
  -388,  -294,  -538,  -539,  -538,  -539,   -99,  -299,  -520,  -273,
  -538,  -538,  -538,  -538,  -538,  -333,  -538,  -390,  -520,   -98,
  -527,  -516,  -517,  -343,  -539,  -340,  -346,  -349,  -463,  -322,
  -384,  -538,  -341 ]

clist = [
'31,497,268,143,424,470,52,235,310,158,279,380,544,165,231,290,609,315',
'52,415,291,298,473,421,284,235,132,384,431,309,287,527,122,629,389,132',
'658,539,364,314,383,174,542,673,260,471,318,696,678,138,612,615,386',
'479,361,487,621,264,175,290,441,444,760,360,291,496,809,284,319,235',
'594,261,262,634,357,37,826,132,284,784,661,426,408,810,430,868,132,176',
'665,364,787,284,523,385,644,235,224,374,636,284,390,750,402,152,752',
'636,269,404,354,352,388,275,659,414,654,624,382,414,393,316,262,132',
'146,515,347,786,425,358,670,132,853,392,486,451,22,677,918,754,848,301',
'266,440,440,172,293,447,521,3,300,165,132,456,407,690,246,672,6,2,456',
'597,461,1,,433,456,,,,,,446,,,831,,601,604,,714,,,,,,,,,,,,,,,,,,,,868',
',,,775,,,,,,,426,,,,479,879,487,,,,,,,,,,,,,,,,,,656,,,,,,364,,727,',
',,484,,,,,,,674,,425,512,676,513,,531,,,,,360,809,,52,,,829,580,581',
',284,616,510,,132,915,532,,534,535,536,490,,743,644,784,,,641,,839,781',
'770,122,174,706,905,,681,706,620,470,843,,533,949,,,,,,520,,,,935,716',
'364,,,,,,,,,,430,,,,,493,586,,,920,,,,635,682,360,,,,,,440,440,,,,,631',
'537,,,583,,537,,,545,262,426,673,,,,706,,,830,607,865,709,19,,117,633',
',,678,684,706,,673,117,19,,856,,662,284,117,663,588,165,,117,484,,,668',
'669,619,,,276,425,587,262,,,,,,,117,598,,,132,854,,685,117,,,117,,655',
',132,660,,117,,117,655,490,,,117,,,733,,703,,866,348,426,835,,19,870',
',,840,117,745,369,,440,,,,19,874,,,,117,,369,695,,720,698,,117,725,276',
'633,484,,,484,290,723,756,,724,291,132,950,425,284,235,,691,117,132',
'715,,19,,747,697,470,470,,117,117,,117,,692,,117,132,,426,490,,700,',
'490,,,737,738,772,815,,,761,426,,768,,821,,,,,430,,,736,,937,,,,290',
',,484,,291,,730,,,235,,425,931,748,739,,,484,,891,869,919,871,,,,425',
',,741,,872,,873,,132,698,,875,698,,,490,755,758,633,,,,,132,235,,,,917',
',490,764,284,132,766,,132,,165,697,,,697,414,,,117,695,,,,813,,19,,877',
'751,746,470,753,,749,655,,456,,456,456,,,,,19,,276,,846,,456,,456,117',
'456,,456,456,,,,767,,,19,117,19,117,117,117,,633,,117,117,,,,930,,932',
',,758,933,284,698,695,,934,,,,,131,470,,470,850,817,758,,,131,,706,',
'823,825,,259,695,,,,691,697,,,273,19,951,,695,,,19,,,859,,,,,847,470',
'117,,,302,851,,,284,,131,311,165,117,19,,,284,,131,898,,,,,,117,,,,',
',117,,537,276,,,,887,,,,117,889,,845,940,,,131,884,,,131,,897,131,,',
',,131,,,,131,19,131,,19,,131,259,,,,,19,19,,,,131,,,284,,,,,882,,131',
'131,922,,,,,19,445,,,,117,,,,,456,456,,117,456,456,456,456,456,456,456',
'936,,19,426,,,,,64,,117,758,,,,484,,,,276,64,,,,,,,,,,,,19,,,,,,,484',
'280,,,,19,,607,19,425,,,117,,,456,456,456,456,456,,758,,695,,,,,,,,',
',132,,,456,,,,490,,117,,350,117,19,19,64,,,131,,,19,371,,117,,,,64,',
'19,,117,,117,371,,117,,371,,,,280,,,,,,12,,,,519,,,,,,,,12,19,,,276',
'64,,,,,,,,,,,,,,547,,549,550,551,552,553,554,555,556,557,558,559,560',
'561,562,563,564,565,566,567,568,569,570,571,572,573,574,435,,,,,,,,',
'19,,,,,,,,,117,,12,,,,,,117,117,,,,,,12,,,,,276,,618,,,,,,,,,,605,,',
',,,,,,131,,,,,,445,131,,,,131,12,,131,19,519,131,,,,,647,,,19,,,131',
',64,457,,,,267,,276,459,,,,,131,463,,862,,101,64,,280,,,267,,,,,,101',
',267,,,,,,,64,,64,267,131,,,,,,267,,131,,,,,117,,,,,,,117,,,368,,,131',
',19,,,,,19,,,,,,,,,892,,,19,718,719,,19,353,,64,,101,,,,64,,,,,,131',
',,101,,729,12,,,,,,,436,,438,,64,726,,19,,,,584,12,,,,,,589,,131,,,',
',280,,,101,,,,12,19,12,131,,,,,117,,,,,131,,,131,,,,131,,,131,630,64',
'131,,64,,,,,,,,64,64,,,,,646,,,,,,,763,131,,,,650,,12,,64,,131,,12,',
',,,,,,,,,,,,795,,,,,64,,,,12,,,,683,,,,,,,,,280,,,,,,,816,818,,,,,64',
',822,824,,,,,,,,,64,,,64,101,,,712,267,,267,267,267,,,12,540,541,12',
',,,,101,,,12,12,,832,833,,,836,,,,,,,,64,64,101,,101,,,12,64,,855,,844',
',,,,64,,,,,816,,822,824,,131,,,12,,,858,,,,,600,,740,,,,,,,,,64,,,280',
',,,,,101,,12,,391,626,101,,,,881,38,,410,12,411,,12,,419,,,765,38,131',
',,769,888,101,,,,883,,,,,885,,429,432,,277,,,64,,,,881,,,890,,12,12',
',,,,796,,12,,,,,,,,,12,,,280,,,812,,,,101,,,101,349,,,,38,,,101,101',
',921,370,,,,,,38,12,927,,,,,370,64,,,131,101,,,277,,,64,,,837,,,,,783',
',789,791,280,,,,,101,,,38,371,800,,802,,804,,805,807,728,,,,,,,,12,',
',857,,,,,,101,,,,,,,,,,,,101,,,101,267,,,,,,,,,,,,,64,,,,,64,,267,,',
',,,,894,,,64,,,,64,,,101,101,,12,,,,,101,,,,,12,,,,101,,,,,,,,,,,,,',
',64,,,,,,,,,,,,,,,,,101,,38,,,,,,,64,,,,,,,,,617,,,38,,277,,,,,,,,,',
',,,,,,,12,38,,38,637,12,,,,,,391,,,645,101,,12,,,,12,,,,649,,,902,904',
',,906,908,909,910,911,913,914,,666,,,,271,,,,,271,,,,,,,12,38,,,,,,38',
'271,,,,,,,271,,,,,,,,,101,,12,,,,38,,,,101,,271,943,945,946,947,948',
',,,,,271,,,,277,,,271,,,,952,,271,271,,,,,267,,271,,271,,271,,,,271',
'271,617,,,,,38,,,38,,,,,,,,38,38,,271,,,,,,,,,,,,,101,,,,,101,38,686',
',,,,,,896,,,101,,,,101,,,,,,,,38,,,,757,,,637,,,391,,,,,,,277,,,,,,',
',,,101,,,38,,,,773,,,,,,,,38,,778,38,,,,,,,,101,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,38,38,,,,,,,38,,,,,,,,,38,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,',
',38,,,277,,,271,,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,,,,,,,,,,861,,,',
',,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,,,,,,271,,886,271,271',
',,,,,,271,,271,271,,,,,271,,,,,38,271,,,,,,,,,38,,,,,,271,,,,,,277,',
',,,,,,,370,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,',
'38,,,,,38,271,271,,,,,,,893,,,38,,,,38,,,271,,,,,271,,,,,,,,,,,,,,,',
',,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,,,271,,,271,,,271,,,,',
',,,,,,,,,,,,,271,,,,,,271,,,,,,,,,,271,,,,,,,,,,,,,,,,271,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,271,,,271,,271,271,,271,271,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,271,,,,,,,',
',,,271,,,,,,,,,,,271' ]
        racc_goto_table = arr = Array.new(2701, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'7,83,19,32,25,102,10,54,36,118,47,11,90,110,53,57,13,36,10,66,58,19',
'40,66,59,54,34,63,28,19,17,83,64,98,63,34,107,87,12,19,61,64,87,135',
'21,103,19,26,136,39,62,62,36,38,44,38,62,9,39,57,41,41,14,43,58,130',
'101,59,32,54,51,6,95,49,17,8,84,34,59,115,112,36,48,104,61,137,34,8',
'112,12,114,59,130,7,140,54,127,52,67,59,7,65,53,116,65,67,127,75,74',
'92,52,127,108,7,105,100,60,7,99,6,95,34,79,31,22,113,7,18,108,34,15',
'78,25,117,5,108,120,121,122,125,126,7,7,81,128,118,129,4,131,110,34',
'7,39,132,133,134,3,2,7,94,139,1,,21,7,,,,,,21,,,14,,38,38,,49,,,,,,',
',,,,,,,,,,,,,137,,,,26,,,,,,,36,,,,38,104,38,,,,,,,,,,,,,,,,,,106,,',
',,,12,,90,,,,54,,,,,,,106,,7,44,106,48,,12,,,,,43,101,,10,,,26,41,41',
',59,28,32,,34,104,19,,19,19,19,64,,51,140,115,,,25,,26,112,49,64,64',
'38,114,,102,38,11,102,26,,10,84,,,,,,21,,,,104,130,12,,,,,,,,,,61,,',
',,8,44,,,14,,,,63,103,43,,,,,,7,7,,,,,36,95,,,10,,95,,,6,95,36,135,',
',,38,,,49,7,107,25,24,,24,47,,,136,41,38,,135,24,24,,98,,12,59,24,12',
'9,110,,24,54,,,12,12,21,,,24,7,6,95,,,,,,,24,95,,,34,62,,12,24,,,24',
',7,,34,110,,24,,24,7,64,,,24,,,25,,12,,108,24,36,83,,24,108,,,87,24',
'25,24,,7,,,,24,108,,,,24,,24,32,,12,7,,24,61,24,47,54,,,54,57,12,28',
',12,58,34,26,7,59,54,,64,24,34,17,,24,,11,64,102,102,,24,24,,24,,39',
',24,34,,36,64,,39,,64,,,12,12,66,40,,,63,36,,11,,40,,,,,61,,,19,,13',
',,,57,,,54,,58,,32,,,54,,7,108,19,17,,,54,,83,106,90,106,,,,7,,,10,',
'106,,106,,34,7,,106,7,,,64,7,7,47,,,,,34,54,,,,83,,64,53,59,34,118,',
'34,,110,64,,,64,7,,,24,32,,,,12,,24,,102,39,95,102,39,,95,7,,7,,7,7',
',,,,24,,24,,11,,7,,7,24,7,,7,7,,,,95,,,24,24,24,24,24,24,,47,,24,24',
',,,106,,106,,,7,106,59,7,32,,106,,,,,33,102,,102,12,21,7,,,33,,38,,21',
'21,,33,32,,,,64,64,,,33,24,106,,32,,,24,,,47,,,,,7,102,24,,,33,7,,,59',
',33,33,110,24,24,,,59,,33,11,,,,,,24,,,,,,24,,95,24,,,,12,,,,24,12,',
'95,25,,,33,19,,,33,,12,33,,,,,33,,,,33,24,33,,24,,33,33,,,,,24,24,,',
',33,,,59,,,,,21,,33,33,12,,,,,24,33,,,,24,,,,,7,7,,24,7,7,7,7,7,7,7',
'12,,24,36,,,,,50,,24,7,,,,54,,,,24,50,,,,,,,,,,,,24,,,,,,,54,50,,,,24',
',7,24,7,,,24,,,7,7,7,7,7,,7,,32,,,,,,,,,,34,,,7,,,,64,,24,,50,24,24',
'24,50,,,33,,,24,50,,24,,,,50,,24,,24,,24,50,,24,,50,,,,50,,,,,,23,,',
',33,,,,,,,,23,24,,,24,50,,,,,,,,,,,,,,33,,33,33,33,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,45,,,,,,,,,24,,,',
',,,,,24,,23,,,,,,24,24,,,,,,23,,,,,24,,33,,,,,,,,,,77,,,,,,,,,33,,,',
',,33,33,,,,33,23,,33,24,33,33,,,,,33,,,24,,,33,,50,109,,,,30,,24,109',
',,,,33,109,,24,,20,50,,50,,,30,,,,,,20,,30,,,,,,,50,,50,30,33,,,,,,30',
',33,,,,,24,,,,,,,24,,,30,,,33,,24,,,,,24,,,,,,,,,24,,,24,33,33,,24,20',
',50,,20,,,,50,,,,,,33,,,20,,33,23,,,,,,,30,,30,,50,77,,24,,,,45,23,',
',,,,45,,33,,,,,50,,,20,,,,23,24,23,33,,,,,24,,,,,33,,,33,,,,33,,,33',
'45,50,33,,50,,,,,,,,50,50,,,,,45,,,,,,,77,33,,,,45,,23,,50,,33,,23,',
',,,,,,,,,,,,33,,,,,50,,,,23,,,,45,,,,,,,,,50,,,,,,,33,33,,,,,50,,33',
'33,,,,,,,,,50,,,50,20,,,45,30,,30,30,30,,,23,30,30,23,,,,,20,,,23,23',
',77,77,,,77,,,,,,,,50,50,20,,20,,,23,50,,33,,77,,,,,50,,,,,33,,33,33',
',33,,,23,,,77,,,,,30,,45,,,,,,,,,50,,,50,,,,,,20,,23,,29,30,20,,,,33',
'27,,29,23,29,,23,,29,,,45,27,33,,,45,33,20,,,,77,,,,,77,,29,29,,27,',
',50,,,,33,,,77,,23,23,,,,,45,,23,,,,,,,,,23,,,50,,,45,,,,20,,,20,27',
',,,27,,,20,20,,77,27,,,,,,27,23,77,,,,,27,50,,,33,20,,,27,,,50,,,45',
',,,,109,,109,109,50,,,,,20,,,27,50,109,,109,,109,,109,109,30,,,,,,,',
'23,,,45,,,,,,20,,,,,,,,,,,,20,,,20,30,,,,,,,,,,,,,50,,,,,50,,30,,,,',
',,50,,,50,,,,50,,,20,20,,23,,,,,20,,,,,23,,,,20,,,,,,,,,,,,,,,50,,,',
',,,,,,,,,,,,,20,,27,,,,,,,50,,,,,,,,,29,,,27,,27,,,,,,,,,,,,,,,,,23',
'27,,27,29,23,,,,,,29,,,29,20,,23,,,,23,,,,29,,,109,109,,,109,109,109',
'109,109,109,109,,29,,,,42,,,,,42,,,,,,,23,27,,,,,,27,42,,,,,,,42,,,',
',,,,,20,,23,,,,27,,,,20,,42,109,109,109,109,109,,,,,,42,,,,27,,,42,',
',,109,,42,42,,,,,30,,42,,42,,42,,,,42,42,29,,,,,27,,,27,,,,,,,,27,27',
',42,,,,,,,,,,,,,20,,,,,20,27,27,,,,,,,20,,,20,,,,20,,,,,,,,27,,,,29',
',,29,,,29,,,,,,,27,,,,,,,,,,20,,,27,,,,29,,,,,,,,27,,29,27,,,,,,,,20',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,27,,,,,,,27,,,,,,,,,27,,,,42,,,,,,,',
',,,,,,,,,,,,,,,,,,,,27,,,27,,,42,,42,42,42,42,42,42,42,42,42,42,42,42',
'42,42,42,42,42,42,42,42,42,42,42,42,42,42,,,,,,,,,,29,,,,,,,,,,,,27',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,42,,29,42,42,,,,,,,42,,42',
'42,,,,,42,,,,,27,42,,,,,,,,,27,,,,,,42,,,,,,27,,,,,,,,,27,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,27,,,,,27,42,42,,,,,,',
'27,,,27,,,,27,,,42,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,,,,,,,,,,',
',,,,,,,,,,,,27,,,,,,,42,,,42,,,42,,,,,,,,,,,,,,,,,,42,,,,,,42,,,,,,',
',,,42,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,',
',,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,',
'42,,,42,,42,42,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,42,,,,42,,,,,,,,,,,42,,,,,,,,,,,42' ]
        racc_goto_check = arr = Array.new(2701, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   161,   157,   153,   147,   131,    49,    -3,    72,    35,
     3,   -84,   -44,  -365,  -547,  -630,   nil,    -6,    47,   -24,
  1157,    23,    46,   991,   378,  -125,  -439,  1524,  -112,  1417,
  1121,  -164,    -5,   706,    21,   nil,   -48,   nil,  -203,    44,
  -153,   -84,  1840,   -19,   -28,   912,   nil,   -25,   -28,  -336,
   878,  -303,     8,    -4,   -11,   nil,   nil,   -21,   -16,   -11,
    20,   -56,  -333,   -69,    27,  -500,   -97,  -315,   nil,   nil,
   nil,   nil,   nil,   nil,    29,     1,   nil,   723,    28,   111,
   nil,   130,   nil,  -267,  -627,   nil,   nil,  -272,   nil,   nil,
  -304,   nil,    31,   nil,  -215,    50,   nil,   nil,  -369,    12,
  -278,  -613,  -164,  -124,  -597,  -325,  -206,  -403,  -327,   989,
     0,   nil,  -359,  -532,  -567,  -578,    90,   -19,    -4,   nil,
  -751,  -471,  -616,   nil,   nil,    92,   116,    78,   104,  -147,
  -201,   102,  -322,   136,  -300,  -412,  -414,  -703,   nil,    -6,
  -326 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   362,   nil,   317,
   363,   nil,   381,   nil,   828,   nil,   366,   nil,   nil,   nil,
   137,   109,     7,   115,   272,   nil,   nil,   123,   nil,   125,
    59,   nil,   437,    75,    79,    83,   135,    91,   705,   nil,
   nil,   nil,    14,    20,   nil,   nil,    35,    43,    49,   nil,
   127,   372,   nil,   286,   491,   240,   288,    94,    98,   107,
   nil,   116,   nil,   120,   482,   699,   nil,   124,    58,    62,
    69,    76,    81,    85,   367,    92,    95,   nil,   nil,   173,
    11,   nil,    26,   nil,   nil,    45,    53,   nil,    63,    70,
   nil,    78,   nil,    89,   nil,   499,   102,   106,   nil,   nil,
   nil,   468,   170,   nil,   464,   nil,   154,   nil,   161,   nil,
   671,   443,   nil,   nil,   nil,   148,   nil,   nil,   628,   483,
   nil,   nil,   nil,    41,    47,    55,   nil,   nil,   nil,   nil,
   477,   nil,   nil,   nil,   167,   168,   171,   652,   150,   153,
   121 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_1,
  0, 153, :_reduce_2,
  2, 151, :_reduce_3,
  2, 152, :_reduce_4,
  1, 154, :_reduce_5,
  1, 154, :_reduce_6,
  3, 154, :_reduce_7,
  2, 154, :_reduce_8,
  1, 157, :_reduce_9,
  1, 157, :_reduce_none,
  4, 160, :_reduce_11,
  2, 161, :_reduce_12,
  1, 165, :_reduce_13,
  1, 165, :_reduce_14,
  3, 165, :_reduce_15,
  2, 165, :_reduce_none,
  0, 180, :_reduce_17,
  4, 159, :_reduce_18,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 159, :_reduce_23,
  3, 159, :_reduce_24,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  4, 159, :_reduce_none,
  3, 159, :_reduce_29,
  3, 159, :_reduce_none,
  3, 159, :_reduce_31,
  6, 159, :_reduce_32,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 179, :_reduce_none,
  3, 179, :_reduce_42,
  3, 179, :_reduce_43,
  3, 179, :_reduce_44,
  2, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 168, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_50,
  2, 170, :_reduce_51,
  2, 170, :_reduce_52,
  1, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 189, :_reduce_none,
  2, 183, :_reduce_57,
  3, 183, :_reduce_none,
  4, 183, :_reduce_59,
  5, 183, :_reduce_none,
  4, 183, :_reduce_none,
  5, 183, :_reduce_none,
  2, 183, :_reduce_63,
  2, 183, :_reduce_64,
  1, 171, :_reduce_none,
  3, 171, :_reduce_none,
  1, 193, :_reduce_none,
  3, 193, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  3, 192, :_reduce_none,
  5, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 196, :_reduce_none,
  3, 196, :_reduce_none,
  2, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 198, :_reduce_none,
  3, 198, :_reduce_none,
  1, 197, :_reduce_none,
  4, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  2, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_94,
  3, 169, :_reduce_95,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  2, 169, :_reduce_99,
  1, 169, :_reduce_none,
  1, 200, :_reduce_101,
  1, 200, :_reduce_102,
  2, 201, :_reduce_103,
  1, 201, :_reduce_104,
  3, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_109,
  1, 202, :_reduce_110,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 182, :_reduce_187,
  5, 182, :_reduce_none,
  3, 182, :_reduce_189,
  5, 182, :_reduce_none,
  6, 182, :_reduce_191,
  5, 182, :_reduce_192,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  4, 182, :_reduce_none,
  3, 182, :_reduce_none,
  3, 182, :_reduce_198,
  3, 182, :_reduce_199,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  3, 182, :_reduce_202,
  3, 182, :_reduce_203,
  3, 182, :_reduce_204,
  3, 182, :_reduce_205,
  4, 182, :_reduce_none,
  4, 182, :_reduce_none,
  2, 182, :_reduce_none,
  2, 182, :_reduce_209,
  3, 182, :_reduce_210,
  3, 182, :_reduce_211,
  3, 182, :_reduce_212,
  3, 182, :_reduce_213,
  3, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  2, 182, :_reduce_223,
  2, 182, :_reduce_224,
  3, 182, :_reduce_225,
  3, 182, :_reduce_226,
  3, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_none,
  6, 182, :_reduce_230,
  1, 182, :_reduce_none,
  1, 178, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  4, 209, :_reduce_none,
  2, 209, :_reduce_none,
  3, 213, :_reduce_237,
  1, 214, :_reduce_238,
  1, 214, :_reduce_none,
  1, 174, :_reduce_240,
  1, 174, :_reduce_none,
  1, 185, :_reduce_242,
  2, 185, :_reduce_243,
  2, 185, :_reduce_244,
  4, 185, :_reduce_245,
  1, 185, :_reduce_246,
  1, 188, :_reduce_none,
  2, 216, :_reduce_248,
  2, 216, :_reduce_249,
  2, 215, :_reduce_250,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 210, :_reduce_253,
  2, 210, :_reduce_254,
  3, 210, :_reduce_255,
  4, 210, :_reduce_256,
  3, 177, :_reduce_none,
  4, 177, :_reduce_none,
  2, 177, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  2, 208, :_reduce_266,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 208, :_reduce_270,
  3, 208, :_reduce_none,
  3, 208, :_reduce_272,
  3, 208, :_reduce_273,
  2, 208, :_reduce_274,
  3, 208, :_reduce_275,
  3, 208, :_reduce_276,
  1, 208, :_reduce_277,
  4, 208, :_reduce_278,
  3, 208, :_reduce_279,
  1, 208, :_reduce_280,
  5, 208, :_reduce_none,
  4, 208, :_reduce_none,
  3, 208, :_reduce_none,
  2, 208, :_reduce_284,
  1, 208, :_reduce_285,
  2, 208, :_reduce_286,
  2, 208, :_reduce_none,
  6, 208, :_reduce_288,
  6, 208, :_reduce_289,
  5, 208, :_reduce_none,
  5, 208, :_reduce_none,
  5, 208, :_reduce_292,
  4, 208, :_reduce_293,
  7, 208, :_reduce_none,
  5, 208, :_reduce_295,
  6, 208, :_reduce_296,
  4, 208, :_reduce_297,
  5, 208, :_reduce_298,
  7, 208, :_reduce_299,
  1, 208, :_reduce_300,
  1, 208, :_reduce_301,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 173, :_reduce_none,
  1, 225, :_reduce_none,
  1, 231, :_reduce_none,
  1, 234, :_reduce_none,
  1, 235, :_reduce_none,
  1, 237, :_reduce_none,
  1, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 242, :_reduce_none,
  1, 245, :_reduce_none,
  1, 246, :_reduce_none,
  1, 226, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 233, :_reduce_321,
  5, 233, :_reduce_322,
  1, 163, :_reduce_323,
  2, 163, :_reduce_324,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 250, :_reduce_none,
  3, 250, :_reduce_none,
  1, 253, :_reduce_none,
  3, 253, :_reduce_none,
  1, 252, :_reduce_none,
  4, 252, :_reduce_none,
  6, 252, :_reduce_none,
  3, 252, :_reduce_none,
  5, 252, :_reduce_none,
  2, 252, :_reduce_none,
  4, 252, :_reduce_none,
  1, 252, :_reduce_none,
  3, 252, :_reduce_none,
  6, 254, :_reduce_none,
  8, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 190, :_reduce_355,
  1, 190, :_reduce_none,
  3, 260, :_reduce_none,
  1, 260, :_reduce_none,
  4, 260, :_reduce_359,
  1, 261, :_reduce_none,
  2, 261, :_reduce_none,
  1, 262, :_reduce_none,
  3, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  2, 230, :_reduce_none,
  4, 265, :_reduce_none,
  1, 265, :_reduce_none,
  3, 266, :_reduce_none,
  3, 266, :_reduce_none,
  4, 223, :_reduce_none,
  4, 223, :_reduce_372,
  2, 186, :_reduce_373,
  4, 186, :_reduce_none,
  4, 186, :_reduce_none,
  2, 229, :_reduce_376,
  4, 229, :_reduce_377,
  4, 229, :_reduce_378,
  3, 229, :_reduce_379,
  3, 229, :_reduce_none,
  3, 229, :_reduce_none,
  2, 229, :_reduce_382,
  1, 229, :_reduce_383,
  4, 229, :_reduce_384,
  4, 228, :_reduce_385,
  4, 228, :_reduce_386,
  5, 239, :_reduce_387,
  1, 269, :_reduce_388,
  1, 269, :_reduce_none,
  6, 162, :_reduce_390,
  1, 162, :_reduce_none,
  1, 270, :_reduce_392,
  1, 270, :_reduce_393,
  1, 270, :_reduce_394,
  2, 271, :_reduce_395,
  1, 271, :_reduce_396,
  2, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 218, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 273, :_reduce_none,
  3, 274, :_reduce_406,
  3, 219, :_reduce_407,
  3, 220, :_reduce_408,
  3, 221, :_reduce_none,
  3, 221, :_reduce_none,
  0, 277, :_reduce_none,
  3, 277, :_reduce_none,
  1, 278, :_reduce_none,
  2, 278, :_reduce_none,
  3, 222, :_reduce_none,
  3, 222, :_reduce_none,
  0, 280, :_reduce_417,
  3, 280, :_reduce_none,
  0, 275, :_reduce_419,
  2, 275, :_reduce_420,
  0, 276, :_reduce_421,
  2, 276, :_reduce_422,
  1, 279, :_reduce_423,
  2, 279, :_reduce_424,
  3, 279, :_reduce_425,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  2, 206, :_reduce_430,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  3, 207, :_reduce_435,
  1, 272, :_reduce_436,
  1, 272, :_reduce_437,
  2, 272, :_reduce_438,
  2, 272, :_reduce_439,
  1, 199, :_reduce_440,
  1, 199, :_reduce_441,
  1, 199, :_reduce_442,
  1, 199, :_reduce_443,
  1, 199, :_reduce_444,
  1, 199, :_reduce_445,
  1, 199, :_reduce_446,
  1, 199, :_reduce_447,
  1, 199, :_reduce_448,
  1, 199, :_reduce_449,
  1, 199, :_reduce_450,
  1, 199, :_reduce_451,
  1, 199, :_reduce_452,
  1, 224, :_reduce_none,
  1, 172, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 243, :_reduce_457,
  3, 243, :_reduce_458,
  2, 243, :_reduce_459,
  3, 247, :_reduce_460,
  2, 247, :_reduce_461,
  6, 267, :_reduce_462,
  8, 267, :_reduce_463,
  4, 267, :_reduce_464,
  6, 267, :_reduce_465,
  4, 267, :_reduce_466,
  6, 267, :_reduce_467,
  2, 267, :_reduce_468,
  4, 267, :_reduce_469,
  6, 267, :_reduce_470,
  2, 267, :_reduce_471,
  4, 267, :_reduce_472,
  2, 267, :_reduce_473,
  4, 267, :_reduce_474,
  1, 267, :_reduce_475,
  0, 267, :_reduce_476,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_482,
  3, 251, :_reduce_483,
  2, 251, :_reduce_484,
  1, 284, :_reduce_485,
  3, 284, :_reduce_none,
  1, 255, :_reduce_487,
  3, 255, :_reduce_488,
  3, 285, :_reduce_none,
  3, 286, :_reduce_none,
  1, 256, :_reduce_none,
  3, 256, :_reduce_none,
  1, 283, :_reduce_493,
  3, 283, :_reduce_494,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 257, :_reduce_497,
  1, 257, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 259, :_reduce_501,
  3, 259, :_reduce_502,
  2, 258, :_reduce_503,
  1, 258, :_reduce_none,
  1, 248, :_reduce_none,
  3, 248, :_reduce_none,
  1, 227, :_reduce_507,
  2, 227, :_reduce_508,
  1, 212, :_reduce_509,
  3, 212, :_reduce_510,
  3, 289, :_reduce_511,
  2, 289, :_reduce_512,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 187, :_reduce_516,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 268, :_reduce_520,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  0, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 194, :_reduce_none,
  2, 175, :_reduce_none,
  0, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  0, 156, :_reduce_none ]

racc_reduce_n = 539

racc_shift_n = 953

racc_token_table = {
  false => 0,
  :error => 1,
  "!" => 2,
  :tTILDE => 3,
  :tUPLUS => 4,
  :tPOW => 5,
  :tUMINUS_NUM => 6,
  :tUMINUS => 7,
  :tSTAR2 => 8,
  :tDIVIDE => 9,
  :tPERCENT => 10,
  :tPLUS => 11,
  :tMINUS => 12,
  :tLSHFT => 13,
  :tRSHFT => 14,
  :tAMPER2 => 15,
  :tPIPE => 16,
  :tCARET => 17,
  ">" => 18,
  :tGEQ => 19,
  "<" => 20,
  :tLEQ => 21,
  :tCMP => 22,
  :tEQ => 23,
  :tEQQ => 24,
  :tNEQ => 25,
  :tMATCH => 26,
  :tNMATCH => 27,
  :tANDOP => 28,
  :tOROP => 29,
  :tDOT2 => 30,
  :tDOT3 => 31,
  "?" => 32,
  ":" => 33,
  :kRESCUE_MOD => 34,
  "=" => 35,
  :tOP_ASGN => 36,
  :kDEFINED => 37,
  :kNOT => 38,
  :kOR => 39,
  :kAND => 40,
  :kIF_MOD => 41,
  :kUNLESS_MOD => 42,
  :kWHILE_MOD => 43,
  :kUNTIL_MOD => 44,
  :tLBRACE_ARG => 45,
  :tLOWEST => 46,
  :kCLASS => 47,
  :kMODULE => 48,
  :kDEF => 49,
  :kUNDEF => 50,
  :kBEGIN => 51,
  :kRESCUE => 52,
  :kENSURE => 53,
  :kEND => 54,
  :kIF => 55,
  :kUNLESS => 56,
  :kTHEN => 57,
  :kELSIF => 58,
  :kELSE => 59,
  :kCASE => 60,
  :kWHEN => 61,
  :kWHILE => 62,
  :kUNTIL => 63,
  :kFOR => 64,
  :kBREAK => 65,
  :kNEXT => 66,
  :kREDO => 67,
  :kRETRY => 68,
  :kIN => 69,
  :kDO => 70,
  :kDO_COND => 71,
  :kDO_BLOCK => 72,
  :kDO_LAMBDA => 73,
  :kRETURN => 74,
  :kYIELD => 75,
  :kSUPER => 76,
  :kSELF => 77,
  :kNIL => 78,
  :kTRUE => 79,
  :kFALSE => 80,
  :kALIAS => 81,
  :klBEGIN => 82,
  :klEND => 83,
  :k__LINE__ => 84,
  :k__FILE__ => 85,
  :k__ENCODING__ => 86,
  :kDEFined => 87,
  :kBLOCK_GIVEN => 88,
  :tIDENTIFIER => 89,
  :tFID => 90,
  :tGVAR => 91,
  :tIVAR => 92,
  :tCONSTANT => 93,
  :tCVAR => 94,
  :tLABEL => 95,
  :tINTEGER => 96,
  :tFLOAT => 97,
  :tSTRING_CONTENT => 98,
  :tCHAR => 99,
  :tNTH_REF => 100,
  :tBACK_REF => 101,
  :tREGEXP_END => 102,
  :tAREF => 103,
  :tASET => 104,
  :tCOLON2 => 105,
  :tCOLON3 => 106,
  :tASSOC => 107,
  :tLPAREN => 108,
  :tLPAREN_ARG => 109,
  :tRPAREN => 110,
  :tLBRACK => 111,
  :tLBRACE => 112,
  :tSTAR => 113,
  :tAMPER => 114,
  :tLAMBDA => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSTRING_DBEG => 122,
  :tSTRING_DVAR => 123,
  :tSTRING_END => 124,
  :tLAMBEG => 125,
  :tSTRING => 126,
  :tXSTRING_END => 127,
  "{" => 128,
  "}" => 129,
  "[" => 130,
  "." => 131,
  "," => 132,
  "|" => 133,
  "^" => 134,
  "&" => 135,
  "+" => 136,
  "-" => 137,
  "*" => 138,
  "/" => 139,
  "%" => 140,
  "~" => 141,
  "`" => 142,
  "(" => 143,
  ")" => 144,
  "]" => 145,
  ";" => 146,
  " " => 147,
  "\\n" => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"!\"",
  "tTILDE",
  "tUPLUS",
  "tPOW",
  "tUMINUS_NUM",
  "tUMINUS",
  "tSTAR2",
  "tDIVIDE",
  "tPERCENT",
  "tPLUS",
  "tMINUS",
  "tLSHFT",
  "tRSHFT",
  "tAMPER2",
  "tPIPE",
  "tCARET",
  "\">\"",
  "tGEQ",
  "\"<\"",
  "tLEQ",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tMATCH",
  "tNMATCH",
  "tANDOP",
  "tOROP",
  "tDOT2",
  "tDOT3",
  "\"?\"",
  "\":\"",
  "kRESCUE_MOD",
  "\"=\"",
  "tOP_ASGN",
  "kDEFINED",
  "kNOT",
  "kOR",
  "kAND",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "tLBRACE_ARG",
  "tLOWEST",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kALIAS",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "kDEFined",
  "kBLOCK_GIVEN",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tLABEL",
  "tINTEGER",
  "tFLOAT",
  "tSTRING_CONTENT",
  "tCHAR",
  "tNTH_REF",
  "tBACK_REF",
  "tREGEXP_END",
  "tAREF",
  "tASET",
  "tCOLON2",
  "tCOLON3",
  "tASSOC",
  "tLPAREN",
  "tLPAREN_ARG",
  "tRPAREN",
  "tLBRACK",
  "tLBRACE",
  "tSTAR",
  "tAMPER",
  "tLAMBDA",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tLAMBEG",
  "tSTRING",
  "tXSTRING_END",
  "\"{\"",
  "\"}\"",
  "\"[\"",
  "\".\"",
  "\",\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "\"`\"",
  "\"(\"",
  "\")\"",
  "\"]\"",
  "\";\"",
  "\" \"",
  "\"\\\\n\"",
  "$start",
  "target",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "do_block",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "k_while",
  "do",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "f_args",
  "operation3",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "sym",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 103)
  def _reduce_1(val, _values, result)
                        # puts 'well, we got here..'
                    # puts val[0]
                    @parser_result = val[0]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 111)
  def _reduce_2(val, _values, result)
                        self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 115)
  def _reduce_3(val, _values, result)
                        # puts 'program'
                    # puts val[1]
                    result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 122)
  def _reduce_4(val, _values, result)
                        # puts 'top_compstmt'
                    # puts val[0]
                    # puts val[1]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 130)
  def _reduce_5(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 134)
  def _reduce_6(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 138)
  def _reduce_7(val, _values, result)
                        result = val[0] + [val[2]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 142)
  def _reduce_8(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 147)
  def _reduce_9(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 153)
  def _reduce_11(val, _values, result)
                        # puts "erm wtf?!"
                    # puts val[1]
                    result = self.node_bodystmt(val[0], val[1], val[2], val[3])
                    # if val[1]
                      # pp result
                    # end
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 163)
  def _reduce_12(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 168)
  def _reduce_13(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 172)
  def _reduce_14(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 176)
  def _reduce_15(val, _values, result)
                        result = val[0] + [val[2]]
		              
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 182)
  def _reduce_17(val, _values, result)
                        self.lex_state = :EXPR_FNAME
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 186)
  def _reduce_18(val, _values, result)
                        result = node :alias, :lhs => val[1], :rhs => val[3] 
                  
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 194)
  def _reduce_23(val, _values, result)
                		    result = node :if_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 198)
  def _reduce_24(val, _values, result)
                		    result = node :unless_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 206)
  def _reduce_29(val, _values, result)
                		    result = node :assign, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 211)
  def _reduce_31(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 215)
  def _reduce_32(val, _values, result)
                		    puts "in here for #{val[0]}"
            		  
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 229)
  def _reduce_42(val, _values, result)
                  	    result = node :andop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 233)
  def _reduce_43(val, _values, result)
                  	    result = node :orop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 237)
  def _reduce_44(val, _values, result)
                  	    result = node :not, :expr => val[2]
              	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 248)
  def _reduce_50(val, _values, result)
                  	    result = node :return, :call_args => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 252)
  def _reduce_51(val, _values, result)
                	      result = node :break, :call_args => val[1]
            	    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 256)
  def _reduce_52(val, _values, result)
                	      result = node :next, :call_args => val[1]
            	    
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 267)
  def _reduce_57(val, _values, result)
                        # command call - no brackets/recv
          		      result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 273)
  def _reduce_59(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 280)
  def _reduce_63(val, _values, result)
          		          result = node :super, :call_args => val[1]
      		        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 284)
  def _reduce_64(val, _values, result)
            	          result = node :yield, :call_args => val[1]
        	        
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 325)
  def _reduce_94(val, _values, result)
    		                result = node :call, :recv => val[0], :meth => '[]', :args => val[2]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 329)
  def _reduce_95(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2]
                  
    result
  end
.,.,

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 336)
  def _reduce_99(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 342)
  def _reduce_101(val, _values, result)
                        puts 'ERROR: cant use identifier for class/mod name'
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 346)
  def _reduce_102(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 352)
  def _reduce_103(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 355)
  def _reduce_104(val, _values, result)
      	                result = node :path, :cname => val[0]
  	              
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 364)
  def _reduce_109(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 369)
  def _reduce_110(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 405)
  def _reduce_187(val, _values, result)
                        result = node :assign, :lhs => val[0], :rhs => val[2]
                  
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 410)
  def _reduce_189(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 415)
  def _reduce_191(val, _values, result)
                		    result = node :aset_op_asgn, :recv => val[0], :call_args => val[2], :op => val[4], :arg => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 419)
  def _reduce_192(val, _values, result)
                		    result = node :op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
                    # result = node :dot_identifier_op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
            		  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 429)
  def _reduce_198(val, _values, result)
                		    result = node :dot2, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 433)
  def _reduce_199(val, _values, result)
                		    result = node :dot3, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 437)
  def _reduce_200(val, _values, result)
                		    result = node :opt_plus, :recv => val[0], :meth => '+', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 441)
  def _reduce_201(val, _values, result)
                		    result = node :opt_minus, :recv => val[0], :meth => '-', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 445)
  def _reduce_202(val, _values, result)
                		    result = node :opt_mult, :recv => val[0], :meth => '*', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 449)
  def _reduce_203(val, _values, result)
                		    result = node :opt_div, :recv => val[0], :meth => '/', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 453)
  def _reduce_204(val, _values, result)
                		    result = node :opt_mod, :recv => val[0], :meth => '%', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 457)
  def _reduce_205(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '**', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 464)
  def _reduce_209(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '-@', :call_args => { :args => []}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 468)
  def _reduce_210(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '|', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 472)
  def _reduce_211(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '^', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 476)
  def _reduce_212(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '&', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 480)
  def _reduce_213(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 484)
  def _reduce_214(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 488)
  def _reduce_215(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 492)
  def _reduce_216(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 496)
  def _reduce_217(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 500)
  def _reduce_218(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '==', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 504)
  def _reduce_219(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '===', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 508)
  def _reduce_220(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!=', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 512)
  def _reduce_221(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '=~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 516)
  def _reduce_222(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 520)
  def _reduce_223(val, _values, result)
                  	    result = node :not, :expr => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 524)
  def _reduce_224(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 528)
  def _reduce_225(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 532)
  def _reduce_226(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 536)
  def _reduce_227(val, _values, result)
                		    result = node :andop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 540)
  def _reduce_228(val, _values, result)
                		    result = node :orop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 545)
  def _reduce_230(val, _values, result)
                		    result = node :tertiary, :expr => val[0], :true => val[2], :false => val[5]
            		  
    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 558)
  def _reduce_237(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 563)
  def _reduce_238(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 569)
  def _reduce_240(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 575)
  def _reduce_242(val, _values, result)
                		    result = node :call_args, :args => [val[0]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 579)
  def _reduce_243(val, _values, result)
                		    result = node :call_args, :args => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 583)
  def _reduce_244(val, _values, result)
                		    result = node :call_args, :assocs => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 587)
  def _reduce_245(val, _values, result)
                		    result = node :call_args, :args => val[0], :assocs => val[2], :block_arg => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 591)
  def _reduce_246(val, _values, result)
                		    result = node :call_args, :block_arg => val[0]
            		  
    result
  end
.,.,

# reduce 247 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 598)
  def _reduce_248(val, _values, result)
                        # puts "here for #{val[1]}"
                    # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 604)
  def _reduce_249(val, _values, result)
                        # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 610)
  def _reduce_250(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 251 omitted

# reduce 252 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 617)
  def _reduce_253(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 621)
  def _reduce_254(val, _values, result)
    		                result = [node :splat, :val => val[1]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 625)
  def _reduce_255(val, _values, result)
    		                result = val[0] + [val[2]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 629)
  def _reduce_256(val, _values, result)
    		                result = val[0] + [node :splat, :val => val[3]]
		              
    result
  end
.,.,

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 644)
  def _reduce_266(val, _values, result)
                        # if val[0].node == :self
                      # result = val[0]
                    # else
                      # HACK: this rule shouldnt even exist. But for now it must for "identifier do .. end"
                      result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
                    # end
                  
    result
  end
.,.,

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 656)
  def _reduce_270(val, _values, result)
                  	    result = node :begin, :stmt => val[1]
              	  
    result
  end
.,.,

# reduce 271 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 661)
  def _reduce_272(val, _values, result)
                		    result = node :lparen, :stmt => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 665)
  def _reduce_273(val, _values, result)
                		    result = node :colon2, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 669)
  def _reduce_274(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 673)
  def _reduce_275(val, _values, result)
                		    result = node :array, :args => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 677)
  def _reduce_276(val, _values, result)
                		    result = node :assoc_list, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 681)
  def _reduce_277(val, _values, result)
                		    result = node :return
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 685)
  def _reduce_278(val, _values, result)
            	          result = node :yield, :call_args => val[2]
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 689)
  def _reduce_279(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 693)
  def _reduce_280(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 700)
  def _reduce_284(val, _values, result)
                		    result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 704)
  def _reduce_285(val, _values, result)
                		    # puts 2
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 708)
  def _reduce_286(val, _values, result)
                		    val[0][:brace_block] = val[1]
            		    result = val[0]
            		  
    result
  end
.,.,

# reduce 287 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 714)
  def _reduce_288(val, _values, result)
                		    result = self.node :if, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 718)
  def _reduce_289(val, _values, result)
                		    result = self.node :unless, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

# reduce 290 omitted

# reduce 291 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 724)
  def _reduce_292(val, _values, result)
                		    result = node :case, :expr => val[1], :body => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 728)
  def _reduce_293(val, _values, result)
                		    result = node :case, :expr => nil, :body => val[2]
            		  
    result
  end
.,.,

# reduce 294 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 733)
  def _reduce_295(val, _values, result)
                		    result = self.node_class(:cpath => val[1], :superclass => val[2], :bodystmt => val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 737)
  def _reduce_296(val, _values, result)
                		    result = node :class_shift, :expr => val[2], :bodystmt => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 741)
  def _reduce_297(val, _values, result)
                		    result = self.node_module(:cpath => val[1], :body => val[2])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 745)
  def _reduce_298(val, _values, result)
                		    result = self.node :def, :fname => val[1], :arglist => val[2], :bodystmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 749)
  def _reduce_299(val, _values, result)
                		    result = self.node :def, :singleton => val[1], :fname => val[3], :arglist => val[4], :bodystmt => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 753)
  def _reduce_300(val, _values, result)
                		    result = node :break, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 757)
  def _reduce_301(val, _values, result)
                		    result = node :next, :call_args => nil
            		  
    result
  end
.,.,

# reduce 302 omitted

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

# reduce 312 omitted

# reduce 313 omitted

# reduce 314 omitted

# reduce 315 omitted

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 795)
  def _reduce_321(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 799)
  def _reduce_322(val, _values, result)
                  	    result = [self.node(:elsif, :expr => val[1], :stmt => val[3])] + val[4]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 804)
  def _reduce_323(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 808)
  def _reduce_324(val, _values, result)
                  	    result = [self.node(:else, :stmt => val[1])]
              	  
    result
  end
.,.,

# reduce 325 omitted

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 848)
  def _reduce_355(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

# reduce 356 omitted

# reduce 357 omitted

# reduce 358 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 856)
  def _reduce_359(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 360 omitted

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 879)
  def _reduce_372(val, _values, result)
                        result = node :brace_block, :params => val[1], :stmt => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 884)
  def _reduce_373(val, _values, result)
                        val[0][:brace_block] = val[1]
                    result = val[0]
                  
    result
  end
.,.,

# reduce 374 omitted

# reduce 375 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 892)
  def _reduce_376(val, _values, result)
                        result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 896)
  def _reduce_377(val, _values, result)
                        result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 900)
  def _reduce_378(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2], :args => val[3]
              	    puts "tCOLON2call"
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 905)
  def _reduce_379(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2]
              	    puts "tCOLON2call.noargs."
              	  
    result
  end
.,.,

# reduce 380 omitted

# reduce 381 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 912)
  def _reduce_382(val, _values, result)
                		    result = node :super, :call_args => val[1], :paren => true
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 916)
  def _reduce_383(val, _values, result)
                		    result = node :super, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 920)
  def _reduce_384(val, _values, result)
                        result = node :call, :recv => val[0], :meth => '[]', :call_args => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 926)
  def _reduce_385(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 930)
  def _reduce_386(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 935)
  def _reduce_387(val, _values, result)
                        result = [node(:when, :args => val[1], :stmt => val[3])] + val[4]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 940)
  def _reduce_388(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 389 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 946)
  def _reduce_390(val, _values, result)
                        result = node :rescue, :list => val[1], :var => val[2], :stmt => val[4], :opt_rescue => val[5]
                    # puts result
                  
    result
  end
.,.,

# reduce 391 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 953)
  def _reduce_392(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 957)
  def _reduce_393(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 961)
  def _reduce_394(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 966)
  def _reduce_395(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 970)
  def _reduce_396(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

# reduce 397 omitted

# reduce 398 omitted

# reduce 399 omitted

# reduce 400 omitted

# reduce 401 omitted

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

# reduce 405 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 988)
  def _reduce_406(val, _values, result)
                        result = node :string, :value => val[1], :beg => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 993)
  def _reduce_407(val, _values, result)
                        result = node :xstring, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 998)
  def _reduce_408(val, _values, result)
                        result = node :regexp, :value => val[1]
                  
    result
  end
.,.,

# reduce 409 omitted

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1015)
  def _reduce_417(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

# reduce 418 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1022)
  def _reduce_419(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1027)
  def _reduce_420(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1032)
  def _reduce_421(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1037)
  def _reduce_422(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1042)
  def _reduce_423(val, _values, result)
                        result = node :string_content, :value => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1046)
  def _reduce_424(val, _values, result)
                        result = node :string_dvar, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1050)
  def _reduce_425(val, _values, result)
                        result = node :string_dbeg, :value => val[1]
                  
    result
  end
.,.,

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1060)
  def _reduce_430(val, _values, result)
                        result = node :symbol, :name => val[1]
                  
    result
  end
.,.,

# reduce 431 omitted

# reduce 432 omitted

# reduce 433 omitted

# reduce 434 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1070)
  def _reduce_435(val, _values, result)
                        result = node :dsym, :contents => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1075)
  def _reduce_436(val, _values, result)
                        result = node :numeric, :value => val[0], :float => false
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1079)
  def _reduce_437(val, _values, result)
                        result = node :numeric, :value => val[0], :float => true
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1083)
  def _reduce_438(val, _values, result)
                  	    puts "uminus int hmmmmmmm"
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1087)
  def _reduce_439(val, _values, result)
                		    puts "umins floatttt"
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1093)
  def _reduce_440(val, _values, result)
                        result = node :identifier, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1097)
  def _reduce_441(val, _values, result)
                        result = node :ivar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1101)
  def _reduce_442(val, _values, result)
                        result = node :gvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1105)
  def _reduce_443(val, _values, result)
                        result = node :constant, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1109)
  def _reduce_444(val, _values, result)
                        result = node :cvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1113)
  def _reduce_445(val, _values, result)
                        result = node :nil, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1117)
  def _reduce_446(val, _values, result)
                        result = node :self, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1121)
  def _reduce_447(val, _values, result)
                        result = node :true, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1125)
  def _reduce_448(val, _values, result)
                        result = node :false, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1129)
  def _reduce_449(val, _values, result)
                        result = node :__FILE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1133)
  def _reduce_450(val, _values, result)
                        result = node :__LINE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1137)
  def _reduce_451(val, _values, result)
                        result = node :__ENCODING__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1141)
  def _reduce_452(val, _values, result)
                        # added for block_given? support.. :D
                    result = node :block_given
                  
    result
  end
.,.,

# reduce 453 omitted

# reduce 454 omitted

# reduce 455 omitted

# reduce 456 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1154)
  def _reduce_457(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1158)
  def _reduce_458(val, _values, result)
                		    result = node :superclass, :expr => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1160)
  def _reduce_459(val, _values, result)
     puts 'OMFG' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1164)
  def _reduce_460(val, _values, result)
                        result = val[1]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1169)
  def _reduce_461(val, _values, result)
                        result = val[0]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1175)
  def _reduce_462(val, _values, result)
                        result = node_args(val[0], val[2], val[4], nil, val[5])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1179)
  def _reduce_463(val, _values, result)
                 		    result = node_args(val[0], val[2], val[4], val[6], val[7])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1183)
  def _reduce_464(val, _values, result)
                  	    result = node_args(val[0], val[2], nil, nil, val[3])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1187)
  def _reduce_465(val, _values, result)
                		    result = node_args(val[0], val[2], nil, val[4], val[5])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1191)
  def _reduce_466(val, _values, result)
                		    result = node_args(val[0], nil, val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1195)
  def _reduce_467(val, _values, result)
                		    result = node_args(val[0], nil, val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1199)
  def _reduce_468(val, _values, result)
                 		    result = node_args(val[0], nil, nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1203)
  def _reduce_469(val, _values, result)
                		    result = node_args(nil, val[0], val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1207)
  def _reduce_470(val, _values, result)
                		    result = node_args(nil, val[0], val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1211)
  def _reduce_471(val, _values, result)
                 		    result = node_args(nil, val[0], nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1215)
  def _reduce_472(val, _values, result)
                 		    result = node_args(nil, val[0], nil, val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1219)
  def _reduce_473(val, _values, result)
                 		    result = node_args(nil, nil, val[0], nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1223)
  def _reduce_474(val, _values, result)
                 		    result = node_args(nil, nil, val[0], val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1227)
  def _reduce_475(val, _values, result)
                 		    result = node_args(nil, nil, nil, nil, val[0])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1231)
  def _reduce_476(val, _values, result)
                  	    result = node_args(nil, nil, nil, nil, nil)
              	  
    result
  end
.,.,

# reduce 477 omitted

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1242)
  def _reduce_482(val, _values, result)
                        # result = val[0]
              	    result = node :norm_arg, :value => val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1248)
  def _reduce_483(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1251)
  def _reduce_484(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1256)
  def _reduce_485(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 486 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1262)
  def _reduce_487(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1266)
  def _reduce_488(val, _values, result)
                        # val[0] + val[2]
                    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1279)
  def _reduce_493(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1283)
  def _reduce_494(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 495 omitted

# reduce 496 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1291)
  def _reduce_497(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 498 omitted

# reduce 499 omitted

# reduce 500 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1300)
  def _reduce_501(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1304)
  def _reduce_502(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1309)
  def _reduce_503(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1318)
  def _reduce_507(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1322)
  def _reduce_508(val, _values, result)
                  	    result = val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1327)
  def _reduce_509(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1331)
  def _reduce_510(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1336)
  def _reduce_511(val, _values, result)
                        result = node :assoc, :key => val[0], :value => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1340)
  def _reduce_512(val, _values, result)
                        result = node :label_assoc, :key => val[0], :value => val[1]
                  
    result
  end
.,.,

# reduce 513 omitted

# reduce 514 omitted

# reduce 515 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1350)
  def _reduce_516(val, _values, result)
                      
    result
  end
.,.,

# reduce 517 omitted

# reduce 518 omitted

# reduce 519 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1357)
  def _reduce_520(val, _values, result)
                        puts 4
                  
    result
  end
.,.,

# reduce 521 omitted

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyParser
  end   # module Vienna


