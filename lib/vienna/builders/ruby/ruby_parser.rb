#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
  #
# $Id$
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false
  end

  class Parser

    Racc_Runtime_Version = '1.4.6'
    Racc_Runtime_Revision = '$Id$'

    Racc_Runtime_Core_Version_R = '1.4.6'
    Racc_Runtime_Core_Revision_R = '$Id$'.split[1]
    begin
      require 'racc/cparse'
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c
      Racc_YY_Parse_Method         = :_racc_yyparse_c
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C
      Racc_Runtime_Type            = 'c'
    rescue LoadError
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type
      Racc_Runtime_Type
    end

    private

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    ###
    ### do_parse
    ###

    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      tok = act = i = nil
      nerr = 0

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    ###
    ### yyparse
    ###

    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), true)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg

      _racc_init_sysvars
      nerr = 0

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t == 1   # error token
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      action_table, action_check, action_default, action_pointer,
      goto_table,   goto_check,   goto_default,   goto_pointer,
      nt_base,      reduce_table, token_table,    shift_n,
      reduce_n,     use_result,   * = arg
      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    def yyerror
      throw :racc_jump, 1
    end

    def yyaccept
      throw :racc_jump, 2
    end

    def yyerrok
      @racc_error_status = 0
    end

    #
    # for debugging output
    #

    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
          
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end


# require 'ctokenizer'
require 'strscan'

module Vienna
  class RubyParser < Racc::Parser

module_eval(<<'...end ruby_parser.rb.y/module_eval...', 'ruby_parser.rb.y', 1398)


...end ruby_parser.rb.y/module_eval...
##### State transition tables begin ###

clist = [
'-523,312,313,-10,443,-523,312,313,312,313,312,313,443,-523,-523,-66',
'443,443,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523,-523',
'-523,-523,-523,-523,-523,454,539,443,-452,-523,-523,-523,-523,-523,-523',
'-523,597,4,144,-305,312,313,-523,-523,-523,-93,-455,-523,-523,-523,820',
'-523,141,461,-452,600,356,142,357,473,-523,-523,-523,-523,-305,-305',
'334,144,531,129,-96,450,-97,703,325,328,781,453,159,339,341,344,347',
'322,323,326,329,331,333,336,338,343,345,346,530,-523,145,-523,440,155',
'142,263,-80,265,320,142,440,142,927,142,440,440,334,-99,549,-523,-94',
'821,-523,-523,-523,-523,-523,-523,-523,145,-523,-523,-523,-523,-523',
'440,-521,-88,-523,-523,-523,-521,-523,-10,129,-10,-85,451,-517,-521',
'-521,263,451,265,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,-96,775,-89,129,-521,-521,-521,-521,-521',
'-521,-521,-95,702,815,263,479,265,-521,-521,-521,-100,292,-521,-521',
'-521,-95,-521,324,327,330,332,335,337,340,342,-521,-521,-521,-521,475',
'476,334,142,-91,501,624,-86,539,142,325,328,142,-93,334,339,341,344',
'347,322,323,326,329,331,333,336,338,343,345,346,615,-521,626,-521,324',
'327,330,332,335,337,340,342,539,320,320,-521,614,321,901,-100,423,-521',
'-100,-97,-521,-521,-521,-521,-521,-521,-521,-94,-521,-521,-521,-521',
'-521,499,-522,-87,-521,-521,-521,-522,-521,-95,-85,-95,-92,-96,-521',
'-522,-522,263,812,265,-522,-522,-522,-522,-522,-522,-522,-522,-522,-522',
'-522,-522,-522,-522,-522,-522,-522,-521,807,-521,-521,-522,-522,-522',
'-522,-522,-522,-522,519,-92,-89,263,-517,265,-522,-522,-522,517,518',
'-522,-522,-522,499,-522,324,327,330,332,335,337,340,342,-522,-522,-522',
'-522,324,327,330,332,335,337,340,342,-94,320,-94,334,804,512,263,-99',
'265,-94,772,325,328,334,-95,-517,-97,499,-96,591,-96,325,328,-522,804',
'-522,339,341,344,347,322,323,326,329,331,333,336,338,343,345,346,802',
'-89,-522,592,593,-522,-522,-522,-522,-522,-522,-522,835,-522,-522,-522',
'-522,-522,615,-521,499,-522,-522,-522,-521,-522,263,499,265,-91,-447',
'-86,-521,-521,614,-89,-87,-521,-521,-521,-521,-521,-521,-521,-521,-521',
'-521,-521,-521,-521,-521,-521,615,-521,-96,694,-447,760,-521,-521,-521',
'-521,-521,-521,-97,263,-97,265,614,607,612,-521,-521,-521,263,607,265',
'-521,-521,466,-521,157,160,162,164,468,614,-446,800,-521,324,327,330',
'332,335,337,340,342,-89,-98,324,327,330,332,335,337,340,342,607,263',
'-89,265,334,-446,-89,760,263,544,265,479,325,328,877,799,-521,339,341',
'344,347,322,323,326,329,331,333,336,338,343,345,346,798,763,-87,475',
'476,479,-441,-521,-521,-521,-521,-88,-521,-521,839,-521,-521,-521,-521',
'-521,594,-273,-90,-521,596,-521,-273,-521,718,475,476,523,-441,-518',
'-273,-273,-87,828,760,-273,-273,-273,-273,-273,-273,-273,-273,-273,-273',
'-273,-273,-273,-273,-273,-273,-273,-98,695,-273,-448,-273,-273,-273',
'-273,-273,-273,-273,688,689,263,690,265,-449,-273,-273,-273,32,39,-273',
'-273,-273,142,-273,-273,-273,-448,-451,-385,-274,508,509,-273,-273,-273',
'-273,-454,-518,334,-449,-87,324,327,330,332,335,337,340,342,263,795',
'265,-87,-451,-274,-274,-87,334,263,142,265,-454,-454,-385,-444,325,328',
'-273,334,-273,339,341,344,347,322,323,326,329,331,333,336,338,343,345',
'346,334,-385,-273,-385,-385,-444,-273,-273,-273,-273,-273,-273,-273',
'-273,-273,-273,-273,-273,263,-269,265,-273,-273,-273,-269,-273,320,-95',
'777,-273,428,-273,-269,-269,263,-521,265,-269,-269,-269,-269,-269,-269',
'-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,-269,-273,-273,-273',
'-273,-269,-269,-269,-269,-269,-269,-269,-93,-455,-518,794,-518,-521',
'-269,-269,-269,793,320,-269,-269,-269,579,-269,324,327,330,332,335,337',
'340,342,-269,-269,-269,-269,-521,924,-521,-521,900,791,-450,324,327',
'330,332,335,337,340,342,-517,842,379,324,327,330,332,335,337,340,342',
'925,926,-268,592,593,-269,-450,-269,843,324,327,330,332,335,337,340',
'342,380,786,789,157,160,162,164,417,-269,-454,-268,-268,-269,-269,-269',
'-269,-269,-269,-269,-269,-269,-269,-269,-269,783,-273,658,-269,-269',
'-269,-273,-269,418,419,-454,-454,312,313,-273,-273,828,760,-254,-273',
'-273,-273,-273,-273,-273,-273,-273,-273,-273,-273,-273,-273,-273,-273',
'142,-273,-98,695,334,607,-273,-273,-273,-273,-273,-273,325,328,312,313',
'142,-441,424,-273,-273,-273,-441,-99,549,-273,-273,850,-273,505,-441',
'-441,-94,861,-253,-441,-441,-441,-441,-441,-441,-441,-441,-441,-441',
'-441,-441,-441,-441,-441,-441,-441,-441,-441,506,507,-441,-441,-441',
'-441,-441,-441,-441,296,297,421,256,853,576,-441,-441,-441,-273,772',
'-441,-441,-441,466,-441,157,160,162,164,468,-274,142,-441,356,-441,357',
'-441,257,258,577,578,607,-273,-273,-273,-90,-273,-273,-273,-273,-273',
'-273,-273,-273,142,-274,-274,-273,607,-273,772,-273,-97,778,760,479',
'681,142,-441,119,-441,30,-80,44,50,544,607,-255,324,327,330,332,335',
'337,340,342,723,-275,-441,475,476,477,-441,-441,-441,-441,-441,-441',
'-441,-441,-441,-441,-441,-441,722,113,865,-441,-441,-441,714,-441,-275',
'-275,61,67,71,868,134,142,547,705,99,105,-274,142,142,25,461,34,42,48',
'126,128,68,72,451,680,879,676,881,136,108,5,9,16,23,27,668,-274,-274',
'54,60,66,73,77,86,88,90,93,97,104,112,10,17,658,29,32,39,652,502,-253',
'356,130,357,133,87,649,96,103,139,114,13,18,24,28,33,40,46,21,334,30',
'607,44,50,418,503,-268,325,328,142,633,118,479,305,772,607,-441,57,334',
'623,306,307,308,304,142,479,325,328,424,504,611,-268,-268,609,8,607',
'475,476,496,-514,607,-441,-441,61,67,71,586,134,142,475,476,99,105,-65',
'-514,583,25,580,34,42,48,56,65,68,72,495,-256,544,529,902,100,108,5',
'9,16,23,27,904,527,804,54,60,66,73,77,86,88,90,93,97,104,908,10,17,804',
'29,32,39,804,804,-515,913,130,804,133,87,526,96,103,917,525,13,18,24',
'28,33,40,46,21,334,30,879,44,50,142,510,407,324,327,330,332,335,337',
'340,342,-444,786,57,157,160,162,164,263,129,265,607,324,327,330,332',
'335,337,340,342,8,473,463,459,-515,456,-444,-444,455,61,67,71,607,134',
'449,429,424,99,105,-515,421,473,25,879,34,42,48,56,65,68,72,414,413',
'609,141,388,100,108,5,9,16,23,27,142,303,-517,54,60,66,73,77,86,88,90',
'93,97,104,305,10,17,-518,29,32,39,306,307,308,304,130,804,133,87,945',
'96,103,804,804,13,18,24,28,33,40,46,21,804,30,879,44,50,24,299,295,324',
'327,330,332,335,337,340,342,142,466,57,157,160,162,164,468,466,142,157',
'160,162,164,166,294,147,140,111,8,470,804,,,,467,,169,61,67,71,80,84',
'159,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,155,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,305,10,17,,29,32,39,306,307',
'308,304,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50,,',
',,654,,157,160,162,164,166,,305,57,,,,,495,306,307,308,304,169,,,,,156',
'159,8,,466,,157,160,162,164,468,61,67,71,80,134,,,,99,105,,155,470,25',
'163,34,42,48,56,65,68,72,658,,,,,100,108,5,9,16,23,27,36,,51,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110',
',13,18,24,28,33,40,46,324,327,330,332,335,337,340,342,,191,,199,204',
',212,,,,,57,237,241,,,495,254,178,182,187,196,201,206,209,213,217,151',
',157,160,162,164,166,466,,157,160,162,164,468,334,,,,,169,,,325,328',
'156,159,470,339,341,344,347,322,323,326,329,331,333,336,338,-540,-540',
',,,,,155,,,163,,,,466,149,157,160,162,164,468,,743,482,,466,745,157',
'160,162,164,468,,470,,,218,221,809,,,,334,,470,,255,,,467,325,328,,',
',339,341,344,347,322,323,326,329,331,333,336,181,185,190,194,198,203',
'208,211,215,219,129,191,,199,204,,212,,,,,,237,241,,,,254,178,182,187',
'196,201,206,209,213,217,324,327,330,332,335,337,340,342,,,179,183,188',
',,,,,,222,226,229,232,234,239,244,247,248,252,180,184,189,193,197,202',
'207,210,214,223,227,230,233,236,,,,249,253,177,395,396,397,398,205,',
',399,400,402,228,77,404,242,90,93,406,104,324,327,330,332,335,337,340',
'342,218,221,191,,199,204,,212,,,255,,,237,241,,,,254,178,182,187,196',
'201,206,209,213,217,,,181,185,190,194,198,203,208,211,215,219,401,,151',
',157,160,162,164,166,,,151,,157,160,162,164,166,,,,169,,,,,156,159,',
',169,,,,,156,159,,,466,,157,160,162,164,468,,,155,643,490,163,,644,',
',628,155,470,,163,,,218,221,628,,,,,119,,30,255,44,50,324,327,330,332',
'335,337,340,342,,466,,157,160,162,164,468,,181,185,190,194,198,203,208',
'211,215,219,129,470,,113,466,,157,160,162,164,468,,61,67,71,,134,,,',
'99,105,,470,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,',
',54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,139,114,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,118',
',,,237,241,57,,407,254,178,182,187,196,201,206,209,213,217,654,,157',
'160,162,164,166,151,,157,160,162,164,166,,,,,,169,,,,,156,159,169,,',
',,156,159,466,,157,160,162,164,166,,,,,,,155,,,163,,,169,155,,,163,',
'159,,,939,482,,,940,,,,,,,,,,218,221,,,155,,,119,,30,255,44,50,,,,,',
',,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219,129,,,113,,,,,,',
',,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,144,,,,136',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,,,,,,,145',
',,,,,191,118,199,204,,212,,57,,129,,237,241,,,,254,178,182,187,196,201',
'206,209,213,217,,,,,,,,,,,,151,,157,160,162,164,166,151,,157,160,162',
'164,166,,,,,191,169,199,204,,212,156,159,169,,,237,241,156,159,,254',
'178,182,187,196,201,206,209,213,217,,,155,,,163,640,482,,155,641,,163',
',,,,,,,218,221,151,,157,160,162,164,166,,255,,,,,,,,,,,169,,,,,156,159',
',,181,185,190,194,198,203,208,211,215,219,129,640,482,,,641,,,155,,',
'163,,,,218,221,,,,,,-515,,-515,255,-515,-515,,,,,,,,,,,,,,,,,,181,185',
'190,194,198,203,208,211,215,219,129,,,-515,,,,,,,,,-515,-515,-515,,-515',
',,,-515,-515,,,,-515,,-515,-515,-515,-515,-515,-515,-515,,,,,,-515,-515',
'-515,-515,-515,-515,-515,,,,-515,-515,-515,-515,-515,-515,-515,-515',
'-515,-515,-515,-515,-515,-515,,-515,-515,-515,,,,,-515,,-515,-515,,-515',
'-515,-515,-515,-515,-515,-515,-515,-515,-515,-515,,,,,,,-515,,,,,191',
',199,204,,212,,,-515,,-515,237,241,,,,254,178,182,187,196,201,206,209',
'213,217,,,,,,,,,,,,654,,157,160,162,164,166,151,,157,160,162,164,166',
',,,,191,169,199,204,,212,156,159,169,,,237,241,156,159,,254,178,182',
'187,196,201,206,209,213,217,,,155,,,163,643,490,,155,644,,163,,,,,,',
',218,221,654,,157,160,162,164,166,,255,,,,,,,,,,,169,,,,,156,159,,,181',
'185,190,194,198,203,208,211,215,219,129,603,490,,,604,,,155,,,163,,',
',218,221,,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190,194,198',
'203,208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114',
'13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,118,,,,237,241,57,,129',
'254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,466,,157,160,162',
'164,166,466,,157,160,162,164,166,,,,,191,169,199,204,,212,,159,169,',
',237,241,,159,,254,178,182,187,196,201,206,209,213,217,,,155,,,,708',
'482,,155,709,,,,,,,,,,218,221,466,,157,160,162,164,166,,255,,,,,,,,',
',,169,,,,,,159,,,181,185,190,194,198,203,208,211,215,219,129,711,490',
',,712,,,155,,,,,,,218,221,191,,199,204,,212,,,255,,,237,241,,,,254,178',
'182,187,196,201,206,209,213,217,,,181,185,190,194,198,203,208,211,215',
'219,129,,466,,157,160,162,164,166,,,,,,,,,191,,199,204,169,212,,,,,159',
'237,241,,,,254,178,182,187,196,201,206,209,213,217,,,,,,155,735,490',
',,736,,,,,,,,,,218,221,466,,157,160,162,164,166,,255,,,,,,,,,,,169,',
',,,,159,,,181,185,190,194,198,203,208,211,215,219,129,732,482,,,733',
',,155,,,,,,,218,221,,,,,,119,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185',
'190,194,198,203,208,211,215,219,129,,,113,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60',
'66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96',
'103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,466,,157,160,162,164',
'166,118,,,,,,57,,129,,,,169,,,,,,159,,,,,113,,,,,,,,,61,67,71,,134,',
',155,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,466,,157,160',
'162,164,166,118,,,,,,57,,129,,,,169,,,,,,159,,,,,113,,,,,,,,,61,67,71',
',134,,,155,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130',
',133,87,,96,103,139,114,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212',
',118,,,,237,241,57,,129,254,178,182,187,196,201,206,209,213,217,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,191,,199,204,,212,,,,,,237,241,,,,254,178,182',
'187,196,201,206,209,213,217,,,,,,,481,482,,,486,,,,,,,,334,,218,221',
',,,,325,328,,,255,339,341,344,347,322,323,326,329,331,333,336,338,-540',
'-540,,,,,,181,185,190,194,198,203,208,211,215,219,129,929,482,,,930',
',,,,,,,,,218,221,191,,199,204,,212,,,255,,,237,241,,,,254,178,182,187',
'196,201,206,209,213,217,,,181,185,190,194,198,203,208,211,215,219,129',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,',
',,,,942,490,,,943,,,,,,,,,,218,221,,,,,,119,,30,255,44,50,,,,,,,,,,',
',,,,,,,181,185,190,194,198,203,208,211,215,219,129,,,113,,,,,,,,,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9',
'16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,',
',,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50,,',
',,,,,118,,,,,,57,,129,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96',
'103,,,13,18,24,28,33,40,46,,,,,,,191,,199,204,,212,,,,,,237,241,57,',
'547,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,489,490,,,493,,,,,,,,,,218,221',
',,,,360,21,,30,255,44,50,,,,,,,,,,,,,,,,,,181,185,190,194,198,203,208',
'211,215,219,129,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201',
'206,209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239',
'244,247,248,252,180,184,189,193,197,202,207,210,214,223,227,230,233',
'236,,,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238,242,,',
'250,,,,,,,,,,218,221,,360,21,,30,334,44,50,255,,,18,,325,328,,,,339',
'341,344,347,322,323,326,329,331,333,181,185,190,194,198,203,208,211',
'215,219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,366,87,,96,103,110,,13,18,24,28,33,40,46,360',
'21,,30,,44,50,,,,,324,327,330,332,335,337,340,342,57,,,,,,,,,,,,,,,',
',,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,',
',,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21',
',30,,44,50,,,,,,,334,,,,,,57,,325,328,,,,339,341,344,347,-540,-540,-540',
'-540,-540,-540,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,324,327,330,332,335,337,340,342',
',,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360',
'21,,30,,44,50,,,,,,,334,,,,,,57,,325,328,,,,339,341,344,347,-540,-540',
'-540,-540,-540,-540,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42',
'48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28',
'33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,324,327,330,332,335,337,340',
'342,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40',
'46,360,21,,30,,44,50,,,,,,,334,,,,,,57,,325,328,,,,339,341,344,347,-540',
'-540,-540,-540,-540,-540,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,366,87,,96,103,110,,13,18',
'24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,324,327,330,332,335',
'337,340,342,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42',
'48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28',
'33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,',
',61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204',
',212,,,,,,237,241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,',
',,,,,179,183,188,,,,,,,222,226,229,232,234,239,244,247,248,252,180,184',
'189,193,197,202,207,210,214,223,227,230,233,236,,,,249,253,177,186,192',
'195,200,205,,,216,220,225,228,,238,242,,,250,,,,,,,,,,218,221,,360,21',
'334,30,,44,50,255,,,325,328,,,,339,341,344,347,-540,-540,-540,-540,-540',
'-540,,,181,185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,324,327,330',
'332,335,337,340,342,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,',
'51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87',
',96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,',
',,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254,178,182,187,196,201',
'206,209,213,217,,,,,,,,,,,179,183,188,,,,,,,222,226,229,232,234,239',
'244,247,248,252,180,184,189,193,197,202,207,210,214,223,227,230,233',
'236,,,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238,242,289',
',250,,,,,,,,,,218,221,,360,21,,30,334,44,50,255,,,18,,325,328,,,,339',
'341,344,347,-540,-540,-540,-540,-540,-540,181,185,190,194,198,203,208',
'211,215,219,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'360,21,,30,,44,50,,,,,324,327,330,332,335,337,340,342,57,,,,,,,,,,,',
',,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72',
',,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,',
'10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360',
'21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,237',
'241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188',
',,,,,,222,226,229,232,234,239,244,247,248,252,180,184,189,193,197,202',
'207,210,214,223,227,230,233,236,,,,249,253,177,186,192,195,200,205,',
',216,220,225,228,,238,242,,,250,,,,,,,,,,218,221,,,191,,199,204,,212',
'255,,,18,,237,241,,,,254,178,182,187,196,201,206,209,213,217,181,185',
'190,194,198,203,208,211,215,219,179,183,188,,,,,,,222,226,229,232,234',
'239,244,247,248,252,180,184,189,193,197,202,207,210,214,223,227,230',
'233,236,,,,249,253,177,186,192,195,200,205,,,216,220,225,228,,238,242',
'243,245,250,251,,,,,,,,,218,221,,360,21,,30,,44,50,255,,,,,,,,,,,,,',
',,,,,,181,185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80',
'134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
'36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82',
'87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,237',
'241,,,57,254,178,182,187,196,201,206,209,213,217,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,603,490,,,604,,,,,,,,,,218',
'221,,360,21,334,30,,44,50,255,,,325,328,,,,339,341,344,347,-540,-540',
'-540,-540,-540,-540,,,181,185,190,194,198,203,208,211,215,219,8,,,,',
',,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50',
',,324,327,330,332,335,337,340,342,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61',
'67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13',
'18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,',
'8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,,,,,191,,199',
'204,,212,,,,,,237,241,,,57,254,178,182,187,196,201,206,209,213,217,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,603,490',
',,604,,,,,,,,,,218,221,,360,21,,30,,44,50,255,,,,,,,,,,,,,,,,,,,,181',
'185,190,194,198,203,208,211,215,219,8,,,,,,,,,61,67,71,80,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103',
'110,,13,18,24,28,33,40,46,,,,,191,,199,204,,212,,,,,,237,241,,,57,254',
'178,182,187,196,201,206,209,213,217,,,,,,,,,,,179,183,188,,,,,,,222',
'226,229,232,234,239,244,247,248,252,180,184,189,193,197,202,207,210',
'214,223,227,230,233,236,,,,249,253,177,186,192,195,200,205,,,216,220',
'225,228,,238,242,,,250,,,,,,,,,,218,221,,360,21,,30,,44,50,255,,,18',
',,,,,,,,,,,,,,,,181,185,190,194,198,203,208,211,215,219,8,,,,,,,,,61',
'67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,366,87,,96,103,110,,13',
'18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,',
'8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,',
',100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30',
',44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,',
'99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51',
'54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96',
'103,110,,13,18,24,28,33,40,46,15,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,,8,,,,,,,,,61,67,71,80,84,,,,99,105,,,,25,,34,42,48,56,65',
'68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46',
'360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
'80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74',
',82,87,,96,103,110,,13,18,24,28,33,40,46,360,21,,30,,44,50,,,,,,,,,',
',,,57,,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24',
'28,33,40,46,360,21,,30,,44,50,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,,8,,,,',
',,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33,40,46,21,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88',
'90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,',
',,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,',
',,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139',
'114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,',
',,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68',
'72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
'112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40',
'46,21,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139',
'114,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,',
',,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68',
'72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28',
'33,40,46,119,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108',
'5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39',
',,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103',
'139,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,',
',,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68',
'72,,,,,,136,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112',
'10,17,,29,32,39,,,,,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46',
'21,,30,,44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30',
',44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,',
'99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,',
'96,103,139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57',
',,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56',
'65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46',
'119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71',
',134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,435,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33',
'40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9',
'16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,',
',,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,',
',,,,118,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,',
',25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133,87,,96,103,639',
',13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,',
',113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,',
',,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112',
'10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,',
'30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96',
'103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,',
',,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68',
'72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,',
'30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,',
',99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96',
'103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,',
',,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68',
'72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96',
'103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,',
',,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68',
'72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,114,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,118,,,,,,57',
',,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18,24,28,33',
'40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,108,5,9',
'16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29,32,39,,',
',,130,,133,87,,96,103,139,114,13,18,24,28,33,40,46,21,,30,,44,50,,,',
',,,,118,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,',
',25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,112,10,17,,29',
'32,39,,,,,130,,133,87,,96,103,639,114,13,18,24,28,33,40,46,119,,30,',
'44,50,,,,,,,,118,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,',
',,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,',
',,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104',
',10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119',
',30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134',
',,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27',
',,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87',
',96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,',
',,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68',
'72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10',
'17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,',
'44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,134,,,,99',
'105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54',
'60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103',
'110,,13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,',
',,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,',
',,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17',
',29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44',
'50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,435,',
'13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,639,,13,18,24,28,33,40,46,21,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,',
'61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9',
'16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33',
'40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,',
',,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126',
'128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23',
'27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133',
'87,,96,103,435,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40',
'46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16',
'23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130',
',133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57',
',,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48',
'126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90',
'93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24,28,33',
'40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61',
'67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270',
'9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,',
',130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,',
',,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77,86',
'88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18,24',
'28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,',
',,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32,39',
',,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,,,,',
',,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,73',
'77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13',
'18,24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,21,,30,,44,50,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,8,,,,,,,,,61,67,71,80,84,,,,99,105,,,,25',
',34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,36,,51,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,74,,82,87,,96,103,110,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,780,,13,18,24,28,33,40,46,119,,30,,44,50',
',,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105',
',,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66',
'73,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,',
'13,18,24,28,33,40,46,21,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,8',
',,,,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,56,65,68,72,,,,,,100',
'108,5,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,119,,30,,44,50,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,',
',,,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,,,54,60,66,73,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,130,,133,87,,96,103,,,13,18,24,28,33,40,46,119,,30,,44,50,,,',
',,,,,,,,,,57,,,,,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,',
'25,,34,42,48,56,65,68,72,,,,,,100,108,5,9,16,23,27,,,,54,60,66,73,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,130,,133,87,,96,103,,,13,18',
'24,28,33,40,46,,,,,,,,334,,,,,,,,325,328,,,57,339,341,344,347,322,323',
'326,329,331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344',
'347,322,323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325,328,',
',,339,341,344,347,322,323,326,329,331,333,336,338,343,345,346,334,,',
',,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343',
'345,346,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,',
',,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327',
'330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337',
'340,342,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333',
'336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326',
'329,331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347',
'322,323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339',
'341,344,347,322,323,326,329,331,333,336,338,343,345,346,,,,,,,,,,,,',
',,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330',
'332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340',
'342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,334,,,,,,,,325',
'328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343,345,346,334',
',,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343',
'345,346,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333',
'336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326',
'329,331,333,336,338,343,345,346,,,,,,,,,,,,,,,,,324,327,330,332,335',
'337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,',
',,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,',
'324,327,330,332,335,337,340,342,334,,,,,,,,325,328,,,,339,341,344,347',
'322,323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325,328,,,,339',
'341,344,347,322,323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325',
'328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343,345,346,334',
',,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333,336,338,343',
'345,346,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,',
',,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327',
'330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337',
'340,342,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326,329,331,333',
'336,338,343,345,346,334,,,,,,,,325,328,,,,339,341,344,347,322,323,326',
'329,331,333,336,338,343,345,346,334,665,,,,,,,325,328,,,,339,341,344',
'347,322,323,326,329,331,333,336,338,343,345,346,334,,,,,,,,325,328,',
',,339,341,344,347,322,323,326,329,331,333,336,338,343,345,346,,,,,,',
',,,,,,,,,,324,327,330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327',
'330,332,335,337,340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337',
'340,342,,,,,,,,,,,,,,,,,,,,,324,327,330,332,335,337,340,342,334,,,,',
',,,325,328,278,,,339,341,344,347,322,323,326,329,331,333,336,338,343',
'345,346,,763,,,,,,,,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25,',
'34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,281,77',
'86,88,90,93,97,104,,10,17,,29,32,39,278,,,,282,,133,87,,96,103,,,13',
'18,24,28,33,40,46,,-232,324,327,330,332,335,337,340,342,515,,113,,,',
',,,,,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,',
'29,32,39,,,,,282,,133,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71',
',134,,,,99,105,410,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16',
'23,27,278,,,54,60,66,281,77,377,88,90,93,378,104,,10,17,,29,32,39,,',
',,374,,133,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99',
'105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,',
'54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87',
',96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77',
'86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103,113,,13',
'18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68',
'72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97',
'104,,10,17,,29,32,39,,,,,864,,133,87,,96,103,113,,13,18,24,28,33,40',
'46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274',
'270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32',
'39,,,,,282,,283,87,,96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,',
',,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278',
',,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,282,,283,87',
',96,103,113,,13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34',
'42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,,,,54,60,66,281,77,86',
'88,90,93,97,104,278,10,17,,29,32,39,376,,,,282,,283,87,,96,103,285,',
'13,18,24,28,33,40,46,,,,,,113,,,,,,,,,61,67,71,,134,,,,99,105,,,,25',
',34,42,48,126,128,68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281',
'77,377,88,90,93,378,104,,10,17,,29,32,39,,,,,374,,133,87,,96,103,113',
',13,18,24,28,33,40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128',
'68,72,,,,,,136,274,270,9,16,23,27,278,,,54,60,66,281,77,86,88,90,93',
'97,104,,10,17,,29,32,39,,,,,282,,283,87,,96,103,113,,13,18,24,28,33',
'40,46,61,67,71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136',
'274,270,9,16,23,27,,278,,54,60,66,281,77,86,88,90,93,97,104,,10,17,',
'29,32,39,,,,,352,,82,87,,96,103,110,113,13,18,24,28,33,40,46,,61,67',
'71,,134,,,,99,105,,,,25,,34,42,48,126,128,68,72,,,,,,136,274,270,9,16',
'23,27,,,,54,60,66,281,77,86,88,90,93,97,104,,10,17,,29,32,39,,,,,896',
',133,87,,96,103,,,13,18,24,28,33,40,46' ]
        racc_action_table = arr = Array.new(23245, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'485,437,437,84,145,485,369,369,627,627,729,729,144,485,485,741,356,357',
'485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485,485',
'152,309,473,402,485,485,485,485,485,485,485,375,1,11,107,601,601,485',
'485,485,64,64,485,485,485,696,485,8,166,402,375,79,8,79,693,485,485',
'485,485,107,107,574,271,300,706,732,151,493,493,574,574,654,152,166',
'574,574,574,574,574,574,574,574,574,574,574,574,574,574,574,300,485',
'11,485,145,166,437,309,741,309,896,369,144,627,896,729,356,357,719,321',
'321,485,697,697,485,485,485,485,485,485,485,271,485,485,485,485,485',
'473,640,732,485,485,485,640,485,84,271,84,64,151,732,640,640,601,654',
'601,640,640,640,640,640,640,640,640,640,640,640,640,640,640,640,640',
'640,640,640,493,707,640,640,640,640,640,640,640,489,489,686,375,269',
'375,640,640,640,38,38,640,640,640,942,640,574,574,574,574,574,574,574',
'574,640,640,640,640,269,269,856,574,321,269,394,697,314,683,856,856',
'710,351,720,856,856,856,856,856,856,856,856,856,856,856,856,856,856',
'856,762,640,394,640,719,719,719,719,719,719,719,719,737,74,864,708,762',
'74,864,123,123,640,350,736,640,640,640,640,640,640,640,951,640,640,640',
'640,640,885,482,489,640,640,640,482,640,942,351,942,38,939,708,482,482',
'314,682,314,482,482,482,482,482,482,482,482,482,482,482,482,482,482',
'482,482,482,708,678,708,708,482,482,482,482,482,482,482,289,350,736',
'737,708,737,482,482,482,289,289,482,482,482,726,482,856,856,856,856',
'856,856,856,856,482,482,482,482,720,720,720,720,720,720,720,720,951',
'282,951,575,677,282,885,579,885,840,715,575,575,730,735,939,943,298',
'939,370,939,730,730,482,675,482,730,730,730,730,730,730,730,730,730',
'730,730,730,730,730,730,673,712,482,370,370,482,482,482,482,482,482',
'482,726,482,482,482,482,482,385,481,268,482,482,482,481,482,726,849',
'726,579,395,840,481,481,385,712,735,481,481,481,481,481,481,481,481',
'481,481,481,481,481,481,481,390,481,481,481,395,721,481,481,481,481',
'481,481,943,298,943,298,390,724,384,481,481,481,629,725,629,481,481',
'809,481,809,809,809,809,809,384,396,671,481,575,575,575,575,575,575',
'575,575,712,733,730,730,730,730,730,730,730,730,728,268,712,268,648',
'396,712,888,849,888,849,522,648,648,809,670,481,648,648,648,648,648',
'648,648,648,648,648,648,648,648,648,648,669,648,711,522,522,293,404',
'481,481,481,481,481,481,481,731,481,481,481,481,481,374,641,733,481',
'374,481,641,481,522,293,293,293,404,733,641,641,711,937,937,641,641',
'641,641,641,641,641,641,641,641,641,641,641,641,641,641,641,641,641',
'745,397,641,641,641,641,641,641,641,476,476,367,476,367,398,641,641',
'641,476,476,641,641,641,666,641,745,745,397,399,830,512,278,278,641',
'641,641,641,280,745,562,398,711,648,648,648,648,648,648,648,648,22,664',
'22,711,399,512,512,711,75,318,734,318,280,280,830,406,75,75,641,556',
'641,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,553,830,641,830,830',
'406,641,641,641,641,641,641,641,641,641,641,641,641,749,88,749,641,641',
'641,88,641,130,643,643,709,130,940,88,88,597,743,597,88,88,88,88,88',
'88,88,88,88,88,88,88,88,88,88,88,88,709,709,940,940,88,88,88,88,88,88',
'88,127,127,709,663,940,743,88,88,88,662,352,88,88,88,352,88,562,562',
'562,562,562,562,562,562,88,88,88,88,743,893,743,743,863,660,400,75,75',
'75,75,75,75,75,75,743,738,91,556,556,556,556,556,556,556,556,893,893',
'277,863,863,88,400,88,739,553,553,553,553,553,553,553,553,91,658,659',
'658,658,658,658,117,88,895,277,277,88,88,88,88,88,88,88,88,88,88,88',
'88,657,486,655,88,88,88,486,88,117,117,895,895,59,59,486,486,704,704',
'650,486,486,486,486,486,486,486,486,486,486,486,486,486,486,486,746',
'486,486,486,572,748,486,486,486,486,486,486,572,572,267,267,642,86,638',
'486,486,486,86,428,428,486,486,755,486,276,86,86,776,776,758,86,86,86',
'86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,276,276,86,86,86,86',
'86,86,86,44,44,636,19,761,349,86,86,86,486,635,86,86,86,467,86,467,467',
'467,467,467,927,632,86,86,86,86,86,19,19,349,349,621,486,486,486,486',
'486,486,486,486,486,486,486,486,767,927,927,486,769,486,771,486,644',
'644,610,224,467,587,86,407,86,407,585,407,407,546,545,779,572,572,572',
'572,572,572,572,572,532,594,86,224,224,224,86,86,86,86,86,86,86,86,86',
'86,86,86,531,407,782,86,86,86,514,86,594,594,407,407,407,787,407,513',
'511,500,407,407,596,487,472,407,468,407,407,407,407,407,407,407,466',
'465,811,462,814,407,407,407,407,407,407,407,451,596,596,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,448,407,407,407,438,272',
'433,377,407,377,407,407,431,407,407,407,407,407,407,407,407,407,407',
'407,70,569,70,827,70,70,272,272,894,569,569,425,409,407,266,364,831',
'832,377,407,567,393,364,364,364,364,407,275,567,567,392,275,383,894',
'894,382,70,381,266,266,266,377,847,377,377,70,70,70,365,70,362,275,275',
'70,70,361,377,359,70,353,70,70,70,70,70,70,70,317,862,316,299,866,70',
'70,70,70,70,70,70,867,297,870,70,70,70,70,70,70,70,70,70,70,70,871,70',
'70,872,70,70,70,873,874,378,875,70,876,70,70,296,70,70,878,294,70,70',
'70,70,70,70,70,141,302,141,880,141,141,281,279,274,569,569,569,569,569',
'569,569,569,378,868,70,868,868,868,868,70,270,70,890,567,567,567,567',
'567,567,567,567,141,175,167,161,378,154,378,378,153,141,141,141,899',
'141,150,137,125,141,141,378,120,701,141,916,141,141,141,141,141,141',
'141,116,115,923,113,101,141,141,141,141,141,141,141,73,51,929,141,141',
'141,141,141,141,141,141,141,141,141,52,141,141,930,141,141,141,52,52',
'52,52,141,931,141,141,932,141,141,933,934,141,141,141,141,141,141,141',
'264,935,264,936,264,264,47,46,43,302,302,302,302,302,302,302,302,941',
'169,141,169,169,169,169,169,459,141,459,459,459,459,459,40,12,7,4,264',
'169,952,,,,169,,459,264,264,264,264,264,459,,,264,264,,,,264,,264,264',
'264,264,264,264,264,,,,,459,264,264,264,264,264,264,264,264,,264,264',
'264,264,264,264,264,264,264,264,264,264,742,264,264,,264,264,264,742',
'742,742,742,264,,264,264,,264,264,264,,264,264,264,264,264,264,264,589',
',589,,589,589,,,,,440,,440,440,440,440,440,,584,264,,,,,264,584,584',
'584,584,440,,,,,440,440,589,,917,,917,917,917,917,917,589,589,589,589',
'589,,,,589,589,,440,917,589,440,589,589,589,589,589,589,589,440,,,,',
'589,589,589,589,589,589,589,589,,589,589,589,589,589,589,589,589,589',
'589,589,589,,589,589,,589,589,589,,,,,589,,589,589,,589,589,589,,589',
'589,589,589,589,589,589,259,259,259,259,259,259,259,259,,591,,591,591',
',591,,,,,589,591,591,,,589,591,591,591,591,591,591,591,591,591,591,13',
',13,13,13,13,13,681,,681,681,681,681,681,573,,,,,13,,,573,573,13,13',
'681,573,573,573,573,573,573,573,573,573,573,573,573,573,573,,,,,,13',
',,13,,,,680,13,680,680,680,680,680,,591,591,,470,591,470,470,470,470',
'470,,680,,,591,591,680,,,,566,,470,,591,,,470,566,566,,,,566,566,566',
'566,566,566,566,566,566,566,566,591,591,591,591,591,591,591,591,591',
'591,591,106,,106,106,,106,,,,,,106,106,,,,106,106,106,106,106,106,106',
'106,106,106,573,573,573,573,573,573,573,573,,,106,106,106,,,,,,,106',
'106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106',
'106,106,106,106,106,106,,,,106,106,106,106,106,106,106,106,,,106,106',
'106,106,106,106,106,106,106,106,106,566,566,566,566,566,566,566,566',
'106,106,503,,503,503,,503,,,106,,,503,503,,,,503,503,503,503,503,503',
'503,503,503,503,,,106,106,106,106,106,106,106,106,106,106,106,,765,',
'765,765,765,765,765,,,403,,403,403,403,403,403,,,,765,,,,,765,765,,',
'403,,,,,403,403,,,877,,877,877,877,877,877,,,765,503,503,765,,503,,',
'765,403,877,,403,,,503,503,403,,,,,108,,108,503,108,108,273,273,273',
'273,273,273,273,273,,812,,812,812,812,812,812,,503,503,503,503,503,503',
'503,503,503,503,503,812,,108,879,,879,879,879,879,879,,108,108,108,',
'108,,,,108,108,,879,,108,,108,108,108,108,108,108,108,,,,,,108,108,108',
'108,108,108,108,,,,108,108,108,108,108,108,108,108,108,108,108,108,108',
'108,,108,108,108,,,,,108,,108,108,,108,108,108,108,108,108,108,108,108',
'108,108,,,,,,,924,,924,924,,924,,108,,,,924,924,108,,108,924,924,924',
'924,924,924,924,924,924,924,789,,789,789,789,789,789,149,,149,149,149',
'149,149,,,,,,789,,,,,789,789,149,,,,,149,149,791,,791,791,791,791,791',
',,,,,,789,,,789,,,791,149,,,149,,791,,,924,924,,,924,,,,,,,,,,924,924',
',,791,,,14,,14,924,14,14,,,,,,,,,,,,,,,,,,924,924,924,924,924,924,924',
'924,924,924,924,,,14,,,,,,,,,14,14,14,,14,,,,14,14,,,,14,,14,14,14,14',
'14,14,14,,14,,,,14,14,14,14,14,14,14,,,,14,14,14,14,14,14,14,14,14,14',
'14,14,14,14,,14,14,14,,,,,14,,14,14,,14,14,14,14,14,14,14,14,14,14,14',
',,,,,,14,,,,,,502,14,502,502,,502,,14,,14,,502,502,,,,502,502,502,502',
'502,502,502,502,502,502,,,,,,,,,,,,802,,802,802,802,802,802,628,,628',
'628,628,628,628,,,,,417,802,417,417,,417,802,802,628,,,417,417,628,628',
',417,417,417,417,417,417,417,417,417,417,,,802,,,802,502,502,,628,502',
',628,,,,,,,,502,502,463,,463,463,463,463,463,,502,,,,,,,,,,,463,,,,',
'463,463,,,502,502,502,502,502,502,502,502,502,502,502,417,417,,,417',
',,463,,,463,,,,417,417,,,,,,97,,97,417,97,97,,,,,,,,,,,,,,,,,,417,417',
'417,417,417,417,417,417,417,417,417,,,97,,,,,,,,,97,97,97,,97,,,,97',
'97,,,,97,,97,97,97,97,97,97,97,,,,,,97,97,97,97,97,97,97,,,,97,97,97',
'97,97,97,97,97,97,97,97,97,97,97,,97,97,97,,,,,97,,97,97,,97,97,97,97',
'97,97,97,97,97,97,97,,,,,,,97,,,,,419,,419,419,,419,,,97,,97,419,419',
',,,419,419,419,419,419,419,419,419,419,419,,,,,,,,,,,,783,,783,783,783',
'783,783,456,,456,456,456,456,456,,,,,593,783,593,593,,593,783,783,456',
',,593,593,456,456,,593,593,593,593,593,593,593,593,593,593,,,783,,,783',
'419,419,,456,419,,456,,,,,,,,419,419,902,,902,902,902,902,902,,419,',
',,,,,,,,,902,,,,,902,902,,,419,419,419,419,419,419,419,419,419,419,419',
'593,593,,,593,,,902,,,902,,,,593,593,,,,,,488,,488,593,488,488,,,,,',
',,,,,,,,,,,,593,593,593,593,593,593,593,593,593,593,593,,,488,,,,,,',
',,488,488,488,,488,,,,488,488,,,,488,,488,488,488,488,488,488,488,,',
',,,488,488,488,488,488,488,488,,,,488,488,488,488,488,488,488,488,488',
'488,488,488,488,488,,488,488,488,,,,,488,,488,488,,488,488,488,488,488',
'488,488,488,488,488,488,,,,,,,505,,505,505,,505,,488,,,,505,505,488',
',488,505,505,505,505,505,505,505,505,505,505,,,,,,,,,,,,807,,807,807',
'807,807,807,913,,913,913,913,913,913,,,,,507,807,507,507,,507,,807,913',
',,507,507,,913,,507,507,507,507,507,507,507,507,507,507,,,807,,,,505',
'505,,913,505,,,,,,,,,,505,505,908,,908,908,908,908,908,,505,,,,,,,,',
',,908,,,,,,908,,,505,505,505,505,505,505,505,505,505,505,505,507,507',
',,507,,,908,,,,,,,507,507,578,,578,578,,578,,,507,,,578,578,,,,578,578',
'578,578,578,578,578,578,578,578,,,507,507,507,507,507,507,507,507,507',
'507,507,,904,,904,904,904,904,904,,,,,,,,,576,,576,576,904,576,,,,,904',
'576,576,,,,576,576,576,576,576,576,576,576,576,576,,,,,,904,578,578',
',,578,,,,,,,,,,578,578,945,,945,945,945,945,945,,578,,,,,,,,,,,945,',
',,,,945,,,578,578,578,578,578,578,578,578,578,578,578,576,576,,,576',
',,945,,,,,,,576,576,,,,,,480,,480,576,480,480,,,,,,,,,,,,,,,,,,576,576',
'576,576,576,576,576,576,576,576,576,,,480,,,,,,,,,480,480,480,,480,',
',,480,480,,,,480,,480,480,480,480,480,480,480,,,,,,480,480,480,480,480',
'480,480,,,,480,480,480,480,480,480,480,480,480,480,480,480,480,480,',
'480,480,480,,,,,480,,480,480,,480,480,480,480,480,480,480,480,480,480',
'480,5,,5,,5,5,800,,800,800,800,800,800,480,,,,,,480,,480,,,,800,,,,',
',800,,,,,5,,,,,,,,,5,5,5,,5,,,800,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5',
'5,5,5,5,,,,5,5,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,,,,5,,5,5,,5,5,5,5,5',
'5,5,5,5,5,5,605,,605,,605,605,804,,804,804,804,804,804,5,,,,,,5,,5,',
',,804,,,,,,804,,,,,605,,,,,,,,,605,605,605,,605,,,804,605,605,,,,605',
',605,605,605,605,605,605,605,,,,,,605,605,605,605,605,605,605,,,,605',
'605,605,605,605,605,605,605,605,605,605,605,605,605,,605,605,605,,,',
',605,,605,605,,605,605,605,605,605,605,605,605,605,605,605,,,,,,,256',
',256,256,,256,,605,,,,256,256,605,,605,256,256,256,256,256,256,256,256',
'256,256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,900,,900,900,,900,,,,,,900,900',
',,,900,900,900,900,900,900,900,900,900,900,,,,,,,256,256,,,256,,,,,',
',,571,,256,256,,,,,571,571,,,256,571,571,571,571,571,571,571,571,571',
'571,571,571,571,571,,,,,,256,256,256,256,256,256,256,256,256,256,256',
'900,900,,,900,,,,,,,,,,900,900,926,,926,926,,926,,,900,,,926,926,,,',
'926,926,926,926,926,926,926,926,926,926,,,900,900,900,900,900,900,900',
'900,900,900,900,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,571,571,571,571,571,571',
'571,571,,,,,,,,,,,926,926,,,926,,,,,,,,,,926,926,,,,,,602,,602,926,602',
'602,,,,,,,,,,,,,,,,,,926,926,926,926,926,926,926,926,926,926,926,,,602',
',,,,,,,,602,602,602,,602,,,,602,602,,,,602,,602,602,602,602,602,602',
'602,,,,,,602,602,602,602,602,602,602,,,,602,602,602,602,602,602,602',
'602,602,602,602,602,602,602,,602,602,602,,,,,602,,602,602,,602,602,602',
'602,602,602,602,602,602,602,602,319,,319,,319,319,,,,,,,,602,,,,,,602',
',602,,,,,,,,,,,,,,,319,,,,,,,,,319,319,319,,319,,,,319,319,,,,319,,319',
'319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319,,,,319,319',
'319,319,319,319,319,319,319,319,319,,319,319,,319,319,319,,,,,319,,319',
'319,,319,319,,,319,319,319,319,319,319,319,,,,,,,258,,258,258,,258,',
',,,,258,258,319,,319,258,258,258,258,258,258,258,258,258,258,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,258,258,,,258',
',,,,,,,,,258,258,,,,,598,598,,598,258,598,598,,,,,,,,,,,,,,,,,,258,258',
'258,258,258,258,258,258,258,258,258,,,598,,,,,,,,,598,598,598,598,598',
',,,598,598,,,,598,,598,598,598,598,598,598,598,,,,,,598,598,598,598',
'598,598,598,598,,598,598,598,598,598,598,598,598,598,598,598,598,,598',
'598,,598,598,598,,,,,598,,598,598,,598,598,598,,598,598,598,598,598',
'598,598,,,,,80,,80,80,,80,,,,,,80,80,,,598,80,80,80,80,80,80,80,80,80',
'80,,,,,,,,,,,80,80,80,,,,,,,80,80,80,80,80,80,80,80,80,80,80,80,80,80',
'80,80,80,80,80,80,80,80,80,80,,,,80,80,80,80,80,80,80,80,,,80,80,80',
'80,,80,80,,,80,,,,,,,,,,80,80,,82,82,,82,564,82,82,80,,,80,,564,564',
',,,564,564,564,564,564,564,564,564,564,564,80,80,80,80,80,80,80,80,80',
'80,82,,,,,,,,,82,82,82,82,82,,,,82,82,,,,82,,82,82,82,82,82,82,82,,',
',,,82,82,82,82,82,82,82,82,,82,82,82,82,82,82,82,82,82,82,82,82,,82',
'82,,82,82,82,,,,,82,,82,82,,82,82,82,,82,82,82,82,82,82,82,475,475,',
'475,,475,475,,,,,564,564,564,564,564,564,564,564,82,,,,,,,,,,,,,,,,',
',475,,,,,,,,,475,475,475,475,475,,,,475,475,,,,475,,475,475,475,475',
'475,475,475,,,,,,475,475,475,475,475,475,475,475,,475,475,475,475,475',
'475,475,475,475,475,475,475,,475,475,,475,475,475,,,,,475,,475,475,',
'475,475,475,,475,475,475,475,475,475,475,454,454,,454,,454,454,,,,,',
',561,,,,,,475,,561,561,,,,561,561,561,561,561,561,561,561,561,561,,454',
',,,,,,,,454,454,454,454,454,,,,454,454,,,,454,,454,454,454,454,454,454',
'454,,,,,,454,454,454,454,454,454,454,454,,454,454,454,454,454,454,454',
'454,454,454,454,454,,454,454,,454,454,454,,,,,454,,454,454,,454,454',
'454,,454,454,454,454,454,454,454,453,453,,453,,453,453,,,,,,,,,,,,,454',
'561,561,561,561,561,561,561,561,,,,,,,,,,453,,,,,,,,,453,453,453,453',
'453,,,,453,453,,,,453,,453,453,453,453,453,453,453,,,,,,453,453,453',
'453,453,453,453,453,,453,453,453,453,453,453,453,453,453,453,453,453',
',453,453,,453,453,453,,,,,453,,453,453,,453,453,453,,453,453,453,453',
'453,453,453,445,445,,445,,445,445,,,,,,,559,,,,,,453,,559,559,,,,559',
'559,559,559,559,559,559,559,559,559,,445,,,,,,,,,445,445,445,445,445',
',,,445,445,,,,445,,445,445,445,445,445,445,445,,,,,,445,445,445,445',
'445,445,445,445,,445,445,445,445,445,445,445,445,445,445,445,445,,445',
'445,,445,445,445,,,,,445,,445,445,,445,445,445,,445,445,445,445,445',
'445,445,442,442,,442,,442,442,,,,,,,,,,,,,445,559,559,559,559,559,559',
'559,559,,,,,,,,,,442,,,,,,,,,442,442,442,442,442,,,,442,442,,,,442,',
'442,442,442,442,442,442,442,,,,,,442,442,442,442,442,442,442,442,,442',
'442,442,442,442,442,442,442,442,442,442,442,,442,442,,442,442,442,,',
',,442,,442,442,,442,442,442,,442,442,442,442,442,442,442,283,283,,283',
',283,283,,,,,,,557,,,,,,442,,557,557,,,,557,557,557,557,557,557,557',
'557,557,557,,283,,,,,,,,,283,283,283,283,283,,,,283,283,,,,283,,283',
'283,283,283,283,283,283,,,,,,283,283,283,283,283,283,283,283,,283,283',
'283,283,283,283,283,283,283,283,283,283,,283,283,,283,283,283,,,,,283',
',283,283,,283,283,283,,283,283,283,283,283,283,283,95,95,,95,,95,95',
',,,,,,,,,,,,283,557,557,557,557,557,557,557,557,,,,,,,,,,95,,,,,,,,',
'95,95,95,95,95,,,,95,95,,,,95,,95,95,95,95,95,95,95,,,,,,95,95,95,95',
'95,95,95,95,,95,95,95,95,95,95,95,95,95,95,95,95,,95,95,,95,95,95,,',
',,95,,95,95,,95,95,95,,95,95,95,95,95,95,95,498,498,,498,,498,498,,',
',,,,,,,,,,95,,,,,,,,,,,,,,,,,,498,,,,,,,,,498,498,498,498,498,,,,498',
'498,,,,498,,498,498,498,498,498,498,498,,,,,,498,498,498,498,498,498',
'498,498,,498,498,498,498,498,498,498,498,498,498,498,498,,498,498,,498',
'498,498,,,,,498,,498,498,,498,498,498,,498,498,498,498,498,498,498,',
',,,625,,625,625,,625,,,,,,625,625,,,498,625,625,625,625,625,625,625',
'625,625,625,,,,,,,,,,,625,625,625,,,,,,,625,625,625,625,625,625,625',
'625,625,625,625,625,625,625,625,625,625,625,625,625,625,625,625,625',
',,,625,625,625,625,625,625,625,625,,,625,625,625,625,,625,625,,,625',
',,,,,,,,,625,625,,630,630,554,630,,630,630,625,,,554,554,,,,554,554',
'554,554,554,554,554,554,554,554,,,625,625,625,625,625,625,625,625,625',
'625,630,,,,,,,,,630,630,630,630,630,,,,630,630,,,,630,,630,630,630,630',
'630,630,630,,,,,,630,630,630,630,630,630,630,630,,630,630,630,630,630',
'630,630,630,630,630,630,630,,630,630,,630,630,630,,,,,630,,630,630,',
'630,630,630,,630,630,630,630,630,630,630,760,760,,760,,760,760,,,554',
'554,554,554,554,554,554,554,,,630,,,,,,,,,,,,,,,,,,760,,,,,,,,,760,760',
'760,760,760,,,,760,760,,,,760,,760,760,760,760,760,760,760,,,,,,760',
'760,760,760,760,760,760,760,,760,760,760,760,760,760,760,760,760,760',
'760,760,,760,760,,760,760,760,,,,,760,,760,760,,760,760,760,,760,760',
'760,760,760,760,760,750,750,,750,,750,750,,,,,,,,,,,,,760,,,,,,,,,,',
',,,,,,,750,,,,,,,,,750,750,750,750,750,,,,750,750,,,,750,,750,750,750',
'750,750,750,750,,,,,,750,750,750,750,750,750,750,750,,750,750,750,750',
'750,750,750,750,750,750,750,750,,750,750,,750,750,750,,,,,750,,750,750',
',750,750,750,,750,750,750,750,750,750,750,,,,,36,,36,36,,36,,,,,,36',
'36,,,750,36,36,36,36,36,36,36,36,36,36,,,,,,,,,,,36,36,36,,,,,,,36,36',
'36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,,',
',36,36,36,36,36,36,36,36,,,36,36,36,36,,36,36,36,,36,,,,,,,,,,36,36',
',303,303,,303,551,303,303,36,,,36,,551,551,,,,551,551,551,551,551,551',
'551,551,551,551,36,36,36,36,36,36,36,36,36,36,303,,,,,,,,,303,303,303',
'303,303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303',
'303,303,303,303,303,303,,303,303,303,303,303,303,303,303,303,303,303',
'303,,303,303,,303,303,303,,,,,303,,303,303,,303,303,303,,303,303,303',
'303,303,303,303,836,836,,836,,836,836,,,,,551,551,551,551,551,551,551',
'551,303,,,,,,,,,,,,,,,,,,836,,,,,,,,,836,836,836,836,836,,,,836,836',
',,,836,,836,836,836,836,836,836,836,,,,,,836,836,836,836,836,836,836',
'836,,836,836,836,836,836,836,836,836,836,836,836,836,,836,836,,836,836',
'836,,,,,836,,836,836,,836,836,836,,836,836,836,836,836,836,836,389,389',
',389,,389,389,,,,,,,,,,,,,836,,,,,,,,,,,,,,,,,,389,,,,,,,,,389,389,389',
'389,389,,,,389,389,,,,389,,389,389,389,389,389,389,389,,,,,,389,389',
'389,389,389,389,389,389,,389,389,389,389,389,389,389,389,389,389,389',
'389,,389,389,,389,389,389,,,,,389,,389,389,,389,389,389,,389,389,389',
'389,389,389,389,,,,,583,,583,583,,583,,,,,,583,583,,,389,583,583,583',
'583,583,583,583,583,583,583,,,,,,,,,,,583,583,583,,,,,,,583,583,583',
'583,583,583,583,583,583,583,583,583,583,583,583,583,583,583,583,583',
'583,583,583,583,,,,583,583,583,583,583,583,583,583,,,583,583,583,583',
',583,583,,,583,,,,,,,,,,583,583,,,18,,18,18,,18,583,,,583,,18,18,,,',
'18,18,18,18,18,18,18,18,18,18,583,583,583,583,583,583,583,583,583,583',
'18,18,18,,,,,,,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18',
'18,18,18,18,18,18,,,,18,18,18,18,18,18,18,18,,,18,18,18,18,,18,18,18',
'18,18,18,,,,,,,,,18,18,,841,841,,841,,841,841,18,,,,,,,,,,,,,,,,,,,',
'18,18,18,18,18,18,18,18,18,18,841,,,,,,,,,841,841,841,841,841,,,,841',
'841,,,,841,,841,841,841,841,841,841,841,,,,,,841,841,841,841,841,841',
'841,841,,841,841,841,841,841,841,841,841,841,841,841,841,,841,841,,841',
'841,841,,,,,841,,841,841,,841,841,841,,841,841,841,841,841,841,841,',
',,,380,,380,380,,380,,,,,,380,380,,,841,380,380,380,380,380,380,380',
'380,380,380,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,380,380,,,380,,,,,,,,,,380,380,,918,918,550,918,,918,918,380,,',
'550,550,,,,550,550,550,550,550,550,550,550,550,550,,,380,380,380,380',
'380,380,380,380,380,380,918,,,,,,,,,918,918,918,918,918,,,,918,918,',
',,918,,918,918,918,918,918,918,918,,,,,,918,918,918,918,918,918,918',
'918,,918,918,918,918,918,918,918,918,918,918,918,918,,918,918,,918,918',
'918,,,,,918,,918,918,,918,918,918,,918,918,918,918,918,918,918,582,582',
',582,,582,582,,,550,550,550,550,550,550,550,550,,,918,,,,,,,,,,,,,,',
',,,582,,,,,,,,,582,582,582,582,582,,,,582,582,,,,582,,582,582,582,582',
'582,582,582,,,,,,582,582,582,582,582,582,582,582,,582,582,582,582,582',
'582,582,582,582,582,582,582,,582,582,,582,582,582,,,,,582,,582,582,',
'582,582,582,,582,582,582,582,582,582,582,581,581,,581,,581,581,,,,,',
',,,,,,,582,,,,,,,,,,,,,,,,,,581,,,,,,,,,581,581,581,581,581,,,,581,581',
',,,581,,581,581,581,581,581,581,581,,,,,,581,581,581,581,581,581,581',
'581,,581,581,581,581,581,581,581,581,581,581,581,581,,581,581,,581,581',
'581,,,,,581,,581,581,,581,581,581,,581,581,581,581,581,581,581,892,892',
',892,,892,892,,,,,,,,,,,,,581,,,,,,,,,,,,,,,,,,892,,,,,,,,,892,892,892',
'892,892,,,,892,892,,,,892,,892,892,892,892,892,892,892,,,,,,892,892',
'892,892,892,892,892,892,,892,892,892,892,892,892,892,892,892,892,892',
'892,,892,892,,892,892,892,,,,,892,,892,892,,892,892,892,,892,892,892',
'892,892,892,892,,,,,379,,379,379,,379,,,,,,379,379,,,892,379,379,379',
'379,379,379,379,379,379,379,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,379,379,,,379,,,,,,,,,,379,379,,685,685,,685,,685',
'685,379,,,,,,,,,,,,,,,,,,,,379,379,379,379,379,379,379,379,379,379,685',
',,,,,,,,685,685,685,685,685,,,,685,685,,,,685,,685,685,685,685,685,685',
'685,,,,,,685,685,685,685,685,685,685,685,,685,685,685,685,685,685,685',
'685,685,685,685,685,,685,685,,685,685,685,,,,,685,,685,685,,685,685',
'685,,685,685,685,685,685,685,685,,,,,516,,516,516,,516,,,,,,516,516',
',,685,516,516,516,516,516,516,516,516,516,516,,,,,,,,,,,516,516,516',
',,,,,,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516,516',
'516,516,516,516,516,516,516,516,,,,516,516,516,516,516,516,516,516,',
',516,516,516,516,,516,516,,,516,,,,,,,,,,516,516,,857,857,,857,,857',
'857,516,,,516,,,,,,,,,,,,,,,,,516,516,516,516,516,516,516,516,516,516',
'857,,,,,,,,,857,857,857,857,857,,,,857,857,,,,857,,857,857,857,857,857',
'857,857,,,,,,857,857,857,857,857,857,857,857,,857,857,857,857,857,857',
'857,857,857,857,857,857,,857,857,,857,857,857,,,,,857,,857,857,,857',
'857,857,,857,857,857,857,857,857,857,366,366,,366,,366,366,,,,,,,,,',
',,,857,,,,,,,,,,,,,,,,,,366,,,,,,,,,366,366,366,366,366,,,,366,366,',
',,366,,366,366,366,366,366,366,366,,,,,,366,366,366,366,366,366,366',
'366,,366,366,366,366,366,366,366,366,366,366,366,366,,366,366,,366,366',
'366,,,,,366,,366,366,,366,366,366,,366,366,366,366,366,366,366,528,528',
',528,,528,528,,,,,,,,,,,,,366,,,,,,,,,,,,,,,,,,528,,,,,,,,,528,528,528',
'528,528,,,,528,528,,,,528,,528,528,528,528,528,528,528,,,,,,528,528',
'528,528,528,528,528,528,,528,528,528,528,528,528,528,528,528,528,528',
'528,,528,528,,528,528,528,,,,,528,,528,528,,528,528,528,,528,528,528',
'528,528,528,528,540,540,,540,,540,540,,,,,,,,,,,,,528,,,,,,,,,,,,,,',
',,,540,,,,,,,,,540,540,540,540,540,,,,540,540,,,,540,,540,540,540,540',
'540,540,540,,,,,,540,540,540,540,540,540,540,540,,540,540,540,540,540',
'540,540,540,540,540,540,540,,540,540,,540,540,540,,,,,540,,540,540,',
'540,540,540,,540,540,540,540,540,540,540,3,3,,3,,3,3,,,,,,,,,,,,,540',
',,,,,,,,,,,,,,,,,3,,,,,,,,,3,3,3,3,3,,,,3,3,,,,3,,3,3,3,3,3,3,3,,,,',
',3,3,3,3,3,3,3,3,,3,3,3,3,3,3,3,3,3,3,3,3,,3,3,,3,3,3,,,,,3,,3,3,,3',
'3,3,,3,3,3,3,3,3,3,133,133,,133,,133,133,,,,,,,,,,,,,3,,,,,,,,,,,,,',
',,,,133,,,,,,,,,133,133,133,133,133,,,,133,133,,,,133,,133,133,133,133',
'133,133,133,,,,,,133,133,133,133,133,133,133,133,,133,133,133,133,133',
'133,133,133,133,133,133,133,,133,133,,133,133,133,,,,,133,,133,133,',
'133,133,133,,133,133,133,133,133,133,133,543,543,,543,,543,543,,,,,',
',,,,,,,133,,,,,,,,,,,,,,,,,,543,,,,,,,,,543,543,543,543,543,,,,543,543',
',,,543,,543,543,543,543,543,543,543,,,,,,543,543,543,543,543,543,543',
'543,,543,543,543,543,543,543,543,543,543,543,543,543,,543,543,,543,543',
'543,,,,,543,,543,543,,543,543,543,,543,543,543,543,543,543,543,853,853',
',853,,853,853,,,,,,,,,,,,,543,,,,,,,,,,,,,,,,,,853,,,,,,,,,853,853,853',
'853,853,,,,853,853,,,,853,,853,853,853,853,853,853,853,,,,,,853,853',
'853,853,853,853,853,853,,853,853,853,853,853,853,853,853,853,853,853',
'853,,853,853,,853,853,853,,,,,853,,853,853,,853,853,853,,853,853,853',
'853,853,853,853,307,,307,,307,307,,,,,,,,,,,,,,853,,,,,,,,,,,,,,,,,307',
',,,,,,,,307,307,307,,307,,,,307,307,,,,307,,307,307,307,307,307,307',
'307,,,,,,307,307,307,307,307,307,307,,,,307,307,307,307,307,307,307',
'307,307,307,307,,307,307,,307,307,307,,,,,307,,307,307,,307,307,,,307',
'307,307,307,307,307,307,139,,139,,139,139,,,,,,,,,,,,,,307,,,,,,,,,',
',,,,,,,139,,,,,,,,,139,139,139,,139,,,,139,139,,,,139,,139,139,139,139',
'139,139,139,,,,,,139,139,139,139,139,139,139,,,,139,139,139,139,139',
'139,139,139,139,139,139,,139,139,,139,139,139,,,,,139,,139,139,,139',
'139,,,139,139,139,139,139,139,139,143,,143,,143,143,,,,,,,,,,,,,,139',
',,,,,,,,,,,,,,,,143,,,,,,,,,143,143,143,,143,,,,143,143,,,,143,,143',
'143,143,143,143,143,143,,,,,,143,143,143,143,143,143,143,,,,143,143',
'143,143,143,143,143,143,143,143,143,,143,143,,143,143,143,,,,,143,,143',
'143,,143,143,,,143,143,143,143,143,143,143,778,,778,,778,778,,,,,,,',
',,,,,,143,,,,,,,,,,,,,,,,,778,,,,,,,,,778,778,778,,778,,,,778,778,,',
',778,,778,778,778,778,778,778,778,,,,,,778,778,778,778,778,778,778,',
',,778,778,778,778,778,778,778,778,778,778,778,,778,778,,778,778,778',
',,,,778,,778,778,,778,778,,,778,778,778,778,778,778,778,544,,544,,544',
'544,,,,,,,,,,,,,,778,,,,,,,,,,,,,,,,,544,,,,,,,,,544,544,544,,544,,',
',544,544,,,,544,,544,544,544,544,544,544,544,,,,,,544,544,544,544,544',
'544,544,,,,544,544,544,544,544,544,544,544,544,544,544,,544,544,,544',
'544,544,,,,,544,,544,544,,544,544,544,,544,544,544,544,544,544,544,147',
',147,,147,147,,,,,,,,,,,,,,544,,,,,,,,,,,,,,,,,147,,,,,,,,,147,147,147',
',147,,,,147,147,,,,147,,147,147,147,147,147,147,147,,,,,,147,147,147',
'147,147,147,147,,,,147,147,147,147,147,147,147,147,147,147,147,,147',
'147,,147,147,147,,,,,147,,147,147,,147,147,,,147,147,147,147,147,147',
'147,777,,777,,777,777,,,,,,,,,,,,,,147,,,,,,,,,,,,,,,,,777,,,,,,,,,777',
'777,777,,777,,,,777,777,,,,777,,777,777,777,777,777,777,777,,,,,,777',
'777,777,777,777,777,777,,,,777,777,777,777,777,777,777,777,777,777,777',
',777,777,,777,777,777,,,,,777,,777,777,,777,777,,,777,777,777,777,777',
'777,777,547,,547,,547,547,,,,,,,,,,,,,,777,,,,,,,,,,,,,,,,,547,,,,,',
',,,547,547,547,,547,,,,547,547,,,,547,,547,547,547,547,547,547,547,',
',,,,547,547,547,547,547,547,547,,,,547,547,547,547,547,547,547,547,547',
'547,547,,547,547,,547,547,547,,,,,547,,547,547,,547,547,,,547,547,547',
'547,547,547,547,549,,549,,549,549,,,,,,,,,,,,,,547,,,,,,,,,,,,,,,,,549',
',,,,,,,,549,549,549,,549,,,,549,549,,,,549,,549,549,549,549,549,549',
'549,,,,,,549,549,549,549,549,549,549,,,,549,549,549,549,549,549,549',
'549,549,549,549,,549,549,,549,549,549,,,,,549,,549,549,,549,549,,,549',
'549,549,549,549,549,549,780,,780,,780,780,,,,,,,,,,,,,,549,,,,,,,,,',
',,,,,,,780,,,,,,,,,780,780,780,,780,,,,780,780,,,,780,,780,780,780,780',
'780,780,780,,,,,,780,780,780,780,780,780,780,,,,780,780,780,780,780',
'780,780,780,780,780,780,,780,780,,780,780,780,,,,,780,,780,780,,780',
'780,,,780,780,780,780,780,780,780,129,,129,,129,129,,,,,,,,,,,,,,780',
',,,,,,,,,,,,,,,,129,,,,,,,,,129,129,129,,129,,,,129,129,,,,129,,129',
'129,129,129,129,129,129,,,,,,129,129,129,129,129,129,129,,,,129,129',
'129,129,129,129,129,129,129,129,129,129,129,129,,129,129,129,,,,,129',
',129,129,,129,129,129,129,129,129,129,129,129,129,129,527,,527,,527',
'527,,,,,,,,129,,,,,,129,,,,,,,,,,,,,,,,,527,,,,,,,,,527,527,527,,527',
',,,527,527,,,,527,,527,527,527,527,527,527,527,,,,,,527,527,527,527',
'527,527,527,,,,527,527,527,527,527,527,527,527,527,527,527,,527,527',
',527,527,527,,,,,527,,527,527,,527,527,,,527,527,527,527,527,527,527',
'526,,526,,526,526,,,,,,,,,,,,,,527,,,,,,,,,,,,,,,,,526,,,,,,,,,526,526',
'526,,526,,,,526,526,,,,526,,526,526,526,526,526,526,526,,,,,,526,526',
'526,526,526,526,526,,,,526,526,526,526,526,526,526,526,526,526,526,',
'526,526,,526,526,526,,,,,526,,526,526,,526,526,,,526,526,526,526,526',
'526,526,577,,577,,577,577,,,,,,,,,,,,,,526,,,,,,,,,,,,,,,,,577,,,,,',
',,,577,577,577,,577,,,,577,577,,,,577,,577,577,577,577,577,577,577,',
',,,,577,577,577,577,577,577,577,,,,577,577,577,577,577,577,577,577,577',
'577,577,577,577,577,,577,577,577,,,,,577,,577,577,,577,577,577,577,577',
'577,577,577,577,577,577,580,,580,,580,580,,,,,,,,577,,,,,,577,,,,,,',
',,,,,,,,,,580,,,,,,,,,580,580,580,,580,,,,580,580,,,,580,,580,580,580',
'580,580,580,580,,,,,,580,580,580,580,580,580,580,,,,580,580,580,580',
'580,580,580,580,580,580,580,,580,580,,580,580,580,,,,,580,,580,580,',
'580,580,,,580,580,580,580,580,580,580,506,,506,,506,506,,,,,,,,,,,,',
',580,,,,,,,,,,,,,,,,,506,,,,,,,,,506,506,506,,506,,,,506,506,,,,506',
',506,506,506,506,506,506,506,,,,,,506,506,506,506,506,506,506,,,,506',
'506,506,506,506,506,506,506,506,506,506,506,506,506,,506,506,506,,,',
',506,,506,506,,506,506,506,506,506,506,506,506,506,506,506,118,,118',
',118,118,,,,,,,,506,,,,,,506,,,,,,,,,,,,,,,,,118,,,,,,,,,118,118,118',
',118,,,,118,118,,,,118,,118,118,118,118,118,118,118,,,,,,118,118,118',
'118,118,118,118,,,,118,118,118,118,118,118,118,118,118,118,118,,118',
'118,,118,118,118,,,,,118,,118,118,,118,118,,,118,118,118,118,118,118',
'118,114,,114,,114,114,,,,,,,,,,,,,,118,,,,,,,,,,,,,,,,,114,,,,,,,,,114',
'114,114,,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114',
'114,114,114,114,114,114,,,,114,114,114,114,114,114,114,114,114,114,114',
',114,114,,114,114,114,,,,,114,,114,114,,114,114,,,114,114,114,114,114',
'114,114,112,,112,,112,112,,,,,,,,,,,,,,114,,,,,,,,,,,,,,,,,112,,,,,',
',,,112,112,112,,112,,,,112,112,,,,112,,112,112,112,112,112,112,112,',
',,,,112,112,112,112,112,112,112,,,,112,112,112,112,112,112,112,112,112',
'112,112,,112,112,,112,112,112,,,,,112,,112,112,,112,112,,,112,112,112',
'112,112,112,112,257,,257,,257,257,,,,,,,,,,,,,,112,,,,,,,,,,,,,,,,,257',
',,,,,,,,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257,257',
'257,,,,,,257,257,257,257,257,257,257,,,,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,,257,257,257,,,,,257,,257,257,,257,257,257',
'257,257,257,257,257,257,257,257,775,,775,,775,775,,,,,,,,257,,,,,,257',
',,,,,,,,,,,,,,,,775,,,,,,,,,775,775,775,,775,,,,775,775,,,,775,,775',
'775,775,775,775,775,775,,,,,,775,775,775,775,775,775,775,,,,775,775',
'775,775,775,775,775,775,775,775,775,,775,775,,775,775,775,,,,,775,,775',
'775,,775,775,,,775,775,775,775,775,775,775,103,,103,,103,103,,,,,,,',
',,,,,,775,,,,,,,,,,,,,,,,,103,,,,,,,,,103,103,103,,103,,,,103,103,,',
',103,,103,103,103,103,103,103,103,,,,,,103,103,103,103,103,103,103,',
',,103,103,103,103,103,103,103,103,103,103,103,103,103,103,,103,103,103',
',,,,103,,103,103,,103,103,,,103,103,103,103,103,103,103,925,,925,,925',
'925,,,,,,,,,,,,,,103,,,,,,,,,,,,,,,,,925,,,,,,,,,925,925,925,,925,,',
',925,925,,,,925,,925,925,925,925,925,925,925,,,,,,925,925,925,925,925',
'925,925,,,,925,925,925,925,925,925,925,925,925,925,925,925,925,925,',
'925,925,925,,,,,925,,925,925,,925,925,925,925,925,925,925,925,925,925',
'925,100,,100,,100,100,,,,,,,,925,,,,,,925,,,,,,,,,,,,,,,,,100,,,,,,',
',,100,100,100,,100,,,,100,100,,,,100,,100,100,100,100,100,100,100,,',
',,,100,100,100,100,100,100,100,,,,100,100,100,100,100,100,100,100,100',
'100,100,100,100,100,,100,100,100,,,,,100,,100,100,,100,100,100,100,100',
'100,100,100,100,100,100,96,,96,,96,96,,,,,,,,100,,,,,,100,,,,,,,,,,',
',,,,,,96,,,,,,,,,96,96,96,,96,,,,96,96,,,,96,,96,96,96,96,96,96,96,',
',,,,96,96,96,96,96,96,96,,,,96,96,96,96,96,96,96,96,96,96,96,96,96,96',
',96,96,96,,,,,96,,96,96,,96,96,96,,96,96,96,96,96,96,96,592,,592,,592',
'592,,,,,,,,,,,,,,96,,,,,,,,,,,,,,,,,592,,,,,,,,,592,592,592,,592,,,',
'592,592,,,,592,,592,592,592,592,592,592,592,,,,,,592,592,592,592,592',
'592,592,,,,592,592,592,592,592,592,592,592,592,592,592,592,592,592,',
'592,592,592,,,,,592,,592,592,,592,592,592,592,592,592,592,592,592,592',
'592,87,,87,,87,87,,,,,,,,592,,,,,,592,,,,,,,,,,,,,,,,,87,,,,,,,,,87',
'87,87,,87,,,,87,87,,,,87,,87,87,87,87,87,87,87,,,,,,87,87,87,87,87,87',
'87,,,,87,87,87,87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,87,,87,87',
',87,87,,,87,87,87,87,87,87,87,600,,600,,600,600,,,,,,,,,,,,,,87,,,,',
',,,,,,,,,,,,600,,,,,,,,,600,600,600,,600,,,,600,600,,,,600,,600,600',
'600,600,600,600,600,,,,,,600,600,600,600,600,600,600,,,,600,600,600',
'600,600,600,600,600,600,600,600,,600,600,,600,600,600,,,,,600,,600,600',
',600,600,,,600,600,600,600,600,600,600,65,,65,,65,65,,,,,,,,,,,,,,600',
',,,,,,,,,,,,,,,,65,,,,,,,,,65,65,65,,65,,,,65,65,,,,65,,65,65,65,65',
'65,65,65,,,,,,65,65,65,65,65,65,65,,,,65,65,65,65,65,65,65,65,65,65',
'65,65,65,65,,65,65,65,,,,,65,,65,65,,65,65,65,65,65,65,65,65,65,65,65',
'63,,63,,63,63,,,,,,,,65,,,,,,65,,,,,,,,,,,,,,,,,63,,,,,,,,,63,63,63',
',63,,,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,',
',,63,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,63,,63,63,,63',
'63,,,63,63,63,63,63,63,63,609,,609,,609,609,,,,,,,,,,,,,,63,,,,,,,,',
',,,,,,,,609,,,,,,,,,609,609,609,,609,,,,609,609,,,,609,,609,609,609',
'609,609,609,609,,,,,,609,609,609,609,609,609,609,,,,609,609,609,609',
'609,609,609,609,609,609,609,,609,609,,609,609,609,,,,,609,,609,609,',
'609,609,609,,609,609,609,609,609,609,609,57,,57,,57,57,,,,,,,,,,,,,',
'609,,,,,,,,,,,,,,,,,57,,,,,,,,,57,57,57,,57,,,,57,57,,,,57,,57,57,57',
'57,57,57,57,,,,,,57,57,57,57,57,57,57,,,,57,57,57,57,57,57,57,57,57',
'57,57,,57,57,,57,57,57,,,,,57,,57,57,,57,57,,,57,57,57,57,57,57,57,56',
',56,,56,56,,,,,,,,,,,,,,57,,,,,,,,,,,,,,,,,56,,,,,,,,,56,56,56,,56,',
',,56,56,,,,56,,56,56,56,56,56,56,56,,,,,,56,56,56,56,56,56,56,,,,56',
'56,56,56,56,56,56,56,56,56,56,56,56,56,,56,56,56,,,,,56,,56,56,,56,56',
'56,56,56,56,56,56,56,56,56,53,,53,,53,53,,,,,,,,56,,,,,,56,,,,,,,,,',
',,,,,,,53,,,,,,,,,53,53,53,,53,,,,53,53,,,,53,,53,53,53,53,53,53,53',
',,,,,53,53,53,53,53,53,53,,,,53,53,53,53,53,53,53,53,53,53,53,,53,53',
',53,53,53,,,,,53,,53,53,,53,53,,,53,53,53,53,53,53,53,450,,450,,450',
'450,,,,,,,,,,,,,,53,,,,,,,,,,,,,,,,,450,,,,,,,,,450,450,450,,450,,,',
'450,450,,,,450,,450,450,450,450,450,450,450,,,,,,450,450,450,450,450',
'450,450,,,,450,450,450,450,450,450,450,450,450,450,450,,450,450,,450',
'450,450,,,,,450,,450,450,,450,450,,,450,450,450,450,450,450,450,612',
',612,,612,612,,,,,,,,,,,,,,450,,,,,,,,,,,,,,,,,612,,,,,,,,,612,612,612',
',612,,,,612,612,,,,612,,612,612,612,612,612,612,612,,,,,,612,612,612',
'612,612,612,612,,,,612,612,612,612,612,612,612,612,612,612,612,612,612',
'612,,612,612,612,,,,,612,,612,612,,612,612,612,,612,612,612,612,612',
'612,612,615,,615,,615,615,,,,,,,,,,,,,,612,,,,,,,,,,,,,,,,,615,,,,,',
',,,615,615,615,,615,,,,615,615,,,,615,,615,615,615,615,615,615,615,',
',,,,615,615,615,615,615,615,615,,,,615,615,615,615,615,615,615,615,615',
'615,615,615,615,615,,615,615,615,,,,,615,,615,615,,615,615,,,615,615',
'615,615,615,615,615,821,,821,,821,821,,,,,,,,,,,,,,615,,,,,,,,,,,,,',
',,,821,,,,,,,,,821,821,821,,821,,,,821,821,,,,821,,821,821,821,821,821',
'821,821,,,,,,821,821,821,821,821,821,821,,,,821,821,821,821,821,821',
'821,821,821,821,821,,821,821,,821,821,821,,,,,821,,821,821,,821,821',
',,821,821,821,821,821,821,821,435,,435,,435,435,,,,,,,,,,,,,,821,,,',
',,,,,,,,,,,,,435,,,,,,,,,435,435,435,,435,,,,435,435,,,,435,,435,435',
'435,435,435,435,435,,,,,,435,435,435,435,435,435,435,,,,435,435,435',
'435,435,435,435,435,435,435,435,,435,435,,435,435,435,,,,,435,,435,435',
',435,435,,,435,435,435,435,435,435,435,429,,429,,429,429,,,,,,,,,,,',
',,435,,,,,,,,,,,,,,,,,429,,,,,,,,,429,429,429,,429,,,,429,429,,,,429',
',429,429,429,429,429,429,429,,,,,,429,429,429,429,429,429,429,,,,429',
'429,429,429,429,429,429,429,429,429,429,,429,429,,429,429,429,,,,,429',
',429,429,,429,429,,,429,429,429,429,429,429,429,50,,50,,50,50,,,,,,',
',,,,,,,429,,,,,,,,,,,,,,,,,50,,,,,,,,,50,50,50,,50,,,,50,50,,,,50,,50',
'50,50,50,50,50,50,,,,,,50,50,50,50,50,50,50,,,,50,50,50,50,50,50,50',
'50,50,50,50,,50,50,,50,50,50,,,,,50,,50,50,,50,50,,,50,50,50,50,50,50',
'50,828,,828,,828,828,,,,,,,,,,,,,,50,,,,,,,,,,,,,,,,,828,,,,,,,,,828',
'828,828,,828,,,,828,828,,,,828,,828,828,828,828,828,828,828,,,,,,828',
'828,828,828,828,828,828,,,,828,828,828,828,828,828,828,828,828,828,828',
',828,828,,828,828,828,,,,,828,,828,828,,828,828,,,828,828,828,828,828',
'828,828,424,,424,,424,424,,,,,,,,,,,,,,828,,,,,,,,,,,,,,,,,424,,,,,',
',,,424,424,424,,424,,,,424,424,,,,424,,424,424,424,424,424,424,424,',
',,,,424,424,424,424,424,424,424,,,,424,424,424,424,424,424,424,424,424',
'424,424,,424,424,,424,424,424,,,,,424,,424,424,,424,424,,,424,424,424',
'424,424,424,424,292,,292,,292,292,,,,,,,,,,,,,,424,,,,,,,,,,,,,,,,,292',
',,,,,,,,292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292,292',
'292,,,,,,292,292,292,292,292,292,292,,,,292,292,292,292,292,292,292',
'292,292,292,292,,292,292,,292,292,292,,,,,292,,292,292,,292,292,,,292',
'292,292,292,292,292,292,423,,423,,423,423,,,,,,,,,,,,,,292,,,,,,,,,',
',,,,,,,423,,,,,,,,,423,423,423,,423,,,,423,423,,,,423,,423,423,423,423',
'423,423,423,,,,,,423,423,423,423,423,423,423,,,,423,423,423,423,423',
'423,423,423,423,423,423,,423,423,,423,423,423,,,,,423,,423,423,,423',
'423,,,423,423,423,423,423,423,423,421,,421,,421,421,,,,,,,,,,,,,,423',
',,,,,,,,,,,,,,,,421,,,,,,,,,421,421,421,,421,,,,421,421,,,,421,,421',
'421,421,421,421,421,421,,,,,,421,421,421,421,421,421,421,,,,421,421',
'421,421,421,421,421,421,421,421,421,421,421,421,,421,421,421,,,,,421',
',421,421,,421,421,,421,421,421,421,421,421,421,421,360,,360,,360,360',
',,,,,,,421,,,,,,421,,,,,,,,,,,,,,,,,360,,,,,,,,,360,360,360,360,360',
',,,360,360,,,,360,,360,360,360,360,360,360,360,,,,,,360,360,360,360',
'360,360,360,360,,360,360,360,360,360,360,360,360,360,360,360,360,,360',
'360,,360,360,360,,,,,360,,360,360,,360,360,360,,360,360,360,360,360',
'360,360,418,,418,,418,418,,,,,,,,,,,,,,360,,,,,,,,,,,,,,,,,418,,,,,',
',,,418,418,418,,418,,,,418,418,,,,418,,418,418,418,418,418,418,418,',
',,,,418,418,418,418,418,418,418,,,,418,418,418,418,418,418,418,418,418',
'418,418,418,418,418,,418,418,418,,,,,418,,418,418,,418,418,418,418,418',
'418,418,418,418,418,418,45,,45,,45,45,,,,,,,,418,,,,,,418,,,,,,,,,,',
',,,,,,45,,,,,,,,,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,',
',,,,45,45,45,45,45,45,45,,,,45,45,45,45,45,45,45,45,45,45,45,,45,45',
',45,45,45,,,,,45,,45,45,,45,45,,,45,45,45,45,45,45,45,414,,414,,414',
'414,,,,,,,,,,,,,,45,,,,,,,,,,,,,,,,,414,,,,,,,,,414,414,414,,414,,,',
'414,414,,,,414,,414,414,414,414,414,414,414,,,,,,414,414,414,414,414',
'414,414,,,,414,414,414,414,414,414,414,414,414,414,414,414,414,414,',
'414,414,414,,,,,414,,414,414,,414,414,414,414,414,414,414,414,414,414',
'414,413,,413,,413,413,,,,,,,,414,,,,,,414,,,,,,,,,,,,,,,,,413,,,,,,',
',,413,413,413,,413,,,,413,413,,,,413,,413,413,413,413,413,413,413,,',
',,,413,413,413,413,413,413,413,,,,413,413,413,413,413,413,413,413,413',
'413,413,,413,413,,413,413,413,,,,,413,,413,413,,413,413,,,413,413,413',
'413,413,413,413,763,,763,,763,763,,,,,,,,,,,,,,413,,,,,,,,,,,,,,,,,763',
',,,,,,,,763,763,763,,763,,,,763,763,,,,763,,763,763,763,763,763,763',
'763,,,,,,763,763,763,763,763,763,763,,,,763,763,763,763,763,763,763',
'763,763,763,763,,763,763,,763,763,763,,,,,763,,763,763,,763,763,,,763',
'763,763,763,763,763,763,639,,639,,639,639,,,,,,,,,,,,,,763,,,,,,,,,',
',,,,,,,639,,,,,,,,,639,639,639,,639,,,,639,639,,,,639,,639,639,639,639',
'639,639,639,,,,,,639,639,639,639,639,639,639,,,,639,639,639,639,639',
'639,639,639,639,639,639,,639,639,,639,639,639,,,,,639,,639,639,,639',
'639,,,639,639,639,639,639,639,639,304,,304,,304,304,,,,,,,,,,,,,,639',
',,,,,,,,,,,,,,,,304,,,,,,,,,304,304,304,,304,,,,304,304,,,,304,,304',
'304,304,304,304,304,304,,,,,,304,304,304,304,304,304,304,,,,304,304',
'304,304,304,304,304,304,304,304,304,,304,304,,304,304,304,,,,,304,,304',
'304,,304,304,,,304,304,304,304,304,304,304,305,,305,,305,305,,,,,,,',
',,,,,,304,,,,,,,,,,,,,,,,,305,,,,,,,,,305,305,305,305,305,,,,305,305',
',,,305,,305,305,305,305,305,305,305,,,,,,305,305,305,305,305,305,305',
'305,,305,305,305,305,305,305,305,305,305,305,305,305,,305,305,,305,305',
'305,,,,,305,,305,305,,305,305,305,,305,305,305,305,305,305,305,306,',
'306,,306,306,,,,,,,,,,,,,,305,,,,,,,,,,,,,,,,,306,,,,,,,,,306,306,306',
',306,,,,306,306,,,,306,,306,306,306,306,306,306,306,,,,,,306,306,306',
'306,306,306,306,,,,306,306,306,306,306,306,306,306,306,306,306,,306',
'306,,306,306,306,,,,,306,,306,306,,306,306,,,306,306,306,306,306,306',
'306,140,,140,,140,140,,,,,,,,,,,,,,306,,,,,,,,,,,,,,,,,140,,,,,,,,,140',
'140,140,,140,,,,140,140,,,,140,,140,140,140,140,140,140,140,,,,,,140',
'140,140,140,140,140,140,,,,140,140,140,140,140,140,140,140,140,140,140',
',140,140,,140,140,140,,,,,140,,140,140,,140,140,140,,140,140,140,140',
'140,140,140,308,,308,,308,308,,,,,,,,,,,,,,140,,,,,,,,,,,,,,,,,308,',
',,,,,,,308,308,308,,308,,,,308,308,,,,308,,308,308,308,308,308,308,308',
',,,,,308,308,308,308,308,308,308,,,,308,308,308,308,308,308,308,308',
'308,308,308,,308,308,,308,308,308,,,,,308,,308,308,,308,308,,,308,308',
'308,308,308,308,308,401,,401,,401,401,,,,,,,,,,,,,,308,,,,,,,,,,,,,',
',,,401,,,,,,,,,401,401,401,,401,,,,401,401,,,,401,,401,401,401,401,401',
'401,401,,,,,,401,401,401,401,401,401,401,,,,401,401,401,401,401,401',
'401,401,401,401,401,,401,401,,401,401,401,,,,,401,,401,401,,401,401',
',,401,401,401,401,401,401,401,835,,835,,835,835,,,,,,,,,,,,,,401,,,',
',,,,,,,,,,,,,835,,,,,,,,,835,835,835,,835,,,,835,835,,,,835,,835,835',
'835,835,835,835,835,,,,,,835,835,835,835,835,835,835,,,,835,835,835',
'835,835,835,835,835,835,835,835,,835,835,,835,835,835,,,,,835,,835,835',
',835,835,835,,835,835,835,835,835,835,835,312,,312,,312,312,,,,,,,,',
',,,,,835,,,,,,,,,,,,,,,,,312,,,,,,,,,312,312,312,,312,,,,312,312,,,',
'312,,312,312,312,312,312,312,312,,,,,,312,312,312,312,312,312,312,,',
',312,312,312,312,312,312,312,312,312,312,312,,312,312,,312,312,312,',
',,,312,,312,312,,312,312,,,312,312,312,312,312,312,312,313,,313,,313',
'313,,,,,,,,,,,,,,312,,,,,,,,,,,,,,,,,313,,,,,,,,,313,313,313,,313,,',
',313,313,,,,313,,313,313,313,313,313,313,313,,,,,,313,313,313,313,313',
'313,313,,,,313,313,313,313,313,313,313,313,313,313,313,,313,313,,313',
'313,313,,,,,313,,313,313,,313,313,,,313,313,313,313,313,313,313,30,',
'30,,30,30,,,,,,,,,,,,,,313,,,,,,,,,,,,,,,,,30,,,,,,,,,30,30,30,,30,',
',,30,30,,,,30,,30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,,30',
'30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30,,,,,30,,30,30,,30,30',
',,30,30,30,30,30,30,30,26,,26,,26,26,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,',
',26,,,,,,,,,26,26,26,,26,,,,26,26,,,,26,,26,26,26,26,26,26,26,,,,,,26',
'26,26,26,26,26,26,,,,26,26,26,26,26,26,26,26,26,26,26,,26,26,,26,26',
'26,,,,,26,,26,26,,26,26,,,26,26,26,26,26,26,26,861,,861,,861,861,,,',
',,,,,,,,,,26,,,,,,,,,,,,,,,,,861,,,,,,,,,861,861,861,,861,,,,861,861',
',,,861,,861,861,861,861,861,861,861,,,,,,861,861,861,861,861,861,861',
',,,861,861,861,861,861,861,861,861,861,861,861,,861,861,,861,861,861',
',,,,861,,861,861,,861,861,,,861,861,861,861,861,861,861,388,,388,,388',
'388,,,,,,,,,,,,,,861,,,,,,,,,,,,,,,,,388,,,,,,,,,388,388,388,,388,,',
',388,388,,,,388,,388,388,388,388,388,388,388,,,,,,388,388,388,388,388',
'388,388,,,,388,388,388,388,388,388,388,388,388,388,388,,388,388,,388',
'388,388,,,,,388,,388,388,,388,388,388,,388,388,388,388,388,388,388,21',
',21,,21,21,,,,,,,,,,,,,,388,,,,,,,,,,,,,,,,,21,,,,,,,,,21,21,21,,21',
',,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,,21,21,21,21,21,21,21,,,,21',
'21,21,21,21,21,21,21,21,21,21,,21,21,,21,21,21,,,,,21,,21,21,,21,21',
',,21,21,21,21,21,21,21,839,,839,,839,839,,,,,,,,,,,,,,21,,,,,,,,,,,',
',,,,,839,,,,,,,,,839,839,839,,839,,,,839,839,,,,839,,839,839,839,839',
'839,839,839,,,,,,839,839,839,839,839,839,839,,,,839,839,839,839,839',
'839,839,839,839,839,839,,839,839,,839,839,839,,,,,839,,839,839,,839',
'839,,,839,839,839,839,839,839,839,322,,322,,322,322,,,,,,,,,,,,,,839',
',,,,,,,,,,,,,,,,322,,,,,,,,,322,322,322,,322,,,,322,322,,,,322,,322',
'322,322,322,322,322,322,,,,,,322,322,322,322,322,322,322,,,,322,322',
'322,322,322,322,322,322,322,322,322,,322,322,,322,322,322,,,,,322,,322',
'322,,322,322,,,322,322,322,322,322,322,322,323,,323,,323,323,,,,,,,',
',,,,,,322,,,,,,,,,,,,,,,,,323,,,,,,,,,323,323,323,,323,,,,323,323,,',
',323,,323,323,323,323,323,323,323,,,,,,323,323,323,323,323,323,323,',
',,323,323,323,323,323,323,323,323,323,323,323,,323,323,,323,323,323',
',,,,323,,323,323,,323,323,,,323,323,323,323,323,323,323,324,,324,,324',
'324,,,,,,,,,,,,,,323,,,,,,,,,,,,,,,,,324,,,,,,,,,324,324,324,,324,,',
',324,324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324',
'324,324,,,,324,324,324,324,324,324,324,324,324,324,324,,324,324,,324',
'324,324,,,,,324,,324,324,,324,324,,,324,324,324,324,324,324,324,325',
',325,,325,325,,,,,,,,,,,,,,324,,,,,,,,,,,,,,,,,325,,,,,,,,,325,325,325',
',325,,,,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325',
'325,325,325,325,,,,325,325,325,325,325,325,325,325,325,325,325,,325',
'325,,325,325,325,,,,,325,,325,325,,325,325,,,325,325,325,325,325,325',
'325,326,,326,,326,326,,,,,,,,,,,,,,325,,,,,,,,,,,,,,,,,326,,,,,,,,,326',
'326,326,,326,,,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326',
'326,326,326,326,326,326,,,,326,326,326,326,326,326,326,326,326,326,326',
',326,326,,326,326,326,,,,,326,,326,326,,326,326,,,326,326,326,326,326',
'326,326,327,,327,,327,327,,,,,,,,,,,,,,326,,,,,,,,,,,,,,,,,327,,,,,',
',,,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327,327,327,327,',
',,,,327,327,327,327,327,327,327,,,,327,327,327,327,327,327,327,327,327',
'327,327,,327,327,,327,327,327,,,,,327,,327,327,,327,327,,,327,327,327',
'327,327,327,327,328,,328,,328,328,,,,,,,,,,,,,,327,,,,,,,,,,,,,,,,,328',
',,,,,,,,328,328,328,,328,,,,328,328,,,,328,,328,328,328,328,328,328',
'328,,,,,,328,328,328,328,328,328,328,,,,328,328,328,328,328,328,328',
'328,328,328,328,,328,328,,328,328,328,,,,,328,,328,328,,328,328,,,328',
'328,328,328,328,328,328,329,,329,,329,329,,,,,,,,,,,,,,328,,,,,,,,,',
',,,,,,,329,,,,,,,,,329,329,329,,329,,,,329,329,,,,329,,329,329,329,329',
'329,329,329,,,,,,329,329,329,329,329,329,329,,,,329,329,329,329,329',
'329,329,329,329,329,329,,329,329,,329,329,329,,,,,329,,329,329,,329',
'329,,,329,329,329,329,329,329,329,330,,330,,330,330,,,,,,,,,,,,,,329',
',,,,,,,,,,,,,,,,330,,,,,,,,,330,330,330,,330,,,,330,330,,,,330,,330',
'330,330,330,330,330,330,,,,,,330,330,330,330,330,330,330,,,,330,330',
'330,330,330,330,330,330,330,330,330,,330,330,,330,330,330,,,,,330,,330',
'330,,330,330,,,330,330,330,330,330,330,330,331,,331,,331,331,,,,,,,',
',,,,,,330,,,,,,,,,,,,,,,,,331,,,,,,,,,331,331,331,,331,,,,331,331,,',
',331,,331,331,331,331,331,331,331,,,,,,331,331,331,331,331,331,331,',
',,331,331,331,331,331,331,331,331,331,331,331,,331,331,,331,331,331',
',,,,331,,331,331,,331,331,,,331,331,331,331,331,331,331,332,,332,,332',
'332,,,,,,,,,,,,,,331,,,,,,,,,,,,,,,,,332,,,,,,,,,332,332,332,,332,,',
',332,332,,,,332,,332,332,332,332,332,332,332,,,,,,332,332,332,332,332',
'332,332,,,,332,332,332,332,332,332,332,332,332,332,332,,332,332,,332',
'332,332,,,,,332,,332,332,,332,332,,,332,332,332,332,332,332,332,333',
',333,,333,333,,,,,,,,,,,,,,332,,,,,,,,,,,,,,,,,333,,,,,,,,,333,333,333',
',333,,,,333,333,,,,333,,333,333,333,333,333,333,333,,,,,,333,333,333',
'333,333,333,333,,,,333,333,333,333,333,333,333,333,333,333,333,,333',
'333,,333,333,333,,,,,333,,333,333,,333,333,,,333,333,333,333,333,333',
'333,334,,334,,334,334,,,,,,,,,,,,,,333,,,,,,,,,,,,,,,,,334,,,,,,,,,334',
'334,334,,334,,,,334,334,,,,334,,334,334,334,334,334,334,334,,,,,,334',
'334,334,334,334,334,334,,,,334,334,334,334,334,334,334,334,334,334,334',
',334,334,,334,334,334,,,,,334,,334,334,,334,334,,,334,334,334,334,334',
'334,334,335,,335,,335,335,,,,,,,,,,,,,,334,,,,,,,,,,,,,,,,,335,,,,,',
',,,335,335,335,,335,,,,335,335,,,,335,,335,335,335,335,335,335,335,',
',,,,335,335,335,335,335,335,335,,,,335,335,335,335,335,335,335,335,335',
'335,335,,335,335,,335,335,335,,,,,335,,335,335,,335,335,,,335,335,335',
'335,335,335,335,336,,336,,336,336,,,,,,,,,,,,,,335,,,,,,,,,,,,,,,,,336',
',,,,,,,,336,336,336,,336,,,,336,336,,,,336,,336,336,336,336,336,336',
'336,,,,,,336,336,336,336,336,336,336,,,,336,336,336,336,336,336,336',
'336,336,336,336,,336,336,,336,336,336,,,,,336,,336,336,,336,336,,,336',
'336,336,336,336,336,336,337,,337,,337,337,,,,,,,,,,,,,,336,,,,,,,,,',
',,,,,,,337,,,,,,,,,337,337,337,,337,,,,337,337,,,,337,,337,337,337,337',
'337,337,337,,,,,,337,337,337,337,337,337,337,,,,337,337,337,337,337',
'337,337,337,337,337,337,,337,337,,337,337,337,,,,,337,,337,337,,337',
'337,,,337,337,337,337,337,337,337,338,,338,,338,338,,,,,,,,,,,,,,337',
',,,,,,,,,,,,,,,,338,,,,,,,,,338,338,338,,338,,,,338,338,,,,338,,338',
'338,338,338,338,338,338,,,,,,338,338,338,338,338,338,338,,,,338,338',
'338,338,338,338,338,338,338,338,338,,338,338,,338,338,338,,,,,338,,338',
'338,,338,338,,,338,338,338,338,338,338,338,339,,339,,339,339,,,,,,,',
',,,,,,338,,,,,,,,,,,,,,,,,339,,,,,,,,,339,339,339,,339,,,,339,339,,',
',339,,339,339,339,339,339,339,339,,,,,,339,339,339,339,339,339,339,',
',,339,339,339,339,339,339,339,339,339,339,339,,339,339,,339,339,339',
',,,,339,,339,339,,339,339,,,339,339,339,339,339,339,339,340,,340,,340',
'340,,,,,,,,,,,,,,339,,,,,,,,,,,,,,,,,340,,,,,,,,,340,340,340,,340,,',
',340,340,,,,340,,340,340,340,340,340,340,340,,,,,,340,340,340,340,340',
'340,340,,,,340,340,340,340,340,340,340,340,340,340,340,,340,340,,340',
'340,340,,,,,340,,340,340,,340,340,,,340,340,340,340,340,340,340,341',
',341,,341,341,,,,,,,,,,,,,,340,,,,,,,,,,,,,,,,,341,,,,,,,,,341,341,341',
',341,,,,341,341,,,,341,,341,341,341,341,341,341,341,,,,,,341,341,341',
'341,341,341,341,,,,341,341,341,341,341,341,341,341,341,341,341,,341',
'341,,341,341,341,,,,,341,,341,341,,341,341,,,341,341,341,341,341,341',
'341,342,,342,,342,342,,,,,,,,,,,,,,341,,,,,,,,,,,,,,,,,342,,,,,,,,,342',
'342,342,,342,,,,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342',
'342,342,342,342,342,342,,,,342,342,342,342,342,342,342,342,342,342,342',
',342,342,,342,342,342,,,,,342,,342,342,,342,342,,,342,342,342,342,342',
'342,342,343,,343,,343,343,,,,,,,,,,,,,,342,,,,,,,,,,,,,,,,,343,,,,,',
',,,343,343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343,343,',
',,,,343,343,343,343,343,343,343,,,,343,343,343,343,343,343,343,343,343',
'343,343,,343,343,,343,343,343,,,,,343,,343,343,,343,343,,,343,343,343',
'343,343,343,343,344,,344,,344,344,,,,,,,,,,,,,,343,,,,,,,,,,,,,,,,,344',
',,,,,,,,344,344,344,,344,,,,344,344,,,,344,,344,344,344,344,344,344',
'344,,,,,,344,344,344,344,344,344,344,,,,344,344,344,344,344,344,344',
'344,344,344,344,,344,344,,344,344,344,,,,,344,,344,344,,344,344,,,344',
'344,344,344,344,344,344,345,,345,,345,345,,,,,,,,,,,,,,344,,,,,,,,,',
',,,,,,,345,,,,,,,,,345,345,345,,345,,,,345,345,,,,345,,345,345,345,345',
'345,345,345,,,,,,345,345,345,345,345,345,345,,,,345,345,345,345,345',
'345,345,345,345,345,345,,345,345,,345,345,345,,,,,345,,345,345,,345',
'345,,,345,345,345,345,345,345,345,346,,346,,346,346,,,,,,,,,,,,,,345',
',,,,,,,,,,,,,,,,346,,,,,,,,,346,346,346,,346,,,,346,346,,,,346,,346',
'346,346,346,346,346,346,,,,,,346,346,346,346,346,346,346,,,,346,346',
'346,346,346,346,346,346,346,346,346,,346,346,,346,346,346,,,,,346,,346',
'346,,346,346,,,346,346,346,346,346,346,346,347,,347,,347,347,,,,,,,',
',,,,,,346,,,,,,,,,,,,,,,,,347,,,,,,,,,347,347,347,,347,,,,347,347,,',
',347,,347,347,347,347,347,347,347,,,,,,347,347,347,347,347,347,347,',
',,347,347,347,347,347,347,347,347,347,347,347,,347,347,,347,347,347',
',,,,347,,347,347,,347,347,,,347,347,347,347,347,347,347,15,,15,,15,15',
',,,,,,,,,,,,,347,,,,,,,,,,,,,,,,,15,,,,,,,,,15,15,15,15,15,,,,15,15',
',,,15,,15,15,15,15,15,15,15,,,,,,15,15,15,15,15,15,15,15,,15,15,15,15',
'15,15,15,15,15,15,15,15,,15,15,,15,15,15,,,,,15,,15,15,,15,15,15,,15',
'15,15,15,15,15,15,649,,649,,649,649,,,,,,,,,,,,,,15,,,,,,,,,,,,,,,,',
'649,,,,,,,,,649,649,649,,649,,,,649,649,,,,649,,649,649,649,649,649',
'649,649,,,,,,649,649,649,649,649,649,649,,,,649,649,649,649,649,649',
'649,649,649,649,649,,649,649,,649,649,649,,,,,649,,649,649,,649,649',
'649,,649,649,649,649,649,649,649,665,,665,,665,665,,,,,,,,,,,,,,649',
',,,,,,,,,,,,,,,,665,,,,,,,,,665,665,665,,665,,,,665,665,,,,665,,665',
'665,665,665,665,665,665,,,,,,665,665,665,665,665,665,665,,,,665,665',
'665,665,665,665,665,665,665,665,665,,665,665,,665,665,665,,,,,665,,665',
'665,,665,665,,,665,665,665,665,665,665,665,376,,376,,376,376,,,,,,,',
',,,,,,665,,,,,,,,,,,,,,,,,376,,,,,,,,,376,376,376,,376,,,,376,376,,',
',376,,376,376,376,376,376,376,376,,,,,,376,376,376,376,376,376,376,',
',,376,376,376,376,376,376,376,376,376,376,376,,376,376,,376,376,376',
',,,,376,,376,376,,376,376,,,376,376,376,376,376,376,376,694,,694,,694',
'694,,,,,,,,,,,,,,376,,,,,,,,,,,,,,,,,694,,,,,,,,,694,694,694,,694,,',
',694,694,,,,694,,694,694,694,694,694,694,694,,,,,,694,694,694,694,694',
'694,694,,,,694,694,694,694,694,694,694,694,694,694,694,,694,694,,694',
'694,694,,,,,694,,694,694,,694,694,,,694,694,694,694,694,694,694,695',
',695,,695,695,,,,,,,,,,,,,,694,,,,,,,,,,,,,,,,,695,,,,,,,,,695,695,695',
',695,,,,695,695,,,,695,,695,695,695,695,695,695,695,,,,,,695,695,695',
'695,695,695,695,,,,695,695,695,695,695,695,695,695,695,695,695,,695',
'695,,695,695,695,,,,,695,,695,695,,695,695,,,695,695,695,695,695,695',
'695,703,,703,,703,703,,,,,,,,,,,,,,695,,,,,,,,,,,,,,,,,703,,,,,,,,,703',
'703,703,,703,,,,703,703,,,,703,,703,703,703,703,703,703,703,,,,,,703',
'703,703,703,703,703,703,,,,703,703,703,703,703,703,703,703,703,703,703',
',703,703,,703,703,703,,,,,703,,703,703,,703,703,,,703,703,703,703,703',
'703,703,119,,119,,119,119,,,,,,,,,,,,,,703,,,,,,,,,,,,,,,,,119,,,,,',
',,,119,119,119,,119,,,,119,119,,,,119,,119,119,119,119,119,119,119,',
',,,,119,119,119,119,119,119,119,,,,119,119,119,119,119,119,119,119,119',
'119,119,,119,119,,119,119,119,,,,,119,,119,119,,119,119,,,119,119,119',
'119,119,119,119,702,,702,,702,702,,,,,,,,,,,,,,119,,,,,,,,,,,,,,,,,702',
',,,,,,,,702,702,702,,702,,,,702,702,,,,702,,702,702,702,702,702,702',
'702,,,,,,702,702,702,702,702,702,702,,,,702,702,702,702,702,702,702',
'702,702,702,702,,702,702,,702,702,702,,,,,702,,702,702,,702,702,,,702',
'702,702,702,702,702,702,,,,,,,,570,,,,,,,,570,570,,,702,570,570,570',
'570,570,570,570,570,570,570,570,570,570,570,570,568,,,,,,,,568,568,',
',,568,568,568,568,568,568,568,568,568,568,568,568,568,568,568,565,,',
',,,,,565,565,,,,565,565,565,565,565,565,565,565,565,565,565,565,565',
'565,565,563,,,,,,,,563,563,,,,563,563,563,563,563,563,563,563,563,563',
'563,563,563,563,563,,,,,,,,,,,,,,,,,570,570,570,570,570,570,570,570',
',,,,,,,,,,,,,,,,,,,,568,568,568,568,568,568,568,568,,,,,,,,,,,,,,,,',
',,,,565,565,565,565,565,565,565,565,,,,,,,,,,,,,,,,,,,,,563,563,563',
'563,563,563,563,563,560,,,,,,,,560,560,,,,560,560,560,560,560,560,560',
'560,560,560,560,560,560,560,560,558,,,,,,,,558,558,,,,558,558,558,558',
'558,558,558,558,558,558,558,558,558,558,558,311,,,,,,,,311,311,,,,311',
'311,311,311,311,311,311,311,311,311,311,311,311,311,311,555,,,,,,,,555',
'555,,,,555,555,555,555,555,555,555,555,555,555,555,555,555,555,555,',
',,,,,,,,,,,,,,,560,560,560,560,560,560,560,560,,,,,,,,,,,,,,,,,,,,,558',
'558,558,558,558,558,558,558,,,,,,,,,,,,,,,,,,,,,311,311,311,311,311',
'311,311,311,,,,,,,,,,,,,,,,,,,,,555,555,555,555,555,555,555,555,552',
',,,,,,,552,552,,,,552,552,552,552,552,552,552,552,552,552,552,552,552',
'552,552,548,,,,,,,,548,548,,,,548,548,548,548,548,548,548,548,548,548',
'548,548,548,548,548,131,,,,,,,,131,131,,,,131,131,131,131,131,131,131',
'131,131,131,131,131,131,131,131,825,,,,,,,,825,825,,,,825,825,825,825',
'825,825,825,825,825,825,825,825,825,825,825,,,,,,,,,,,,,,,,,552,552',
'552,552,552,552,552,552,,,,,,,,,,,,,,,,,,,,,548,548,548,548,548,548',
'548,548,,,,,,,,,,,,,,,,,,,,,131,131,131,131,131,131,131,131,,,,,,,,',
',,,,,,,,,,,,825,825,825,825,825,825,825,825,520,,,,,,,,520,520,,,,520',
'520,520,520,520,520,520,520,520,520,520,520,520,520,520,796,,,,,,,,796',
'796,,,,796,796,796,796,796,796,796,796,796,796,796,796,796,796,796,889',
',,,,,,,889,889,,,,889,889,889,889,889,889,889,889,889,889,889,889,889',
'889,889,817,,,,,,,,817,817,,,,817,817,817,817,817,817,817,817,817,817',
'817,817,817,817,817,,,,,,,,,,,,,,,,,520,520,520,520,520,520,520,520',
',,,,,,,,,,,,,,,,,,,,796,796,796,796,796,796,796,796,,,,,,,,,,,,,,,,',
',,,,889,889,889,889,889,889,889,889,,,,,,,,,,,,,,,,,,,,,817,817,817',
'817,817,817,817,817,819,,,,,,,,819,819,,,,819,819,819,819,819,819,819',
'819,819,819,819,819,819,819,819,446,,,,,,,,446,446,,,,446,446,446,446',
'446,446,446,446,446,446,446,446,446,446,446,882,446,,,,,,,882,882,,',
',882,882,882,882,882,882,882,882,882,882,882,882,882,882,882,823,,,',
',,,,823,823,,,,823,823,823,823,823,823,823,823,823,823,823,823,823,823',
'823,,,,,,,,,,,,,,,,,819,819,819,819,819,819,819,819,,,,,,,,,,,,,,,,',
',,,,446,446,446,446,446,446,446,446,,,,,,,,,,,,,,,,,,,,,882,882,882',
'882,882,882,882,882,,,,,,,,,,,,,,,,,,,,,823,823,823,823,823,823,823',
'823,619,,,,,,,,619,619,285,,,619,619,619,619,619,619,619,619,619,619',
'619,619,619,619,619,,619,,,,,,,,,,,,,285,,,,,,,,,285,285,285,,285,,',
',285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285,285,285,285',
'285,285,,,,285,285,285,285,285,285,285,285,285,285,285,,285,285,,285',
'285,285,110,,,,285,,285,285,,285,285,,,285,285,285,285,285,285,285,',
'619,619,619,619,619,619,619,619,619,285,,110,,,,,,,,,110,110,110,,110',
',,,110,110,,,,110,,110,110,110,110,110,110,110,,,,,,110,110,110,110',
'110,110,110,102,,,110,110,110,110,110,110,110,110,110,110,110,,110,110',
',110,110,110,,,,,110,,110,110,,110,110,102,,110,110,110,110,110,110',
'110,102,102,102,,102,,,,102,102,110,,,102,,102,102,102,102,102,102,102',
',,,,,102,102,102,102,102,102,102,515,,,102,102,102,102,102,102,102,102',
'102,102,102,,102,102,,102,102,102,,,,,102,,102,102,,102,102,515,,102',
'102,102,102,102,102,102,515,515,515,,515,,,,515,515,,,,515,,515,515',
'515,515,515,515,515,,,,,,515,515,515,515,515,515,515,410,,,515,515,515',
'515,515,515,515,515,515,515,515,,515,515,,515,515,515,,,,,515,,515,515',
',515,515,410,,515,515,515,515,515,515,515,410,410,410,,410,,,,410,410',
',,,410,,410,410,410,410,410,410,410,,,,,,410,410,410,410,410,410,410',
'781,,,410,410,410,410,410,410,410,410,410,410,410,,410,410,,410,410',
'410,,,,,410,,410,410,,410,410,781,,410,410,410,410,410,410,410,781,781',
'781,,781,,,,781,781,,,,781,,781,781,781,781,781,781,781,,,,,,781,781',
'781,781,781,781,781,772,,,781,781,781,781,781,781,781,781,781,781,781',
',781,781,,781,781,781,,,,,781,,781,781,,781,781,772,,781,781,781,781',
'781,781,781,772,772,772,,772,,,,772,772,,,,772,,772,772,772,772,772',
'772,772,,,,,,772,772,772,772,772,772,772,633,,,772,772,772,772,772,772',
'772,772,772,772,772,,772,772,,772,772,772,,,,,772,,772,772,,772,772',
'633,,772,772,772,772,772,772,772,633,633,633,,633,,,,633,633,,,,633',
',633,633,633,633,633,633,633,,,,,,633,633,633,633,633,633,633,35,,,633',
'633,633,633,633,633,633,633,633,633,633,,633,633,,633,633,633,,,,,633',
',633,633,,633,633,35,,633,633,633,633,633,633,633,35,35,35,,35,,,,35',
'35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35,35,35,35,,,,35,35,35',
'35,35,35,35,35,35,35,35,89,35,35,,35,35,35,89,,,,35,,35,35,,35,35,35',
',35,35,35,35,35,35,35,,,,,,89,,,,,,,,,89,89,89,,89,,,,89,89,,,,89,,89',
'89,89,89,89,89,89,,,,,,89,89,89,89,89,89,89,714,,,89,89,89,89,89,89',
'89,89,89,89,89,,89,89,,89,89,89,,,,,89,,89,89,,89,89,714,,89,89,89,89',
'89,89,89,714,714,714,,714,,,,714,714,,,,714,,714,714,714,714,714,714',
'714,,,,,,714,714,714,714,714,714,714,78,,,714,714,714,714,714,714,714',
'714,714,714,714,,714,714,,714,714,714,,,,,714,,714,714,,714,714,78,',
'714,714,714,714,714,714,714,78,78,78,,78,,,,78,78,,,,78,,78,78,78,78',
'78,78,78,,,,,,78,78,78,78,78,78,78,,850,,78,78,78,78,78,78,78,78,78',
'78,78,,78,78,,78,78,78,,,,,78,,78,78,,78,78,78,850,78,78,78,78,78,78',
'78,,850,850,850,,850,,,,850,850,,,,850,,850,850,850,850,850,850,850',
',,,,,850,850,850,850,850,850,850,,,,850,850,850,850,850,850,850,850',
'850,850,850,,850,850,,850,850,850,,,,,850,,850,850,,850,850,,,850,850',
'850,850,850,850,850' ]
        racc_action_check = arr = Array.new(23245, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    47,   nil,  8231,  1403,  3358,   nil,  1367,   -81,   nil,
   nil,   -22,  1365,  1554,  2202, 19994,   nil,   nil,  6592,   846,
   nil, 16634,   509,   nil,   nil,   nil, 16274,   nil,   nil,   nil,
 16154,   nil,   nil,   nil,   nil, 22808,  6016,   nil,   162,   nil,
  1253,   nil,   nil,  1244,   852, 14474,  1228,  1257,   nil,   nil,
 13514,  1200,  1307, 12674,   nil,   nil, 12554, 12434,   nil,   824,
   nil,   nil,   nil, 12194,    20, 12074,   nil,   nil,   nil,   nil,
  1126,   nil,   nil,  1179,   170,   658,   nil,   nil, 23047,    -4,
  4348,   nil,  4453,   nil,     3,   nil,   902, 11834,   710, 22897,
   nil,   696,   nil,   nil,   nil,  5300, 11594,  2497,   nil,   nil,
 11474,  1284, 22358, 11234,   nil,   nil,  1757,   -56,  1968,   nil,
 22283,   nil, 10874,  1175, 10754,  1280,  1183,   729, 10634, 20834,
  1172,   nil,   nil,   230,   nil,  1193,   nil,   721,   nil,  9914,
   628, 21574,   nil,  8352,   nil,   nil,   nil,  1264,   nil,  8834,
 15434,  1246,   nil,  8954,   -17,   -25,   nil,  9314,   nil,  2040,
  1209,    46,   -38,  1203,  1157,   nil,   nil,   nil,   nil,   nil,
   nil,  1155,   nil,   nil,   nil,   nil,   -26,  1154,   nil,  1297,
   nil,   nil,   nil,   nil,   nil,  1240,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   906,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  3604, 10994,  4116,  1475,
   nil,   nil,   nil,   nil,  1366,   nil,  1044,   860,   370,    94,
  1130,     7,  1004,  1843,  1113,  1057,   809,   707,   540,  1123,
   537,  1106,   278,  5179,   nil, 22187,   nil,   nil,   nil,   239,
   nil,   nil, 13874,   454,  1116,   nil,  1231,  1203,   326,  1074,
   -20,   nil,  1244,  6121, 15074, 15194, 15314,  8714, 15554,   -35,
   nil, 21354, 15914, 16034,   153,   nil,  1136,  1049,   518,  3990,
   nil,    88, 16874, 16994, 17114, 17234, 17354, 17474, 17594, 17714,
 17834, 17954, 18074, 18194, 18314, 18434, 18554, 18674, 18794, 18914,
 19034, 19154, 19274, 19394, 19514, 19634, 19754, 19874,   nil,   848,
   199,   160,   677,  1118,   nil,   nil,   -13,   -12,   nil,  1053,
 14234,  1148,  1030,   nil,  1109,  1032,  7868,   470,   nil,   -33,
   280,   nil,   nil,   nil,   478,    45, 20354,  1041,  1160,  7413,
  6821,  1111,  1111,  1015,   345,   293,   nil,   nil, 16514,  6363,
   327,   nil,  1051,  1020,   117,   332,   389,   501,   514,   528,
   685, 15674,   -67,  1822,   448,   nil,   565,  1006,   nil,  1008,
 22508,   nil,   nil, 14714, 14594,   nil,   nil,  2389, 14354,  2628,
   nil, 14114,   nil, 13994, 13754,   991,   nil,   nil,   873, 13394,
   nil,   984,   nil,   978,   nil, 13274,   nil,   -38,   964,   nil,
  1409,   nil,  5058,   nil,   nil,  4937, 21986,   nil,   958,   nil,
 12794,   998,   nil,  4816,  4695,   nil,  2585,   nil,   nil,  1304,
   nil,   nil,   989,  2350,   nil,   944,   968,   873,   978,   nil,
  1618,   nil,   917,     8,   nil,  4574,   523,   nil,   nil,   nil,
  3238,   426,   284,   nil,   nil,     0,   852,   916,  2791,   153,
   nil,   nil,   nil,    47,   nil,   nil,   nil,   nil,  5421,   nil,
  1003,   nil,  2334,  1860,   nil,  2917, 10514,  2972,   nil,   nil,
   nil,   916,   530,   910,   917, 22433,  7642,   nil,   nil,   nil,
 21738,   nil,   428,   nil,   nil,   nil, 10154, 10034,  7989,   nil,
   nil,   896,   896,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  8110,   nil,   nil,  8473,  9194,   961,   953,  9554, 21546,  9674,
  6924,  6121, 21518,   686,  5648, 21382,   669,  5188, 21326,  4946,
 21298,  4704,   639, 21162,  4453, 21134,  1719,  1143, 21106,  1124,
 21078,  3700,   884,  1652,    71,   364,  3130, 10274,  3075,   304,
 10394,  7168,  7047,  6487,  1472,   879,   nil,   858,   nil,  1486,
   nil,  1615, 11714,  2683,   921,   nil,   958,   579,  4224,   nil,
 11954,    11,  3870,   nil,   nil,  3478,   nil,   nil,   nil, 12314,
   944,   nil, 12914,   nil,   nil, 13034,   nil,   nil,   nil, 22178,
   nil,   926,   nil,   nil,   nil,  5545,   nil,   -31,  2291,   335,
  5650,   nil,   822, 22733,   nil,   826,   818,   nil,   796, 14954,
   142,   568,   753,   683,   966,   nil,   nil,   nil,   514, 20114,
   737,   nil,   nil,   nil,    51,   707,   nil,   719,   739,   697,
   657,   nil,   632,   705,   527, 20234,   480,   nil,   nil,   418,
   476,   363,   nil,   275,   nil,   258,   nil,   238,   188,   nil,
  1607,  1561,   168,    77,   nil,  7518,    61,   nil,   nil,   nil,
   nil,   nil,   nil,    24, 20474, 20594,   -85,    91,   nil,   nil,
   nil,  1260, 20954, 20714,   809,   nil,   -64,    37,   191,   615,
    80,   514,   373,   nil, 22972,   244,   nil,   nil,   nil,   117,
   225,   405,   nil,   nil,   422,   428,   287,   nil,   461,   -29,
   374,   528,    11,   437,   517,   311,   200,   187,   746,   764,
   nil,   -20,  1427,   656,   nil,   500,   737,   nil,   836,   563,
  5892,   nil,   nil,   nil,   nil,   805,   nil,   nil,   787,   nil,
  5771,   899,   114, 14834,   nil,  1813,   nil,   845,   nil,   943,
   nil,   867, 22658,   nil,   nil, 11114,   882,  9434,  9074,   884,
  9794, 22583,   912,  2578,   nil,   nil,   nil,   924,   nil,  2033,
   nil,  2066,   nil,   nil,   nil,   nil, 21766,   nil,   nil,   nil,
  3277,   nil,  2284,   nil,  3397,   nil,   nil,  2867,   nil,   397,
   nil,   945,  1896,   nil,   950,   nil,   nil, 21822,   nil, 21958,
   nil, 13154,   nil, 22042,   nil, 21602,   nil,  1077, 13634,   nil,
   564,  1012,  1091,   nil,   nil, 15794,  6242,   nil,   nil, 16754,
   306,  6697,   nil,   nil,   nil,   nil,   nil,  1116,   nil,   377,
 23123,   nil,   nil,  8594,   nil,   nil,   213,  7747,   nil,   nil,
   nil, 16394,  1064,   683,   171,   nil,  1067,  1075,  1177,   nil,
  1077,  1089,  1092,  1096,  1097,  1099,  1101,  1850,  1107,  1918,
  1119,   nil, 22014,   nil,   nil,   226,   nil,   nil,   463, 21794,
  1221,   nil,  7289,   680,  1031,   731,    25,   nil,   nil,  1242,
  3659,   nil,  2644,   nil,  3028,   nil,   nil,   nil,  2933,   nil,
   nil,   nil,   nil,  2874,   nil,   nil,  1175,  1437,  6926,   nil,
   nil,   nil,   nil,  1265,  2094, 11354,  3762,   864,   nil,  1186,
  1201,  1221,  1224,  1227,  1228,  1237,  1239,   526,   nil,   238,
   617,  1237,   145,   325,   nil,  3091,   nil,   nil,   nil,   nil,
   nil,   220,  1274,   nil ]

racc_action_default = [
    -2,  -540,    -1,  -539,  -540,  -384,    -3,  -540,  -528,  -447,
  -437,  -286,  -540,  -477,  -540,  -540,  -446,  -438,  -422,  -540,
   -65,  -540,  -526,  -448,  -420,  -311,  -540,  -449,  -422,  -404,
  -540,    -5,  -456,  -422,  -309,   -69,  -540,    -6,  -268,  -457,
  -412,  -400,  -310,  -540,  -540,  -540,  -418,  -403,  -312,   -79,
  -540,  -540,    -9,  -540,  -451,  -405,  -301,  -540,  -260,   -40,
  -450,  -313,  -261,  -540,  -454,  -302,  -452,  -314,  -303,  -262,
  -526,  -315,  -304,  -528,  -540,   -46,  -263,  -453,  -540,   -48,
  -540,  -264,  -539,   -49,  -306,  -265,  -514,  -540,  -516,  -540,
  -443,   -53,  -267,  -442,  -401,  -539,  -539,  -444,  -402,  -307,
  -278,  -540,  -540,  -539,  -445,  -308,  -540,  -231,  -281,   -41,
   -77,   954,  -540,  -540,  -540,  -540,  -539,  -540,  -540,  -540,
  -539,  -510,  -383,  -268,  -246,  -253,  -301,  -454,  -302,  -539,
  -540,  -232,  -242,  -539,  -306,  -247,  -278,  -540,   -63,  -540,
  -540,  -528,  -529,  -540,  -539,  -539,  -287,  -540,  -482,  -477,
  -499,  -483,  -540,  -540,  -539,  -500,  -497,  -480,  -369,  -501,
  -479,  -539,  -478,  -496,  -481,  -476,  -540,  -539,  -488,  -540,
  -486,  -494,  -288,  -285,  -377,   -57,    -8,  -177,  -126,  -170,
  -178,  -117,  -127,  -171,  -161,  -118,  -176,  -128,  -152,  -160,
  -119,  -139,  -169,  -155,  -132,  -179,  -120,  -181,  -133,  -141,
  -164,  -121,  -185,  -134,  -138,  -151,  -122,  -186,  -136,  -129,
  -165,  -137,  -142,  -123,  -154,  -140,  -146,  -124,  -143,  -145,
  -147,  -144,  -156,  -168,  -540,  -148,  -167,  -172,  -158,  -157,
  -174,  -432,  -180,  -166,  -149,  -109,  -159,  -130,  -106,  -173,
  -110,  -131,  -108,  -434,  -163,  -433,  -431,  -150,  -183,  -175,
  -107,  -435,  -184,  -182,  -125,  -135,  -540,  -539,  -540,  -223,
   -45,    -4,  -537,  -535,  -527,  -536,  -540,   -47,  -540,  -540,
  -384,  -540,  -540,  -208,  -281,  -540,  -540,   -92,  -540,   -70,
   -85,  -528,  -540,  -539,  -305,   -73,  -111,   -17,  -113,  -540,
  -112,  -114,  -540,  -540,  -540,   -81,  -439,  -440,  -540,  -540,
  -540,  -406,  -209,  -539,  -540,  -540,  -540,  -540,  -540,  -540,
   -51,  -224,  -540,  -540,  -540,   -52,  -540,  -527,  -526,  -540,
  -275,  -274,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,
  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,
  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -540,  -327,  -540,
  -268,  -454,  -540,  -540,  -326,  -374,  -539,  -539,  -115,   -22,
  -540,   -67,  -528,   -13,   -14,  -540,  -539,  -526,  -266,  -528,
  -540,  -268,  -454,  -104,  -540,  -540,  -540,  -101,  -102,  -540,
  -540,  -540,  -539,  -540,  -532,  -532,  -233,   -50,  -540,  -539,
  -532,  -508,  -540,  -540,  -540,  -176,  -169,  -179,  -164,  -146,
  -147,  -540,  -148,  -477,  -106,  -506,  -107,  -528,   -64,   -75,
  -540,  -513,  -248,  -540,  -251,  -252,  -243,  -540,  -539,  -540,
  -249,  -251,  -244,  -540,  -540,  -528,  -240,  -241,  -274,  -540,
  -254,  -540,   -39,   -38,   -30,  -540,  -284,  -528,  -540,   -44,
  -539,  -356,  -539,  -359,  -357,  -539,  -189,   -31,  -539,  -498,
  -540,  -540,  -367,  -539,  -539,  -502,  -540,  -505,  -469,  -540,
  -474,  -485,  -540,  -540,  -472,  -332,  -483,  -339,  -540,  -330,
  -540,  -328,  -528,  -539,   -58,  -539,  -540,  -436,  -423,  -424,
  -540,  -517,  -519,  -382,  -380,  -520,  -518,  -528,  -539,  -517,
  -519,  -381,  -520,  -518,    -7,  -538,  -407,  -421,  -539,  -318,
  -317,  -408,  -540,  -540,  -409,  -540,  -539,  -540,  -439,  -440,
   -82,  -540,   -91,  -528,   -71,  -540,  -540,   -21,   -20,   -19,
  -197,   -36,  -540,  -411,  -414,  -410,  -540,  -540,  -539,  -416,
  -417,  -540,  -540,   -26,   -27,   -23,   -24,   -25,  -320,  -321,
  -539,   -43,   -42,  -539,  -540,  -540,  -540,  -540,  -229,  -540,
  -213,  -218,  -210,  -225,  -219,  -211,  -226,  -220,  -212,  -221,
  -200,  -222,  -205,  -201,  -227,  -202,  -228,  -214,  -203,  -215,
  -204,  -198,  -216,  -199,  -528,  -217,  -540,  -539,  -540,  -274,
  -540,  -539,  -539,  -540,   -16,   -66,  -272,  -528,   -12,  -527,
  -271,  -540,  -539,  -540,  -101,  -103,  -102,  -540,  -539,  -458,
  -540,  -540,  -539,  -517,  -518,  -539,  -270,  -316,  -392,  -539,
  -539,  -276,  -534,  -234,  -533,  -534,  -236,   -37,  -253,  -187,
   -29,  -540,  -509,  -277,  -525,  -540,  -524,  -528,  -477,  -540,
  -539,  -280,  -528,  -540,   -83,   -78,  -539,  -250,  -255,  -540,
  -517,  -518,  -528,  -517,  -518,  -511,  -512,  -237,  -187,  -540,
  -259,  -283,  -530,  -492,  -483,  -539,  -361,  -539,  -540,  -539,
  -539,  -355,  -540,  -540,  -540,  -540,  -528,  -490,  -484,  -540,
  -540,  -539,  -504,  -539,  -489,  -539,  -503,  -539,  -539,  -495,
  -540,  -540,  -337,  -528,  -487,  -539,  -540,  -430,  -427,  -428,
  -429,  -425,  -379,   -61,  -540,  -540,  -540,  -385,  -239,  -238,
  -378,   -59,  -540,  -540,  -539,  -319,  -540,  -539,   -88,   -90,
  -528,  -517,  -518,   -80,  -540,   -74,   -18,  -415,  -413,  -206,
  -207,  -539,  -419,   -28,  -540,  -540,  -540,  -294,  -540,  -528,
  -196,  -540,  -521,  -273,  -528,  -517,  -518,  -540,  -540,  -540,
  -116,   -68,   -15,  -101,  -105,  -102,  -528,  -460,  -540,  -540,
  -539,  -376,   -55,  -375,   -54,  -539,  -395,  -394,  -393,  -324,
  -539,  -539,  -532,  -540,  -298,  -477,  -507,  -528,  -462,  -540,
  -279,   -76,  -540,  -245,  -256,  -540,  -385,  -540,  -540,  -257,
  -540,  -540,  -540,  -346,  -348,  -366,  -365,  -362,  -363,  -540,
  -351,  -540,  -353,  -358,  -387,  -386,  -190,  -368,  -370,  -371,
  -540,  -467,  -540,  -465,  -540,  -475,  -473,  -540,  -470,  -335,
  -331,  -340,  -540,  -329,  -540,  -426,   -62,  -194,   -35,  -195,
  -531,  -540,   -60,  -192,   -33,  -193,   -34,  -540,  -540,  -322,
   -86,   -72,  -540,  -291,  -292,  -540,  -539,  -293,  -282,  -540,
  -385,  -539,  -373,  -372,  -385,  -296,  -459,  -540,  -397,  -540,
  -540,  -325,  -399,  -539,   -11,  -235,  -188,  -539,  -461,  -299,
   -84,  -540,  -258,  -491,  -540,  -360,  -539,  -539,  -540,  -493,
  -539,  -539,  -539,  -539,  -539,  -539,  -539,  -540,  -333,  -540,
  -338,   -56,  -191,   -32,  -289,  -540,  -290,  -255,  -539,  -230,
  -540,  -297,  -539,  -540,  -100,   -93,  -540,  -396,  -398,  -540,
  -540,  -274,  -540,  -343,  -540,  -345,  -364,  -352,  -540,  -349,
  -354,  -468,  -466,  -540,  -463,  -471,  -336,  -540,  -539,  -388,
  -390,  -389,  -295,  -539,  -540,  -539,  -540,   -99,  -300,  -521,
  -273,  -539,  -539,  -539,  -539,  -539,  -334,  -539,  -391,  -521,
   -98,  -528,  -517,  -518,  -344,  -540,  -341,  -347,  -350,  -464,
  -323,  -385,  -539,  -342 ]

clist = [
'31,132,165,143,425,310,498,471,260,381,132,158,122,235,315,231,268,610',
'138,545,474,174,480,432,488,365,264,175,416,279,384,235,422,290,540',
'298,528,291,52,543,385,284,674,309,659,697,262,390,287,387,52,630,132',
'314,472,679,613,616,761,362,318,132,622,361,261,811,635,37,319,442,445',
'497,662,827,431,235,365,290,427,176,666,291,869,595,284,785,810,657',
'409,645,152,405,358,386,262,284,132,788,524,660,391,235,355,403,132',
'375,675,637,284,224,677,353,316,415,637,671,284,415,389,269,751,408',
'678,753,275,132,426,434,655,625,383,394,487,146,447,516,348,787,165',
'359,854,441,441,393,452,602,605,448,22,919,755,457,849,301,266,172,293',
'522,457,3,300,691,246,673,457,6,2,598,462,832,1,715,,,,,,,,,,,,480,',
'488,,,,,,,,,,869,880,,,,776,,,,,,427,,,,,,,,,,,,,,,392,,,,,365,,,,411',
',412,,,,420,,,,,,,,,,532,,,728,,485,,132,426,,,430,433,,513,916,,514',
'361,491,,,830,707,,617,,707,,,511,122,174,521,,581,582,645,,810,,782',
',771,,284,840,642,533,785,535,536,537,52,744,936,,621,844,682,950,906',
'471,365,,,,,12,,,,,,,,431,,,,12,717,494,,,,,538,,,921,,538,,534,,262',
'587,707,,,361,,,,,,441,441,683,632,,636,707,546,,,,,,,427,,674,831,589',
',,,620,,,,608,,710,,,,663,,866,664,,674,262,165,12,679,584,669,670,685',
'599,,,,132,634,,12,,,588,,,485,857,132,426,284,,686,,,,,,,,491,,,661',
',,,,855,,870,656,872,,,704,867,,12,656,,873,871,874,,,734,,876,427,',
',,,,875,841,,836,,436,746,,,441,721,,,,,132,,726,,,,696,724,132,699',
'725,692,,,,,757,693,,698,,485,,951,485,701,132,426,,,618,,,634,491,235',
'748,290,491,,,291,471,471,,284,,,738,739,427,,716,,,,638,,,,,,816,392',
',427,646,431,769,,822,,773,931,,933,,650,,934,762,,938,606,935,932,',
',,,,,667,731,737,485,,132,426,12,,,235,,290,,,,291,491,485,892,132,426',
'749,920,952,,12,740,,,132,699,491,132,699,,,,756,759,,698,,,698,,12',
'752,12,165,754,,235,747,765,918,742,750,767,634,814,,,,,415,,,,696,',
'284,,,,,,,,878,,,471,,656,768,457,,457,457,,,,,618,,847,,,,457,,457',
'12,457,,457,457,,12,,,,818,,,19,,117,585,,824,826,,707,,590,117,19,',
',,12,759,117,851,699,696,,117,634,,,,,692,698,471,276,471,759,,284,',
',727,,,117,758,,696,638,,631,392,117,,,117,,,,696,,,117,,117,,,,647',
'117,848,12,165,471,12,774,852,349,,538,651,19,12,12,860,779,117,,370',
'899,,846,,,19,,284,888,,117,,370,890,,12,284,,117,,276,,,,,898,684,',
'764,941,,,,,,,,883,12,117,,,,19,,,,885,,,117,117,,117,,,,117,,,,,,,923',
',,713,12,,,,,,,,,,,,12,,,12,,284,,,,,937,,457,457,,,457,457,457,457',
'457,457,457,427,,,,,,,,,,,759,,,,,,,12,12,,485,,,862,,12,,833,834,,',
'837,,,12,,,741,,,,,,,485,608,132,426,,,,845,,457,457,457,457,457,491',
'759,,696,,117,,,12,,,,19,,859,,457,,,766,887,,,,770,,,,,,,19,,276,,',
',,,,117,,,,,,,,,,,19,117,19,117,117,117,,797,,117,117,,12,,131,,,,,',
',884,,131,813,,886,,,,259,,,,,,,,,273,,891,,,,,,,,,,,,,,,,19,,302,,',
',19,,131,311,,,,838,,,117,131,,,12,,,,,,,922,117,19,12,,,,,,928,,,,',
'117,,,,,,117,131,,276,858,131,,,131,,,117,,131,,,,131,,131,,,,131,259',
',,,,,,,,,131,19,,101,19,,,,,,131,131,19,19,,101,,,446,,,,,,,12,,,,,12',
',,,19,,,,,117,,,12,,,,12,117,,,,,,,,,,19,,,,,,,,117,,,,,,,,,276,,,,354',
',,12,101,,,,,19,,,,,,,,101,,,,19,,,19,,,,117,12,,,,,,,,,,,,,,,,,,,,',
'131,,,,,101,,,117,,,117,19,19,,,64,,,,19,,,117,,,,,64,19,,117,,117,',
'520,117,,,,,,,,,,,,280,,,,,,,,,,,,,19,548,,276,550,551,552,553,554,555',
'556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572',
'573,574,575,351,,,,64,,,,,,,372,,,,,,64,,,,,,458,372,19,,,372,,460,',
'280,,117,,464,,,,619,,117,117,,101,,,,,,,,,276,64,,,,131,,,,,101,446',
'131,,,,131,,,131,,520,131,,,,,648,,,101,,101,131,,,19,,,,,,,,,,19,,131',
',,,,,,,,,276,,,,,,,,,863,,38,,,,,,,,,131,,,38,,,,,131,101,,,,,,101,',
',,,,,,277,,,131,,,117,,,,,,,117,,101,,,,,,19,,719,720,,19,,,,,64,,,',
'893,,,19,,,131,19,350,,,730,38,,,64,,280,,371,,,,,,38,,,,,,,371,101',
',64,101,64,,131,277,,19,,101,101,,,,,,,,,131,,,,,,,,,38,131,,101,131',
'19,,,131,,,131,117,,131,,,,,,,,,,,,101,,,64,,,,,,64,267,,131,,,,,,,',
',,131,,,,,,,267,101,,64,,,,,267,796,,,,101,,,101,,267,,,,,,280,267,',
',,,,,,,,,,,817,819,,,369,,,,823,825,,,,,,,101,101,64,,,64,,,101,,,,',
'64,64,,,101,,,,,38,,,,,,,,,,,,,64,,,,,,38,437,277,439,,,,,101,,,,856',
',,,,64,,,38,,38,,817,,823,825,,131,,,,,280,,,,,,,,,,,,,64,,,,,,,,,,',
',64,,,64,101,,,,,,,882,,,,,,,38,,,,,,38,131,,,,889,,,,,,,,,,,,64,64',
',,,,38,,64,,882,,,,,,,64,,,,,,784,,790,792,277,101,,,,,,,,,801,101,803',
',805,,806,808,,,,,64,,,280,,,,,,,38,,,38,,267,,267,267,267,,38,38,541',
'542,131,,,,,,,,,,,,,,,,,,38,687,,,,,,,,,,,64,,,,,,,,,,101,38,,,,101',
',,,,,,,,897,,,101,277,280,,101,601,,,,,,,,,38,,,,,,,,,,,,38,,,38,627',
',,,,,,,64,101,,,,,,,,,64,,,,,,,,,,,,280,,,,,101,,38,38,372,,,,,,38,',
',,,,,,,38,,,,,,,,,,,,,,,,,903,905,,,907,909,910,911,912,914,915,,271',
',,38,,271,277,,,,,64,,,,,64,,,,271,,,,,895,,271,64,,,,64,,,,,,,,,,,',
',,,,271,,,,,944,946,947,948,949,38,271,,,,729,,,271,64,,,,,271,271,953',
',,,,,271,,271,,271,,,277,271,271,,,,64,,,267,,,,,,,,,,,,,271,,,,,,,267',
',,,,,,38,,,,,,,,,,38,,,,,,,,,,,,277,,,,,,,,,371,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,,38,,,,,,,,,894,,,38,,,,38,',
',,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,271,,38',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,,,,,,,,,,,,,,,,,,,,,,,,,,,267,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,271,271,,,,,,,271,,271,271,,',
',,271,,,,,,271,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,271,271,,,,,,,,,,,,,,,,,271',
',,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271',
',,271,,,271,,,,,,,,,,,,,,,,,,271,,,,,,271,,,,,,,,,,271,,,,,,,,,,,,,',
',,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,,,,,,,,,,,271,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,,271,,,271,,271',
'271,,271,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271',
',,,271,,,,,,,,,,,271,,,,,,,,,,,271' ]
        racc_goto_table = arr = Array.new(2920, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'7,34,110,32,25,36,83,102,21,11,34,118,64,54,36,53,19,13,39,90,40,64',
'38,28,38,12,9,39,66,47,61,54,66,57,87,19,83,58,10,87,63,59,135,19,107',
'26,95,63,17,36,10,98,34,19,103,136,62,62,14,44,19,34,62,43,6,104,49',
'8,32,41,41,130,112,84,61,54,12,57,36,8,112,58,137,51,59,115,101,106',
'48,140,116,75,17,7,95,59,34,114,130,108,7,54,74,53,34,52,106,67,59,127',
'106,92,6,7,67,108,59,7,52,127,65,39,108,65,127,34,7,21,105,100,60,99',
'25,79,21,31,22,113,110,18,15,7,7,78,117,38,38,118,5,120,121,7,122,125',
'126,81,128,129,7,4,131,132,133,134,7,3,2,94,139,14,1,49,,,,,,,,,,,,38',
',38,,,,,,,,,,137,104,,,,26,,,,,,36,,,,,,,,,,,,,,,29,,,,,12,,,,29,,29',
',,,29,,,,,,,,,,12,,,90,,54,,34,7,,,29,29,,44,104,,48,43,64,,,26,38,',
'28,,38,,,32,64,64,21,,41,41,140,,101,,112,,49,,59,26,25,19,115,19,19',
'19,10,51,104,,11,26,102,84,114,102,12,,,,,23,,,,,,,,61,,,,23,130,8,',
',,,95,,,14,,95,,10,,95,44,38,,,43,,,,,,7,7,103,36,,63,38,6,,,,,,,36',
',135,49,9,,,,21,,,,7,,25,,,,12,,107,12,,135,95,110,23,136,10,12,12,41',
'95,,,,34,47,,23,,,6,,,54,98,34,7,59,,12,,,,,,,,64,,,110,,,,,62,,106',
'7,106,,,12,108,,23,7,,106,108,106,,,25,,106,36,,,,,,108,87,,83,,45,25',
',,7,12,,,,,34,,61,,,,32,12,34,7,12,64,,,,,28,39,,64,,54,,26,54,39,34',
'7,,,29,,,47,64,54,11,57,64,,,58,102,102,,59,,,12,12,36,,17,,,,29,,,',
',,40,29,,36,29,61,11,,40,,66,106,,106,,29,,106,63,,13,77,106,108,,,',
',,,29,32,19,54,,34,7,23,,,54,,57,,,,58,64,54,83,34,7,19,90,106,,23,17',
',,34,7,64,34,7,,,,7,7,,64,,,64,,23,39,23,110,39,,54,95,53,83,10,95,118',
'47,12,,,,,7,,,,32,,59,,,,,,,,102,,,102,,7,95,7,,7,7,,,,,29,,11,,,,7',
',7,23,7,,7,7,,23,,,,21,,,24,,24,45,,21,21,,38,,45,24,24,,,,23,7,24,12',
'7,32,,24,47,,,,,64,64,102,24,102,7,,59,,,77,,,24,29,,32,29,,45,29,24',
',,24,,,,32,,,24,,24,,,,45,24,7,23,110,102,23,29,7,24,,95,45,24,23,23',
'47,29,24,,24,11,,95,,,24,,59,12,,24,,24,12,,23,59,,24,,24,,,,,12,45',
',77,25,,,,,,,,21,23,24,,,,24,,,,19,,,24,24,,24,,,,24,,,,,,,12,,,45,23',
',,,,,,,,,,,23,,,23,,59,,,,,12,,7,7,,,7,7,7,7,7,7,7,36,,,,,,,,,,,7,,',
',,,,23,23,,54,,,29,,23,,77,77,,,77,,,23,,,45,,,,,,,54,7,34,7,,,,77,',
'7,7,7,7,7,64,7,,32,,24,,,23,,,,24,,77,,7,,,45,29,,,,45,,,,,,,24,,24',
',,,,,,24,,,,,,,,,,,24,24,24,24,24,24,,45,,24,24,,23,,33,,,,,,,77,,33',
'45,,77,,,,33,,,,,,,,,33,,77,,,,,,,,,,,,,,,,24,,33,,,,24,,33,33,,,,45',
',,24,33,,,23,,,,,,,77,24,24,23,,,,,,77,,,,,24,,,,,,24,33,,24,45,33,',
',33,,,24,,33,,,,33,,33,,,,33,33,,,,,,,,,,33,24,,20,24,,,,,,33,33,24',
'24,,20,,,33,,,,,,,23,,,,,23,,,,24,,,,,24,,,23,,,,23,24,,,,,,,,,,24,',
',,,,,,24,,,,,,,,,24,,,,20,,,23,20,,,,,24,,,,,,,,20,,,,24,,,24,,,,24',
'23,,,,,,,,,,,,,,,,,,,,,33,,,,,20,,,24,,,24,24,24,,,50,,,,24,,,24,,,',
',50,24,,24,,24,,33,24,,,,,,,,,,,,50,,,,,,,,,,,,,24,33,,24,33,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,50',
',,,50,,,,,,,50,,,,,,50,,,,,,109,50,24,,,50,,109,,50,,24,,109,,,,33,',
'24,24,,20,,,,,,,,,24,50,,,,33,,,,,20,33,33,,,,33,,,33,,33,33,,,,,33',
',,20,,20,33,,,24,,,,,,,,,,24,,33,,,,,,,,,,24,,,,,,,,,24,,27,,,,,,,,',
'33,,,27,,,,,33,20,,,,,,20,,,,,,,,27,,,33,,,24,,,,,,,24,,20,,,,,,24,',
'33,33,,24,,,,,50,,,,24,,,24,,,33,24,27,,,33,27,,,50,,50,,27,,,,,,27',
',,,,,,27,20,,50,20,50,,33,27,,24,,20,20,,,,,,,,,33,,,,,,,,,27,33,,20',
'33,24,,,33,,,33,24,,33,,,,,,,,,,,,20,,,50,,,,,,50,30,,33,,,,,,,,,,33',
',,,,,,30,20,,50,,,,,30,33,,,,20,,,20,,30,,,,,,50,30,,,,,,,,,,,,,33,33',
',,30,,,,33,33,,,,,,,20,20,50,,,50,,,20,,,,,50,50,,,20,,,,,27,,,,,,,',
',,,,,50,,,,,,27,30,27,30,,,,,20,,,,33,,,,,50,,,27,,27,,33,,33,33,,33',
',,,,50,,,,,,,,,,,,,50,,,,,,,,,,,,50,,,50,20,,,,,,,33,,,,,,,27,,,,,,27',
'33,,,,33,,,,,,,,,,,,50,50,,,,,27,,50,,33,,,,,,,50,,,,,,109,,109,109',
'27,20,,,,,,,,,109,20,109,,109,,109,109,,,,,50,,,50,,,,,,,27,,,27,,30',
',30,30,30,,27,27,30,30,33,,,,,,,,,,,,,,,,,,27,27,,,,,,,,,,,50,,,,,,',
',,,20,27,,,,20,,,,,,,,,20,,,20,27,50,,20,30,,,,,,,,,27,,,,,,,,,,,,27',
',,27,30,,,,,,,,50,20,,,,,,,,,50,,,,,,,,,,,,50,,,,,20,,27,27,50,,,,,',
'27,,,,,,,,,27,,,,,,,,,,,,,,,,,109,109,,,109,109,109,109,109,109,109',
',42,,,27,,42,27,,,,,50,,,,,50,,,,42,,,,,50,,42,50,,,,50,,,,,,,,,,,,',
',,,42,,,,,109,109,109,109,109,27,42,,,,30,,,42,50,,,,,42,42,109,,,,',
',42,,42,,42,,,27,42,42,,,,50,,,30,,,,,,,,,,,,,42,,,,,,,30,,,,,,,27,',
',,,,,,,,27,,,,,,,,,,,,27,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,27,,,,,27,,,,,,,,,27,,,27,,,,27,,,,,,,,,,,,,,',
',,,,,,,,,,42,,,,,,,,,,27,,,,,,,,,,,,,,,,,,,,,,,,42,,27,42,42,42,42,42',
'42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,,,,,',
',,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,42,42',
',,,,,,42,,42,42,,,,,42,,,,,,42,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,42,42,,,,,',
',,,,,,,,,,,42,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,42,,,42,,,42,,,,,,,,,,,,,,,,,,42,,,,,,42,,,,,,,,,,42,,,',
',,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,42',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,,,,,,,,,42,,,42,',
'42,42,,42,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42',
',,,42,,,,,,,,,,,42,,,,,,,,,,,42' ]
        racc_goto_check = arr = Array.new(2920, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   170,   166,   162,   159,   145,    42,    -3,    64,     4,
    35,   -86,   -57,  -365,  -552,  -621,   nil,    12,    59,   -10,
  1122,   -13,    58,   311,   681,  -125,  -442,  1461,  -117,   118,
  1604,  -152,    -5,   993,    -4,   nil,   -51,   nil,  -234,    13,
  -155,   -75,  2058,   -19,   -23,   325,   nil,    -6,   -22,  -344,
  1263,  -291,    16,    -3,    -5,   nil,   nil,    -3,     1,     6,
    34,   -66,  -328,   -56,     7,  -482,   -88,  -307,   nil,   nil,
   nil,   nil,   nil,   nil,    23,   -15,   nil,   178,    40,   122,
   nil,   142,   nil,  -262,  -631,   nil,   nil,  -275,   nil,   nil,
  -297,   nil,    33,   nil,  -208,    24,   nil,   nil,  -352,    25,
  -265,  -594,  -162,  -115,  -616,  -312,  -353,  -396,  -341,  1210,
   -11,   nil,  -368,  -521,  -561,  -573,    77,    -8,    -2,   nil,
  -739,  -459,  -603,   nil,   nil,   106,   130,    91,   116,  -136,
  -195,   114,  -315,   144,  -293,  -414,  -408,  -707,   nil,     2,
  -332 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   363,   nil,   317,
   364,   nil,   382,   nil,   829,   nil,   367,   nil,   nil,   nil,
   137,   109,     7,   115,   272,   nil,   nil,   123,   nil,   125,
    59,   nil,   438,    75,    79,    83,   135,    91,   706,   nil,
   nil,   nil,    14,    20,   nil,   nil,    35,    43,    49,   nil,
   127,   373,   nil,   286,   492,   240,   288,    94,    98,   107,
   nil,   116,   nil,   120,   483,   700,   nil,   124,    58,    62,
    69,    76,    81,    85,   368,    92,    95,   nil,   nil,   173,
    11,   nil,    26,   nil,   nil,    45,    53,   nil,    63,    70,
   nil,    78,   nil,    89,   nil,   500,   102,   106,   nil,   nil,
   nil,   469,   170,   nil,   465,   nil,   154,   nil,   161,   nil,
   672,   444,   nil,   nil,   nil,   148,   nil,   nil,   629,   484,
   nil,   nil,   nil,    41,    47,    55,   nil,   nil,   nil,   nil,
   478,   nil,   nil,   nil,   167,   168,   171,   653,   150,   153,
   121 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 150, :_reduce_1,
  0, 153, :_reduce_2,
  2, 151, :_reduce_3,
  2, 152, :_reduce_4,
  1, 154, :_reduce_5,
  1, 154, :_reduce_6,
  3, 154, :_reduce_7,
  2, 154, :_reduce_8,
  1, 157, :_reduce_9,
  1, 157, :_reduce_none,
  4, 160, :_reduce_11,
  2, 161, :_reduce_12,
  1, 165, :_reduce_13,
  1, 165, :_reduce_14,
  3, 165, :_reduce_15,
  2, 165, :_reduce_none,
  0, 180, :_reduce_17,
  4, 159, :_reduce_18,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  2, 159, :_reduce_none,
  3, 159, :_reduce_23,
  3, 159, :_reduce_24,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  4, 159, :_reduce_none,
  3, 159, :_reduce_29,
  3, 159, :_reduce_none,
  3, 159, :_reduce_31,
  6, 159, :_reduce_32,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  5, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  3, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 179, :_reduce_none,
  3, 179, :_reduce_42,
  3, 179, :_reduce_43,
  3, 179, :_reduce_44,
  2, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 168, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_50,
  2, 170, :_reduce_51,
  2, 170, :_reduce_52,
  1, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 184, :_reduce_none,
  4, 189, :_reduce_none,
  2, 183, :_reduce_57,
  3, 183, :_reduce_none,
  4, 183, :_reduce_59,
  5, 183, :_reduce_none,
  4, 183, :_reduce_none,
  5, 183, :_reduce_none,
  2, 183, :_reduce_63,
  2, 183, :_reduce_64,
  1, 171, :_reduce_none,
  3, 171, :_reduce_none,
  1, 193, :_reduce_none,
  3, 193, :_reduce_none,
  1, 192, :_reduce_none,
  2, 192, :_reduce_none,
  3, 192, :_reduce_none,
  5, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  2, 192, :_reduce_none,
  4, 192, :_reduce_none,
  1, 192, :_reduce_none,
  3, 192, :_reduce_none,
  1, 196, :_reduce_none,
  3, 196, :_reduce_none,
  2, 195, :_reduce_none,
  3, 195, :_reduce_none,
  1, 198, :_reduce_none,
  3, 198, :_reduce_none,
  1, 197, :_reduce_none,
  4, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  3, 197, :_reduce_none,
  2, 197, :_reduce_none,
  1, 197, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_94,
  3, 169, :_reduce_95,
  3, 169, :_reduce_96,
  3, 169, :_reduce_none,
  3, 169, :_reduce_none,
  2, 169, :_reduce_99,
  1, 169, :_reduce_none,
  1, 200, :_reduce_101,
  1, 200, :_reduce_102,
  2, 201, :_reduce_103,
  1, 201, :_reduce_104,
  3, 201, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_109,
  1, 202, :_reduce_110,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 167, :_reduce_none,
  3, 167, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 182, :_reduce_187,
  5, 182, :_reduce_none,
  3, 182, :_reduce_189,
  5, 182, :_reduce_none,
  6, 182, :_reduce_191,
  5, 182, :_reduce_192,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  5, 182, :_reduce_none,
  4, 182, :_reduce_none,
  3, 182, :_reduce_none,
  3, 182, :_reduce_198,
  3, 182, :_reduce_199,
  3, 182, :_reduce_200,
  3, 182, :_reduce_201,
  3, 182, :_reduce_202,
  3, 182, :_reduce_203,
  3, 182, :_reduce_204,
  3, 182, :_reduce_205,
  4, 182, :_reduce_none,
  4, 182, :_reduce_none,
  2, 182, :_reduce_none,
  2, 182, :_reduce_209,
  3, 182, :_reduce_210,
  3, 182, :_reduce_211,
  3, 182, :_reduce_212,
  3, 182, :_reduce_213,
  3, 182, :_reduce_214,
  3, 182, :_reduce_215,
  3, 182, :_reduce_216,
  3, 182, :_reduce_217,
  3, 182, :_reduce_218,
  3, 182, :_reduce_219,
  3, 182, :_reduce_220,
  3, 182, :_reduce_221,
  3, 182, :_reduce_222,
  2, 182, :_reduce_223,
  2, 182, :_reduce_224,
  3, 182, :_reduce_225,
  3, 182, :_reduce_226,
  3, 182, :_reduce_227,
  3, 182, :_reduce_228,
  3, 182, :_reduce_none,
  6, 182, :_reduce_230,
  1, 182, :_reduce_none,
  1, 178, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  4, 209, :_reduce_none,
  2, 209, :_reduce_none,
  3, 213, :_reduce_237,
  1, 214, :_reduce_238,
  1, 214, :_reduce_none,
  1, 174, :_reduce_240,
  1, 174, :_reduce_none,
  1, 185, :_reduce_242,
  2, 185, :_reduce_243,
  2, 185, :_reduce_244,
  4, 185, :_reduce_245,
  1, 185, :_reduce_246,
  1, 188, :_reduce_none,
  2, 216, :_reduce_248,
  2, 216, :_reduce_249,
  2, 215, :_reduce_250,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 210, :_reduce_253,
  2, 210, :_reduce_254,
  3, 210, :_reduce_255,
  4, 210, :_reduce_256,
  3, 177, :_reduce_none,
  4, 177, :_reduce_none,
  2, 177, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  2, 208, :_reduce_266,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 208, :_reduce_270,
  3, 208, :_reduce_none,
  3, 208, :_reduce_272,
  3, 208, :_reduce_273,
  2, 208, :_reduce_274,
  2, 208, :_reduce_275,
  3, 208, :_reduce_276,
  3, 208, :_reduce_277,
  1, 208, :_reduce_278,
  4, 208, :_reduce_279,
  3, 208, :_reduce_280,
  1, 208, :_reduce_281,
  5, 208, :_reduce_none,
  4, 208, :_reduce_none,
  3, 208, :_reduce_none,
  2, 208, :_reduce_285,
  1, 208, :_reduce_286,
  2, 208, :_reduce_287,
  2, 208, :_reduce_none,
  6, 208, :_reduce_289,
  6, 208, :_reduce_290,
  5, 208, :_reduce_none,
  5, 208, :_reduce_none,
  5, 208, :_reduce_293,
  4, 208, :_reduce_294,
  7, 208, :_reduce_none,
  5, 208, :_reduce_296,
  6, 208, :_reduce_297,
  4, 208, :_reduce_298,
  5, 208, :_reduce_299,
  7, 208, :_reduce_300,
  1, 208, :_reduce_301,
  1, 208, :_reduce_302,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 173, :_reduce_none,
  1, 225, :_reduce_none,
  1, 231, :_reduce_none,
  1, 234, :_reduce_none,
  1, 235, :_reduce_none,
  1, 237, :_reduce_none,
  1, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 242, :_reduce_none,
  1, 245, :_reduce_none,
  1, 246, :_reduce_none,
  1, 226, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_none,
  1, 236, :_reduce_none,
  1, 236, :_reduce_none,
  1, 233, :_reduce_322,
  5, 233, :_reduce_323,
  1, 163, :_reduce_324,
  2, 163, :_reduce_325,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 250, :_reduce_none,
  3, 250, :_reduce_none,
  1, 253, :_reduce_none,
  3, 253, :_reduce_none,
  1, 252, :_reduce_none,
  4, 252, :_reduce_none,
  6, 252, :_reduce_none,
  3, 252, :_reduce_none,
  5, 252, :_reduce_none,
  2, 252, :_reduce_none,
  4, 252, :_reduce_none,
  1, 252, :_reduce_none,
  3, 252, :_reduce_none,
  6, 254, :_reduce_none,
  8, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  6, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  2, 254, :_reduce_none,
  4, 254, :_reduce_none,
  1, 254, :_reduce_none,
  1, 190, :_reduce_356,
  1, 190, :_reduce_none,
  3, 260, :_reduce_none,
  1, 260, :_reduce_none,
  4, 260, :_reduce_360,
  1, 261, :_reduce_none,
  2, 261, :_reduce_none,
  1, 262, :_reduce_none,
  3, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  2, 230, :_reduce_none,
  4, 265, :_reduce_none,
  1, 265, :_reduce_none,
  3, 266, :_reduce_none,
  3, 266, :_reduce_none,
  4, 223, :_reduce_none,
  4, 223, :_reduce_373,
  2, 186, :_reduce_374,
  4, 186, :_reduce_none,
  4, 186, :_reduce_none,
  2, 229, :_reduce_377,
  4, 229, :_reduce_378,
  4, 229, :_reduce_379,
  3, 229, :_reduce_380,
  3, 229, :_reduce_none,
  3, 229, :_reduce_none,
  2, 229, :_reduce_383,
  1, 229, :_reduce_384,
  4, 229, :_reduce_385,
  4, 228, :_reduce_386,
  4, 228, :_reduce_387,
  5, 239, :_reduce_388,
  1, 269, :_reduce_389,
  1, 269, :_reduce_none,
  6, 162, :_reduce_391,
  1, 162, :_reduce_none,
  1, 270, :_reduce_393,
  1, 270, :_reduce_394,
  1, 270, :_reduce_395,
  2, 271, :_reduce_396,
  1, 271, :_reduce_397,
  2, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 218, :_reduce_none,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 273, :_reduce_none,
  3, 274, :_reduce_407,
  3, 219, :_reduce_408,
  3, 220, :_reduce_409,
  3, 221, :_reduce_none,
  3, 221, :_reduce_none,
  0, 277, :_reduce_none,
  3, 277, :_reduce_none,
  1, 278, :_reduce_none,
  2, 278, :_reduce_none,
  3, 222, :_reduce_none,
  3, 222, :_reduce_none,
  0, 280, :_reduce_418,
  3, 280, :_reduce_none,
  0, 275, :_reduce_420,
  2, 275, :_reduce_421,
  0, 276, :_reduce_422,
  2, 276, :_reduce_423,
  1, 279, :_reduce_424,
  2, 279, :_reduce_425,
  3, 279, :_reduce_426,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  1, 281, :_reduce_none,
  2, 206, :_reduce_431,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  1, 282, :_reduce_none,
  3, 207, :_reduce_436,
  1, 272, :_reduce_437,
  1, 272, :_reduce_438,
  2, 272, :_reduce_none,
  2, 272, :_reduce_none,
  1, 199, :_reduce_441,
  1, 199, :_reduce_442,
  1, 199, :_reduce_443,
  1, 199, :_reduce_444,
  1, 199, :_reduce_445,
  1, 199, :_reduce_446,
  1, 199, :_reduce_447,
  1, 199, :_reduce_448,
  1, 199, :_reduce_449,
  1, 199, :_reduce_450,
  1, 199, :_reduce_451,
  1, 199, :_reduce_452,
  1, 199, :_reduce_453,
  1, 224, :_reduce_none,
  1, 172, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 243, :_reduce_458,
  3, 243, :_reduce_459,
  2, 243, :_reduce_460,
  3, 247, :_reduce_461,
  2, 247, :_reduce_462,
  6, 267, :_reduce_463,
  8, 267, :_reduce_464,
  4, 267, :_reduce_465,
  6, 267, :_reduce_466,
  4, 267, :_reduce_467,
  6, 267, :_reduce_468,
  2, 267, :_reduce_469,
  4, 267, :_reduce_470,
  6, 267, :_reduce_471,
  2, 267, :_reduce_472,
  4, 267, :_reduce_473,
  2, 267, :_reduce_474,
  4, 267, :_reduce_475,
  1, 267, :_reduce_476,
  0, 267, :_reduce_477,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 251, :_reduce_none,
  1, 251, :_reduce_483,
  3, 251, :_reduce_484,
  2, 251, :_reduce_485,
  1, 284, :_reduce_486,
  3, 284, :_reduce_none,
  1, 255, :_reduce_488,
  3, 255, :_reduce_489,
  3, 285, :_reduce_none,
  3, 286, :_reduce_none,
  1, 256, :_reduce_none,
  3, 256, :_reduce_none,
  1, 283, :_reduce_494,
  3, 283, :_reduce_495,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 257, :_reduce_498,
  1, 257, :_reduce_none,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 259, :_reduce_502,
  3, 259, :_reduce_503,
  2, 258, :_reduce_504,
  1, 258, :_reduce_none,
  1, 248, :_reduce_none,
  3, 248, :_reduce_none,
  1, 227, :_reduce_508,
  2, 227, :_reduce_509,
  1, 212, :_reduce_510,
  3, 212, :_reduce_511,
  3, 289, :_reduce_512,
  2, 289, :_reduce_513,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 187, :_reduce_517,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 268, :_reduce_521,
  1, 268, :_reduce_none,
  1, 268, :_reduce_none,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  0, 155, :_reduce_none,
  1, 155, :_reduce_none,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  2, 194, :_reduce_none,
  2, 175, :_reduce_none,
  0, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 244, :_reduce_none,
  1, 244, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_none,
  0, 156, :_reduce_none ]

racc_reduce_n = 540

racc_shift_n = 954

racc_token_table = {
  false => 0,
  :error => 1,
  "!" => 2,
  :tTILDE => 3,
  :tUPLUS => 4,
  :tPOW => 5,
  :tUMINUS_NUM => 6,
  :tUMINUS => 7,
  :tSTAR2 => 8,
  :tDIVIDE => 9,
  :tPERCENT => 10,
  :tPLUS => 11,
  :tMINUS => 12,
  :tLSHFT => 13,
  :tRSHFT => 14,
  :tAMPER2 => 15,
  :tPIPE => 16,
  :tCARET => 17,
  ">" => 18,
  :tGEQ => 19,
  "<" => 20,
  :tLEQ => 21,
  :tCMP => 22,
  :tEQ => 23,
  :tEQQ => 24,
  :tNEQ => 25,
  :tMATCH => 26,
  :tNMATCH => 27,
  :tANDOP => 28,
  :tOROP => 29,
  :tDOT2 => 30,
  :tDOT3 => 31,
  "?" => 32,
  ":" => 33,
  :kRESCUE_MOD => 34,
  "=" => 35,
  :tOP_ASGN => 36,
  :kDEFINED => 37,
  :kNOT => 38,
  :kOR => 39,
  :kAND => 40,
  :kIF_MOD => 41,
  :kUNLESS_MOD => 42,
  :kWHILE_MOD => 43,
  :kUNTIL_MOD => 44,
  :tLBRACE_ARG => 45,
  :tLOWEST => 46,
  :kCLASS => 47,
  :kMODULE => 48,
  :kDEF => 49,
  :kUNDEF => 50,
  :kBEGIN => 51,
  :kRESCUE => 52,
  :kENSURE => 53,
  :kEND => 54,
  :kIF => 55,
  :kUNLESS => 56,
  :kTHEN => 57,
  :kELSIF => 58,
  :kELSE => 59,
  :kCASE => 60,
  :kWHEN => 61,
  :kWHILE => 62,
  :kUNTIL => 63,
  :kFOR => 64,
  :kBREAK => 65,
  :kNEXT => 66,
  :kREDO => 67,
  :kRETRY => 68,
  :kIN => 69,
  :kDO => 70,
  :kDO_COND => 71,
  :kDO_BLOCK => 72,
  :kDO_LAMBDA => 73,
  :kRETURN => 74,
  :kYIELD => 75,
  :kSUPER => 76,
  :kSELF => 77,
  :kNIL => 78,
  :kTRUE => 79,
  :kFALSE => 80,
  :kALIAS => 81,
  :klBEGIN => 82,
  :klEND => 83,
  :k__LINE__ => 84,
  :k__FILE__ => 85,
  :k__ENCODING__ => 86,
  :kDEFined => 87,
  :kBLOCK_GIVEN => 88,
  :tIDENTIFIER => 89,
  :tFID => 90,
  :tGVAR => 91,
  :tIVAR => 92,
  :tCONSTANT => 93,
  :tCVAR => 94,
  :tLABEL => 95,
  :tINTEGER => 96,
  :tFLOAT => 97,
  :tSTRING_CONTENT => 98,
  :tCHAR => 99,
  :tNTH_REF => 100,
  :tBACK_REF => 101,
  :tREGEXP_END => 102,
  :tAREF => 103,
  :tASET => 104,
  :tCOLON2 => 105,
  :tCOLON3 => 106,
  :tASSOC => 107,
  :tLPAREN => 108,
  :tLPAREN_ARG => 109,
  :tRPAREN => 110,
  :tLBRACK => 111,
  :tLBRACE => 112,
  :tSTAR => 113,
  :tAMPER => 114,
  :tLAMBDA => 115,
  :tSYMBEG => 116,
  :tSTRING_BEG => 117,
  :tXSTRING_BEG => 118,
  :tREGEXP_BEG => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSTRING_DBEG => 122,
  :tSTRING_DVAR => 123,
  :tSTRING_END => 124,
  :tLAMBEG => 125,
  :tSTRING => 126,
  :tXSTRING_END => 127,
  "{" => 128,
  "}" => 129,
  "[" => 130,
  "." => 131,
  "," => 132,
  "|" => 133,
  "^" => 134,
  "&" => 135,
  "+" => 136,
  "-" => 137,
  "*" => 138,
  "/" => 139,
  "%" => 140,
  "~" => 141,
  "`" => 142,
  "(" => 143,
  ")" => 144,
  "]" => 145,
  ";" => 146,
  " " => 147,
  "\\n" => 148 }

racc_nt_base = 149

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"!\"",
  "tTILDE",
  "tUPLUS",
  "tPOW",
  "tUMINUS_NUM",
  "tUMINUS",
  "tSTAR2",
  "tDIVIDE",
  "tPERCENT",
  "tPLUS",
  "tMINUS",
  "tLSHFT",
  "tRSHFT",
  "tAMPER2",
  "tPIPE",
  "tCARET",
  "\">\"",
  "tGEQ",
  "\"<\"",
  "tLEQ",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tMATCH",
  "tNMATCH",
  "tANDOP",
  "tOROP",
  "tDOT2",
  "tDOT3",
  "\"?\"",
  "\":\"",
  "kRESCUE_MOD",
  "\"=\"",
  "tOP_ASGN",
  "kDEFINED",
  "kNOT",
  "kOR",
  "kAND",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "tLBRACE_ARG",
  "tLOWEST",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kALIAS",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "kDEFined",
  "kBLOCK_GIVEN",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tLABEL",
  "tINTEGER",
  "tFLOAT",
  "tSTRING_CONTENT",
  "tCHAR",
  "tNTH_REF",
  "tBACK_REF",
  "tREGEXP_END",
  "tAREF",
  "tASET",
  "tCOLON2",
  "tCOLON3",
  "tASSOC",
  "tLPAREN",
  "tLPAREN_ARG",
  "tRPAREN",
  "tLBRACK",
  "tLBRACE",
  "tSTAR",
  "tAMPER",
  "tLAMBDA",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tLAMBEG",
  "tSTRING",
  "tXSTRING_END",
  "\"{\"",
  "\"}\"",
  "\"[\"",
  "\".\"",
  "\",\"",
  "\"|\"",
  "\"^\"",
  "\"&\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"~\"",
  "\"`\"",
  "\"(\"",
  "\")\"",
  "\"]\"",
  "\";\"",
  "\" \"",
  "\"\\\\n\"",
  "$start",
  "target",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "operation",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "do_block",
  "var_ref",
  "k_begin",
  "k_end",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "k_if",
  "then",
  "if_tail",
  "k_unless",
  "k_while",
  "do",
  "k_until",
  "k_case",
  "case_body",
  "k_for",
  "for_var",
  "k_class",
  "superclass",
  "term",
  "k_module",
  "k_def",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "f_args",
  "operation3",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "sym",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 103)
  def _reduce_1(val, _values, result)
                        # puts 'well, we got here..'
                    # puts val[0]
                    @parser_result = val[0]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 111)
  def _reduce_2(val, _values, result)
                        self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 115)
  def _reduce_3(val, _values, result)
                        # puts 'program'
                    # puts val[1]
                    result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 122)
  def _reduce_4(val, _values, result)
                        # puts 'top_compstmt'
                    # puts val[0]
                    # puts val[1]
                    result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 130)
  def _reduce_5(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 134)
  def _reduce_6(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 138)
  def _reduce_7(val, _values, result)
                        result = val[0] + [val[2]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 142)
  def _reduce_8(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 147)
  def _reduce_9(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 153)
  def _reduce_11(val, _values, result)
                        # puts "erm wtf?!"
                    # puts val[1]
                    result = self.node_bodystmt(val[0], val[1], val[2], val[3])
                    # if val[1]
                      # pp result
                    # end
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 163)
  def _reduce_12(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 168)
  def _reduce_13(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 172)
  def _reduce_14(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 176)
  def _reduce_15(val, _values, result)
                        result = val[0] + [val[2]]
		              
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 182)
  def _reduce_17(val, _values, result)
                        self.lex_state = :EXPR_FNAME
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 186)
  def _reduce_18(val, _values, result)
                        result = node :alias, :lhs => val[1], :rhs => val[3] 
                  
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 194)
  def _reduce_23(val, _values, result)
                		    result = node :if_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 198)
  def _reduce_24(val, _values, result)
                		    result = node :unless_mod, :stmt => val[0], :expr => val[2]
            		  
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 206)
  def _reduce_29(val, _values, result)
                		    result = node :assign, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 211)
  def _reduce_31(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 215)
  def _reduce_32(val, _values, result)
                		    puts "in here for #{val[0]}"
            		  
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 229)
  def _reduce_42(val, _values, result)
                  	    result = node :andop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 233)
  def _reduce_43(val, _values, result)
                  	    result = node :orop, :lhs => val[0], :rhs => val[2]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 237)
  def _reduce_44(val, _values, result)
                  	    result = node :not, :expr => val[2]
              	  
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 248)
  def _reduce_50(val, _values, result)
                  	    result = node :return, :call_args => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 252)
  def _reduce_51(val, _values, result)
                	      result = node :break, :call_args => val[1]
            	    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 256)
  def _reduce_52(val, _values, result)
                	      result = node :next, :call_args => val[1]
            	    
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 267)
  def _reduce_57(val, _values, result)
                        # command call - no brackets/recv
          		      result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

# reduce 58 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 273)
  def _reduce_59(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 280)
  def _reduce_63(val, _values, result)
          		          result = node :super, :call_args => val[1]
      		        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 284)
  def _reduce_64(val, _values, result)
            	          result = node :yield, :call_args => val[1]
        	        
    result
  end
.,.,

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

# reduce 92 omitted

# reduce 93 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 325)
  def _reduce_94(val, _values, result)
    		                result = node :call, :recv => val[0], :meth => '[]', :args => val[2]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 329)
  def _reduce_95(val, _values, result)
              		      result = node :call, :recv => val[0], :meth => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 333)
  def _reduce_96(val, _values, result)
                		    result = node :tCOLON2call, :recv => val[0], :meth => val[2]
            		  
    result
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 339)
  def _reduce_99(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 345)
  def _reduce_101(val, _values, result)
                        puts 'ERROR: cant use identifier for class/mod name'
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 349)
  def _reduce_102(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 355)
  def _reduce_103(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 358)
  def _reduce_104(val, _values, result)
      	                result = node :path, :cname => val[0]
  	              
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 367)
  def _reduce_109(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 372)
  def _reduce_110(val, _values, result)
    		                self.lex_state = :EXPR_END
		                result = val[0]
		              
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 408)
  def _reduce_187(val, _values, result)
                        result = node :assign, :lhs => val[0], :rhs => val[2]
                  
    result
  end
.,.,

# reduce 188 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 413)
  def _reduce_189(val, _values, result)
                		    result = node :op_asgn, :lhs => val[0], :op => val[1], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 418)
  def _reduce_191(val, _values, result)
                		    result = node :aset_op_asgn, :recv => val[0], :call_args => val[2], :op => val[4], :arg => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 422)
  def _reduce_192(val, _values, result)
                		    result = node :op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
                    # result = node :dot_identifier_op_asgn, :lhs => node(:call, :recv => val[0], :meth => val[2]), :op => val[3], :rhs => val[4]
            		  
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 432)
  def _reduce_198(val, _values, result)
                		    result = node :dot2, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 436)
  def _reduce_199(val, _values, result)
                		    result = node :dot3, :start => val[0], :ending => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 440)
  def _reduce_200(val, _values, result)
                		    result = node :opt_plus, :recv => val[0], :meth => '+', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 444)
  def _reduce_201(val, _values, result)
                		    result = node :opt_minus, :recv => val[0], :meth => '-', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 448)
  def _reduce_202(val, _values, result)
                		    result = node :opt_mult, :recv => val[0], :meth => '*', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 452)
  def _reduce_203(val, _values, result)
                		    result = node :opt_div, :recv => val[0], :meth => '/', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 456)
  def _reduce_204(val, _values, result)
                		    result = node :opt_mod, :recv => val[0], :meth => '%', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 460)
  def _reduce_205(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '**', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 467)
  def _reduce_209(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '-@', :call_args => { :args => []}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 471)
  def _reduce_210(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '|', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 475)
  def _reduce_211(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '^', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 479)
  def _reduce_212(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '&', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 483)
  def _reduce_213(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<=>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 487)
  def _reduce_214(val, _values, result)
                		    result = node :operator, :lhs => val[0], :rhs => val[2], :meth => '>'
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 491)
  def _reduce_215(val, _values, result)
                		    result = node :operator, :lhs => val[0], :rhs => val[2], :meth => '>='
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 495)
  def _reduce_216(val, _values, result)
                		    result = node :operator, :lhs => val[0], :rhs => val[2], :meth => '<'
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 499)
  def _reduce_217(val, _values, result)
                		    result = node :operator, :lhs => val[0], :rhs => val[2], :meth => '<='
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 503)
  def _reduce_218(val, _values, result)
                		    result = node :operator, :lhs => val[0], :rhs => val[2], :meth => '==='
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 507)
  def _reduce_219(val, _values, result)
                		    result = node :operator, :lhs => val[0], :rhs => val[2], :meth => '==='
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 511)
  def _reduce_220(val, _values, result)
                		    result = node :operator, :lhs => val[0], :rhs => val[2], :meth => '!=='
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 515)
  def _reduce_221(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '=~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 519)
  def _reduce_222(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '!~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 523)
  def _reduce_223(val, _values, result)
                  	    result = node :not, :expr => val[1]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 527)
  def _reduce_224(val, _values, result)
                		    result = node :call, :recv => val[1], :meth => '~', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 531)
  def _reduce_225(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '<<', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 535)
  def _reduce_226(val, _values, result)
                		    result = node :call, :recv => val[0], :meth => '>>', :call_args => { :args => [val[2]]}
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 539)
  def _reduce_227(val, _values, result)
                		    result = node :andop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 543)
  def _reduce_228(val, _values, result)
                		    result = node :orop, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

# reduce 229 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 548)
  def _reduce_230(val, _values, result)
                		    result = node :tertiary, :expr => val[0], :true => val[2], :false => val[5]
            		  
    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 561)
  def _reduce_237(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 566)
  def _reduce_238(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 239 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 572)
  def _reduce_240(val, _values, result)
                        result = node :call_args, :args => nil
                  
    result
  end
.,.,

# reduce 241 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 578)
  def _reduce_242(val, _values, result)
                		    result = node :call_args, :args => [val[0]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 582)
  def _reduce_243(val, _values, result)
                		    result = node :call_args, :args => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 586)
  def _reduce_244(val, _values, result)
                		    result = node :call_args, :assocs => val[0], :block_arg => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 590)
  def _reduce_245(val, _values, result)
                		    result = node :call_args, :args => val[0], :assocs => val[2], :block_arg => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 594)
  def _reduce_246(val, _values, result)
                		    result = node :call_args, :block_arg => val[0]
            		  
    result
  end
.,.,

# reduce 247 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 601)
  def _reduce_248(val, _values, result)
                        # puts "here for #{val[1]}"
                    # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 607)
  def _reduce_249(val, _values, result)
                        # puts val[1]
                    result = self.node :block_arg, :arg => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 613)
  def _reduce_250(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 251 omitted

# reduce 252 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 620)
  def _reduce_253(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 624)
  def _reduce_254(val, _values, result)
    		                result = [node :splat, :val => val[1]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 628)
  def _reduce_255(val, _values, result)
    		                result = val[0] + [val[2]]
		              
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 632)
  def _reduce_256(val, _values, result)
    		                result = val[0] + [node :splat, :val => val[3]]
		              
    result
  end
.,.,

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 647)
  def _reduce_266(val, _values, result)
                        # if val[0].node == :self
                      # result = val[0]
                    # else
                      # HACK: this rule shouldnt even exist. But for now it must for "identifier do .. end"
                      result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
                    # end
                  
    result
  end
.,.,

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 659)
  def _reduce_270(val, _values, result)
                  	    result = node :begin, :stmt => val[1]
              	  
    result
  end
.,.,

# reduce 271 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 664)
  def _reduce_272(val, _values, result)
                		    result = node :lparen, :stmt => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 668)
  def _reduce_273(val, _values, result)
                		    result = node :colon2, :lhs => val[0], :rhs => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 672)
  def _reduce_274(val, _values, result)
                		    result = node :colon3, :name => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 676)
  def _reduce_275(val, _values, result)
                        # added for ::document => document
            		    result = node :colon3identifier, :name => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 681)
  def _reduce_276(val, _values, result)
                		    result = node :array, :args => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 685)
  def _reduce_277(val, _values, result)
                		    result = node :assoc_list, :list => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 689)
  def _reduce_278(val, _values, result)
                		    result = node :return
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 693)
  def _reduce_279(val, _values, result)
            	          result = node :yield, :call_args => val[2]
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 697)
  def _reduce_280(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 701)
  def _reduce_281(val, _values, result)
            	          result = node :yield
        	        
    result
  end
.,.,

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 708)
  def _reduce_285(val, _values, result)
                		    result = node :call, :recv => nil, :meth => val[0], :brace_block => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 712)
  def _reduce_286(val, _values, result)
                		    # puts 2
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 716)
  def _reduce_287(val, _values, result)
                		    val[0][:brace_block] = val[1]
            		    result = val[0]
            		  
    result
  end
.,.,

# reduce 288 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 722)
  def _reduce_289(val, _values, result)
                		    result = self.node :if, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 726)
  def _reduce_290(val, _values, result)
                		    result = self.node :unless, :expr => val[1], :stmt => val[3], :tail => val[4]
            		  
    result
  end
.,.,

# reduce 291 omitted

# reduce 292 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 732)
  def _reduce_293(val, _values, result)
                		    result = node :case, :expr => val[1], :body => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 736)
  def _reduce_294(val, _values, result)
                		    result = node :case, :expr => nil, :body => val[2]
            		  
    result
  end
.,.,

# reduce 295 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 741)
  def _reduce_296(val, _values, result)
                		    result = self.node_class(:cpath => val[1], :superclass => val[2], :bodystmt => val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 745)
  def _reduce_297(val, _values, result)
                		    result = node :class_shift, :expr => val[2], :bodystmt => val[4]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 749)
  def _reduce_298(val, _values, result)
                		    result = self.node_module(:cpath => val[1], :body => val[2])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 753)
  def _reduce_299(val, _values, result)
                		    result = self.node :def, :fname => val[1], :arglist => val[2], :bodystmt => val[3]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 757)
  def _reduce_300(val, _values, result)
                		    result = self.node :def, :singleton => val[1], :fname => val[3], :arglist => val[4], :bodystmt => val[5]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 761)
  def _reduce_301(val, _values, result)
                		    result = node :break, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 765)
  def _reduce_302(val, _values, result)
                		    result = node :next, :call_args => nil
            		  
    result
  end
.,.,

# reduce 303 omitted

# reduce 304 omitted

# reduce 305 omitted

# reduce 306 omitted

# reduce 307 omitted

# reduce 308 omitted

# reduce 309 omitted

# reduce 310 omitted

# reduce 311 omitted

# reduce 312 omitted

# reduce 313 omitted

# reduce 314 omitted

# reduce 315 omitted

# reduce 316 omitted

# reduce 317 omitted

# reduce 318 omitted

# reduce 319 omitted

# reduce 320 omitted

# reduce 321 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 803)
  def _reduce_322(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 807)
  def _reduce_323(val, _values, result)
                  	    result = [self.node(:elsif, :expr => val[1], :stmt => val[3])] + val[4]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 812)
  def _reduce_324(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 816)
  def _reduce_325(val, _values, result)
                  	    result = [self.node(:else, :stmt => val[1])]
              	  
    result
  end
.,.,

# reduce 326 omitted

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 856)
  def _reduce_356(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

# reduce 357 omitted

# reduce 358 omitted

# reduce 359 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 864)
  def _reduce_360(val, _values, result)
                		    result = val[1]
            		  
    result
  end
.,.,

# reduce 361 omitted

# reduce 362 omitted

# reduce 363 omitted

# reduce 364 omitted

# reduce 365 omitted

# reduce 366 omitted

# reduce 367 omitted

# reduce 368 omitted

# reduce 369 omitted

# reduce 370 omitted

# reduce 371 omitted

# reduce 372 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 887)
  def _reduce_373(val, _values, result)
                        result = node :brace_block, :params => val[1], :stmt => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 892)
  def _reduce_374(val, _values, result)
                        val[0][:brace_block] = val[1]
                    result = val[0]
                  
    result
  end
.,.,

# reduce 375 omitted

# reduce 376 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 900)
  def _reduce_377(val, _values, result)
                        result = node :call, :recv => nil, :meth => val[0], :call_args => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 904)
  def _reduce_378(val, _values, result)
                        result = node :call, :recv => val[0], :meth => val[2], :call_args => val[3]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 908)
  def _reduce_379(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2], :args => val[3]
                    # puts "tCOLON2call"
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 913)
  def _reduce_380(val, _values, result)
                  	    result = node :tCOLON2call, :recv => val[0], :meth => val[2]
                    # puts "tCOLON2call.noargs."
              	  
    result
  end
.,.,

# reduce 381 omitted

# reduce 382 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 920)
  def _reduce_383(val, _values, result)
                		    result = node :super, :call_args => val[1], :paren => true
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 924)
  def _reduce_384(val, _values, result)
                		    result = node :super, :call_args => nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 928)
  def _reduce_385(val, _values, result)
                        result = node :aref, :recv => val[0], :args => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 934)
  def _reduce_386(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 938)
  def _reduce_387(val, _values, result)
                		    result = node :brace_block, :params => val[1], :stmt => val[2]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 943)
  def _reduce_388(val, _values, result)
                        result = [node(:when, :args => val[1], :stmt => val[3])] + val[4]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 948)
  def _reduce_389(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 390 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 954)
  def _reduce_391(val, _values, result)
                        result = node :rescue, :list => val[1], :var => val[2], :stmt => val[4], :opt_rescue => val[5]
                    # puts result
                  
    result
  end
.,.,

# reduce 392 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 961)
  def _reduce_393(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 965)
  def _reduce_394(val, _values, result)
                		    result = val[0]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 969)
  def _reduce_395(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 974)
  def _reduce_396(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 978)
  def _reduce_397(val, _values, result)
                		    result = nil
            		  
    result
  end
.,.,

# reduce 398 omitted

# reduce 399 omitted

# reduce 400 omitted

# reduce 401 omitted

# reduce 402 omitted

# reduce 403 omitted

# reduce 404 omitted

# reduce 405 omitted

# reduce 406 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 996)
  def _reduce_407(val, _values, result)
                        result = node :string, :value => val[1], :beg => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1001)
  def _reduce_408(val, _values, result)
                        result = node :xstring, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1006)
  def _reduce_409(val, _values, result)
                        result = node :regexp, :value => val[1]
                  
    result
  end
.,.,

# reduce 410 omitted

# reduce 411 omitted

# reduce 412 omitted

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

# reduce 417 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1023)
  def _reduce_418(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

# reduce 419 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1030)
  def _reduce_420(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1035)
  def _reduce_421(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1040)
  def _reduce_422(val, _values, result)
                        # none..
                    result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1045)
  def _reduce_423(val, _values, result)
                		    result = val[0] + [val[1]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1050)
  def _reduce_424(val, _values, result)
                        result = node :string_content, :value => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1054)
  def _reduce_425(val, _values, result)
                        result = node :string_dvar, :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1058)
  def _reduce_426(val, _values, result)
                        result = node :string_dbeg, :value => val[1]
                  
    result
  end
.,.,

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

# reduce 430 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1068)
  def _reduce_431(val, _values, result)
                        result = node :symbol, :name => val[1]
                  
    result
  end
.,.,

# reduce 432 omitted

# reduce 433 omitted

# reduce 434 omitted

# reduce 435 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1078)
  def _reduce_436(val, _values, result)
                        result = node :dsym, :contents => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1083)
  def _reduce_437(val, _values, result)
                        result = node :numeric, :value => val[0], :float => false
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1087)
  def _reduce_438(val, _values, result)
                        result = node :numeric, :value => val[0], :float => true
                  
    result
  end
.,.,

# reduce 439 omitted

# reduce 440 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1095)
  def _reduce_441(val, _values, result)
                        result = node :identifier, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1099)
  def _reduce_442(val, _values, result)
                        result = node :ivar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1103)
  def _reduce_443(val, _values, result)
                        result = node :gvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1107)
  def _reduce_444(val, _values, result)
                        result = node :constant, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1111)
  def _reduce_445(val, _values, result)
                        result = node :cvar, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1115)
  def _reduce_446(val, _values, result)
                        result = node :nil, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1119)
  def _reduce_447(val, _values, result)
                        result = node :self, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1123)
  def _reduce_448(val, _values, result)
                        result = node :true, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1127)
  def _reduce_449(val, _values, result)
                        result = node :false, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1131)
  def _reduce_450(val, _values, result)
                        result = node :__FILE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1135)
  def _reduce_451(val, _values, result)
                        result = node :__LINE__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1139)
  def _reduce_452(val, _values, result)
                        result = node :__ENCODING__, :name => val[0]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1143)
  def _reduce_453(val, _values, result)
                        # added for block_given? support.. :D
                    result = node :block_given
                  
    result
  end
.,.,

# reduce 454 omitted

# reduce 455 omitted

# reduce 456 omitted

# reduce 457 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1156)
  def _reduce_458(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1160)
  def _reduce_459(val, _values, result)
                		    result = node :superclass, :expr => val[1]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1162)
  def _reduce_460(val, _values, result)
     puts 'OMFG' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1166)
  def _reduce_461(val, _values, result)
                        result = val[1]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1171)
  def _reduce_462(val, _values, result)
                        result = val[0]
                    self.lex_state = :EXPR_BEG
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1177)
  def _reduce_463(val, _values, result)
                        result = node_args(val[0], val[2], val[4], nil, val[5])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1181)
  def _reduce_464(val, _values, result)
                 		    result = node_args(val[0], val[2], val[4], val[6], val[7])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1185)
  def _reduce_465(val, _values, result)
                  	    result = node_args(val[0], val[2], nil, nil, val[3])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1189)
  def _reduce_466(val, _values, result)
                		    result = node_args(val[0], val[2], nil, val[4], val[5])
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1193)
  def _reduce_467(val, _values, result)
                		    result = node_args(val[0], nil, val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1197)
  def _reduce_468(val, _values, result)
                		    result = node_args(val[0], nil, val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1201)
  def _reduce_469(val, _values, result)
                 		    result = node_args(val[0], nil, nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1205)
  def _reduce_470(val, _values, result)
                		    result = node_args(nil, val[0], val[2], nil, val[3])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1209)
  def _reduce_471(val, _values, result)
                		    result = node_args(nil, val[0], val[2], val[4], val[5])
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1213)
  def _reduce_472(val, _values, result)
                 		    result = node_args(nil, val[0], nil, nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1217)
  def _reduce_473(val, _values, result)
                 		    result = node_args(nil, val[0], nil, val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1221)
  def _reduce_474(val, _values, result)
                 		    result = node_args(nil, nil, val[0], nil, val[1])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1225)
  def _reduce_475(val, _values, result)
                 		    result = node_args(nil, nil, val[0], val[2], val[3])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1229)
  def _reduce_476(val, _values, result)
                 		    result = node_args(nil, nil, nil, nil, val[0])
             		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1233)
  def _reduce_477(val, _values, result)
                  	    result = node_args(nil, nil, nil, nil, nil)
              	  
    result
  end
.,.,

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1244)
  def _reduce_483(val, _values, result)
                        # result = val[0]
              	    result = node :norm_arg, :value => val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1250)
  def _reduce_484(val, _values, result)
                      
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1253)
  def _reduce_485(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1258)
  def _reduce_486(val, _values, result)
                        result = val[0]
                  
    result
  end
.,.,

# reduce 487 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1264)
  def _reduce_488(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1268)
  def _reduce_489(val, _values, result)
                        # val[0] + val[2]
                    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1281)
  def _reduce_494(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1285)
  def _reduce_495(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

# reduce 496 omitted

# reduce 497 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1293)
  def _reduce_498(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 499 omitted

# reduce 500 omitted

# reduce 501 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1302)
  def _reduce_502(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1306)
  def _reduce_503(val, _values, result)
                        result = node :label_arg, :name => val[0], :value => val[1]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1311)
  def _reduce_504(val, _values, result)
                        result = val[1]
                  
    result
  end
.,.,

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1320)
  def _reduce_508(val, _values, result)
                        result = []
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1324)
  def _reduce_509(val, _values, result)
                  	    result = val[0]
              	  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1329)
  def _reduce_510(val, _values, result)
                        result = [val[0]]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1333)
  def _reduce_511(val, _values, result)
                		    result = val[0] + [val[2]]
            		  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1338)
  def _reduce_512(val, _values, result)
                        result = node :assoc, :key => val[0], :value => val[2]
                  
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1342)
  def _reduce_513(val, _values, result)
                        result = node :label_assoc, :key => val[0], :value => val[1]
                  
    result
  end
.,.,

# reduce 514 omitted

# reduce 515 omitted

# reduce 516 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1352)
  def _reduce_517(val, _values, result)
                      
    result
  end
.,.,

# reduce 518 omitted

# reduce 519 omitted

# reduce 520 omitted

module_eval(<<'.,.,', 'ruby_parser.rb.y', 1359)
  def _reduce_521(val, _values, result)
                        puts 4
                  
    result
  end
.,.,

# reduce 522 omitted

# reduce 523 omitted

# reduce 524 omitted

# reduce 525 omitted

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class RubyParser
  end   # module Vienna


