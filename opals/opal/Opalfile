config :opal,
  # this is odd, but correct. Anytime we build :opal, we are building it for the
  # web browser, and therefore we require opalbrowser to be part of our setup.
  # This makes things easier later.
  :required         => [:opalbrowser]


# For spec..
mode :spec do
  # opal must require the spec opal itself. Also, we are the main target, so we
  # can set the bin file aswell (to use the spec's bin ruby file)
  config :runtime,
    :required         => [:spec],
    :bin_file         => :spec
    
  # Configure :spec to include its bin file, so opal can use it
  config :spec,
    :include_bin  => true
end

namespace :build do
  
  # opal needs a completely custom opal (gem) builder as its not actually an
  # opal..ish...kinda
  task :opal do
    
    # puts "building opal for opal"
    
    FileUtils.mkdir_p File.dirname(@dst_path)

    # Get all ruby sources, then sort them (kernel.rb then module.rb then any)
    rb_sources = @build_item.source_items.select do |item|
      item.resource == :ruby
    end

    # make sure these two are at the start
    ['lib/kernel.rb', 'lib/module.rb'].reverse.each do |order|
      rb_sources.unshift rb_sources.select { |item|
        item.filename == order
      }.first
    end
    # make sure we remove the duplicates left over
    rb_sources.uniq!

    File.open(@dst_path, 'w') do |out|
      js_sources = %w(pre_opal opal browser debug post_opal)
      # js_sources = %w(pre_opal opal browser post_opal)
      
      # puts "build mode for opal is #{@project.build_mode.inspect}"
      
      unless @project.build_mode == :debug
        # puts "deleting debug!!!!!"
        js_sources.delete 'debug'
      end
      
      # puts js_sources.inspect
      
      js_str = []
      
      js_sources.each do |src|
        # puts @target.target_root, 'runtime', 
        js_str << File.read(File.join(@target.target_root, 'runtime', "#{src}.js"))
      end
      
      out.puts js_str.join
      
      # out.puts "var opal = {};"
      # out.puts "(function(global, exports) {"
      # js_sources.each do |js|
      #   puts js.filename
      #   out.puts File.read(js.stage!.staging_path)
      # end
      # out.puts "})(this.window || global, opal);"
      
      
      
      
      rb_sources.each do |rb|
        out.puts "// ##################### #{rb.filename} #####################"
        out.puts "opal.load_raw_file('opal/#{rb.filename}', "
        out.puts File.read(rb.stage!.staging_path)
        out.puts ");"
      end
    end
  end
end
